[
  {
    "project": "allenai/allenact",
    "commit": "1ecc4ae08fc36e1c9bdedbf5634a4a1ea3d1e4be",
    "filename": "core/algorithms/onpolicy_sync/runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allenact/core/algorithms/onpolicy_sync/runner.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/algorithms/onpolicy_sync/runner.py:141:11 Unsupported operand [58]: `in` is not supported for right operand type `Union[Dict[str, typing.Any], MachineParams]`.",
    "message": " `in` is not supported for right operand type `Union[Dict[str, typing.Any], MachineParams]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 141,
    "warning_line": "        if \"visualizer\" in params and params[\"visualizer\"] is not None:"
  },
  {
    "project": "allenai/allenact",
    "commit": "1ecc4ae08fc36e1c9bdedbf5634a4a1ea3d1e4be",
    "filename": "plugins/habitat_plugin/habitat_task_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allenact/plugins/habitat_plugin/habitat_task_samplers.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/habitat_plugin/habitat_task_samplers.py:76:12 Incompatible return type [7]: Expected `PointNavTask` but got `None`.",
    "message": " Expected `PointNavTask` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 76,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def next_task(self, force_advance_scene=False) -> PointNavTask:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_len": 132,
        "target_code": "\n    def next_task(self, force_advance_scene=False) -> Optional[PointNavTask]:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -73,3 +72,3 @@\n \n-    def next_task(self, force_advance_scene=False) -> PointNavTask:\n+    def next_task(self, force_advance_scene=False) -> Optional[PointNavTask]:\n         if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> PointNavTask:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> Optional[PointNavTask]:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allenact",
    "commit": "1ecc4ae08fc36e1c9bdedbf5634a4a1ea3d1e4be",
    "filename": "plugins/habitat_plugin/habitat_task_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allenact/plugins/habitat_plugin/habitat_task_samplers.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/habitat_plugin/habitat_task_samplers.py:102:8 Incompatible return type [7]: Expected `PointNavTask` but got `Optional[PointNavTask]`.",
    "message": " Expected `PointNavTask` but got `Optional[PointNavTask]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 102,
    "warning_line": "        return self._last_sampled_task",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def next_task(self, force_advance_scene=False) -> PointNavTask:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_len": 132,
        "target_code": "\n    def next_task(self, force_advance_scene=False) -> Optional[PointNavTask]:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -73,3 +72,3 @@\n \n-    def next_task(self, force_advance_scene=False) -> PointNavTask:\n+    def next_task(self, force_advance_scene=False) -> Optional[PointNavTask]:\n         if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> PointNavTask:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> Optional[PointNavTask]:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allenact",
    "commit": "1ecc4ae08fc36e1c9bdedbf5634a4a1ea3d1e4be",
    "filename": "plugins/habitat_plugin/habitat_task_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allenact/plugins/habitat_plugin/habitat_task_samplers.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/habitat_plugin/habitat_task_samplers.py:176:12 Incompatible return type [7]: Expected `ObjectNavTask` but got `None`.",
    "message": " Expected `ObjectNavTask` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 176,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def next_task(self, force_advance_scene=False) -> ObjectNavTask:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_len": 133,
        "target_code": "\n    def next_task(self, force_advance_scene=False) -> Optional[ObjectNavTask]:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_len": 143,
        "diff_format": "@@ -173,3 +171,3 @@\n \n-    def next_task(self, force_advance_scene=False) -> ObjectNavTask:\n+    def next_task(self, force_advance_scene=False) -> Optional[ObjectNavTask]:\n         if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> ObjectNavTask:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> Optional[ObjectNavTask]:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allenact",
    "commit": "1ecc4ae08fc36e1c9bdedbf5634a4a1ea3d1e4be",
    "filename": "plugins/habitat_plugin/habitat_task_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allenact/plugins/habitat_plugin/habitat_task_samplers.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/habitat_plugin/habitat_task_samplers.py:202:8 Incompatible return type [7]: Expected `ObjectNavTask` but got `Optional[ObjectNavTask]`.",
    "message": " Expected `ObjectNavTask` but got `Optional[ObjectNavTask]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 202,
    "warning_line": "        return self._last_sampled_task",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def next_task(self, force_advance_scene=False) -> ObjectNavTask:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_len": 133,
        "target_code": "\n    def next_task(self, force_advance_scene=False) -> Optional[ObjectNavTask]:\n        if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_len": 143,
        "diff_format": "@@ -173,3 +171,3 @@\n \n-    def next_task(self, force_advance_scene=False) -> ObjectNavTask:\n+    def next_task(self, force_advance_scene=False) -> Optional[ObjectNavTask]:\n         if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> ObjectNavTask:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def next_task(self, force_advance_scene=False) -> Optional[ObjectNavTask]:\n        <IND>if self.max_tasks is not None and self.max_tasks <= 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]