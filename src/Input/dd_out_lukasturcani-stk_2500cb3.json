[
  {
    "project": "lukasturcani/stk",
    "commit": "2500cb3d51c3d8bd47bab6e427c02c3ef2a39bcd",
    "filename": "src/stk/molecular/topology_graphs/host_guest/complex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lukasturcani-stk/src/stk/molecular/topology_graphs/host_guest/complex.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/stk/molecular/topology_graphs/host_guest/complex.py:534:16 Incompatible parameter type [6]: Expected `typing.Tuple[float, float, float]` for 3rd parameter `guest_start` to call `Complex._get_vertices_from_guest` but got `Optional[typing.Tuple[float, float, float]]`.",
    "message": " Expected `typing.Tuple[float, float, float]` for 3rd parameter `guest_start` to call `Complex._get_vertices_from_guest` but got `Optional[typing.Tuple[float, float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 534,
    "warning_line": "                guest_start=guest_start,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        elif guest is not None:\n            warnings.warn(\n",
        "source_code_len": 59,
        "target_code": "        elif guest is not None:\n            assert guest_start is not None\n            assert guest_target is not None\n            assert displacement is not None\n            warnings.warn(\n",
        "target_code_len": 190,
        "diff_format": "@@ -520,2 +520,5 @@\n         elif guest is not None:\n+            assert guest_start is not None\n+            assert guest_target is not None\n+            assert displacement is not None\n             warnings.warn(\n",
        "source_code_with_indent": "        <DED>elif guest is not None:\n            <IND>warnings.warn(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>elif guest is not None:\n            <IND>assert guest_start is not None\n            assert guest_target is not None\n            assert displacement is not None\n            warnings.warn(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lukasturcani/stk",
    "commit": "2500cb3d51c3d8bd47bab6e427c02c3ef2a39bcd",
    "filename": "src/stk/molecular/topology_graphs/host_guest/complex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lukasturcani-stk/src/stk/molecular/topology_graphs/host_guest/complex.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/stk/molecular/topology_graphs/host_guest/complex.py:535:16 Incompatible parameter type [6]: Expected `typing.Tuple[float, float, float]` for 4th parameter `guest_target` to call `Complex._get_vertices_from_guest` but got `Optional[typing.Tuple[float, float, float]]`.",
    "message": " Expected `typing.Tuple[float, float, float]` for 4th parameter `guest_target` to call `Complex._get_vertices_from_guest` but got `Optional[typing.Tuple[float, float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 535,
    "warning_line": "                guest_target=guest_target,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        elif guest is not None:\n            warnings.warn(\n",
        "source_code_len": 59,
        "target_code": "        elif guest is not None:\n            assert guest_start is not None\n            assert guest_target is not None\n            assert displacement is not None\n            warnings.warn(\n",
        "target_code_len": 190,
        "diff_format": "@@ -520,2 +520,5 @@\n         elif guest is not None:\n+            assert guest_start is not None\n+            assert guest_target is not None\n+            assert displacement is not None\n             warnings.warn(\n",
        "source_code_with_indent": "        <DED>elif guest is not None:\n            <IND>warnings.warn(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>elif guest is not None:\n            <IND>assert guest_start is not None\n            assert guest_target is not None\n            assert displacement is not None\n            warnings.warn(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lukasturcani/stk",
    "commit": "2500cb3d51c3d8bd47bab6e427c02c3ef2a39bcd",
    "filename": "src/stk/molecular/topology_graphs/host_guest/complex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lukasturcani-stk/src/stk/molecular/topology_graphs/host_guest/complex.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/stk/molecular/topology_graphs/host_guest/complex.py:536:16 Incompatible parameter type [6]: Expected `typing.Tuple[float, float, float]` for 5th parameter `displacement` to call `Complex._get_vertices_from_guest` but got `Optional[typing.Tuple[float, float, float]]`.",
    "message": " Expected `typing.Tuple[float, float, float]` for 5th parameter `displacement` to call `Complex._get_vertices_from_guest` but got `Optional[typing.Tuple[float, float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 536,
    "warning_line": "                displacement=displacement,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        elif guest is not None:\n            warnings.warn(\n",
        "source_code_len": 59,
        "target_code": "        elif guest is not None:\n            assert guest_start is not None\n            assert guest_target is not None\n            assert displacement is not None\n            warnings.warn(\n",
        "target_code_len": 190,
        "diff_format": "@@ -520,2 +520,5 @@\n         elif guest is not None:\n+            assert guest_start is not None\n+            assert guest_target is not None\n+            assert displacement is not None\n             warnings.warn(\n",
        "source_code_with_indent": "        <DED>elif guest is not None:\n            <IND>warnings.warn(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>elif guest is not None:\n            <IND>assert guest_start is not None\n            assert guest_target is not None\n            assert displacement is not None\n            warnings.warn(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lukasturcani/stk",
    "commit": "2500cb3d51c3d8bd47bab6e427c02c3ef2a39bcd",
    "filename": "src/stk/molecular/topology_graphs/host_guest/complex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lukasturcani-stk/src/stk/molecular/topology_graphs/host_guest/complex.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/stk/molecular/topology_graphs/host_guest/complex.py:573:39 Incompatible parameter type [6]: Expected `typing.Mapping[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[HostVertex]]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[GuestVertex]]`.",
    "message": " Expected `typing.Mapping[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[HostVertex]]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[GuestVertex]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 573,
    "warning_line": "        building_block_vertices.update(guest_vertices)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        host: BuildingBlock,\n        guests: Iterable[Guest],\n    ) -> dict[BuildingBlock, Vertex]:\n        if isinstance(guests, Guest):\n",
        "source_code_len": 152,
        "target_code": "        self,\n        host,\n        guests,\n    ):\n        if isinstance(guests, Guest):\n",
        "target_code_len": 89,
        "diff_format": "@@ -554,5 +557,5 @@\n         self,\n-        host: BuildingBlock,\n-        guests: Iterable[Guest],\n-    ) -> dict[BuildingBlock, Vertex]:\n+        host,\n+        guests,\n+    ):\n         if isinstance(guests, Guest):\n",
        "source_code_with_indent": "        self,\n        host: BuildingBlock,\n        guests: Iterable[Guest],\n    ) -> dict[BuildingBlock, Vertex]:\n        <IND>if isinstance(guests, Guest):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        host,\n        guests,\n    ):\n        <IND>if isinstance(guests, Guest):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lukasturcani/stk",
    "commit": "2500cb3d51c3d8bd47bab6e427c02c3ef2a39bcd",
    "filename": "src/stk/molecular/topology_graphs/host_guest/complex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lukasturcani-stk/src/stk/molecular/topology_graphs/host_guest/complex.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/stk/molecular/topology_graphs/host_guest/complex.py:575:8 Incompatible return type [7]: Expected `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, src.stk.molecular.topology_graphs.topology_graph.vertex.Vertex]` but got `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[HostVertex]]`.",
    "message": " Expected `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, src.stk.molecular.topology_graphs.topology_graph.vertex.Vertex]` but got `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[HostVertex]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 575,
    "warning_line": "        return building_block_vertices",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        host: BuildingBlock,\n        guests: Iterable[Guest],\n    ) -> dict[BuildingBlock, Vertex]:\n        if isinstance(guests, Guest):\n",
        "source_code_len": 152,
        "target_code": "        self,\n        host,\n        guests,\n    ):\n        if isinstance(guests, Guest):\n",
        "target_code_len": 89,
        "diff_format": "@@ -554,5 +557,5 @@\n         self,\n-        host: BuildingBlock,\n-        guests: Iterable[Guest],\n-    ) -> dict[BuildingBlock, Vertex]:\n+        host,\n+        guests,\n+    ):\n         if isinstance(guests, Guest):\n",
        "source_code_with_indent": "        self,\n        host: BuildingBlock,\n        guests: Iterable[Guest],\n    ) -> dict[BuildingBlock, Vertex]:\n        <IND>if isinstance(guests, Guest):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        host,\n        guests,\n    ):\n        <IND>if isinstance(guests, Guest):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lukasturcani/stk",
    "commit": "2500cb3d51c3d8bd47bab6e427c02c3ef2a39bcd",
    "filename": "src/stk/molecular/topology_graphs/host_guest/complex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lukasturcani-stk/src/stk/molecular/topology_graphs/host_guest/complex.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/stk/molecular/topology_graphs/host_guest/complex.py:614:8 Incompatible return type [7]: Expected `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, src.stk.molecular.topology_graphs.topology_graph.vertex.Vertex]` but got `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[typing.Union[GuestVertex, HostVertex]]]`.",
    "message": " Expected `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, src.stk.molecular.topology_graphs.topology_graph.vertex.Vertex]` but got `typing.Dict[src.stk.molecular.molecules.building_block.BuildingBlock, typing.Tuple[typing.Union[GuestVertex, HostVertex]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 614,
    "warning_line": "        return building_block_vertices",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        displacement: tuple[float, float, float],\n    ) -> dict[BuildingBlock, Vertex]:\n\n",
        "source_code_len": 89,
        "target_code": "        displacement: tuple[float, float, float],\n    ):\n\n",
        "target_code_len": 58,
        "diff_format": "@@ -583,3 +586,3 @@\n         displacement: tuple[float, float, float],\n-    ) -> dict[BuildingBlock, Vertex]:\n+    ):\n \n",
        "source_code_with_indent": "        displacement: tuple[float, float, float],\n    ) -> dict[BuildingBlock, Vertex]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        displacement: tuple[float, float, float],\n    ):\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]