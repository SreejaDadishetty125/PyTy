[
  {
    "project": "kakaobrain/pororo",
    "commit": "801f5c9c99cafc4d43fbba79c909b15ce2a0863a",
    "filename": "pororo/models/brainbert/BrainRoBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kakaobrain-pororo/pororo/models/brainbert/BrainRoBERTa.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pororo/models/brainbert/BrainRoBERTa.py:203:16 Incompatible return type [7]: Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 203,
    "warning_line": "                return probs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Dict, Tuple, Union\n\n",
        "target_code_len": 40,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Union\n+from typing import Dict, Tuple, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        \"\"\"Predict output, either a classification label or regression target,\n",
        "source_code_len": 141,
        "target_code": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        \"\"\"Predict output, either a classification label or regression target,\n",
        "target_code_len": 140,
        "diff_format": "@@ -152,3 +152,3 @@\n         show_probs: bool = False,\n-    ) -> Union[str, float]:\n+    ) -> Union[str, Dict]:\n         \"\"\"Predict output, either a classification label or regression target,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        <IND>",
        "target_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        no_separator: bool = False,\n    ) -> str:\n        \"\"\"\n",
        "source_code_len": 62,
        "target_code": "        no_separator: bool = False,\n    ) -> Tuple:\n        \"\"\"\n",
        "target_code_len": 64,
        "diff_format": "@@ -213,3 +213,3 @@\n         no_separator: bool = False,\n-    ) -> str:\n+    ) -> Tuple:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        no_separator: bool = False,\n    ) -> str:\n        <IND>",
        "target_code_with_indent": "        no_separator: bool = False,\n    ) -> Tuple:\n        <IND>"
      }
    ]
  },
  {
    "project": "kakaobrain/pororo",
    "commit": "801f5c9c99cafc4d43fbba79c909b15ce2a0863a",
    "filename": "pororo/models/brainbert/BrainRoBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kakaobrain-pororo/pororo/models/brainbert/BrainRoBERTa.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pororo/models/brainbert/BrainRoBERTa.py:263:8 Incompatible return type [7]: Expected `str` but got `typing.Tuple[str, typing.Tuple[typing.Any, typing.Any]]`.",
    "message": " Expected `str` but got `typing.Tuple[str, typing.Tuple[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 263,
    "warning_line": "        return (answer, (start, end + 1))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Dict, Tuple, Union\n\n",
        "target_code_len": 40,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Union\n+from typing import Dict, Tuple, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        \"\"\"Predict output, either a classification label or regression target,\n",
        "source_code_len": 141,
        "target_code": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        \"\"\"Predict output, either a classification label or regression target,\n",
        "target_code_len": 140,
        "diff_format": "@@ -152,3 +152,3 @@\n         show_probs: bool = False,\n-    ) -> Union[str, float]:\n+    ) -> Union[str, Dict]:\n         \"\"\"Predict output, either a classification label or regression target,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        <IND>",
        "target_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        no_separator: bool = False,\n    ) -> str:\n        \"\"\"\n",
        "source_code_len": 62,
        "target_code": "        no_separator: bool = False,\n    ) -> Tuple:\n        \"\"\"\n",
        "target_code_len": 64,
        "diff_format": "@@ -213,3 +213,3 @@\n         no_separator: bool = False,\n-    ) -> str:\n+    ) -> Tuple:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        no_separator: bool = False,\n    ) -> str:\n        <IND>",
        "target_code_with_indent": "        no_separator: bool = False,\n    ) -> Tuple:\n        <IND>"
      }
    ]
  },
  {
    "project": "kakaobrain/pororo",
    "commit": "801f5c9c99cafc4d43fbba79c909b15ce2a0863a",
    "filename": "pororo/models/brainbert/CharBrainRoBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kakaobrain-pororo/pororo/models/brainbert/CharBrainRoBERTa.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pororo/models/brainbert/CharBrainRoBERTa.py:139:8 Incompatible return type [7]: Expected `str` but got `List[str]`.",
    "message": " Expected `str` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 139,
    "warning_line": "        return sentences",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        remove_bpe: bool = True,\n    ) -> str:\n        assert tokens.dim() == 1\n",
        "source_code_len": 80,
        "target_code": "        remove_bpe: bool = True,\n    ) -> Union[str, List]:\n        assert tokens.dim() == 1\n",
        "target_code_len": 93,
        "diff_format": "@@ -108,3 +112,3 @@\n         remove_bpe: bool = True,\n-    ) -> str:\n+    ) -> Union[str, List]:\n         assert tokens.dim() == 1\n",
        "source_code_with_indent": "        remove_bpe: bool = True,\n    ) -> str:\n        <IND>assert tokens.dim() == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        remove_bpe: bool = True,\n    ) -> Union[str, List]:\n        <IND>assert tokens.dim() == 1\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kakaobrain/pororo",
    "commit": "801f5c9c99cafc4d43fbba79c909b15ce2a0863a",
    "filename": "pororo/models/brainbert/CharBrainRoBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kakaobrain-pororo/pororo/models/brainbert/CharBrainRoBERTa.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pororo/models/brainbert/CharBrainRoBERTa.py:200:20 Incompatible return type [7]: Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 200,
    "warning_line": "                    return res",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union\n\n",
        "source_code_len": 33,
        "target_code": "\nfrom typing import Dict, List, Union\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import List, Union\n+from typing import Dict, List, Union\n \n",
        "source_code_with_indent": "\nfrom typing import List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        \"\"\"Predict output, either a classification label or regression target,\n",
        "source_code_len": 141,
        "target_code": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        \"\"\"Predict output, either a classification label or regression target,\n",
        "target_code_len": 140,
        "diff_format": "@@ -148,3 +152,3 @@\n         show_probs: bool = False,\n-    ) -> Union[str, float]:\n+    ) -> Union[str, Dict]:\n         \"\"\"Predict output, either a classification label or regression target,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        <IND>",
        "target_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        <IND>"
      }
    ]
  },
  {
    "project": "kakaobrain/pororo",
    "commit": "801f5c9c99cafc4d43fbba79c909b15ce2a0863a",
    "filename": "pororo/models/brainbert/EnBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kakaobrain-pororo/pororo/models/brainbert/EnBERTa.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pororo/models/brainbert/EnBERTa.py:84:16 Incompatible return type [7]: Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 84,
    "warning_line": "                return probs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Dict, Union\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Union\n+from typing import Dict, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        assert self.args.task == \"sentence_prediction\", (\n",
        "source_code_len": 120,
        "target_code": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        assert self.args.task == \"sentence_prediction\", (\n",
        "target_code_len": 119,
        "diff_format": "@@ -51,3 +51,3 @@\n         show_probs: bool = False,\n-    ) -> Union[str, float]:\n+    ) -> Union[str, Dict]:\n         assert self.args.task == \"sentence_prediction\", (\n",
        "source_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        <IND>assert self.args.task == \"sentence_prediction\", (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        <IND>assert self.args.task == \"sentence_prediction\", (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kakaobrain/pororo",
    "commit": "801f5c9c99cafc4d43fbba79c909b15ce2a0863a",
    "filename": "pororo/models/brainbert/JaBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kakaobrain-pororo/pororo/models/brainbert/JaBERTa.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pororo/models/brainbert/JaBERTa.py:162:16 Incompatible return type [7]: Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 162,
    "warning_line": "                return probs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Dict, Union\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Union\n+from typing import Dict, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        assert (\n",
        "source_code_len": 79,
        "target_code": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        assert (\n",
        "target_code_len": 78,
        "diff_format": "@@ -133,3 +133,3 @@\n         show_probs: bool = False,\n-    ) -> Union[str, float]:\n+    ) -> Union[str, Dict]:\n         assert (\n",
        "source_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        <IND>assert (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        <IND>assert (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kakaobrain/pororo",
    "commit": "801f5c9c99cafc4d43fbba79c909b15ce2a0863a",
    "filename": "pororo/models/brainbert/ZhBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kakaobrain-pororo/pororo/models/brainbert/ZhBERTa.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pororo/models/brainbert/ZhBERTa.py:157:16 Incompatible return type [7]: Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `Union[float, str]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 157,
    "warning_line": "                return probs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Dict, Union\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Union\n+from typing import Dict, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        assert (self.args.task == \"sentence_prediction\"\n               ), \"predict_output() only works for sentence prediction tasks.\\n\"\n        assert (\n            \"sentence_classification_head\" in self.model.classification_heads\n        ), \"need pre-trained sentence_classification_head to make predictions\"\n\n        tokens = self.encode(\n",
        "source_code_len": 404,
        "target_code": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        tokens = self.encode(\n",
        "target_code_len": 91,
        "diff_format": "@@ -126,9 +126,3 @@\n         show_probs: bool = False,\n-    ) -> Union[str, float]:\n-        assert (self.args.task == \"sentence_prediction\"\n-               ), \"predict_output() only works for sentence prediction tasks.\\n\"\n-        assert (\n-            \"sentence_classification_head\" in self.model.classification_heads\n-        ), \"need pre-trained sentence_classification_head to make predictions\"\n-\n+    ) -> Union[str, Dict]:\n         tokens = self.encode(\n",
        "source_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, float]:\n        <IND>assert (self.args.task == \"sentence_prediction\"\n               ), \"predict_output() only works for sentence prediction tasks.\\n\"\n        assert (\n            \"sentence_classification_head\" in self.model.classification_heads\n        ), \"need pre-trained sentence_classification_head to make predictions\"\n\n        tokens = self.encode(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        show_probs: bool = False,\n    ) -> Union[str, Dict]:\n        <IND>tokens = self.encode(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]