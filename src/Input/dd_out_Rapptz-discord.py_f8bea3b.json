[
  {
    "project": "Rapptz/discord.py",
    "commit": "f8bea3bb05fc9e3960d5ac4b2773e8dbe4f083c0",
    "filename": "discord/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Rapptz-discord.py/discord/iterators.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "discord/iterators.py:73:8 Incompatible return type [7]: Expected `Optional[Variable[T]]` but got `Coroutine[typing.Any, typing.Any, Optional[Variable[T]]]`.",
    "message": " Expected `Optional[Variable[T]]` but got `Coroutine[typing.Any, typing.Any, Optional[Variable[T]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 73,
    "warning_line": "        return self.find(predicate)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import datetime\nfrom typing import TYPE_CHECKING, TypeVar, Optional, Any, Callable, Union, List, AsyncIterator, Coroutine\n\n",
        "source_code_len": 123,
        "target_code": "import datetime\nfrom typing import Awaitable, TYPE_CHECKING, TypeVar, Optional, Any, Callable, Union, List, AsyncIterator\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -28,3 +28,3 @@\n import datetime\n-from typing import TYPE_CHECKING, TypeVar, Optional, Any, Callable, Union, List, AsyncIterator, Coroutine\n+from typing import Awaitable, TYPE_CHECKING, TypeVar, Optional, Any, Callable, Union, List, AsyncIterator\n \n",
        "source_code_with_indent": "import datetime\nfrom typing import TYPE_CHECKING, TypeVar, Optional, Any, Callable, Union, List, AsyncIterator, Coroutine\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import datetime\nfrom typing import Awaitable, TYPE_CHECKING, TypeVar, Optional, Any, Callable, Union, List, AsyncIterator\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "OT = TypeVar('OT')\n_Func = Callable[[T], Union[OT, Coroutine[Any, Any, OT]]]\n_Predicate = Callable[[T], Union[T, Coroutine[Any, Any, T]]]\n\n",
        "source_code_len": 139,
        "target_code": "OT = TypeVar('OT')\n_Func = Callable[[T], Union[OT, Awaitable[OT]]]\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -52,4 +52,3 @@\n OT = TypeVar('OT')\n-_Func = Callable[[T], Union[OT, Coroutine[Any, Any, OT]]]\n-_Predicate = Callable[[T], Union[T, Coroutine[Any, Any, T]]]\n+_Func = Callable[[T], Union[OT, Awaitable[OT]]]\n \n",
        "source_code_with_indent": "OT = TypeVar('OT')\n_Func = Callable[[T], Union[OT, Coroutine[Any, Any, OT]]]\n_Predicate = Callable[[T], Union[T, Coroutine[Any, Any, T]]]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "OT = TypeVar('OT')\n_Func = Callable[[T], Union[OT, Awaitable[OT]]]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get(self, **attrs: Any) -> Optional[T]:\n        def predicate(elem):\n            for attr, val in attrs.items():\n",
        "source_code_len": 122,
        "target_code": "\n    async def next(self) -> T:\n        raise NotImplementedError\n\n    def get(self, **attrs: Any) -> Awaitable[Optional[T]]:\n        def predicate(elem: T):\n            for attr, val in attrs.items():\n",
        "target_code_len": 202,
        "diff_format": "@@ -60,4 +59,7 @@\n \n-    def get(self, **attrs: Any) -> Optional[T]:\n-        def predicate(elem):\n+    async def next(self) -> T:\n+        raise NotImplementedError\n+\n+    def get(self, **attrs: Any) -> Awaitable[Optional[T]]:\n+        def predicate(elem: T):\n             for attr, val in attrs.items():\n",
        "source_code_with_indent": "\n    def get(self, **attrs: Any) -> Optional[T]:\n        <IND>def predicate(elem):\n            <IND>for attr, val in attrs.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def next(self) -> T:\n        <IND>raise NotImplementedError\n\n    <DED>def get(self, **attrs: Any) -> Awaitable[Optional[T]]:\n        <IND>def predicate(elem: T):\n            <IND>for attr, val in attrs.items():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def find(self, predicate: _Predicate[T]) -> Optional[T]:\n        while True:\n",
        "source_code_len": 88,
        "target_code": "\n    async def find(self, predicate: _Func[T, bool]) -> Optional[T]:\n        while True:\n",
        "target_code_len": 89,
        "diff_format": "@@ -74,3 +76,3 @@\n \n-    async def find(self, predicate: _Predicate[T]) -> Optional[T]:\n+    async def find(self, predicate: _Func[T, bool]) -> Optional[T]:\n         while True:\n",
        "source_code_with_indent": "\n    <DED>async def find(self, predicate: _Predicate[T]) -> Optional[T]:\n        <IND>while True:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def find(self, predicate: _Func[T, bool]) -> Optional[T]:\n        <IND>while True:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def filter(self, predicate: _Predicate[T]) -> _FilteredAsyncIterator[T]:\n        return _FilteredAsyncIterator(self, predicate)\n",
        "source_code_len": 133,
        "target_code": "\n    def filter(self, predicate: _Func[T, bool]) -> _FilteredAsyncIterator[T]:\n        return _FilteredAsyncIterator(self, predicate)\n",
        "target_code_len": 134,
        "diff_format": "@@ -93,3 +95,3 @@\n \n-    def filter(self, predicate: _Predicate[T]) -> _FilteredAsyncIterator[T]:\n+    def filter(self, predicate: _Func[T, bool]) -> _FilteredAsyncIterator[T]:\n         return _FilteredAsyncIterator(self, predicate)\n",
        "source_code_with_indent": "\n    <DED>def filter(self, predicate: _Predicate[T]) -> _FilteredAsyncIterator[T]:\n        <IND>return _FilteredAsyncIterator(self, predicate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def filter(self, predicate: _Func[T, bool]) -> _FilteredAsyncIterator[T]:\n        <IND>return _FilteredAsyncIterator(self, predicate)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def next(self) -> T:\n        if self.users.empty():\n",
        "source_code_len": 63,
        "target_code": "\n    async def next(self) -> Union[User, Member]:\n        if self.users.empty():\n",
        "target_code_len": 81,
        "diff_format": "@@ -170,3 +172,3 @@\n \n-    async def next(self) -> T:\n+    async def next(self) -> Union[User, Member]:\n         if self.users.empty():\n",
        "source_code_with_indent": "\n    <DED>async def next(self) -> T:\n        <IND>if self.users.empty():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def next(self) -> Union[User, Member]:\n        <IND>if self.users.empty():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def next(self) -> T:\n        if self.messages.empty():\n",
        "source_code_len": 66,
        "target_code": "\n    async def next(self) -> Message:\n        if self.messages.empty():\n",
        "target_code_len": 72,
        "diff_format": "@@ -291,3 +293,3 @@\n \n-    async def next(self) -> T:\n+    async def next(self) -> Message:\n         if self.messages.empty():\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED>async def next(self) -> T:\n        <IND>if self.messages.empty():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED>async def next(self) -> Message:\n        <IND>if self.messages.empty():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def next(self) -> T:\n        if self.entries.empty():\n",
        "source_code_len": 65,
        "target_code": "\n    async def next(self) -> AuditLogEntry:\n        if self.entries.empty():\n",
        "target_code_len": 77,
        "diff_format": "@@ -424,3 +426,3 @@\n \n-    async def next(self) -> T:\n+    async def next(self) -> AuditLogEntry:\n         if self.entries.empty():\n",
        "source_code_with_indent": "\n    <DED>async def next(self) -> T:\n        <IND>if self.entries.empty():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def next(self) -> AuditLogEntry:\n        <IND>if self.entries.empty():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def next(self) -> T:\n        if self.guilds.empty():\n",
        "source_code_len": 64,
        "target_code": "\n    async def next(self) -> Guild:\n        if self.guilds.empty():\n",
        "target_code_len": 68,
        "diff_format": "@@ -521,3 +523,3 @@\n \n-    async def next(self) -> T:\n+    async def next(self) -> Guild:\n         if self.guilds.empty():\n",
        "source_code_with_indent": "\n    <DED><DED>async def next(self) -> T:\n        <IND>if self.guilds.empty():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>async def next(self) -> Guild:\n        <IND>if self.guilds.empty():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def next(self) -> T:\n        if self.members.empty():\n",
        "source_code_len": 65,
        "target_code": "\n    async def next(self) -> Member:\n        if self.members.empty():\n",
        "target_code_len": 70,
        "diff_format": "@@ -593,3 +595,3 @@\n \n-    async def next(self) -> T:\n+    async def next(self) -> Member:\n         if self.members.empty():\n",
        "source_code_with_indent": "\n    <DED>async def next(self) -> T:\n        <IND>if self.members.empty():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def next(self) -> Member:\n        <IND>if self.members.empty():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Rapptz/discord.py",
    "commit": "f8bea3bb05fc9e3960d5ac4b2773e8dbe4f083c0",
    "filename": "discord/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Rapptz-discord.py/discord/iterators.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "discord/iterators.py:122:20 Incompatible return type [7]: Expected `Variable[T]` but got `List[typing.Any]`.",
    "message": " Expected `Variable[T]` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 122,
    "warning_line": "                    return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def next(self) -> T:\n        ret = []\n        n = 0\n",
        "source_code_len": 63,
        "target_code": "\n    async def next(self) -> List[T]:\n        ret: List[T] = []\n        n = 0\n",
        "target_code_len": 78,
        "diff_format": "@@ -113,4 +115,4 @@\n \n-    async def next(self) -> T:\n-        ret = []\n+    async def next(self) -> List[T]:\n+        ret: List[T] = []\n         n = 0\n",
        "source_code_with_indent": "\n    <DED>async def next(self) -> T:\n        <IND>ret = []\n        n = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def next(self) -> List[T]:\n        <IND>ret: List[T] = []\n        n = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Rapptz/discord.py",
    "commit": "f8bea3bb05fc9e3960d5ac4b2773e8dbe4f083c0",
    "filename": "discord/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Rapptz-discord.py/discord/iterators.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "discord/iterators.py:127:8 Incompatible return type [7]: Expected `Variable[T]` but got `List[typing.Any]`.",
    "message": " Expected `Variable[T]` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 127,
    "warning_line": "        return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def next(self) -> T:\n        ret = []\n        n = 0\n",
        "source_code_len": 63,
        "target_code": "\n    async def next(self) -> List[T]:\n        ret: List[T] = []\n        n = 0\n",
        "target_code_len": 78,
        "diff_format": "@@ -113,4 +115,4 @@\n \n-    async def next(self) -> T:\n-        ret = []\n+    async def next(self) -> List[T]:\n+        ret: List[T] = []\n         n = 0\n",
        "source_code_with_indent": "\n    <DED>async def next(self) -> T:\n        <IND>ret = []\n        n = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def next(self) -> List[T]:\n        <IND>ret: List[T] = []\n        n = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]