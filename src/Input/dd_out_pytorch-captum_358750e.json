[
  {
    "project": "pytorch/captum",
    "commit": "358750ea6cea9fadaf2ec8cc7789399254fe1f68",
    "filename": "captum/insights/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-captum/captum/insights/api.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "captum/insights/api.py:93:4 Inconsistent override [15]: `count` overrides attribute defined in `tuple` inconsistently. Type `int` is not a subtype of the overridden attribute `typing.Callable(tuple.count)[[Named(self, tuple[typing.Any]), typing.Any], int]`.",
    "message": " `count` overrides attribute defined in `tuple` inconsistently. Type `int` is not a subtype of the overridden attribute `typing.Callable(tuple.count)[[Named(self, tuple[typing.Any]), typing.Any], int]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 93,
    "warning_line": "    count: int = 4",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    classes: List[str] = []\n    count: int = 4\n\n",
        "source_code_len": 48,
        "target_code": "    classes: List[str] = []\n    num_examples: int = 4\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -92,3 +94,3 @@\n     classes: List[str] = []\n-    count: int = 4\n+    num_examples: int = 4\n \n",
        "source_code_with_indent": "    classes: List[str] = []\n    count: int = 4\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    classes: List[str] = []\n    num_examples: int = 4\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.score_func = score_func\n        self._outputs = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], count=4)\n        self._use_label_for_attr = use_label_for_attr\n\n",
        "source_code_len": 194,
        "target_code": "        self.score_func = score_func\n        self._outputs: List[VisualizationOutput] = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], num_examples=4)\n        self._use_label_for_attr = use_label_for_attr\n        self._dataset_iter = iter(dataset)\n\n",
        "target_code_len": 271,
        "diff_format": "@@ -196,5 +198,6 @@\n         self.score_func = score_func\n-        self._outputs = []\n-        self._config = FilterConfig(prediction=\"all\", classes=[], count=4)\n+        self._outputs: List[VisualizationOutput] = []\n+        self._config = FilterConfig(prediction=\"all\", classes=[], num_examples=4)\n         self._use_label_for_attr = use_label_for_attr\n+        self._dataset_iter = iter(dataset)\n \n",
        "source_code_with_indent": "        self.score_func = score_func\n        self._outputs = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], count=4)\n        self._use_label_for_attr = use_label_for_attr\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.score_func = score_func\n        self._outputs: List[VisualizationOutput] = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], num_examples=4)\n        self._use_label_for_attr = use_label_for_attr\n        self._dataset_iter = iter(dataset)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/captum",
    "commit": "358750ea6cea9fadaf2ec8cc7789399254fe1f68",
    "filename": "captum/insights/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-captum/captum/insights/api.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "captum/insights/api.py:205:8 Incompatible return type [7]: Expected `VisualizationOutput` but got `Optional[VisualizationOutput]`.",
    "message": " Expected `VisualizationOutput` but got `Optional[VisualizationOutput]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 205,
    "warning_line": "        return self._calculate_vis_output(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, index: int, target: Optional[Tensor]\n    ) -> VisualizationOutput:\n        c = self._outputs[index][1]\n",
        "source_code_len": 117,
        "target_code": "        self, index: int, target: Optional[Tensor]\n    ) -> Optional[VisualizationOutput]:\n        c = self._outputs[index][1]\n",
        "target_code_len": 127,
        "diff_format": "@@ -202,3 +205,3 @@\n         self, index: int, target: Optional[Tensor]\n-    ) -> VisualizationOutput:\n+    ) -> Optional[VisualizationOutput]:\n         c = self._outputs[index][1]\n",
        "source_code_with_indent": "        self, index: int, target: Optional[Tensor]\n    ) -> VisualizationOutput:\n        <IND>c = self._outputs[index][1]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, index: int, target: Optional[Tensor]\n    ) -> Optional[VisualizationOutput]:\n        <IND>c = self._outputs[index][1]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/captum",
    "commit": "358750ea6cea9fadaf2ec8cc7789399254fe1f68",
    "filename": "captum/insights/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-captum/captum/insights/api.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "captum/insights/api.py:458:62 Incompatible parameter type [6]: Expected `OutputScore` for 2nd positional only parameter to call `AttributionVisualizer._should_keep_prediction` but got `Optional[OutputScore]`.",
    "message": " Expected `OutputScore` for 2nd positional only parameter to call `AttributionVisualizer._should_keep_prediction` but got `Optional[OutputScore]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 458,
    "warning_line": "        if not self._should_keep_prediction(predicted_scores, actual_label_output):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Filter based on UI configuration\n        if not self._should_keep_prediction(predicted_scores, actual_label_output):\n            return None\n\n        baselines = [tuple(b) for b in baselines]\n\n",
        "source_code_len": 203,
        "target_code": "        # Filter based on UI configuration\n        if actual_label_output is None or not self._should_keep_prediction(\n            predicted_scores, actual_label_output\n        ):\n            return None\n\n        baselines_group = [tuple(b) for b in baselines]\n\n",
        "target_code_len": 262,
        "diff_format": "@@ -457,6 +459,8 @@\n         # Filter based on UI configuration\n-        if not self._should_keep_prediction(predicted_scores, actual_label_output):\n+        if actual_label_output is None or not self._should_keep_prediction(\n+            predicted_scores, actual_label_output\n+        ):\n             return None\n \n-        baselines = [tuple(b) for b in baselines]\n+        baselines_group = [tuple(b) for b in baselines]\n \n",
        "source_code_with_indent": "        # Filter based on UI configuration\n        if not self._should_keep_prediction(predicted_scores, actual_label_output):\n            <IND>return None\n\n        <DED>baselines = [tuple(b) for b in baselines]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Filter based on UI configuration\n        if actual_label_output is None or not self._should_keep_prediction(\n            predicted_scores, actual_label_output\n        ):\n            <IND>return None\n\n        <DED>baselines_group = [tuple(b) for b in baselines]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/captum",
    "commit": "358750ea6cea9fadaf2ec8cc7789399254fe1f68",
    "filename": "captum/insights/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-captum/captum/insights/api.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "captum/insights/api.py:494:26 Incompatible parameter type [6]: Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[Batch]`.",
    "message": " Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[Batch]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 494,
    "warning_line": "        batch_data = next(self.dataset)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    classes: List[str] = []\n    count: int = 4\n\n",
        "source_code_len": 48,
        "target_code": "    classes: List[str] = []\n    num_examples: int = 4\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -92,3 +94,3 @@\n     classes: List[str] = []\n-    count: int = 4\n+    num_examples: int = 4\n \n",
        "source_code_with_indent": "    classes: List[str] = []\n    count: int = 4\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    classes: List[str] = []\n    num_examples: int = 4\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.score_func = score_func\n        self._outputs = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], count=4)\n        self._use_label_for_attr = use_label_for_attr\n\n",
        "source_code_len": 194,
        "target_code": "        self.score_func = score_func\n        self._outputs: List[VisualizationOutput] = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], num_examples=4)\n        self._use_label_for_attr = use_label_for_attr\n        self._dataset_iter = iter(dataset)\n\n",
        "target_code_len": 271,
        "diff_format": "@@ -196,5 +198,6 @@\n         self.score_func = score_func\n-        self._outputs = []\n-        self._config = FilterConfig(prediction=\"all\", classes=[], count=4)\n+        self._outputs: List[VisualizationOutput] = []\n+        self._config = FilterConfig(prediction=\"all\", classes=[], num_examples=4)\n         self._use_label_for_attr = use_label_for_attr\n+        self._dataset_iter = iter(dataset)\n \n",
        "source_code_with_indent": "        self.score_func = score_func\n        self._outputs = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], count=4)\n        self._use_label_for_attr = use_label_for_attr\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.score_func = score_func\n        self._outputs: List[VisualizationOutput] = []\n        self._config = FilterConfig(prediction=\"all\", classes=[], num_examples=4)\n        self._use_label_for_attr = use_label_for_attr\n        self._dataset_iter = iter(dataset)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_outputs(self) -> List[VisualizationOutput]:\n        batch_data = next(self.dataset)\n        vis_outputs = []\n",
        "source_code_len": 123,
        "target_code": "\n    def _get_outputs(self) -> List[Tuple[VisualizationOutput, SampleCache]]:\n        batch_data = next(self._dataset_iter)\n        vis_outputs = []\n",
        "target_code_len": 149,
        "diff_format": "@@ -492,4 +500,4 @@\n \n-    def _get_outputs(self) -> List[VisualizationOutput]:\n-        batch_data = next(self.dataset)\n+    def _get_outputs(self) -> List[Tuple[VisualizationOutput, SampleCache]]:\n+        batch_data = next(self._dataset_iter)\n         vis_outputs = []\n",
        "source_code_with_indent": "\n    <DED>def _get_outputs(self) -> List[VisualizationOutput]:\n        <IND>batch_data = next(self.dataset)\n        vis_outputs = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_outputs(self) -> List[Tuple[VisualizationOutput, SampleCache]]:\n        <IND>batch_data = next(self._dataset_iter)\n        vis_outputs = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/captum",
    "commit": "358750ea6cea9fadaf2ec8cc7789399254fe1f68",
    "filename": "captum/insights/features.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-captum/captum/insights/features.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "captum/insights/features.py:201:15 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 201,
    "warning_line": "        text = self.visualization_transform(data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def visualize(self, attribution, data, contribution_frac) -> FeatureOutput:\n        text = self.visualization_transform(data)\n\n",
        "source_code_len": 131,
        "target_code": "    def visualize(self, attribution, data, contribution_frac) -> FeatureOutput:\n        if self.visualization_transform:\n            text = self.visualization_transform(data)\n        else:\n            text = data\n\n",
        "target_code_len": 214,
        "diff_format": "@@ -200,3 +201,6 @@\n     def visualize(self, attribution, data, contribution_frac) -> FeatureOutput:\n-        text = self.visualization_transform(data)\n+        if self.visualization_transform:\n+            text = self.visualization_transform(data)\n+        else:\n+            text = data\n \n",
        "source_code_with_indent": "    <DED>def visualize(self, attribution, data, contribution_frac) -> FeatureOutput:\n        <IND>text = self.visualization_transform(data)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def visualize(self, attribution, data, contribution_frac) -> FeatureOutput:\n        <IND>if self.visualization_transform:\n            <IND>text = self.visualization_transform(data)\n        <DED>else:\n            <IND>text = data\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]