[
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/data/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/collector.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/collector.py:217:23 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[List[int], int]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[List[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "            assert len(n_episode) == self.get_env_num()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        whole_data = Batch()\n        list_n_episode = False\n        if n_episode is not None and not np.isscalar(n_episode):\n            assert len(n_episode) == self.get_env_num()\n            list_n_episode = True\n            finished_env_ids = [\n",
        "source_code_len": 248,
        "target_code": "        whole_data = Batch()\n        if isinstance(n_episode, list):\n            assert len(n_episode) == self.get_env_num()\n            finished_env_ids = [\n",
        "target_code_len": 158,
        "diff_format": "@@ -214,6 +214,4 @@\n         whole_data = Batch()\n-        list_n_episode = False\n-        if n_episode is not None and not np.isscalar(n_episode):\n+        if isinstance(n_episode, list):\n             assert len(n_episode) == self.get_env_num()\n-            list_n_episode = True\n             finished_env_ids = [\n",
        "source_code_with_indent": "        whole_data = Batch()\n        list_n_episode = False\n        if n_episode is not None and not np.isscalar(n_episode):\n            <IND>assert len(n_episode) == self.get_env_num()\n            list_n_episode = True\n            finished_env_ids = [\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        whole_data = Batch()\n        if isinstance(n_episode, list):\n            <IND>assert len(n_episode) == self.get_env_num()\n            finished_env_ids = [\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if done[j]:\n                    if not (list_n_episode and\n                            episode_count[i] >= n_episode[i]):\n                        episode_count[i] += 1\n",
        "source_code_len": 184,
        "target_code": "                if done[j]:\n                    if not (isinstance(n_episode, list)\n                            and episode_count[i] >= n_episode[i]):\n                        episode_count[i] += 1\n",
        "target_code_len": 197,
        "diff_format": "@@ -307,4 +306,4 @@\n                 if done[j]:\n-                    if not (list_n_episode and\n-                            episode_count[i] >= n_episode[i]):\n+                    if not (isinstance(n_episode, list)\n+                            and episode_count[i] >= n_episode[i]):\n                         episode_count[i] += 1\n",
        "source_code_with_indent": "                <DED>if done[j]:\n                    <IND>if not (list_n_episode and\n                            episode_count[i] >= n_episode[i]):\n                        <IND>episode_count[i] += 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <DED>if done[j]:\n                    <IND>if not (isinstance(n_episode, list)\n                            and episode_count[i] >= n_episode[i]):\n                        <IND>episode_count[i] += 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            self.buffer.update(self._cached_buf[i])\n                        if list_n_episode and \\\n                                episode_count[i] >= n_episode[i]:\n",
        "source_code_len": 182,
        "target_code": "                            self.buffer.update(self._cached_buf[i])\n                        if isinstance(n_episode, list) and \\\n                                episode_count[i] >= n_episode[i]:\n",
        "target_code_len": 195,
        "diff_format": "@@ -314,3 +313,3 @@\n                             self.buffer.update(self._cached_buf[i])\n-                        if list_n_episode and \\\n+                        if isinstance(n_episode, list) and \\\n                                 episode_count[i] >= n_episode[i]:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                            <IND>self.buffer.update(self._cached_buf[i])\n                        <DED>if list_n_episode and                                episode_count[i] >= n_episode[i]:\n",
        "target_code_with_indent": "                            <IND>self.buffer.update(self._cached_buf[i])\n                        <DED>if isinstance(n_episode, list) and                                episode_count[i] >= n_episode[i]:\n"
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/venvs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/venvs.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/env/venvs.py:249:20 Unsupported operand [58]: `+` is not supported for operand types `Union[List[int], int]` and `int`.",
    "message": " `+` is not supported for operand types `Union[List[int], int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 249,
    "warning_line": "            seed = [seed + i for i in range(self.env_num)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._assert_is_not_closed()\n        if seed is None:\n            seed = [seed] * self.env_num\n        elif np.isscalar(seed):\n            seed = [seed + i for i in range(self.env_num)]\n        return [w.seed(s) for w, s in zip(self.workers, seed)]\n\n",
        "source_code_len": 258,
        "target_code": "        self._assert_is_not_closed()\n        seed_list: Union[List[None], List[int]]\n        if seed is None:\n            seed_list = [seed] * self.env_num\n        elif isinstance(seed, int):\n            seed_list = [seed + i for i in range(self.env_num)]\n        else:\n            seed_list = seed\n        return [w.seed(s) for w, s in zip(self.workers, seed_list)]\n\n",
        "target_code_len": 368,
        "diff_format": "@@ -245,7 +245,10 @@\n         self._assert_is_not_closed()\n+        seed_list: Union[List[None], List[int]]\n         if seed is None:\n-            seed = [seed] * self.env_num\n-        elif np.isscalar(seed):\n-            seed = [seed + i for i in range(self.env_num)]\n-        return [w.seed(s) for w, s in zip(self.workers, seed)]\n+            seed_list = [seed] * self.env_num\n+        elif isinstance(seed, int):\n+            seed_list = [seed + i for i in range(self.env_num)]\n+        else:\n+            seed_list = seed\n+        return [w.seed(s) for w, s in zip(self.workers, seed_list)]\n \n",
        "source_code_with_indent": "        self._assert_is_not_closed()\n        if seed is None:\n            <IND>seed = [seed] * self.env_num\n        <DED>elif np.isscalar(seed):\n            <IND>seed = [seed + i for i in range(self.env_num)]\n        <DED>return [w.seed(s) for w, s in zip(self.workers, seed)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._assert_is_not_closed()\n        seed_list: Union[List[None], List[int]]\n        if seed is None:\n            <IND>seed_list = [seed] * self.env_num\n        <DED>elif isinstance(seed, int):\n            <IND>seed_list = [seed + i for i in range(self.env_num)]\n        <DED>else:\n            <IND>seed_list = seed\n        <DED>return [w.seed(s) for w, s in zip(self.workers, seed_list)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/venvs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/venvs.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/env/venvs.py:250:56 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T2]]` for 2nd positional only parameter to call `zip.__new__` but got `Union[List[None], List[int], int]`.",
    "message": " Expected `typing.Iterable[Variable[_T2]]` for 2nd positional only parameter to call `zip.__new__` but got `Union[List[None], List[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 250,
    "warning_line": "        return [w.seed(s) for w, s in zip(self.workers, seed)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._assert_is_not_closed()\n        if seed is None:\n            seed = [seed] * self.env_num\n        elif np.isscalar(seed):\n            seed = [seed + i for i in range(self.env_num)]\n        return [w.seed(s) for w, s in zip(self.workers, seed)]\n\n",
        "source_code_len": 258,
        "target_code": "        self._assert_is_not_closed()\n        seed_list: Union[List[None], List[int]]\n        if seed is None:\n            seed_list = [seed] * self.env_num\n        elif isinstance(seed, int):\n            seed_list = [seed + i for i in range(self.env_num)]\n        else:\n            seed_list = seed\n        return [w.seed(s) for w, s in zip(self.workers, seed_list)]\n\n",
        "target_code_len": 368,
        "diff_format": "@@ -245,7 +245,10 @@\n         self._assert_is_not_closed()\n+        seed_list: Union[List[None], List[int]]\n         if seed is None:\n-            seed = [seed] * self.env_num\n-        elif np.isscalar(seed):\n-            seed = [seed + i for i in range(self.env_num)]\n-        return [w.seed(s) for w, s in zip(self.workers, seed)]\n+            seed_list = [seed] * self.env_num\n+        elif isinstance(seed, int):\n+            seed_list = [seed + i for i in range(self.env_num)]\n+        else:\n+            seed_list = seed\n+        return [w.seed(s) for w, s in zip(self.workers, seed_list)]\n \n",
        "source_code_with_indent": "        self._assert_is_not_closed()\n        if seed is None:\n            <IND>seed = [seed] * self.env_num\n        <DED>elif np.isscalar(seed):\n            <IND>seed = [seed + i for i in range(self.env_num)]\n        <DED>return [w.seed(s) for w, s in zip(self.workers, seed)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._assert_is_not_closed()\n        seed_list: Union[List[None], List[int]]\n        if seed is None:\n            <IND>seed_list = [seed] * self.env_num\n        <DED>elif isinstance(seed, int):\n            <IND>seed_list = [seed + i for i in range(self.env_num)]\n        <DED>else:\n            <IND>seed_list = seed\n        <DED>return [w.seed(s) for w, s in zip(self.workers, seed_list)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/worker/dummy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/worker/dummy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tianshou/env/worker/dummy.py:22:4 Inconsistent override [14]: `tianshou.env.worker.dummy.DummyEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Parameter of type `List[DummyEnvWorker]` is not a supertype of the overridden parameter `List[tianshou.env.worker.base.EnvWorker]`.",
    "message": " `tianshou.env.worker.dummy.DummyEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Parameter of type `List[DummyEnvWorker]` is not a supertype of the overridden parameter `List[tianshou.env.worker.base.EnvWorker]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 22,
    "warning_line": "    def wait(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def wait(\n        workers: List[\"DummyEnvWorker\"],\n",
        "source_code_len": 73,
        "target_code": "    @staticmethod\n    def wait(  # type: ignore\n        workers: List[\"DummyEnvWorker\"],\n",
        "target_code_len": 89,
        "diff_format": "@@ -21,3 +21,3 @@\n     @staticmethod\n-    def wait(\n+    def wait(  # type: ignore\n         workers: List[\"DummyEnvWorker\"],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def wait(\n        workers: List[\"DummyEnvWorker\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def wait(  # type: ignore\n        workers: List[\"DummyEnvWorker\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/worker/dummy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/worker/dummy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tianshou/env/worker/dummy.py:22:4 Inconsistent override [15]: `tianshou.env.worker.dummy.DummyEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Returned type `List[DummyEnvWorker]` is not a subtype of the overridden return `List[tianshou.env.worker.base.EnvWorker]`.",
    "message": " `tianshou.env.worker.dummy.DummyEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Returned type `List[DummyEnvWorker]` is not a subtype of the overridden return `List[tianshou.env.worker.base.EnvWorker]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 22,
    "warning_line": "    def wait(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def wait(\n        workers: List[\"DummyEnvWorker\"],\n",
        "source_code_len": 73,
        "target_code": "    @staticmethod\n    def wait(  # type: ignore\n        workers: List[\"DummyEnvWorker\"],\n",
        "target_code_len": 89,
        "diff_format": "@@ -21,3 +21,3 @@\n     @staticmethod\n-    def wait(\n+    def wait(  # type: ignore\n         workers: List[\"DummyEnvWorker\"],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def wait(\n        workers: List[\"DummyEnvWorker\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def wait(  # type: ignore\n        workers: List[\"DummyEnvWorker\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/worker/ray.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/worker/ray.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tianshou/env/worker/ray.py:27:4 Inconsistent override [14]: `tianshou.env.worker.ray.RayEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Parameter of type `List[RayEnvWorker]` is not a supertype of the overridden parameter `List[tianshou.env.worker.base.EnvWorker]`.",
    "message": " `tianshou.env.worker.ray.RayEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Parameter of type `List[RayEnvWorker]` is not a supertype of the overridden parameter `List[tianshou.env.worker.base.EnvWorker]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 27,
    "warning_line": "    def wait(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def wait(\n        workers: List[\"RayEnvWorker\"],\n",
        "source_code_len": 71,
        "target_code": "    @staticmethod\n    def wait(  # type: ignore\n        workers: List[\"RayEnvWorker\"],\n",
        "target_code_len": 87,
        "diff_format": "@@ -26,3 +26,3 @@\n     @staticmethod\n-    def wait(\n+    def wait(  # type: ignore\n         workers: List[\"RayEnvWorker\"],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def wait(\n        workers: List[\"RayEnvWorker\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def wait(  # type: ignore\n        workers: List[\"RayEnvWorker\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/worker/ray.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/worker/ray.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tianshou/env/worker/ray.py:27:4 Inconsistent override [15]: `tianshou.env.worker.ray.RayEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Returned type `List[RayEnvWorker]` is not a subtype of the overridden return `List[tianshou.env.worker.base.EnvWorker]`.",
    "message": " `tianshou.env.worker.ray.RayEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Returned type `List[RayEnvWorker]` is not a subtype of the overridden return `List[tianshou.env.worker.base.EnvWorker]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 27,
    "warning_line": "    def wait(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def wait(\n        workers: List[\"RayEnvWorker\"],\n",
        "source_code_len": 71,
        "target_code": "    @staticmethod\n    def wait(  # type: ignore\n        workers: List[\"RayEnvWorker\"],\n",
        "target_code_len": 87,
        "diff_format": "@@ -26,3 +26,3 @@\n     @staticmethod\n-    def wait(\n+    def wait(  # type: ignore\n         workers: List[\"RayEnvWorker\"],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def wait(\n        workers: List[\"RayEnvWorker\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def wait(  # type: ignore\n        workers: List[\"RayEnvWorker\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/worker/subproc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/worker/subproc.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/env/worker/subproc.py:27:33 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T2]]` for 2nd positional only parameter to call `zip.__new__` but got `Union[typing.Dict[typing.Any, typing.Any], ShArray, typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `typing.Iterable[Variable[_T2]]` for 2nd positional only parameter to call `zip.__new__` but got `Union[typing.Dict[typing.Any, typing.Any], ShArray, typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 27,
    "warning_line": "            for o, b in zip(obs, buffer):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ) -> None:\n        if isinstance(obs, np.ndarray):\n            buffer.save(obs)\n        elif isinstance(obs, tuple):\n            for o, b in zip(obs, buffer):\n                _encode_obs(o, b)\n        elif isinstance(obs, dict):\n            for k in obs.keys():\n",
        "source_code_len": 266,
        "target_code": "    ) -> None:\n        if isinstance(obs, np.ndarray) and isinstance(buffer, ShArray):\n            buffer.save(obs)\n        elif isinstance(obs, tuple) and isinstance(buffer, tuple):\n            for o, b in zip(obs, buffer):\n                _encode_obs(o, b)\n        elif isinstance(obs, dict) and isinstance(buffer, dict):\n            for k in obs.keys():\n",
        "target_code_len": 357,
        "diff_format": "@@ -23,8 +72,8 @@\n     ) -> None:\n-        if isinstance(obs, np.ndarray):\n+        if isinstance(obs, np.ndarray) and isinstance(buffer, ShArray):\n             buffer.save(obs)\n-        elif isinstance(obs, tuple):\n+        elif isinstance(obs, tuple) and isinstance(buffer, tuple):\n             for o, b in zip(obs, buffer):\n                 _encode_obs(o, b)\n-        elif isinstance(obs, dict):\n+        elif isinstance(obs, dict) and isinstance(buffer, dict):\n             for k in obs.keys():\n",
        "source_code_with_indent": "    ) -> None:\n        <IND>if isinstance(obs, np.ndarray):\n            <IND>buffer.save(obs)\n        <DED>elif isinstance(obs, tuple):\n            <IND>for o, b in zip(obs, buffer):\n                <IND>_encode_obs(o, b)\n        <DED><DED>elif isinstance(obs, dict):\n            <IND>for k in obs.keys():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ) -> None:\n        <IND>if isinstance(obs, np.ndarray) and isinstance(buffer, ShArray):\n            <IND>buffer.save(obs)\n        <DED>elif isinstance(obs, tuple) and isinstance(buffer, tuple):\n            <IND>for o, b in zip(obs, buffer):\n                <IND>_encode_obs(o, b)\n        <DED><DED>elif isinstance(obs, dict) and isinstance(buffer, dict):\n            <IND>for k in obs.keys():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/worker/subproc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/worker/subproc.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tianshou/env/worker/subproc.py:171:4 Inconsistent override [14]: `tianshou.env.worker.subproc.SubprocEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Parameter of type `List[SubprocEnvWorker]` is not a supertype of the overridden parameter `List[tianshou.env.worker.base.EnvWorker]`.",
    "message": " `tianshou.env.worker.subproc.SubprocEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Parameter of type `List[SubprocEnvWorker]` is not a supertype of the overridden parameter `List[tianshou.env.worker.base.EnvWorker]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 171,
    "warning_line": "    def wait(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def wait(\n        workers: List[\"SubprocEnvWorker\"],\n",
        "source_code_len": 75,
        "target_code": "    @staticmethod\n    def wait(  # type: ignore\n        workers: List[\"SubprocEnvWorker\"],\n",
        "target_code_len": 91,
        "diff_format": "@@ -170,3 +173,3 @@\n     @staticmethod\n-    def wait(\n+    def wait(  # type: ignore\n         workers: List[\"SubprocEnvWorker\"],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def wait(\n        workers: List[\"SubprocEnvWorker\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def wait(  # type: ignore\n        workers: List[\"SubprocEnvWorker\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/env/worker/subproc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/worker/subproc.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tianshou/env/worker/subproc.py:171:4 Inconsistent override [15]: `tianshou.env.worker.subproc.SubprocEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Returned type `List[SubprocEnvWorker]` is not a subtype of the overridden return `List[tianshou.env.worker.base.EnvWorker]`.",
    "message": " `tianshou.env.worker.subproc.SubprocEnvWorker.wait` overrides method defined in `tianshou.env.worker.base.EnvWorker` inconsistently. Returned type `List[SubprocEnvWorker]` is not a subtype of the overridden return `List[tianshou.env.worker.base.EnvWorker]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 171,
    "warning_line": "    def wait(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def wait(\n        workers: List[\"SubprocEnvWorker\"],\n",
        "source_code_len": 75,
        "target_code": "    @staticmethod\n    def wait(  # type: ignore\n        workers: List[\"SubprocEnvWorker\"],\n",
        "target_code_len": 91,
        "diff_format": "@@ -170,3 +173,3 @@\n     @staticmethod\n-    def wait(\n+    def wait(  # type: ignore\n         workers: List[\"SubprocEnvWorker\"],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def wait(\n        workers: List[\"SubprocEnvWorker\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def wait(  # type: ignore\n        workers: List[\"SubprocEnvWorker\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:145:35 Call error [29]: `Optional[tianshou.exploration.random.BaseNoise]` is not a function.",
    "message": " `Optional[tianshou.exploration.random.BaseNoise]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 145,
    "warning_line": "            actions += to_torch_as(self._noise(actions.shape), actions)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        actions += self._action_bias\n        if self.training and explorating:\n            actions += to_torch_as(self._noise(actions.shape), actions)\n",
        "source_code_len": 151,
        "target_code": "        actions += self._action_bias\n        if self._noise and self.training and explorating:\n            actions += to_torch_as(self._noise(actions.shape), actions)\n",
        "target_code_len": 167,
        "diff_format": "@@ -143,3 +145,3 @@\n         actions += self._action_bias\n-        if self.training and explorating:\n+        if self._noise and self.training and explorating:\n             actions += to_torch_as(self._noise(actions.shape), actions)\n",
        "source_code_with_indent": "        actions += self._action_bias\n        if self.training and explorating:\n            <IND>actions += to_torch_as(self._noise(actions.shape), actions)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        actions += self._action_bias\n        if self._noise and self.training and explorating:\n            <IND>actions += to_torch_as(self._noise(actions.shape), actions)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/policy/modelfree/sac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/sac.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tianshou/policy/modelfree/sac.py:110:4 Inconsistent override [14]: `tianshou.policy.modelfree.sac.SACPolicy.forward` overrides method defined in `tianshou.policy.modelfree.ddpg.DDPGPolicy` inconsistently. Could not find parameter `model` in overriding signature.",
    "message": " `tianshou.policy.modelfree.sac.SACPolicy.forward` overrides method defined in `tianshou.policy.modelfree.ddpg.DDPGPolicy` inconsistently. Could not find parameter `model` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 110,
    "warning_line": "    def forward(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def forward(\n        self,\n",
        "source_code_len": 32,
        "target_code": "\n    def forward(  # type: ignore\n        self,\n",
        "target_code_len": 48,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def forward(\n+    def forward(  # type: ignore\n         self,\n",
        "source_code_with_indent": "\n    <DED><DED>def forward(\n        self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def forward(  # type: ignore\n        self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/trainer/onpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/onpolicy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/onpolicy.py:114:45 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[List[float], float]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[List[float], float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 114,
    "warning_line": "                        step = max(step, len(losses[k]))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                step = 1\n                for k in losses.keys():\n                    if isinstance(losses[k], list):\n                        step = max(step, len(losses[k]))\n                global_step += step * collect_per_step\n",
        "source_code_len": 229,
        "target_code": "                step = 1\n                for v in losses.values():\n                    if isinstance(v, list):\n                        step = max(step, len(v))\n                global_step += step * collect_per_step\n",
        "target_code_len": 215,
        "diff_format": "@@ -111,5 +111,5 @@\n                 step = 1\n-                for k in losses.keys():\n-                    if isinstance(losses[k], list):\n-                        step = max(step, len(losses[k]))\n+                for v in losses.values():\n+                    if isinstance(v, list):\n+                        step = max(step, len(v))\n                 global_step += step * collect_per_step\n",
        "source_code_with_indent": "                step = 1\n                for k in losses.keys():\n                    <IND>if isinstance(losses[k], list):\n                        <IND>step = max(step, len(losses[k]))\n                <DED><DED>global_step += step * collect_per_step\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                step = 1\n                for v in losses.values():\n                    <IND>if isinstance(v, list):\n                        <IND>step = max(step, len(v))\n                <DED><DED>global_step += step * collect_per_step\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/trainer/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/utils.py:27:27 Unsupported operand [58]: `//` is not supported for operand types `Union[List[int], int]` and `int`.",
    "message": " `//` is not supported for operand types `Union[List[int], int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 27,
    "warning_line": "        n_ = np.zeros(n) + n_episode // n",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        test_fn(epoch)\n    if collector.get_env_num() > 1 and np.isscalar(n_episode):\n        n = collector.get_env_num()\n",
        "source_code_len": 122,
        "target_code": "        test_fn(epoch)\n    if collector.get_env_num() > 1 and isinstance(n_episode, int):\n        n = collector.get_env_num()\n",
        "target_code_len": 126,
        "diff_format": "@@ -24,3 +24,3 @@\n         test_fn(epoch)\n-    if collector.get_env_num() > 1 and np.isscalar(n_episode):\n+    if collector.get_env_num() > 1 and isinstance(n_episode, int):\n         n = collector.get_env_num()\n",
        "source_code_with_indent": "        <IND>test_fn(epoch)\n    <DED>if collector.get_env_num() > 1 and np.isscalar(n_episode):\n        <IND>n = collector.get_env_num()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>test_fn(epoch)\n    <DED>if collector.get_env_num() > 1 and isinstance(n_episode, int):\n        <IND>n = collector.get_env_num()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "b284ace1024b0f73b0f8d4fdd3f7b2ea1fb340e5",
    "filename": "tianshou/trainer/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/utils.py:28:12 Unsupported operand [58]: `%` is not supported for operand types `Union[List[int], int]` and `int`.",
    "message": " `%` is not supported for operand types `Union[List[int], int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 28,
    "warning_line": "        n_[:n_episode % n] += 1",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        test_fn(epoch)\n    if collector.get_env_num() > 1 and np.isscalar(n_episode):\n        n = collector.get_env_num()\n",
        "source_code_len": 122,
        "target_code": "        test_fn(epoch)\n    if collector.get_env_num() > 1 and isinstance(n_episode, int):\n        n = collector.get_env_num()\n",
        "target_code_len": 126,
        "diff_format": "@@ -24,3 +24,3 @@\n         test_fn(epoch)\n-    if collector.get_env_num() > 1 and np.isscalar(n_episode):\n+    if collector.get_env_num() > 1 and isinstance(n_episode, int):\n         n = collector.get_env_num()\n",
        "source_code_with_indent": "        <IND>test_fn(epoch)\n    <DED>if collector.get_env_num() > 1 and np.isscalar(n_episode):\n        <IND>n = collector.get_env_num()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>test_fn(epoch)\n    <DED>if collector.get_env_num() > 1 and isinstance(n_episode, int):\n        <IND>n = collector.get_env_num()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]