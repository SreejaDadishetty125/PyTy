[
  {
    "project": "jesopo/bitbot",
    "commit": "0004a8a59caa6e1dd53bf6c477fbf797edc11b34",
    "filename": "modules/sasl/scram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/modules/sasl/scram.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "modules/sasl/scram.py:34:20 Incompatible parameter type [6]: Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[typing.List[bytes], None, None]`.",
    "message": " Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[typing.List[bytes], None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 34,
    "warning_line": "        return dict(piece.split(b\"=\", 1) for piece in data.split(b\",\"))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_pieces(self, data: bytes) -> typing.Dict[bytes, bytes]:\n        return dict(piece.split(b\"=\", 1) for piece in data.split(b\",\"))\n\n",
        "source_code_len": 142,
        "target_code": "    def _get_pieces(self, data: bytes) -> typing.Dict[bytes, bytes]:\n        pieces = (piece.split(b\"=\", 1) for piece in data.split(b\",\"))\n        return dict((piece[0], piece[1]) for piece in pieces)\n\n",
        "target_code_len": 202,
        "diff_format": "@@ -33,3 +33,4 @@\n     def _get_pieces(self, data: bytes) -> typing.Dict[bytes, bytes]:\n-        return dict(piece.split(b\"=\", 1) for piece in data.split(b\",\"))\n+        pieces = (piece.split(b\"=\", 1) for piece in data.split(b\",\"))\n+        return dict((piece[0], piece[1]) for piece in pieces)\n \n",
        "source_code_with_indent": "    <DED>def _get_pieces(self, data: bytes) -> typing.Dict[bytes, bytes]:\n        <IND>return dict(piece.split(b\"=\", 1) for piece in data.split(b\",\"))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_pieces(self, data: bytes) -> typing.Dict[bytes, bytes]:\n        <IND>pieces = (piece.split(b\"=\", 1) for piece in data.split(b\",\"))\n        return dict((piece[0], piece[1]) for piece in pieces)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]