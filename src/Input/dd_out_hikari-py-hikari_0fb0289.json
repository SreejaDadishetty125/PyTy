[
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:408:8 Incompatible return type [7]: Expected `bool` but got `typing.Union[bool, intents_.Intent]`.",
    "message": " Expected `bool` but got `typing.Union[bool, intents_.Intent]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 408,
    "warning_line": "        return self._intents is None or self._intents & intents",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_intent_enabled(self, intents: intents_.Intent, /) -> bool:\n        return self._intents is None or self._intents & intents\n\n",
        "source_code_len": 136,
        "target_code": "    def _is_intent_enabled(self, intents: intents_.Intent, /) -> bool:\n        return self._intents is None or (self._intents & intents) == intents\n\n",
        "target_code_len": 149,
        "diff_format": "@@ -407,3 +393,3 @@\n     def _is_intent_enabled(self, intents: intents_.Intent, /) -> bool:\n-        return self._intents is None or self._intents & intents\n+        return self._intents is None or (self._intents & intents) == intents\n \n",
        "source_code_with_indent": "    <DED><DED>def _is_intent_enabled(self, intents: intents_.Intent, /) -> bool:\n        <IND>return self._intents is None or self._intents & intents\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _is_intent_enabled(self, intents: intents_.Intent, /) -> bool:\n        <IND>return self._intents is None or (self._intents & intents) == intents\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:591:4 Inconsistent override [15]: `hikari.impl.stateful_cache.StatefulCacheComponentImpl.clear_members` overrides method defined in `cache.ICacheComponent` inconsistently. Returned type `typing.Optional[cache.ICacheView[guilds.Member]]` is not a subtype of the overridden return `cache.ICacheView[guilds.Member]`.",
    "message": " `hikari.impl.stateful_cache.StatefulCacheComponentImpl.clear_members` overrides method defined in `cache.ICacheComponent` inconsistently. Returned type `typing.Optional[cache.ICacheView[guilds.Member]]` is not a subtype of the overridden return `cache.ICacheView[guilds.Member]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 591,
    "warning_line": "    def clear_members(self, guild_id: snowflake.Snowflake, /) -> typing.Optional[cache.ICacheView[guilds.Member]]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def clear_members(self, guild_id: snowflake.Snowflake, /) -> typing.Optional[cache.ICacheView[guilds.Member]]:\n        guild_record = self._guild_entries.get(guild_id)\n\n        members: cache.ICacheView[guilds.Member]\n        if guild_record is not None and guild_record.members is not None:\n            cached_members = guild_record.members\n            cached_users = {sf: self._user_entries[sf] for sf in cached_members.keys()}\n            guild_record.members = None\n            self._delete_guild_record_if_empty(guild_id)\n\n            for user_id in cached_members.keys():\n                self._garbage_collect_user(user_id)\n\n            members = _StatefulCacheMappingView(\n                cached_members, builder=lambda member: self._build_member(member, user_entries=cached_users)\n            )\n        else:\n            members = _EmptyCacheView()\n\n        return members\n\n",
        "source_code_len": 887,
        "target_code": "\n    def clear_members(self, guild_id: snowflake.Snowflake, /) -> cache.ICacheView[guilds.Member]:\n        guild_record = self._guild_entries.get(guild_id)  # TODO: optional return on clear?\n\n        members: cache.ICacheView[guilds.Member]\n        if guild_record is None or guild_record.members is None:\n            return _EmptyCacheView()\n\n        cached_members = guild_record.members\n        cached_users = {sf: self._user_entries[sf] for sf in cached_members.keys()}\n        guild_record.members = None\n        self._delete_guild_record_if_empty(guild_id)\n\n        for user_id in cached_members.keys():\n            self._garbage_collect_user(user_id)\n\n        return _StatefulCacheMappingView(\n            cached_members, builder=lambda member: self._build_member(member, user_entries=cached_users)\n        )\n\n",
        "target_code_len": 817,
        "diff_format": "@@ -590,22 +600,20 @@\n \n-    def clear_members(self, guild_id: snowflake.Snowflake, /) -> typing.Optional[cache.ICacheView[guilds.Member]]:\n-        guild_record = self._guild_entries.get(guild_id)\n+    def clear_members(self, guild_id: snowflake.Snowflake, /) -> cache.ICacheView[guilds.Member]:\n+        guild_record = self._guild_entries.get(guild_id)  # TODO: optional return on clear?\n \n         members: cache.ICacheView[guilds.Member]\n-        if guild_record is not None and guild_record.members is not None:\n-            cached_members = guild_record.members\n-            cached_users = {sf: self._user_entries[sf] for sf in cached_members.keys()}\n-            guild_record.members = None\n-            self._delete_guild_record_if_empty(guild_id)\n-\n-            for user_id in cached_members.keys():\n-                self._garbage_collect_user(user_id)\n-\n-            members = _StatefulCacheMappingView(\n-                cached_members, builder=lambda member: self._build_member(member, user_entries=cached_users)\n-            )\n-        else:\n-            members = _EmptyCacheView()\n-\n-        return members\n+        if guild_record is None or guild_record.members is None:\n+            return _EmptyCacheView()\n+\n+        cached_members = guild_record.members\n+        cached_users = {sf: self._user_entries[sf] for sf in cached_members.keys()}\n+        guild_record.members = None\n+        self._delete_guild_record_if_empty(guild_id)\n+\n+        for user_id in cached_members.keys():\n+            self._garbage_collect_user(user_id)\n+\n+        return _StatefulCacheMappingView(\n+            cached_members, builder=lambda member: self._build_member(member, user_entries=cached_users)\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def clear_members(self, guild_id: snowflake.Snowflake, /) -> typing.Optional[cache.ICacheView[guilds.Member]]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n\n        members: cache.ICacheView[guilds.Member]\n        if guild_record is not None and guild_record.members is not None:\n            <IND>cached_members = guild_record.members\n            cached_users = {sf: self._user_entries[sf] for sf in cached_members.keys()}\n            guild_record.members = None\n            self._delete_guild_record_if_empty(guild_id)\n\n            for user_id in cached_members.keys():\n                <IND>self._garbage_collect_user(user_id)\n\n            <DED>members = _StatefulCacheMappingView(\n                cached_members, builder=lambda member: self._build_member(member, user_entries=cached_users)\n            )\n        <DED>else:\n            <IND>members = _EmptyCacheView()\n\n        <DED>return members\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def clear_members(self, guild_id: snowflake.Snowflake, /) -> cache.ICacheView[guilds.Member]:\n        <IND>guild_record = self._guild_entries.get(guild_id)  # TODO: optional return on clear?\n\n        members: cache.ICacheView[guilds.Member]\n        if guild_record is None or guild_record.members is None:\n            <IND>return _EmptyCacheView()\n\n        <DED>cached_members = guild_record.members\n        cached_users = {sf: self._user_entries[sf] for sf in cached_members.keys()}\n        guild_record.members = None\n        self._delete_guild_record_if_empty(guild_id)\n\n        for user_id in cached_members.keys():\n            <IND>self._garbage_collect_user(user_id)\n\n        <DED>return _StatefulCacheMappingView(\n            cached_members, builder=lambda member: self._build_member(member, user_entries=cached_users)\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:729:45 Incompatible parameter type [6]: Expected `typing.Mapping[snowflake.Snowflake, typing.Union[Variable[_BuilderT], Variable[_T (bound to snowflake.Unique)]]]` for 1st positional only parameter to call `_StatefulCacheMappingView.__init__` but got `_IDTable`.",
    "message": " Expected `typing.Mapping[snowflake.Snowflake, typing.Union[Variable[_BuilderT], Variable[_T (bound to snowflake.Unique)]]]` for 1st positional only parameter to call `_StatefulCacheMappingView.__init__` but got `_IDTable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 729,
    "warning_line": "            return _StatefulCacheMappingView(guild_record.channels)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            return None\n        return guild_record.presences.get(user_id)\n\n    def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            return None\n        return guild_record.roles[role_id]\n\n    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            return _StatefulCacheMappingView(guild_record.channels)\n        return _EmptyCacheView()\n\n    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            return _StatefulCacheMappingView(guild_record.emojis)\n        return _EmptyCacheView()\n\n    def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            return _StatefulCacheMappingView(guild_record.presences)\n        return _EmptyCacheView()\n\n    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            return _StatefulCacheMappingView(guild_record.roles)\n        return _EmptyCacheView()\n\n    def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    def _build_voice_status(\n",
        "source_code_len": 3692,
        "target_code": "\n    def _build_voice_status(\n",
        "target_code_len": 30,
        "diff_format": "@@ -709,79 +760,2 @@\n \n-    def get_guild_presence(\n-        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n-    ) -> typing.Optional[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is None or guild_record.presences is None:\n-            return None\n-        return guild_record.presences.get(user_id)\n-\n-    def get_guild_role(\n-        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n-    ) -> typing.Optional[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record.emojis is None or guild_record.roles is None:\n-            return None\n-        return guild_record.roles[role_id]\n-\n-    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.channels is not None:\n-            return _StatefulCacheMappingView(guild_record.channels)\n-        return _EmptyCacheView()\n-\n-    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.emojis is not None:\n-            return _StatefulCacheMappingView(guild_record.emojis)\n-        return _EmptyCacheView()\n-\n-    def get_presences_view_for_guild(\n-        self, guild_id: snowflake.Snowflake, /\n-    ) -> cache.ICacheView[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.presences is not None:\n-            return _StatefulCacheMappingView(guild_record.presences)\n-        return _EmptyCacheView()\n-\n-    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.roles is not None:\n-            return _StatefulCacheMappingView(guild_record.roles)\n-        return _EmptyCacheView()\n-\n-    def replace_all_guild_channels(\n-        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n-\n-    def replace_all_guild_emojis(\n-        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None:\n-            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n-\n-    def replace_all_guild_presences(\n-        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n-\n-    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        # Top role first!\n-        self._guild_entries[guild_id].roles = {\n-            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n-        }\n-\n     def _build_voice_status(\n",
        "source_code_with_indent": "\n    <DED>def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            <IND>return None\n        <DED>return guild_record.presences.get(user_id)\n\n    <DED>def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            <IND>return None\n        <DED>return guild_record.roles[role_id]\n\n    <DED>def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.channels)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.emojis)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.presences)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.roles)\n        <DED>return _EmptyCacheView()\n\n    <DED>def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    <DED>def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            <IND>guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    <DED><DED>def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    <DED>def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        <DED>self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    <DED>def _build_voice_status(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _build_voice_status(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:735:45 Incompatible parameter type [6]: Expected `typing.Mapping[snowflake.Snowflake, typing.Union[Variable[_BuilderT], Variable[_T (bound to snowflake.Unique)]]]` for 1st positional only parameter to call `_StatefulCacheMappingView.__init__` but got `_IDTable`.",
    "message": " Expected `typing.Mapping[snowflake.Snowflake, typing.Union[Variable[_BuilderT], Variable[_T (bound to snowflake.Unique)]]]` for 1st positional only parameter to call `_StatefulCacheMappingView.__init__` but got `_IDTable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 735,
    "warning_line": "            return _StatefulCacheMappingView(guild_record.emojis)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            return None\n        return guild_record.presences.get(user_id)\n\n    def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            return None\n        return guild_record.roles[role_id]\n\n    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            return _StatefulCacheMappingView(guild_record.channels)\n        return _EmptyCacheView()\n\n    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            return _StatefulCacheMappingView(guild_record.emojis)\n        return _EmptyCacheView()\n\n    def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            return _StatefulCacheMappingView(guild_record.presences)\n        return _EmptyCacheView()\n\n    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            return _StatefulCacheMappingView(guild_record.roles)\n        return _EmptyCacheView()\n\n    def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    def _build_voice_status(\n",
        "source_code_len": 3692,
        "target_code": "\n    def _build_voice_status(\n",
        "target_code_len": 30,
        "diff_format": "@@ -709,79 +760,2 @@\n \n-    def get_guild_presence(\n-        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n-    ) -> typing.Optional[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is None or guild_record.presences is None:\n-            return None\n-        return guild_record.presences.get(user_id)\n-\n-    def get_guild_role(\n-        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n-    ) -> typing.Optional[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record.emojis is None or guild_record.roles is None:\n-            return None\n-        return guild_record.roles[role_id]\n-\n-    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.channels is not None:\n-            return _StatefulCacheMappingView(guild_record.channels)\n-        return _EmptyCacheView()\n-\n-    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.emojis is not None:\n-            return _StatefulCacheMappingView(guild_record.emojis)\n-        return _EmptyCacheView()\n-\n-    def get_presences_view_for_guild(\n-        self, guild_id: snowflake.Snowflake, /\n-    ) -> cache.ICacheView[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.presences is not None:\n-            return _StatefulCacheMappingView(guild_record.presences)\n-        return _EmptyCacheView()\n-\n-    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.roles is not None:\n-            return _StatefulCacheMappingView(guild_record.roles)\n-        return _EmptyCacheView()\n-\n-    def replace_all_guild_channels(\n-        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n-\n-    def replace_all_guild_emojis(\n-        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None:\n-            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n-\n-    def replace_all_guild_presences(\n-        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n-\n-    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        # Top role first!\n-        self._guild_entries[guild_id].roles = {\n-            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n-        }\n-\n     def _build_voice_status(\n",
        "source_code_with_indent": "\n    <DED>def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            <IND>return None\n        <DED>return guild_record.presences.get(user_id)\n\n    <DED>def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            <IND>return None\n        <DED>return guild_record.roles[role_id]\n\n    <DED>def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.channels)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.emojis)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.presences)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.roles)\n        <DED>return _EmptyCacheView()\n\n    <DED>def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    <DED>def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            <IND>guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    <DED><DED>def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    <DED>def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        <DED>self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    <DED>def _build_voice_status(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _build_voice_status(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:749:45 Incompatible parameter type [6]: Expected `typing.Mapping[snowflake.Snowflake, typing.Union[Variable[_BuilderT], Variable[_T (bound to snowflake.Unique)]]]` for 1st positional only parameter to call `_StatefulCacheMappingView.__init__` but got `_IDTable`.",
    "message": " Expected `typing.Mapping[snowflake.Snowflake, typing.Union[Variable[_BuilderT], Variable[_T (bound to snowflake.Unique)]]]` for 1st positional only parameter to call `_StatefulCacheMappingView.__init__` but got `_IDTable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 749,
    "warning_line": "            return _StatefulCacheMappingView(guild_record.roles)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            return None\n        return guild_record.presences.get(user_id)\n\n    def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            return None\n        return guild_record.roles[role_id]\n\n    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            return _StatefulCacheMappingView(guild_record.channels)\n        return _EmptyCacheView()\n\n    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            return _StatefulCacheMappingView(guild_record.emojis)\n        return _EmptyCacheView()\n\n    def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            return _StatefulCacheMappingView(guild_record.presences)\n        return _EmptyCacheView()\n\n    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            return _StatefulCacheMappingView(guild_record.roles)\n        return _EmptyCacheView()\n\n    def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    def _build_voice_status(\n",
        "source_code_len": 3692,
        "target_code": "\n    def _build_voice_status(\n",
        "target_code_len": 30,
        "diff_format": "@@ -709,79 +760,2 @@\n \n-    def get_guild_presence(\n-        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n-    ) -> typing.Optional[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is None or guild_record.presences is None:\n-            return None\n-        return guild_record.presences.get(user_id)\n-\n-    def get_guild_role(\n-        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n-    ) -> typing.Optional[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record.emojis is None or guild_record.roles is None:\n-            return None\n-        return guild_record.roles[role_id]\n-\n-    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.channels is not None:\n-            return _StatefulCacheMappingView(guild_record.channels)\n-        return _EmptyCacheView()\n-\n-    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.emojis is not None:\n-            return _StatefulCacheMappingView(guild_record.emojis)\n-        return _EmptyCacheView()\n-\n-    def get_presences_view_for_guild(\n-        self, guild_id: snowflake.Snowflake, /\n-    ) -> cache.ICacheView[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.presences is not None:\n-            return _StatefulCacheMappingView(guild_record.presences)\n-        return _EmptyCacheView()\n-\n-    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.roles is not None:\n-            return _StatefulCacheMappingView(guild_record.roles)\n-        return _EmptyCacheView()\n-\n-    def replace_all_guild_channels(\n-        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n-\n-    def replace_all_guild_emojis(\n-        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None:\n-            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n-\n-    def replace_all_guild_presences(\n-        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n-\n-    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        # Top role first!\n-        self._guild_entries[guild_id].roles = {\n-            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n-        }\n-\n     def _build_voice_status(\n",
        "source_code_with_indent": "\n    <DED>def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            <IND>return None\n        <DED>return guild_record.presences.get(user_id)\n\n    <DED>def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            <IND>return None\n        <DED>return guild_record.roles[role_id]\n\n    <DED>def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.channels)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.emojis)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.presences)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.roles)\n        <DED>return _EmptyCacheView()\n\n    <DED>def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    <DED>def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            <IND>guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    <DED><DED>def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    <DED>def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        <DED>self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    <DED>def _build_voice_status(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _build_voice_status(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:758:8 Incompatible attribute type [8]: Attribute `channels` declared in class `_GuildRecord` has type `typing.Optional[_IDTable]` but is used as type `typing.List[channels.GuildChannel]`.",
    "message": " Attribute `channels` declared in class `_GuildRecord` has type `typing.Optional[_IDTable]` but is used as type `typing.List[channels.GuildChannel]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 758,
    "warning_line": "        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            return None\n        return guild_record.presences.get(user_id)\n\n    def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            return None\n        return guild_record.roles[role_id]\n\n    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            return _StatefulCacheMappingView(guild_record.channels)\n        return _EmptyCacheView()\n\n    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            return _StatefulCacheMappingView(guild_record.emojis)\n        return _EmptyCacheView()\n\n    def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            return _StatefulCacheMappingView(guild_record.presences)\n        return _EmptyCacheView()\n\n    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            return _StatefulCacheMappingView(guild_record.roles)\n        return _EmptyCacheView()\n\n    def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    def _build_voice_status(\n",
        "source_code_len": 3692,
        "target_code": "\n    def _build_voice_status(\n",
        "target_code_len": 30,
        "diff_format": "@@ -709,79 +760,2 @@\n \n-    def get_guild_presence(\n-        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n-    ) -> typing.Optional[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is None or guild_record.presences is None:\n-            return None\n-        return guild_record.presences.get(user_id)\n-\n-    def get_guild_role(\n-        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n-    ) -> typing.Optional[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record.emojis is None or guild_record.roles is None:\n-            return None\n-        return guild_record.roles[role_id]\n-\n-    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.channels is not None:\n-            return _StatefulCacheMappingView(guild_record.channels)\n-        return _EmptyCacheView()\n-\n-    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.emojis is not None:\n-            return _StatefulCacheMappingView(guild_record.emojis)\n-        return _EmptyCacheView()\n-\n-    def get_presences_view_for_guild(\n-        self, guild_id: snowflake.Snowflake, /\n-    ) -> cache.ICacheView[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.presences is not None:\n-            return _StatefulCacheMappingView(guild_record.presences)\n-        return _EmptyCacheView()\n-\n-    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.roles is not None:\n-            return _StatefulCacheMappingView(guild_record.roles)\n-        return _EmptyCacheView()\n-\n-    def replace_all_guild_channels(\n-        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n-\n-    def replace_all_guild_emojis(\n-        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None:\n-            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n-\n-    def replace_all_guild_presences(\n-        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n-\n-    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        # Top role first!\n-        self._guild_entries[guild_id].roles = {\n-            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n-        }\n-\n     def _build_voice_status(\n",
        "source_code_with_indent": "\n    <DED>def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            <IND>return None\n        <DED>return guild_record.presences.get(user_id)\n\n    <DED>def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            <IND>return None\n        <DED>return guild_record.roles[role_id]\n\n    <DED>def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.channels)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.emojis)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.presences)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.roles)\n        <DED>return _EmptyCacheView()\n\n    <DED>def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    <DED>def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            <IND>guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    <DED><DED>def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    <DED>def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        <DED>self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    <DED>def _build_voice_status(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _build_voice_status(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:768:12 Incompatible attribute type [8]: Attribute `emojis` declared in class `_GuildRecord` has type `typing.Optional[_IDTable]` but is used as type `typing.Dict[snowflake.Snowflake, emojis.KnownCustomEmoji]`.",
    "message": " Attribute `emojis` declared in class `_GuildRecord` has type `typing.Optional[_IDTable]` but is used as type `typing.Dict[snowflake.Snowflake, emojis.KnownCustomEmoji]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 768,
    "warning_line": "            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            return None\n        return guild_record.presences.get(user_id)\n\n    def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            return None\n        return guild_record.roles[role_id]\n\n    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            return _StatefulCacheMappingView(guild_record.channels)\n        return _EmptyCacheView()\n\n    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            return _StatefulCacheMappingView(guild_record.emojis)\n        return _EmptyCacheView()\n\n    def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            return _StatefulCacheMappingView(guild_record.presences)\n        return _EmptyCacheView()\n\n    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            return _StatefulCacheMappingView(guild_record.roles)\n        return _EmptyCacheView()\n\n    def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    def _build_voice_status(\n",
        "source_code_len": 3692,
        "target_code": "\n    def _build_voice_status(\n",
        "target_code_len": 30,
        "diff_format": "@@ -709,79 +760,2 @@\n \n-    def get_guild_presence(\n-        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n-    ) -> typing.Optional[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is None or guild_record.presences is None:\n-            return None\n-        return guild_record.presences.get(user_id)\n-\n-    def get_guild_role(\n-        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n-    ) -> typing.Optional[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record.emojis is None or guild_record.roles is None:\n-            return None\n-        return guild_record.roles[role_id]\n-\n-    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.channels is not None:\n-            return _StatefulCacheMappingView(guild_record.channels)\n-        return _EmptyCacheView()\n-\n-    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.emojis is not None:\n-            return _StatefulCacheMappingView(guild_record.emojis)\n-        return _EmptyCacheView()\n-\n-    def get_presences_view_for_guild(\n-        self, guild_id: snowflake.Snowflake, /\n-    ) -> cache.ICacheView[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.presences is not None:\n-            return _StatefulCacheMappingView(guild_record.presences)\n-        return _EmptyCacheView()\n-\n-    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.roles is not None:\n-            return _StatefulCacheMappingView(guild_record.roles)\n-        return _EmptyCacheView()\n-\n-    def replace_all_guild_channels(\n-        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n-\n-    def replace_all_guild_emojis(\n-        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None:\n-            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n-\n-    def replace_all_guild_presences(\n-        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n-\n-    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        # Top role first!\n-        self._guild_entries[guild_id].roles = {\n-            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n-        }\n-\n     def _build_voice_status(\n",
        "source_code_with_indent": "\n    <DED>def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            <IND>return None\n        <DED>return guild_record.presences.get(user_id)\n\n    <DED>def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            <IND>return None\n        <DED>return guild_record.roles[role_id]\n\n    <DED>def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.channels)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.emojis)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.presences)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.roles)\n        <DED>return _EmptyCacheView()\n\n    <DED>def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    <DED>def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            <IND>guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    <DED><DED>def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    <DED>def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        <DED>self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    <DED>def _build_voice_status(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _build_voice_status(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:783:8 Incompatible attribute type [8]: Attribute `roles` declared in class `_GuildRecord` has type `typing.Optional[_IDTable]` but is used as type `typing.Dict[snowflake.Snowflake, guilds.Role]`.",
    "message": " Attribute `roles` declared in class `_GuildRecord` has type `typing.Optional[_IDTable]` but is used as type `typing.Dict[snowflake.Snowflake, guilds.Role]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 783,
    "warning_line": "        self._guild_entries[guild_id].roles = {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            return None\n        return guild_record.presences.get(user_id)\n\n    def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            return None\n        return guild_record.roles[role_id]\n\n    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            return _StatefulCacheMappingView(guild_record.channels)\n        return _EmptyCacheView()\n\n    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            return _StatefulCacheMappingView(guild_record.emojis)\n        return _EmptyCacheView()\n\n    def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            return _StatefulCacheMappingView(guild_record.presences)\n        return _EmptyCacheView()\n\n    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            return _StatefulCacheMappingView(guild_record.roles)\n        return _EmptyCacheView()\n\n    def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        if guild_id not in self._guild_entries:\n            self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    def _build_voice_status(\n",
        "source_code_len": 3692,
        "target_code": "\n    def _build_voice_status(\n",
        "target_code_len": 30,
        "diff_format": "@@ -709,79 +760,2 @@\n \n-    def get_guild_presence(\n-        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n-    ) -> typing.Optional[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is None or guild_record.presences is None:\n-            return None\n-        return guild_record.presences.get(user_id)\n-\n-    def get_guild_role(\n-        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n-    ) -> typing.Optional[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record.emojis is None or guild_record.roles is None:\n-            return None\n-        return guild_record.roles[role_id]\n-\n-    def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.channels is not None:\n-            return _StatefulCacheMappingView(guild_record.channels)\n-        return _EmptyCacheView()\n-\n-    def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.emojis is not None:\n-            return _StatefulCacheMappingView(guild_record.emojis)\n-        return _EmptyCacheView()\n-\n-    def get_presences_view_for_guild(\n-        self, guild_id: snowflake.Snowflake, /\n-    ) -> cache.ICacheView[presences.MemberPresence]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.presences is not None:\n-            return _StatefulCacheMappingView(guild_record.presences)\n-        return _EmptyCacheView()\n-\n-    def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None and guild_record.roles is not None:\n-            return _StatefulCacheMappingView(guild_record.roles)\n-        return _EmptyCacheView()\n-\n-    def replace_all_guild_channels(\n-        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n-\n-    def replace_all_guild_emojis(\n-        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        guild_record = self._guild_entries.get(guild_id)\n-        if guild_record is not None:\n-            guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n-\n-    def replace_all_guild_presences(\n-        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n-    ) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n-\n-    def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n-        if guild_id not in self._guild_entries:\n-            self._guild_entries[guild_id] = _GuildRecord()\n-\n-        # Top role first!\n-        self._guild_entries[guild_id].roles = {\n-            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n-        }\n-\n     def _build_voice_status(\n",
        "source_code_with_indent": "\n    <DED>def get_guild_presence(\n        self, guild_id: snowflake.Snowflake, user_id: snowflake.Snowflake\n    ) -> typing.Optional[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is None or guild_record.presences is None:\n            <IND>return None\n        <DED>return guild_record.presences.get(user_id)\n\n    <DED>def get_guild_role(\n        self, guild_id: snowflake.Snowflake, role_id: snowflake.Snowflake\n    ) -> typing.Optional[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record.emojis is None or guild_record.roles is None:\n            <IND>return None\n        <DED>return guild_record.roles[role_id]\n\n    <DED>def get_guild_channels_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[channels.GuildChannel]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.channels is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.channels)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_emojis_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[emojis.KnownCustomEmoji]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.emojis is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.emojis)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_presences_view_for_guild(\n        self, guild_id: snowflake.Snowflake, /\n    ) -> cache.ICacheView[presences.MemberPresence]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.presences is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.presences)\n        <DED>return _EmptyCacheView()\n\n    <DED>def get_guild_roles_view(self, guild_id: snowflake.Snowflake) -> cache.ICacheView[guilds.Role]:\n        <IND>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None and guild_record.roles is not None:\n            <IND>return _StatefulCacheMappingView(guild_record.roles)\n        <DED>return _EmptyCacheView()\n\n    <DED>def replace_all_guild_channels(\n        self, guild_id: snowflake.Snowflake, channel_objs: typing.Collection[channels.GuildChannel]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].channels = sorted(channel_objs, key=lambda c: c.position)\n\n    <DED>def replace_all_guild_emojis(\n        self, guild_id: snowflake.Snowflake, emoji_objs: typing.Collection[emojis.KnownCustomEmoji]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>guild_record = self._guild_entries.get(guild_id)\n        if guild_record is not None:\n            <IND>guild_record.emojis = {emoji_obj.id: emoji_obj for emoji_obj in emoji_objs}\n\n    <DED><DED>def replace_all_guild_presences(\n        self, guild_id: snowflake.Snowflake, presence_objs: typing.Collection[presences.MemberPresence]\n    ) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        <DED>self._guild_entries[guild_id].presences = {presence_obj.user_id: presence_obj for presence_obj in presence_objs}\n\n    <DED>def replace_all_guild_roles(self, guild_id: snowflake.Snowflake, roles: typing.Collection[guilds.Role]) -> None:\n        <IND>if guild_id not in self._guild_entries:\n            <IND>self._guild_entries[guild_id] = _GuildRecord()\n\n        # Top role first!\n        <DED>self._guild_entries[guild_id].roles = {\n            role.id: role for role in sorted(roles, key=lambda r: r.position, reverse=True)\n        }\n\n    <DED>def _build_voice_status(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _build_voice_status(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:824:12 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[Variable[_BuilderT]], Variable[_T (bound to snowflake.Unique)]]]` for 2nd parameter `builder` to call `_StatefulCacheMappingView.__init__` but got `typing.Callable[[Named(voice_data, typing.Any)], voices.VoiceState]`.",
    "message": " Expected `typing.Optional[typing.Callable[[Variable[_BuilderT]], Variable[_T (bound to snowflake.Unique)]]]` for 2nd parameter `builder` to call `_StatefulCacheMappingView.__init__` but got `typing.Callable[[Named(voice_data, typing.Any)], voices.VoiceState]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 824,
    "warning_line": "            builder=lambda voice_data: self._build_voice_status(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _BuilderT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_BuilderT], _T]] = None,\n    ) -> None:\n",
        "source_code_len": 196,
        "target_code": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _DataT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_DataT], _T]] = None,\n    ) -> None:\n",
        "target_code_len": 190,
        "diff_format": "@@ -123,5 +121,5 @@\n         self,\n-        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _BuilderT]],\n+        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _DataT]],\n         *,\n-        builder: typing.Optional[typing.Callable[[_BuilderT], _T]] = None,\n+        builder: typing.Optional[typing.Callable[[_DataT], _T]] = None,\n     ) -> None:\n",
        "source_code_with_indent": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _BuilderT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_BuilderT], _T]] = None,\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _DataT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_DataT], _T]] = None,\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "0fb0289a935c56f29b6b0bd970dfbab0a59f5362",
    "filename": "hikari/impl/stateful_cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/stateful_cache.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/stateful_cache.py:873:12 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[Variable[_BuilderT]], Variable[_T (bound to snowflake.Unique)]]]` for 2nd parameter `builder` to call `_StatefulCacheMappingView.__init__` but got `typing.Callable[[Named(voice_data, typing.Any)], voices.VoiceState]`.",
    "message": " Expected `typing.Optional[typing.Callable[[Variable[_BuilderT]], Variable[_T (bound to snowflake.Unique)]]]` for 2nd parameter `builder` to call `_StatefulCacheMappingView.__init__` but got `typing.Callable[[Named(voice_data, typing.Any)], voices.VoiceState]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 873,
    "warning_line": "            builder=lambda voice_data: self._build_voice_status(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _BuilderT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_BuilderT], _T]] = None,\n    ) -> None:\n",
        "source_code_len": 196,
        "target_code": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _DataT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_DataT], _T]] = None,\n    ) -> None:\n",
        "target_code_len": 190,
        "diff_format": "@@ -123,5 +121,5 @@\n         self,\n-        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _BuilderT]],\n+        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _DataT]],\n         *,\n-        builder: typing.Optional[typing.Callable[[_BuilderT], _T]] = None,\n+        builder: typing.Optional[typing.Callable[[_DataT], _T]] = None,\n     ) -> None:\n",
        "source_code_with_indent": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _BuilderT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_BuilderT], _T]] = None,\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        items: typing.Mapping[snowflake.Snowflake, typing.Union[_T, _DataT]],\n        *,\n        builder: typing.Optional[typing.Callable[[_DataT], _T]] = None,\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]