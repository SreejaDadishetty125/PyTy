[
  {
    "project": "hummingbot/hummingbot",
    "commit": "9903a7de36dc30920640bf29085de69a74afde33",
    "filename": "hummingbot/wallet/ethereum/watcher/weth_watcher.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hummingbot-hummingbot/hummingbot/wallet/ethereum/watcher/weth_watcher.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hummingbot/wallet/ethereum/watcher/weth_watcher.py:125:78 Incompatible parameter type [6]: Expected `decimal.Decimal` for 4th positional only parameter to call `WalletWrappedEthEvent.__init__` but got `float`.",
    "message": " Expected `decimal.Decimal` for 4th positional only parameter to call `WalletWrappedEthEvent.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "                           WalletWrappedEthEvent(timestamp, tx_hash, address, normalized_amount, raw_amount))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from hexbytes import HexBytes\nimport logging\nimport math\nfrom typing import (\n",
        "source_code_len": 78,
        "target_code": "from hexbytes import HexBytes\nfrom decimal import Decimal\nimport logging\nfrom typing import (\n",
        "target_code_len": 94,
        "diff_format": "@@ -4,4 +4,4 @@\n from hexbytes import HexBytes\n+from decimal import Decimal\n import logging\n-import math\n from typing import (\n",
        "source_code_with_indent": "from hexbytes import HexBytes\nimport logging\nimport math\nfrom typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from hexbytes import HexBytes\nfrom decimal import Decimal\nimport logging\nfrom typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"dst\"]\n",
        "source_code_len": 151,
        "target_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"dst\"]\n",
        "target_code_len": 153,
        "diff_format": "@@ -120,3 +120,3 @@\n         raw_amount: int = event_args[\"wad\"]\n-        normalized_amount: float = raw_amount * math.pow(10, -18)\n+        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n         address: str = event_args[\"dst\"]\n",
        "source_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"dst\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"dst\"]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"src\"]\n",
        "source_code_len": 151,
        "target_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"src\"]\n",
        "target_code_len": 153,
        "diff_format": "@@ -132,3 +132,3 @@\n         raw_amount: int = event_args[\"wad\"]\n-        normalized_amount: float = raw_amount * math.pow(10, -18)\n+        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n         address: str = event_args[\"src\"]\n",
        "source_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"src\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"src\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hummingbot/hummingbot",
    "commit": "9903a7de36dc30920640bf29085de69a74afde33",
    "filename": "hummingbot/wallet/ethereum/watcher/weth_watcher.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hummingbot-hummingbot/hummingbot/wallet/ethereum/watcher/weth_watcher.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hummingbot/wallet/ethereum/watcher/weth_watcher.py:137:80 Incompatible parameter type [6]: Expected `decimal.Decimal` for 4th positional only parameter to call `WalletUnwrappedEthEvent.__init__` but got `float`.",
    "message": " Expected `decimal.Decimal` for 4th positional only parameter to call `WalletUnwrappedEthEvent.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "                           WalletUnwrappedEthEvent(timestamp, tx_hash, address, normalized_amount, raw_amount))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from hexbytes import HexBytes\nimport logging\nimport math\nfrom typing import (\n",
        "source_code_len": 78,
        "target_code": "from hexbytes import HexBytes\nfrom decimal import Decimal\nimport logging\nfrom typing import (\n",
        "target_code_len": 94,
        "diff_format": "@@ -4,4 +4,4 @@\n from hexbytes import HexBytes\n+from decimal import Decimal\n import logging\n-import math\n from typing import (\n",
        "source_code_with_indent": "from hexbytes import HexBytes\nimport logging\nimport math\nfrom typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from hexbytes import HexBytes\nfrom decimal import Decimal\nimport logging\nfrom typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"dst\"]\n",
        "source_code_len": 151,
        "target_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"dst\"]\n",
        "target_code_len": 153,
        "diff_format": "@@ -120,3 +120,3 @@\n         raw_amount: int = event_args[\"wad\"]\n-        normalized_amount: float = raw_amount * math.pow(10, -18)\n+        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n         address: str = event_args[\"dst\"]\n",
        "source_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"dst\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"dst\"]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"src\"]\n",
        "source_code_len": 151,
        "target_code": "        raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"src\"]\n",
        "target_code_len": 153,
        "diff_format": "@@ -132,3 +132,3 @@\n         raw_amount: int = event_args[\"wad\"]\n-        normalized_amount: float = raw_amount * math.pow(10, -18)\n+        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n         address: str = event_args[\"src\"]\n",
        "source_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: float = raw_amount * math.pow(10, -18)\n        address: str = event_args[\"src\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>raw_amount: int = event_args[\"wad\"]\n        normalized_amount: Decimal = Decimal(raw_amount) / 10 ** 18\n        address: str = event_args[\"src\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hummingbot/hummingbot",
    "commit": "9903a7de36dc30920640bf29085de69a74afde33",
    "filename": "hummingbot/wallet/ethereum/web3_wallet_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hummingbot-hummingbot/hummingbot/wallet/ethereum/web3_wallet_backend.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hummingbot/wallet/ethereum/web3_wallet_backend.py:611:65 Unsupported operand [58]: `*` is not supported for operand types `Decimal` and `float`.",
    "message": " `*` is not supported for operand types `Decimal` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 611,
    "warning_line": "        return self.execute_transaction(contract_func, value=int(amount * 1e18))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.logger().info(f\"Wrapping {amount} ether from wallet address {self.address}.\")\n        return self.execute_transaction(contract_func, value=int(amount * 1e18))\n\n",
        "source_code_len": 173,
        "target_code": "        self.logger().info(f\"Wrapping {amount} ether from wallet address {self.address}.\")\n        return self.execute_transaction(contract_func, value=int(amount * 10**18))\n\n",
        "target_code_len": 175,
        "diff_format": "@@ -610,3 +610,3 @@\n         self.logger().info(f\"Wrapping {amount} ether from wallet address {self.address}.\")\n-        return self.execute_transaction(contract_func, value=int(amount * 1e18))\n+        return self.execute_transaction(contract_func, value=int(amount * 10**18))\n \n",
        "source_code_with_indent": "        self.logger().info(f\"Wrapping {amount} ether from wallet address {self.address}.\")\n        return self.execute_transaction(contract_func, value=int(amount * 1e18))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.logger().info(f\"Wrapping {amount} ether from wallet address {self.address}.\")\n        return self.execute_transaction(contract_func, value=int(amount * 10**18))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hummingbot/hummingbot",
    "commit": "9903a7de36dc30920640bf29085de69a74afde33",
    "filename": "hummingbot/wallet/ethereum/web3_wallet_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hummingbot-hummingbot/hummingbot/wallet/ethereum/web3_wallet_backend.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hummingbot/wallet/ethereum/web3_wallet_backend.py:617:73 Unsupported operand [58]: `*` is not supported for operand types `Decimal` and `float`.",
    "message": " `*` is not supported for operand types `Decimal` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 617,
    "warning_line": "        contract_func = self._weth_token.contract.functions.withdraw(int(amount * 1e18))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        contract_func = self._weth_token.contract.functions.withdraw(int(amount * 1e18))\n        self.logger().info(f\"Unwrapping {amount} ether from wallet address {self.address}.\")\n",
        "source_code_len": 183,
        "target_code": "\n        contract_func = self._weth_token.contract.functions.withdraw(int(amount * 10**18))\n        self.logger().info(f\"Unwrapping {amount} ether from wallet address {self.address}.\")\n",
        "target_code_len": 185,
        "diff_format": "@@ -616,3 +616,3 @@\n \n-        contract_func = self._weth_token.contract.functions.withdraw(int(amount * 1e18))\n+        contract_func = self._weth_token.contract.functions.withdraw(int(amount * 10**18))\n         self.logger().info(f\"Unwrapping {amount} ether from wallet address {self.address}.\")\n",
        "source_code_with_indent": "\n        <DED>contract_func = self._weth_token.contract.functions.withdraw(int(amount * 1e18))\n        self.logger().info(f\"Unwrapping {amount} ether from wallet address {self.address}.\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>contract_func = self._weth_token.contract.functions.withdraw(int(amount * 10**18))\n        self.logger().info(f\"Unwrapping {amount} ether from wallet address {self.address}.\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]