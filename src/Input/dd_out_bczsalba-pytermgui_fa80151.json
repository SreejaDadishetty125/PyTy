[
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/inspector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/inspector.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/inspector.py:142:13 Unsupported operand [58]: `|` is not supported for operand types `typing.Dict[str, typing.Callable[[int, str], str]]` and `typing.Dict[str, typing.Callable[[int, str], str]]`.",
    "message": " `|` is not supported for operand types `typing.Dict[str, typing.Callable[[int, str], str]]` and `typing.Dict[str, typing.Callable[[int, str], str]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 142,
    "warning_line": "    styles = Container.styles | {"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/base.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/base.py:63:4 Incompatible return type [7]: Expected `None` but got `Union[Type[Widget], Widget]`.",
    "message": " Expected `None` but got `Union[Type[Widget], Widget]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 63,
    "warning_line": "    return obj_or_cls",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: StyleType\n) -> None:\n    \"\"\"Set the style of an object or class\"\"\"\n",
        "source_code_len": 129,
        "target_code": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: StyleType\n) -> Union[Type[Widget], Widget]:\n    \"\"\"Set the style of an object or class\"\"\"\n",
        "target_code_len": 152,
        "diff_format": "@@ -51,3 +51,3 @@\n     obj_or_cls: Union[Type[Widget], Widget], key: str, value: StyleType\n-) -> None:\n+) -> Union[Type[Widget], Widget]:\n     \"\"\"Set the style of an object or class\"\"\"\n",
        "source_code_with_indent": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: StyleType\n) -> None:\n    <IND>\"\"\"Set the style of an object or class\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: StyleType\n) -> Union[Type[Widget], Widget]:\n    <IND>\"\"\"Set the style of an object or class\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/base.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/base.py:76:4 Incompatible return type [7]: Expected `None` but got `Union[Type[Widget], Widget]`.",
    "message": " Expected `None` but got `Union[Type[Widget], Widget]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 76,
    "warning_line": "    return obj_or_cls",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: CharType\n) -> None:\n    \"\"\"Set a char of an object or class\"\"\"\n",
        "source_code_len": 125,
        "target_code": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: CharType\n) -> Union[Type[Widget], Widget]:\n    \"\"\"Set a char of an object or class\"\"\"\n",
        "target_code_len": 148,
        "diff_format": "@@ -67,3 +67,3 @@\n     obj_or_cls: Union[Type[Widget], Widget], key: str, value: CharType\n-) -> None:\n+) -> Union[Type[Widget], Widget]:\n     \"\"\"Set a char of an object or class\"\"\"\n",
        "source_code_with_indent": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: CharType\n) -> None:\n    <IND>\"\"\"Set a char of an object or class\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    obj_or_cls: Union[Type[Widget], Widget], key: str, value: CharType\n) -> Union[Type[Widget], Widget]:\n    <IND>\"\"\"Set a char of an object or class\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/buttons.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/buttons.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/buttons.py:86:25 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Button.__init__` but got `typing.Union[typing.List[str], str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Button.__init__` but got `typing.Union[typing.List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 86,
    "warning_line": "        super().__init__(self.get_char(\"unchecked\"), onclick=self.toggle, **attrs)"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/buttons.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/buttons.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/buttons.py:88:8 Incompatible attribute type [8]: Attribute `callback` declared in class `Checkbox` has type `typing.Callable[[bool], typing.Any]` but is used as type `None`.",
    "message": " Attribute `callback` declared in class `Checkbox` has type `typing.Callable[[bool], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 88,
    "warning_line": "        self.callback = None"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/buttons.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/buttons.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/buttons.py:106:12 Incompatible attribute type [8]: Attribute `label` declared in class `Button` has type `str` but is used as type `typing.Union[typing.List[str], str]`.",
    "message": " Attribute `label` declared in class `Button` has type `str` but is used as type `typing.Union[typing.List[str], str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 106,
    "warning_line": "            self.label = self.get_char(\"checked\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.checked ^= True\n        if self.checked:\n            self.label = self.get_char(\"checked\")\n        else:\n            self.label = self.get_char(\"unchecked\")\n\n",
        "source_code_len": 171,
        "target_code": "        self.checked ^= True\n\n        checked = self.get_char(\"checked\")\n        unchecked = self.get_char(\"unchecked\")\n        assert isinstance(checked, str) and isinstance(unchecked, str)\n\n        if self.checked:\n            self.label = checked\n        else:\n            self.label = unchecked\n\n",
        "target_code_len": 300,
        "diff_format": "@@ -104,6 +107,11 @@\n         self.checked ^= True\n+\n+        checked = self.get_char(\"checked\")\n+        unchecked = self.get_char(\"unchecked\")\n+        assert isinstance(checked, str) and isinstance(unchecked, str)\n+\n         if self.checked:\n-            self.label = self.get_char(\"checked\")\n+            self.label = checked\n         else:\n-            self.label = self.get_char(\"unchecked\")\n+            self.label = unchecked\n \n",
        "source_code_with_indent": "        self.checked ^= True\n        if self.checked:\n            <IND>self.label = self.get_char(\"checked\")\n        <DED>else:\n            <IND>self.label = self.get_char(\"unchecked\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.checked ^= True\n\n        checked = self.get_char(\"checked\")\n        unchecked = self.get_char(\"unchecked\")\n        assert isinstance(checked, str) and isinstance(unchecked, str)\n\n        if self.checked:\n            <IND>self.label = checked\n        <DED>else:\n            <IND>self.label = unchecked\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/buttons.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/buttons.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/buttons.py:108:12 Incompatible attribute type [8]: Attribute `label` declared in class `Button` has type `str` but is used as type `typing.Union[typing.List[str], str]`.",
    "message": " Attribute `label` declared in class `Button` has type `str` but is used as type `typing.Union[typing.List[str], str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 108,
    "warning_line": "            self.label = self.get_char(\"unchecked\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.checked ^= True\n        if self.checked:\n            self.label = self.get_char(\"checked\")\n        else:\n            self.label = self.get_char(\"unchecked\")\n\n",
        "source_code_len": 171,
        "target_code": "        self.checked ^= True\n\n        checked = self.get_char(\"checked\")\n        unchecked = self.get_char(\"unchecked\")\n        assert isinstance(checked, str) and isinstance(unchecked, str)\n\n        if self.checked:\n            self.label = checked\n        else:\n            self.label = unchecked\n\n",
        "target_code_len": 300,
        "diff_format": "@@ -104,6 +107,11 @@\n         self.checked ^= True\n+\n+        checked = self.get_char(\"checked\")\n+        unchecked = self.get_char(\"unchecked\")\n+        assert isinstance(checked, str) and isinstance(unchecked, str)\n+\n         if self.checked:\n-            self.label = self.get_char(\"checked\")\n+            self.label = checked\n         else:\n-            self.label = self.get_char(\"unchecked\")\n+            self.label = unchecked\n \n",
        "source_code_with_indent": "        self.checked ^= True\n        if self.checked:\n            <IND>self.label = self.get_char(\"checked\")\n        <DED>else:\n            <IND>self.label = self.get_char(\"unchecked\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.checked ^= True\n\n        checked = self.get_char(\"checked\")\n        unchecked = self.get_char(\"unchecked\")\n        assert isinstance(checked, str) and isinstance(unchecked, str)\n\n        if self.checked:\n            <IND>self.label = checked\n        <DED>else:\n            <IND>self.label = unchecked\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/buttons.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/buttons.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/buttons.py:136:26 Incompatible parameter type [6]: Expected `bool` for 1st positional only parameter to anonymous call but got `str`.",
    "message": " Expected `bool` for 1st positional only parameter to anonymous call but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 136,
    "warning_line": "            self.callback(self.label)"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/widgets/buttons.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/buttons.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/buttons.py:145:58 Incompatible parameter type [6]: Expected `Widget` for 1st positional only parameter to call `Widget.get_style` but got `typing.Type[Button]`.",
    "message": " Expected `Widget` for 1st positional only parameter to call `Widget.get_style` but got `typing.Type[Button]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "    styles = Container.styles | {\"item\": Button.get_style(Button, \"label\").method}"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:353:12 Incompatible return type [7]: Expected `Optional[int]` but got `Edge`.",
    "message": " Expected `Optional[int]` but got `Edge`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 353,
    "warning_line": "            return Edge.LEFT",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_len": 134,
        "target_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_len": 135,
        "diff_format": "@@ -314,3 +321,3 @@\n         self._drag_target: Optional[Window] = None\n-        self._drag_edge: Optional[int] = None\n+        self._drag_edge: Optional[Edge] = None\n         self._drag_offset_x: int = 0\n",
        "source_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_len": 147,
        "target_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_len": 148,
        "diff_format": "@@ -346,3 +353,3 @@\n     @staticmethod\n-    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n+    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n         \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:356:12 Incompatible return type [7]: Expected `Optional[int]` but got `Edge`.",
    "message": " Expected `Optional[int]` but got `Edge`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 356,
    "warning_line": "            return Edge.RIGHT",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_len": 134,
        "target_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_len": 135,
        "diff_format": "@@ -314,3 +321,3 @@\n         self._drag_target: Optional[Window] = None\n-        self._drag_edge: Optional[int] = None\n+        self._drag_edge: Optional[Edge] = None\n         self._drag_offset_x: int = 0\n",
        "source_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_len": 147,
        "target_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_len": 148,
        "diff_format": "@@ -346,3 +353,3 @@\n     @staticmethod\n-    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n+    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n         \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:359:12 Incompatible return type [7]: Expected `Optional[int]` but got `Edge`.",
    "message": " Expected `Optional[int]` but got `Edge`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 359,
    "warning_line": "            return Edge.TOP",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_len": 134,
        "target_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_len": 135,
        "diff_format": "@@ -314,3 +321,3 @@\n         self._drag_target: Optional[Window] = None\n-        self._drag_edge: Optional[int] = None\n+        self._drag_edge: Optional[Edge] = None\n         self._drag_offset_x: int = 0\n",
        "source_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_len": 147,
        "target_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_len": 148,
        "diff_format": "@@ -346,3 +353,3 @@\n     @staticmethod\n-    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n+    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n         \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:362:12 Incompatible return type [7]: Expected `Optional[int]` but got `Edge`.",
    "message": " Expected `Optional[int]` but got `Edge`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 362,
    "warning_line": "            return Edge.BOTTOM",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_len": 134,
        "target_code": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_len": 135,
        "diff_format": "@@ -314,3 +321,3 @@\n         self._drag_target: Optional[Window] = None\n-        self._drag_edge: Optional[int] = None\n+        self._drag_edge: Optional[Edge] = None\n         self._drag_offset_x: int = 0\n",
        "source_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[int] = None\n        self._drag_offset_x: int = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._drag_target: Optional[Window] = None\n        self._drag_edge: Optional[Edge] = None\n        self._drag_offset_x: int = 0\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_len": 147,
        "target_code": "    @staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_len": 148,
        "diff_format": "@@ -346,3 +353,3 @@\n     @staticmethod\n-    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n+    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n         \"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[int]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _get_edge(window: Window, pos: tuple[int, int]) -> Optional[Edge]:\n        <IND>\"\"\"Get which edge mouse input overlaps with\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:527:12 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 527,
    "warning_line": "            return True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def run(self) -> None:\n",
        "source_code_len": 28,
        "target_code": "\n        return True\n\n    def run(self) -> None:\n",
        "target_code_len": 49,
        "diff_format": "@@ -528,2 +535,4 @@\n \n+        return True\n+\n     def run(self) -> None:\n",
        "source_code_with_indent": "\n    <DED><DED>def run(self) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return True\n\n    <DED>def run(self) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "fa8015128e76b039757a8c0ff9950e0c9e1b055d",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:634:17 Incompatible parameter type [6]: Expected `Window` for 1st positional only parameter to call `WindowManager.add` but got `pytermgui.widgets.base.Container`.",
    "message": " Expected `Window` for 1st positional only parameter to call `WindowManager.add` but got `pytermgui.widgets.base.Container`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 634,
    "warning_line": "        self.add(window)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from enum import Enum, auto as _auto\nfrom typing import Optional, Callable, Any\n\n",
        "source_code_len": 81,
        "target_code": "from enum import Enum, auto as _auto\nfrom typing import Optional, Callable, Any, cast\n\n# https://github.com/python/mypy/issues/4930\nfrom .widgets.base import Container\n\n",
        "target_code_len": 169,
        "diff_format": "@@ -37,3 +37,6 @@\n from enum import Enum, auto as _auto\n-from typing import Optional, Callable, Any\n+from typing import Optional, Callable, Any, cast\n+\n+# https://github.com/python/mypy/issues/4930\n+from .widgets.base import Container\n \n",
        "source_code_with_indent": "from enum import Enum, auto as _auto\nfrom typing import Optional, Callable, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from enum import Enum, auto as _auto\nfrom typing import Optional, Callable, Any, cast\n\n# https://github.com/python/mypy/issues/4930\nfrom .widgets.base import Container\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        window = (\n            Window(width=50, resizable=False, modal=True)\n            + \"[wm-title]Alert!\"\n            + \"\"\n            + f\"[wm-section]Detail[/]: {str(detail)}\"\n            + \"\"\n            + [\"Dismiss\", lambda *_: window.close()]\n        ).center()\n\n",
        "source_code_len": 272,
        "target_code": "\n        window: Window\n\n        window = cast(\n            Window,\n            (\n                Window(width=50, resizable=False, modal=True)\n                + \"[wm-title]Alert!\"\n                + \"\"\n                + f\"[wm-section]Detail[/]: {str(detail)}\"\n                + \"\"\n                + [\"Dismiss\", lambda *_: window.close()]\n            ).center(),\n        )\n\n",
        "target_code_len": 373,
        "diff_format": "@@ -624,10 +633,15 @@\n \n-        window = (\n-            Window(width=50, resizable=False, modal=True)\n-            + \"[wm-title]Alert!\"\n-            + \"\"\n-            + f\"[wm-section]Detail[/]: {str(detail)}\"\n-            + \"\"\n-            + [\"Dismiss\", lambda *_: window.close()]\n-        ).center()\n+        window: Window\n+\n+        window = cast(\n+            Window,\n+            (\n+                Window(width=50, resizable=False, modal=True)\n+                + \"[wm-title]Alert!\"\n+                + \"\"\n+                + f\"[wm-section]Detail[/]: {str(detail)}\"\n+                + \"\"\n+                + [\"Dismiss\", lambda *_: window.close()]\n+            ).center(),\n+        )\n \n",
        "source_code_with_indent": "\n        window = (\n            Window(width=50, resizable=False, modal=True)\n            + \"[wm-title]Alert!\"\n            + \"\"\n            + f\"[wm-section]Detail[/]: {str(detail)}\"\n            + \"\"\n            + [\"Dismiss\", lambda *_: window.close()]\n        ).center()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        window: Window\n\n        window = cast(\n            Window,\n            (\n                Window(width=50, resizable=False, modal=True)\n                + \"[wm-title]Alert!\"\n                + \"\"\n                + f\"[wm-section]Detail[/]: {str(detail)}\"\n                + \"\"\n                + [\"Dismiss\", lambda *_: window.close()]\n            ).center(),\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]