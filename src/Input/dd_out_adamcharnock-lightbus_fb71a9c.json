[
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:80:8 Incompatible return type [7]: Expected `Union[Variable[H], Variable[V]]` but got `datetime.date`.",
    "message": " Expected `Union[Variable[H], Variable[V]]` but got `datetime.date`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 80,
    "warning_line": "        return dateutil.parser.parse(value).date()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Date as a string\n        return dateutil.parser.parse(value).date()\n    elif is_class and issubclass_safe(hint_type, list):\n",
        "source_code_len": 134,
        "target_code": "        # Date as a string\n        return cast_or_warning(lambda v: dateutil.parser.parse(v).date(), value)\n    elif is_class and issubclass_safe(hint_type, list):\n",
        "target_code_len": 164,
        "diff_format": "@@ -79,3 +79,3 @@\n         # Date as a string\n-        return dateutil.parser.parse(value).date()\n+        return cast_or_warning(lambda v: dateutil.parser.parse(v).date(), value)\n     elif is_class and issubclass_safe(hint_type, list):\n",
        "source_code_with_indent": "        # Date as a string\n        <IND>return dateutil.parser.parse(value).date()\n    <DED>elif is_class and issubclass_safe(hint_type, list):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Date as a string\n        <IND>return cast_or_warning(lambda v: dateutil.parser.parse(v).date(), value)\n    <DED>elif is_class and issubclass_safe(hint_type, list):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:80:37 Incompatible parameter type [6]: Expected `Union[typing.IO[typing.Any], typing.IO[str], bytes, str]` for 1st positional only parameter to call `dateutil.parser.parse` but got `Variable[V]`.",
    "message": " Expected `Union[typing.IO[typing.Any], typing.IO[str], bytes, str]` for 1st positional only parameter to call `dateutil.parser.parse` but got `Variable[V]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 80,
    "warning_line": "        return dateutil.parser.parse(value).date()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Date as a string\n        return dateutil.parser.parse(value).date()\n    elif is_class and issubclass_safe(hint_type, list):\n",
        "source_code_len": 134,
        "target_code": "        # Date as a string\n        return cast_or_warning(lambda v: dateutil.parser.parse(v).date(), value)\n    elif is_class and issubclass_safe(hint_type, list):\n",
        "target_code_len": 164,
        "diff_format": "@@ -79,3 +79,3 @@\n         # Date as a string\n-        return dateutil.parser.parse(value).date()\n+        return cast_or_warning(lambda v: dateutil.parser.parse(v).date(), value)\n     elif is_class and issubclass_safe(hint_type, list):\n",
        "source_code_with_indent": "        # Date as a string\n        <IND>return dateutil.parser.parse(value).date()\n    <DED>elif is_class and issubclass_safe(hint_type, list):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Date as a string\n        <IND>return cast_or_warning(lambda v: dateutil.parser.parse(v).date(), value)\n    <DED>elif is_class and issubclass_safe(hint_type, list):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:86:12 Incompatible return type [7]: Expected `Union[Variable[H], Variable[V]]` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `Union[Variable[H], Variable[V]]` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 86,
    "warning_line": "            return list(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return list(value)\n    elif is_class and issubclass_safe(hint_type, tuple):\n",
        "source_code_len": 102,
        "target_code": "        else:\n            return cast_or_warning(list, value)\n    elif is_class and issubclass_safe(hint_type, tuple):\n",
        "target_code_len": 119,
        "diff_format": "@@ -85,3 +85,3 @@\n         else:\n-            return list(value)\n+            return cast_or_warning(list, value)\n     elif is_class and issubclass_safe(hint_type, tuple):\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return list(value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, tuple):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return cast_or_warning(list, value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, tuple):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:86:24 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `Variable[V]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `Variable[V]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 86,
    "warning_line": "            return list(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return list(value)\n    elif is_class and issubclass_safe(hint_type, tuple):\n",
        "source_code_len": 102,
        "target_code": "        else:\n            return cast_or_warning(list, value)\n    elif is_class and issubclass_safe(hint_type, tuple):\n",
        "target_code_len": 119,
        "diff_format": "@@ -85,3 +85,3 @@\n         else:\n-            return list(value)\n+            return cast_or_warning(list, value)\n     elif is_class and issubclass_safe(hint_type, tuple):\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return list(value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, tuple):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return cast_or_warning(list, value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, tuple):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:92:12 Incompatible return type [7]: Expected `Union[Variable[H], Variable[V]]` but got `typing.Tuple[Variable[_T_co](covariant), ...]`.",
    "message": " Expected `Union[Variable[H], Variable[V]]` but got `typing.Tuple[Variable[_T_co](covariant), ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 92,
    "warning_line": "            return tuple(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return tuple(value)\n    elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        if hint_args:\n",
        "source_code_len": 138,
        "target_code": "        else:\n            return cast_or_warning(tuple, value)\n    elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        # TODO: Casting non-iterables\n        if hint_args:\n",
        "target_code_len": 193,
        "diff_format": "@@ -91,5 +91,6 @@\n         else:\n-            return tuple(value)\n+            return cast_or_warning(tuple, value)\n     elif is_class and issubclass_safe(hint_type, set):\n         # Sets\n+        # TODO: Casting non-iterables\n         if hint_args:\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return tuple(value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        <IND>if hint_args:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return cast_or_warning(tuple, value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        # TODO: Casting non-iterables\n        <IND>if hint_args:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:92:25 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Variable[V]`.",
    "message": " Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Variable[V]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 92,
    "warning_line": "            return tuple(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return tuple(value)\n    elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        if hint_args:\n",
        "source_code_len": 138,
        "target_code": "        else:\n            return cast_or_warning(tuple, value)\n    elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        # TODO: Casting non-iterables\n        if hint_args:\n",
        "target_code_len": 193,
        "diff_format": "@@ -91,5 +91,6 @@\n         else:\n-            return tuple(value)\n+            return cast_or_warning(tuple, value)\n     elif is_class and issubclass_safe(hint_type, set):\n         # Sets\n+        # TODO: Casting non-iterables\n         if hint_args:\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return tuple(value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        <IND>if hint_args:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return cast_or_warning(tuple, value)\n    <DED><DED>elif is_class and issubclass_safe(hint_type, set):\n        # Sets\n        # TODO: Casting non-iterables\n        <IND>if hint_args:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:98:12 Incompatible return type [7]: Expected `Union[Variable[H], Variable[V]]` but got `typing.Set[Variable[_T]]`.",
    "message": " Expected `Union[Variable[H], Variable[V]]` but got `typing.Set[Variable[_T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 98,
    "warning_line": "            return set(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return set(value)\n    elif (\n",
        "source_code_len": 55,
        "target_code": "        else:\n            return cast_or_warning(set, value)\n    elif (\n",
        "target_code_len": 72,
        "diff_format": "@@ -97,3 +98,3 @@\n         else:\n-            return set(value)\n+            return cast_or_warning(set, value)\n     elif (\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return set(value)\n    <DED><DED>elif (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return cast_or_warning(set, value)\n    <DED><DED>elif (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:98:23 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Variable[V]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Variable[V]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 98,
    "warning_line": "            return set(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return set(value)\n    elif (\n",
        "source_code_len": 55,
        "target_code": "        else:\n            return cast_or_warning(set, value)\n    elif (\n",
        "target_code_len": 72,
        "diff_format": "@@ -97,3 +98,3 @@\n         else:\n-            return set(value)\n+            return cast_or_warning(set, value)\n     elif (\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return set(value)\n    <DED><DED>elif (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return cast_or_warning(set, value)\n    <DED><DED>elif (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adamcharnock/lightbus",
    "commit": "fb71a9c8b8ce5a6471a2627906dfc830b6c55bd5",
    "filename": "lightbus/utilities/casting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adamcharnock-lightbus/lightbus/utilities/casting.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lightbus/utilities/casting.py:113:19 Call error [29]: `Union[Type[typing.Any], Variable[H]]` is not a function.",
    "message": " `Union[Type[typing.Any], Variable[H]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 113,
    "warning_line": "            return hint(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        try:\n            return hint(value)\n        except Exception as e:\n            logger.warning(\n                f\"Failed to cast value {repr(value)} to type {hint}. Will \"\n                f\"continue without casting, but this may cause errors in any \"\n                f\"called code. Error was: {e}\"\n            )\n            return value\n\n",
        "source_code_len": 355,
        "target_code": "    else:\n        return cast_or_warning(hint, value)\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -111,11 +112,3 @@\n     else:\n-        try:\n-            return hint(value)\n-        except Exception as e:\n-            logger.warning(\n-                f\"Failed to cast value {repr(value)} to type {hint}. Will \"\n-                f\"continue without casting, but this may cause errors in any \"\n-                f\"called code. Error was: {e}\"\n-            )\n-            return value\n+        return cast_or_warning(hint, value)\n \n",
        "source_code_with_indent": "    <DED>else:\n        <IND>try:\n            <IND>return hint(value)\n        <DED>except Exception as e:\n            <IND>logger.warning(\n                f\"Failed to cast value {repr(value)} to type {hint}. Will \"\n                f\"continue without casting, but this may cause errors in any \"\n                f\"called code. Error was: {e}\"\n            )\n            return value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>return cast_or_warning(hint, value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return instantiator(parameters)\n",
        "source_code_len": 40,
        "target_code": "        return instantiator(parameters)\n\n\ndef cast_or_warning(type_, value):\n    try:\n        return type_(value)\n    except Exception as e:\n        logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_len": 387,
        "diff_format": "@@ -177,1 +170,13 @@\n         return instantiator(parameters)\n+\n+\n+def cast_or_warning(type_, value):\n+    try:\n+        return type_(value)\n+    except Exception as e:\n+        logger.warning(\n+            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n+            f\"continue without casting, but this may cause errors in any \"\n+            f\"called code. Error was: {e}\"\n+        )\n+        return value\n",
        "source_code_with_indent": "        <IND>return instantiator(parameters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return instantiator(parameters)\n\n\n<DED><DED>def cast_or_warning(type_, value):\n    <IND>try:\n        <IND>return type_(value)\n    <DED>except Exception as e:\n        <IND>logger.warning(\n            f\"Failed to cast value {repr(value)} to type {type_}. Will \"\n            f\"continue without casting, but this may cause errors in any \"\n            f\"called code. Error was: {e}\"\n        )\n        return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]