[
  {
    "project": "jwkvam/bowtie",
    "commit": "7027d517db0e9e3bb074d3928bf2d81dc6914e40",
    "filename": "bowtie/auth.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/auth.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/auth.py:88:44 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `BasicAuth._check_auth` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `BasicAuth._check_auth` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        if not auth or not self._check_auth(auth.username, auth.password):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        auth = request.authorization\n        if not auth or not self._check_auth(auth.username, auth.password):\n            return Response(\n",
        "source_code_len": 141,
        "target_code": "        auth = request.authorization\n        if (not auth or auth.username is None or auth.password is None\n                or not self._check_auth(auth.username, auth.password)):\n            return Response(\n",
        "target_code_len": 209,
        "diff_format": "@@ -87,3 +87,4 @@\n         auth = request.authorization\n-        if not auth or not self._check_auth(auth.username, auth.password):\n+        if (not auth or auth.username is None or auth.password is None\n+                or not self._check_auth(auth.username, auth.password)):\n             return Response(\n",
        "source_code_with_indent": "        auth = request.authorization\n        if not auth or not self._check_auth(auth.username, auth.password):\n            <IND>return Response(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        auth = request.authorization\n        if (not auth or auth.username is None or auth.password is None\n                or not self._check_auth(auth.username, auth.password)):\n            <IND>return Response(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jwkvam/bowtie",
    "commit": "7027d517db0e9e3bb074d3928bf2d81dc6914e40",
    "filename": "bowtie/auth.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/auth.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/auth.py:88:59 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `BasicAuth._check_auth` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `BasicAuth._check_auth` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        if not auth or not self._check_auth(auth.username, auth.password):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        auth = request.authorization\n        if not auth or not self._check_auth(auth.username, auth.password):\n            return Response(\n",
        "source_code_len": 141,
        "target_code": "        auth = request.authorization\n        if (not auth or auth.username is None or auth.password is None\n                or not self._check_auth(auth.username, auth.password)):\n            return Response(\n",
        "target_code_len": 209,
        "diff_format": "@@ -87,3 +87,4 @@\n         auth = request.authorization\n-        if not auth or not self._check_auth(auth.username, auth.password):\n+        if (not auth or auth.username is None or auth.password is None\n+                or not self._check_auth(auth.username, auth.password)):\n             return Response(\n",
        "source_code_with_indent": "        auth = request.authorization\n        if not auth or not self._check_auth(auth.username, auth.password):\n            <IND>return Response(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        auth = request.authorization\n        if (not auth or auth.username is None or auth.password is None\n                or not self._check_auth(auth.username, auth.password)):\n            <IND>return Response(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]