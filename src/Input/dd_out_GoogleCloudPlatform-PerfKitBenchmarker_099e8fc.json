[
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "099e8fcc45c2590aece48c9e8a44bc8acfcda979",
    "filename": "perfkitbenchmarker/edw_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/edw_service.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/edw_service.py:176:48 Invalid type [31]: Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 176,
    "warning_line": "      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_len": 186,
        "target_code": "\n  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "target_code_len": 144,
        "diff_format": "@@ -173,5 +173,3 @@\n \n-  def ExecuteThroughput(\n-      self,\n-      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n+  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n     \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "099e8fcc45c2590aece48c9e8a44bc8acfcda979",
    "filename": "perfkitbenchmarker/providers/aws/redshift.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/aws/redshift.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/aws/redshift.py:257:48 Invalid type [31]: Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 257,
    "warning_line": "      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_len": 186,
        "target_code": "\n  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "target_code_len": 144,
        "diff_format": "@@ -254,5 +254,3 @@\n \n-  def ExecuteThroughput(\n-      self,\n-      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n+  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n     \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "099e8fcc45c2590aece48c9e8a44bc8acfcda979",
    "filename": "perfkitbenchmarker/providers/aws/snowflake.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/aws/snowflake.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/aws/snowflake.py:126:48 Invalid type [31]: Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 126,
    "warning_line": "      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_len": 186,
        "target_code": "\n  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "target_code_len": 144,
        "diff_format": "@@ -123,5 +123,3 @@\n \n-  def ExecuteThroughput(\n-      self,\n-      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n+  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n     \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "099e8fcc45c2590aece48c9e8a44bc8acfcda979",
    "filename": "perfkitbenchmarker/providers/azure/azure_sql_data_warehouse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/azure/azure_sql_data_warehouse.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/azure/azure_sql_data_warehouse.py:227:2 Inconsistent override [15]: `perfkitbenchmarker.providers.azure.azure_sql_data_warehouse.JdbcClientInterface.ExecuteSimultaneous` overrides method defined in `edw_service.EdwClientInterface` inconsistently. Returned type `str` is not a subtype of the overridden return `Dict[str, typing.Any]`.",
    "message": " `perfkitbenchmarker.providers.azure.azure_sql_data_warehouse.JdbcClientInterface.ExecuteSimultaneous` overrides method defined in `edw_service.EdwClientInterface` inconsistently. Returned type `str` is not a subtype of the overridden return `Dict[str, typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 227,
    "warning_line": "  def ExecuteSimultaneous(self, submission_interval: int,"
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "099e8fcc45c2590aece48c9e8a44bc8acfcda979",
    "filename": "perfkitbenchmarker/providers/gcp/bigquery.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/gcp/bigquery.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/gcp/bigquery.py:300:48 Invalid type [31]: Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(typing.Dict[(str, typing.Any)], typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 300,
    "warning_line": "      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_len": 186,
        "target_code": "\n  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    \"\"\"Executes a throughput test and returns performance details.\n",
        "target_code_len": 144,
        "diff_format": "@@ -297,5 +297,3 @@\n \n-  def ExecuteThroughput(\n-      self,\n-      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n+  def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n     \"\"\"Executes a throughput test and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteThroughput(\n      self,\n      concurrency_streams: List[List[str]]) -> (Dict[str, Any], Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteThroughput(self, concurrency_streams: List[List[str]]) -> str:\n    <IND>"
      }
    ]
  }
]