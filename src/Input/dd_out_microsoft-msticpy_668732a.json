[
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:40:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:297:8 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 297,
    "warning_line": "        src_entity: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:298:8 Incompatible variable type [9]: src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 298,
    "warning_line": "        src_event: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:438:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 438,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:495:8 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 495,
    "warning_line": "        src_entity: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:496:8 Incompatible variable type [9]: src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 496,
    "warning_line": "        src_event: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:563:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 563,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:612:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 612,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:682:8 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 682,
    "warning_line": "        src_entity: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:683:8 Incompatible variable type [9]: src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 683,
    "warning_line": "        src_event: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:787:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 787,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:862:8 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 862,
    "warning_line": "        src_entity: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:863:8 Incompatible variable type [9]: src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 863,
    "warning_line": "        src_event: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:953:8 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 953,
    "warning_line": "        src_entity: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:954:8 Incompatible variable type [9]: src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 954,
    "warning_line": "        src_event: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1029:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1029,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1092:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1092,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1150:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1150,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1227:8 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1227,
    "warning_line": "        src_entity: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1228:8 Incompatible variable type [9]: src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_event is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1228,
    "warning_line": "        src_event: Mapping[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1403:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1403,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1454:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1454,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1532:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1532,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1598:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1598,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1670:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1670,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/entityschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/entityschema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/entityschema.py:1700:23 Incompatible variable type [9]: src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " src_entity is declared to have type `Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1700,
    "warning_line": "    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    \"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            self[\"AdditionalData\"] = {}\n\n        if src_entity is not None:\n            self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        if kwargs:\n            self.__dict__.update(kwargs)\n\n    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        \"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            if k not in src_entity:\n                continue\n            self[k] = src_entity[k]\n\n            if v is not None:\n                try:\n                    # If the property is an enum\n                    if v in _ENTITY_ENUMS:\n                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                except KeyError:\n                    # Catch key errors from invalid enum values\n                    self[k] = None\n\n                if isinstance(v, tuple):\n                    # if the property is a collection\n                    entity_list = []\n                    for col_entity in src_entity[k]:\n                        entity_list.append(Entity.instantiate_entity(col_entity))\n                    self[k] = entity_list\n                else:\n                    # else try to instantiate an entity\n                    self[k] = Entity.instantiate_entity(src_entity[k])\n\n    def __getitem__(self, key: str):\n        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            return self.__dict__[key]\n        if key in self._entity_schema:\n            return None\n        raise KeyError\n\n    def __setitem__(self, key: str, value: Any):\n        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    def __contains__(self, key: str):\n        \"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    def __getattr__(self, name: str):\n        \"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            return None\n        raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    def __iter__(self):\n        \"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    def __len__(self) -> int:\n        \"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    def __str__(self) -> str:\n        \"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    def __repr__(self) -> str:\n        \"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            params = params[:80] + \"...\"\n        return f\"{self.__class__.__name__}({params})\"\n\n    def _to_dict(self, entity) -> dict:\n        \"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            if val is not None:\n                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        return ent_dict\n\n    def _repr_html_(self) -> str:\n        \"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    def to_html(self) -> str:\n        \"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    @property\n    def properties(self) -> dict:\n        \"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    @property\n    @abstractmethod\n    def description_str(self) -> str:\n        \"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    @classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        \"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            return raw_entity\n\n        entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n@export\nclass Account(Entity):\n    \"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            if role == \"subject\" and \"SubjectUserName\" in src_event:\n                self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            if role == \"target\" and \"TargetUserName\" in src_event:\n                self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    @property\n    def qualified_name(self) -> str:\n        \"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            return \"\"\n        name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            return \"{}\\\\{}\".format(self.NTDomain, name)\n        if \"UPNSuffix\" in self and self.UPNSuffix:\n            return \"{}@{}\".format(name, self.UPNSuffix)\n        if \"Host\" in self and self.Host:\n            return \"{}\\\\{}\".format(self.Host.HostName, name)\n        return name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n@export\nclass SecurityGroup(Entity):\n    \"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self):\n        \"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    _entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n@export\nclass HostLogonSession(Entity):\n    \"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if \"TimeCreatedUtc\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            elif \"TimeGenerated\" in src_event:\n                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    _entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n@export\nclass CloudApplication(Entity):\n    \"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n@export\nclass DnsResolve(Entity):\n    \"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    _entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n@export\nclass File(Entity):\n    \"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            if role == \"new\" and \"NewProcessName\" in src_event:\n                self._add_paths(src_event[\"NewProcessName\"])\n            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                self._add_paths(src_event[\"ParentProcessName\"])\n\n        if \"FullPath\" not in self:\n            file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    @property\n    def path_separator(self):\n        \"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            return \"/\"\n        return \"\\\\\"\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    _entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        if \"/\" in full_path:\n            self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        else:\n            self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n@export\nclass FileHash(Entity):\n    \"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    _entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n@export\nclass Algorithm(Enum):\n    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    \"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            else:\n                self.HostName = src_event[\"Computer\"]\n            self.NetBiosName = self.HostName\n\n    @property\n    def computer(self) -> str:\n        \"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    @property\n    def fqdn(self) -> str:\n        \"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            return f\"{self.HostName}.{self.DnsDomain}\"\n        return self.HostName\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    _entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n@export\nclass IpAddress(Entity):\n    \"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            self.Address = src_event[\"IpAddress\"]\n\n    @property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    _entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n@export\nclass GeoLocation(Entity):\n    \"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    _entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n@export\nclass Malware(Entity):\n    \"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    _entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n@export\nclass NetworkConnection(Entity):\n    \"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    _entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n@export\nclass Process(Entity):\n    \"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            if role == \"new\":\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                elif \"TimeGenerated\" in src_event:\n                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            else:\n                self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    @property\n    def ProcessName(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    @property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        \"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    _entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n@export\nclass RegistryHive(Enum):\n    \"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    \"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    _entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\nclass RegistryValue(Entity):\n    \"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    _entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n@export\nclass OSFamily(Enum):\n    \"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    \"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    \"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    _entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n@export\nclass Alert(Entity):\n    \"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n@export\nclass Threatintelligence(Entity):\n    \"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    _entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n@export\nclass UnknownEntity(Entity):\n    \"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        \"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    @property\n    def description_str(self) -> str:\n        \"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    _entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\nEntity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_len": 49190,
        "target_code": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_len": 114,
        "diff_format": "@@ -22,1721 +12,3 @@\n \n-\n-_ENTITY_ENUMS: Dict[str, Type] = {}\n-\n-\n-# pylint: disable=too-many-lines, invalid-name\n-# pylint: disable=too-many-instance-attributes\n-@export\n-class Entity(ABC):\n-    \"\"\"\n-    Entity abstract base class.\n-\n-    Implements common methods for Entity classes\n-    \"\"\"\n-\n-    ENTITY_NAME_MAP: Dict[str, type] = {}\n-    _entity_schema: Dict[str, Any] = {}\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of an entity.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            If src_entity is supplied it attempts to extract common\n-            properties from the source entity and assign them to\n-            the new instance. (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        self.Type = type(self).__name__.lower()\n-        # If we have an unknown entity see if we a type passed in\n-        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n-            self.Type = kwargs[\"Type\"]\n-        # Make sure Type is in the class schema dictionary\n-        self._entity_schema[\"Type\"] = None\n-\n-        # if we didn't populate AdditionalData, add an empty dict in case it's\n-        # needed\n-        if \"AdditionalData\" not in self:\n-            self[\"AdditionalData\"] = {}\n-\n-        if src_entity is not None:\n-            self._extract_src_entity(src_entity)\n-            # add AdditionalData dictionary if it's populated\n-            if \"AdditionalData\" in src_entity:\n-                self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n-\n-        if kwargs:\n-            self.__dict__.update(kwargs)\n-\n-    def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n-        \"\"\"\n-        Extract source entity properties.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any]\n-            The source mappable object from which to\n-            extract entity properties.\n-\n-        \"\"\"\n-        schema_dict = dict(**(self._entity_schema))\n-        schema_dict[\"Type\"] = None\n-        for k, v in schema_dict.items():\n-            if k not in src_entity:\n-                continue\n-            self[k] = src_entity[k]\n-\n-            if v is not None:\n-                try:\n-                    # If the property is an enum\n-                    if v in _ENTITY_ENUMS:\n-                        self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n-                        continue\n-                except KeyError:\n-                    # Catch key errors from invalid enum values\n-                    self[k] = None\n-\n-                if isinstance(v, tuple):\n-                    # if the property is a collection\n-                    entity_list = []\n-                    for col_entity in src_entity[k]:\n-                        entity_list.append(Entity.instantiate_entity(col_entity))\n-                    self[k] = entity_list\n-                else:\n-                    # else try to instantiate an entity\n-                    self[k] = Entity.instantiate_entity(src_entity[k])\n-\n-    def __getitem__(self, key: str):\n-        \"\"\"Allow property get using dictionary key syntax.\"\"\"\n-        if key in self.__dict__:\n-            return self.__dict__[key]\n-        if key in self._entity_schema:\n-            return None\n-        raise KeyError\n-\n-    def __setitem__(self, key: str, value: Any):\n-        \"\"\"Allow property set using dictionary key syntax.\"\"\"\n-        self.__dict__[key] = value\n-\n-    def __contains__(self, key: str):\n-        \"\"\"Allow property in test.\"\"\"\n-        # In operator overload\n-        return key in self.__dict__\n-\n-    def __getattr__(self, name: str):\n-        \"\"\"Return the value of the named property 'name'.\"\"\"\n-        if name in self._entity_schema:\n-            return None\n-        raise AttributeError(f\"{name} is not a valid attribute.\")\n-\n-    def __iter__(self):\n-        \"\"\"Iterate over entity_properties.\"\"\"\n-        return iter(self.properties)\n-\n-    def __len__(self) -> int:\n-        \"\"\"Return length/number of entity_properties.\"\"\"\n-        return len(self.properties)\n-\n-    def __str__(self) -> str:\n-        \"\"\"Return string representation of entity.\"\"\"\n-        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n-\n-    def __repr__(self) -> str:\n-        \"\"\"Return repr of entity.\"\"\"\n-        params = \", \".join(\n-            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n-        )\n-        if len(params) > 80:\n-            params = params[:80] + \"...\"\n-        return f\"{self.__class__.__name__}({params})\"\n-\n-    def _to_dict(self, entity) -> dict:\n-        \"\"\"Return as simple nested dictionary.\"\"\"\n-        ent_dict = {}\n-        for prop, val in entity.properties.items():\n-            if val is not None:\n-                ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n-        return ent_dict\n-\n-    def _repr_html_(self) -> str:\n-        \"\"\"\n-        Display entity in IPython/Notebook.\n-\n-        Returns\n-        -------\n-        HTML\n-            IPython HTML object\n-\n-        \"\"\"\n-        return self.to_html()\n-\n-    def to_html(self) -> str:\n-        \"\"\"\n-        Return HTML representation of entity.\n-\n-        Returns\n-        -------\n-        str\n-            HTML representation of entity\n-\n-        \"\"\"\n-        e_text = str(self)\n-        e_type = self.Type\n-        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n-        return f\"<h3>{e_type}</h3>{e_text}\"\n-\n-    @property\n-    def properties(self) -> dict:\n-        \"\"\"\n-        Return dictionary properties of entity.\n-\n-        Returns\n-        -------\n-        dict\n-            Entity properties.\n-\n-        \"\"\"\n-        return {\n-            name: value\n-            for name, value in self.__dict__.items()\n-            if not name.startswith(\"_\")\n-        }\n-\n-    @property\n-    @abstractmethod\n-    def description_str(self) -> str:\n-        \"\"\"\n-        Return Entity Description.\n-\n-        Returns\n-        -------\n-        str\n-            Entity description (optional). If not overridden\n-            by the Entity instance type, it will return the\n-            Type string.\n-\n-        \"\"\"\n-        return self.Type\n-\n-    # pylint: disable=too-many-branches\n-    @classmethod\n-    def instantiate_entity(  # noqa: C901\n-        cls, raw_entity: Mapping[str, Any]\n-    ) -> Union[\"Entity\", Mapping[str, Any]]:\n-        \"\"\"\n-        Class factory to return entity from raw dictionary representation.\n-\n-        Parameters\n-        ----------\n-        raw_entity : Mapping[str, Any]\n-            A mapping object (e.g. dictionary or pandas Series)\n-            that contains the properties of the entity.\n-\n-        Returns\n-        -------\n-        Entity\n-            The instantiated entity\n-\n-        \"\"\"\n-        if \"Type\" not in raw_entity:\n-            return raw_entity\n-\n-        entity_type = raw_entity[\"Type\"]\n-\n-        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n-        # is not defined/populated until end of module since it needs\n-        # entity\n-        if entity_type in cls.ENTITY_NAME_MAP:\n-            return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n-\n-        raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n-\n-\n-@export\n-class Account(Entity):\n-    \"\"\"\n-    Account Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Account Name\n-    NTDomain : str\n-        Account NTDomain\n-    UPNSuffix : str\n-        Account UPNSuffix\n-    Host : Host\n-        Account Host\n-    LogonId : str\n-        Account LogonId (deprecated)\n-    Sid : str\n-        Account Sid\n-    AadTenantId : str\n-        Account AadTenantId\n-    AadUserId : str\n-        Account AadUserId\n-    PUID : str\n-        Account PUID\n-    IsDomainJoined : bool\n-        Account IsDomainJoined\n-    DisplayName : str\n-        Account DisplayName\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"subject\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing Account entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'subject' or 'target' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'subject')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        # pylint: disable=locally-disabled, line-too-long\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        if src_event is not None:\n-            if role == \"subject\" and \"SubjectUserName\" in src_event:\n-                self.Name = src_event[\"SubjectUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"SubjectUserDomain\"]\n-                    if \"SubjectUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"SubjectUserSid\"]\n-                    if \"SubjectUserSid\" in src_event\n-                    else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"SubjectLogonId\"]\n-                    if \"SubjectLogonId\" in src_event\n-                    else None\n-                )\n-            if role == \"target\" and \"TargetUserName\" in src_event:\n-                self.Name = src_event[\"TargetUserName\"]\n-                self.NTDomain = (\n-                    src_event[\"TargetUserDomain\"]\n-                    if \"TargetUserDomain\" in src_event\n-                    else None\n-                )\n-                self.Sid = (\n-                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n-                )\n-                self.LogonId = (\n-                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-                )\n-\n-            self.AadTenantId = (\n-                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n-            )\n-            self.AadUserId = (\n-                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n-            )\n-            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n-            self.DisplayName = (\n-                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n-            )\n-            self.UPNSuffix = (\n-                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n-            )\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.qualified_name\n-\n-    @property\n-    def qualified_name(self) -> str:\n-        \"\"\"Windows qualified account name.\"\"\"\n-        if \"Name\" not in self:\n-            return \"\"\n-        name = self[\"Name\"]\n-        if \"NTDomain\" in self and self.NTDomain:\n-            return \"{}\\\\{}\".format(self.NTDomain, name)\n-        if \"UPNSuffix\" in self and self.UPNSuffix:\n-            return \"{}@{}\".format(name, self.UPNSuffix)\n-        if \"Host\" in self and self.Host:\n-            return \"{}\\\\{}\".format(self.Host.HostName, name)\n-        return name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # UPNSuffix (type System.String)\n-        \"UPNSuffix\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # LogonId (type System.String)\n-        \"LogonId\": None,\n-        # Sid (type System.String)\n-        \"Sid\": None,\n-        # AadTenantId (type System.Nullable`1[System.Guid])\n-        \"AadTenantId\": None,\n-        # AadUserId (type System.Nullable`1[System.Guid])\n-        \"AadUserId\": None,\n-        # PUID (type System.Nullable`1[System.Guid])\n-        \"PUID\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-    }\n-\n-\n-@export\n-class SecurityGroup(Entity):\n-    \"\"\"\n-    SecurityGroup Entity class.\n-\n-    Attributes\n-    ----------\n-    DistinguishedName : str\n-        SecurityGroup DistinguishedName\n-    SID : str\n-        SecurityGroup SID\n-    ObjectGuid : str\n-        SecurityGroup ObjectGuid\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self):\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.DistinguishedName\n-\n-    _entity_schema = {\n-        # DistinguishedName (type System.String)\n-        \"DistinguishedName\": None,\n-        # SID (type System.String)\n-        \"SID\": None,\n-        # ObjectGuid (type System.String)\n-        \"ObjectGuid\": None,\n-    }\n-\n-\n-@export\n-class HostLogonSession(Entity):\n-    \"\"\"\n-    HostLogonSession Entity class.\n-\n-    Attributes\n-    ----------\n-    Account : Account\n-        HostLogonSession Account\n-    StartTimeUtc : datetime\n-        HostLogonSession StartTimeUtc\n-    EndTimeUtc : datetime\n-        HostLogonSession EndTimeUtc\n-    Host : Host\n-        HostLogonSession Host\n-    SessionId : str\n-        HostLogonSession SessionId\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if \"TimeCreatedUtc\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n-            elif \"TimeGenerated\" in src_event:\n-                self.StartTimeUtc = src_event[\"TimeGenerated\"]\n-            self.EndTimeUtc = self.StartTimeUtc\n-            self.SessionId = (\n-                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n-            )\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n-\n-    _entity_schema = {\n-        # Account\n-        \"Account\": \"Account\",\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Host\n-        \"Host\": \"Host\",\n-        # SessionId (type System.String)\n-        \"SessionId\": None,\n-    }\n-\n-\n-@export\n-class CloudApplication(Entity):\n-    \"\"\"\n-    CloudApplication Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        CloudApplication Name\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Name\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None\n-    }\n-\n-\n-@export\n-class DnsResolve(Entity):\n-    \"\"\"\n-    DNS Resolve Entity class.\n-\n-    Attributes\n-    ----------\n-    DomainName : str\n-        DnsResolve DomainName\n-    IpAdresses : List[str]\n-        DnsResolve IpAdresses\n-    DnsServerIp : IPAddress\n-        DnsResolve DnsServerIp\n-    HostIpAddress : IPAddress\n-        DnsResolve HostIpAddress\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n-\n-    _entity_schema = {\n-        # DomainName (type System.String)\n-        \"DomainName\": None,\n-        # IpAdresses (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n-        \"IpAdresses\": None,\n-        # DnsServerIp (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DnsServerIp\": \"IPAddress\",\n-        # HostIpAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"HostIpAddress\": \"IPAddress\",\n-    }\n-\n-\n-@export\n-class File(Entity):\n-    \"\"\"\n-    File Entity class.\n-\n-    Attributes\n-    ----------\n-    FullPath : str\n-        File FullPath\n-    Directory : str\n-        File Directory\n-    Name : str\n-        File Name\n-    Md5 : str\n-        File Md5\n-    Host : str\n-        File Host\n-    Sha1 : str\n-        File Sha1\n-    Sha256 : str\n-        File Sha256\n-    Sha256Ac : str\n-        File Sha256Ac\n-    FileHashes : List[FileHash]\n-        File FileHashes\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role: str = \"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None:\n-            if role == \"new\" and \"NewProcessName\" in src_event:\n-                self._add_paths(src_event[\"NewProcessName\"])\n-            elif role == \"parent\" and \"ParentProcessName\" in src_event:\n-                self._add_paths(src_event[\"ParentProcessName\"])\n-\n-        if \"FullPath\" not in self:\n-            file = self[\"Name\"]\n-            directory = self[\"Directory\"]\n-            sep = self.path_separator if directory else None\n-            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n-\n-    @property\n-    def path_separator(self):\n-        \"\"\"Return the path separator used by the file.\"\"\"\n-        directory = self[\"Directory\"]\n-        if directory and \"/\" in directory:\n-            return \"/\"\n-        return \"\\\\\"\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.FullPath\n-\n-    _entity_schema = {\n-        # FullPath (type System.String)\n-        \"FullPath\": None,\n-        # Directory (type System.String)\n-        \"Directory\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Md5 (type System.String)\n-        \"Md5\": None,\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": None,\n-        # Sha1 (type System.String)\n-        \"Sha1\": None,\n-        # Sha256 (type System.String)\n-        \"Sha256\": None,\n-        # Sha256Ac (type System.String)\n-        \"Sha256Ac\": None,\n-        \"FileHashes\": (list, \"FileHash\"),\n-    }\n-\n-    def _add_paths(self, full_path):\n-        if \"/\" in full_path:\n-            self.PathSeparator = \"/\"\n-            self.OSFamily = OSFamily.Linux\n-        else:\n-            self.PathSeparator = \"\\\\\"\n-            self.OSFamily = OSFamily.Windows\n-\n-        self.FullPath = full_path\n-        self.Name = full_path.split(self.PathSeparator)[-1]\n-        self.Directory = full_path.split(self.PathSeparator)[:-1]\n-\n-\n-@export\n-class FileHash(Entity):\n-    \"\"\"\n-    File Hash class.\n-\n-    Attributes\n-    ----------\n-    Algorithm : Algorithm\n-        FileHash Algorithm\n-    Value : str\n-        FileHash Value\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Algorithm}: {self.Value}\"\n-\n-    _entity_schema = {\n-        # The hash algorithm (type System.String)\n-        \"Algorithm\": \"Algorithm\",\n-        # Value (type System.String)\n-        \"Value\": None,\n-    }\n-\n-\n-@export\n-class Algorithm(Enum):\n-    \"\"\"FileHash Algorithm Enumeration.\"\"\"\n-\n-    Unknown = 0\n-    MD5 = 1\n-    SHA1 = 2\n-    SHA256 = 3\n-    SHA256AC = 4\n-\n-\n-_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n-\n-\n-@export\n-class Host(Entity):\n-    \"\"\"\n-    Host Entity class.\n-\n-    Attributes\n-    ----------\n-    DnsDomain : str\n-        Host DnsDomain\n-    NTDomain : str\n-        Host NTDomain\n-    HostName : str\n-        Host HostName\n-    NetBiosName : str\n-        Host NetBiosName\n-    AzureID : str\n-        Host AzureID\n-    OMSAgentID : str\n-        Host OMSAgentID\n-    OSFamily : str\n-        Host OSFamily\n-    IsDomainJoined : bool\n-        Host IsDomainJoined\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        self._computer = None\n-        if src_event is not None and \"Computer\" in src_event:\n-            self._computer = src_event[\"Computer\"]\n-            if \".\" in src_event[\"Computer\"]:\n-                self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n-                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n-            else:\n-                self.HostName = src_event[\"Computer\"]\n-            self.NetBiosName = self.HostName\n-\n-    @property\n-    def computer(self) -> str:\n-        \"\"\"Return computer from source event.\"\"\"\n-        return self._computer if self._computer is not None else self.fqdn\n-\n-    @property\n-    def fqdn(self) -> str:\n-        \"\"\"Construct FQDN from host + dns.\"\"\"\n-        if self.DnsDomain:\n-            return f\"{self.HostName}.{self.DnsDomain}\"\n-        return self.HostName\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.fqdn} ({self.OSFamily})\"\n-\n-    _entity_schema = {\n-        # DnsDomain (type System.String)\n-        \"DnsDomain\": None,\n-        # NTDomain (type System.String)\n-        \"NTDomain\": None,\n-        # HostName (type System.String)\n-        \"HostName\": None,\n-        # NetBiosName (type System.String)\n-        \"NetBiosName\": None,\n-        # AzureID (type System.String)\n-        \"AzureID\": None,\n-        # OMSAgentID (type System.String)\n-        \"OMSAgentID\": None,\n-        # OSFamily (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n-        \"OSFamily\": None,\n-        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n-        \"IsDomainJoined\": None,\n-    }\n-\n-\n-@export\n-class IpAddress(Entity):\n-    \"\"\"\n-    IPAddress Entity class.\n-\n-    Attributes\n-    ----------\n-    Address : str\n-        IpAddress Address\n-    Location : GeoLocation\n-        IpAddress Location\n-    ThreatIntelligence : List[ThreatIntelligence]\n-        IpAddress ThreatIntelligence\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-        if src_event is not None and \"IpAddress\" in src_event:\n-            self.Address = src_event[\"IpAddress\"]\n-\n-    @property\n-    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n-        \"\"\"Return a python ipaddress object from the entity property.\"\"\"\n-        return ip_address(self[\"Address\"])\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.Address\n-\n-    _entity_schema = {\n-        # Address (type System.String)\n-        \"Address\": None,\n-        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.ContextObjects.GeoLocation)\n-        \"Location\": \"GeoLocation\",\n-        # ThreatIntelligence (type System.Collections.Generic.List`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n-        # .ContextObjects.ThreatIntelligence])\n-        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n-    }\n-\n-\n-@export\n-class GeoLocation(Entity):\n-    \"\"\"\n-    GeoLocation class.\n-\n-    Attributes\n-    ----------\n-    CountryCode : str\n-        GeoLocation CountryCode\n-    CountryName : str\n-        GeoLocation CountryName\n-    State : str\n-        GeoLocation State\n-    City : str\n-        GeoLocation City\n-    Longitude : float\n-        GeoLocation Longitude\n-    Latitude : float\n-        GeoLocation Latitude\n-    Asn : str\n-        GeoLocation Asn\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n-\n-    _entity_schema = {\n-        # str\n-        \"CountryCode\": None,\n-        # str\n-        \"CountryName\": None,\n-        # str\n-        \"State\": None,\n-        # str\n-        \"City\": None,\n-        # double?\n-        \"Longitude\": None,\n-        # double?\n-        \"Latitude\": None,\n-        # int\n-        \"Asn\": None,\n-    }\n-\n-\n-@export\n-class Malware(Entity):\n-    \"\"\"\n-    Malware Entity class.\n-\n-    Attributes\n-    ----------\n-    Name : str\n-        Malware Name\n-    Category : str\n-        Malware Category\n-    File : File\n-        Malware File\n-    Files : List[File]\n-        Malware Files\n-    Processes : List[Process]\n-        Malware Processes\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}: {self.Category}\"\n-\n-    _entity_schema = {\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Category (type System.String)\n-        \"Category\": None,\n-        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n-        \"File\": \"File\",\n-        \"Files\": (list, \"File\"),\n-        \"Processes\": (list, \"Process\"),\n-    }\n-\n-\n-@export\n-class NetworkConnection(Entity):\n-    \"\"\"\n-    NetworkConnection Entity class.\n-\n-    Attributes\n-    ----------\n-    SourceAddress : IPAddress\n-        NetworkConnection SourceAddress\n-    SourcePort : int\n-        NetworkConnection SourcePort\n-    DestinationAddress : IPAddress\n-        NetworkConnection DestinationAddress\n-    DestinationPort : int\n-        NetworkConnection DestinationPort\n-    Protocol : str\n-        NetworkConnection Protocol\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"{}:{} [{}]-> {}:{}\".format(\n-            self.SourceAddress,\n-            self.SourcePort,\n-            self.Protocol,\n-            self.DestinationAddress,\n-            self.DestinationPort,\n-        )\n-\n-    _entity_schema = {\n-        # SourceAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"SourceAddress\": \"IPAddress\",\n-        # SourcePort (type System.Nullable`1[System.Int32])\n-        \"SourcePort\": None,\n-        # DestinationAddress (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.IP)\n-        \"DestinationAddress\": \"IPAddress\",\n-        # DestinationPort (type System.Nullable`1[System.Int32])\n-        \"DestinationPort\": None,\n-        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n-        \"Protocol\": None,\n-    }\n-\n-\n-@export\n-class Process(Entity):\n-    \"\"\"\n-    Process Entity class.\n-\n-    Attributes\n-    ----------\n-    ProcessId : str\n-        Process ProcessId\n-    CommandLine : str\n-        Process CommandLine\n-    ElevationToken : str\n-        Process ElevationToken\n-    CreationTimeUtc : datetime\n-        Process CreationTimeUtc\n-    ImageFile : File\n-        Process ImageFile\n-    Account : Account\n-        Process Account\n-    ParentProcess : Process\n-        Process ParentProcess\n-    Host : Host\n-        Process Host\n-    LogonSession : HostLogonSession\n-        Process LogonSession\n-\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        src_entity: Mapping[str, Any] = None,\n-        src_event: Mapping[str, Any] = None,\n-        role=\"new\",\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-        src_event : Mapping[str, Any], optional\n-            Create entity from event properties\n-            (the default is None)\n-        role : str, optional\n-            'new' or 'parent' - only relevant if the entity\n-            is being constructed from an event.\n-            (the default is 'new')\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-        # pylint: disable=locally-disabled, line-too-long\n-        if src_event is not None:\n-            if role == \"new\":\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.CommandLine = (\n-                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n-                )\n-                if \"TimeCreatedUtc\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n-                elif \"TimeGenerated\" in src_event:\n-                    self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n-                self.ProcessId = (\n-                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"new\")\n-                self.Account = Account(src_event=src_event, role=\"subject\")\n-\n-                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n-                    parent = Process(src_event=src_event, role=\"parent\")\n-                    self.ParentProcess = parent\n-\n-                # Linux properties\n-                self.success = src_event[\"success\"] if \"success\" in src_event else None\n-                self.audit_user = (\n-                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n-                )\n-                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n-                self.group = src_event[\"group\"] if \"group\" in src_event else None\n-                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n-                self.effective_user = (\n-                    src_event[\"effective_user\"]\n-                    if \"effective_user\" in src_event\n-                    else None\n-                )\n-                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n-                self.effective_group = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.egid = (\n-                    src_event[\"effective_group\"]\n-                    if \"effective_group\" in src_event\n-                    else None\n-                )\n-                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n-            else:\n-                self.ProcessId = (\n-                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n-                )\n-                self.ImageFile = File(src_event=src_event, role=\"parent\")\n-\n-    # pylint: enable=locally-disabled, line-too-long\n-\n-    @property\n-    def ProcessName(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.Name if file else None\n-\n-    @property\n-    def ProcessFilePath(self) -> str:  # noqa: N802\n-        \"\"\"Return the name of the process file path.\"\"\"\n-        file = self[\"ImageFile\"]\n-        return file.FullPath if file else None\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n-\n-    _entity_schema = {\n-        # ProcessId (type System.String)\n-        \"ProcessId\": None,\n-        # CommandLine (type System.String)\n-        \"CommandLine\": None,\n-        # ElevationToken (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.ElevationToken])\n-        \"ElevationToken\": None,\n-        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"CreationTimeUtc\": None,\n-        # ImageFile (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.File)\n-        \"ImageFile\": \"File\",\n-        # Account (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Account)\n-        \"Account\": \"Account\",\n-        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n-        # .V3.Entities.Process)\n-        \"ParentProcess\": \"Process\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.Host)\n-        \"Host\": \"Host\",\n-        # Host (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.HostLogonSession)\n-        \"LogonSession\": \"HostLogonSession\",\n-    }\n-\n-\n-@export\n-class RegistryHive(Enum):\n-    \"\"\"RegistryHive enumeration.\"\"\"\n-\n-    # <summary>HKEY_LOCAL_MACHINE</summary>\n-    HKEY_LOCAL_MACHINE = 0\n-    # <summary>HKEY_CLASSES_ROOT</summary>\n-    HKEY_CLASSES_ROOT = 1\n-    # <summary>HKEY_CURRENT_CONFIG</summary>\n-    HKEY_CURRENT_CONFIG = 2\n-    # <summary>HKEY_USERS</summary>\n-    HKEY_USERS = 3\n-    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n-    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n-    # <summary>HKEY_PERFORMANCE_DATA</summary>\n-    HKEY_PERFORMANCE_DATA = 5\n-    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n-    HKEY_PERFORMANCE_NLSTEXT = 6\n-    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n-    HKEY_PERFORMANCE_TEXT = 7\n-    # <summary>HKEY_A</summary>\n-    HKEY_A = 8\n-    # <summary>HKEY_CURRENT_USER</summary>\n-    HKEY_CURRENT_USER = 9\n-\n-\n-_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n-\n-\n-@export\n-class RegistryKey(Entity):\n-    \"\"\"\n-    RegistryKey Entity class.\n-\n-    Attributes\n-    ----------\n-    Hive : RegistryHive\n-        RegistryKey Hive\n-    Key : str\n-        RegistryKey Key\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Hive}\\\\{self.Key}\"\n-\n-    _entity_schema = {\n-        # Hive (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n-        \"Hive\": \"RegistryHive\",\n-        # Key (type System.String)\n-        \"Key\": None,\n-    }\n-\n-\n-class RegistryValue(Entity):\n-    \"\"\"\n-    RegistryValue Entity class.\n-\n-    Attributes\n-    ----------\n-    Key : str\n-        RegistryValue Key\n-    Name : str\n-        RegistryValue Name\n-    Value : str\n-        RegistryValue Value\n-    ValueType : str\n-        RegistryValue ValueType\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n-\n-    _entity_schema = {\n-        # Key (type Microsoft.Azure.Security.Detection\n-        # .AlertContracts.V3.Entities.RegistryKey)\n-        \"Key\": None,\n-        # Name (type System.String)\n-        \"Name\": None,\n-        # Value (type System.String)\n-        \"Value\": None,\n-        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n-        \"ValueType\": None,\n-    }\n-\n-\n-@export\n-class OSFamily(Enum):\n-    \"\"\"OSFamily enumeration.\"\"\"\n-\n-    Linux = 0\n-    Windows = 1\n-\n-\n-_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n-\n-\n-@export\n-class ElevationToken(Enum):\n-    \"\"\"ElevationToken enumeration.\"\"\"\n-\n-    Default = 0\n-    Full = 1\n-    Limited = 2\n-\n-\n-_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n-\n-\n-@export\n-class AzureResource(Entity):\n-    \"\"\"\n-    AzureResource Entity class.\n-\n-    Attributes\n-    ----------\n-    ResourceId : str\n-        AzureResource ResourceId\n-    SubscriptionId : str\n-        AzureResource SubscriptionId\n-    ResourceIdParts : Dict[str, str]\n-        AzureResource ResourceIdParts\n-\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return self.ResourceId\n-\n-    _entity_schema = {\n-        # ResourceId (type System.String)\n-        \"ResourceId\": None,\n-        # SubscriptionId (type System.String)\n-        \"SubscriptionId\": None,\n-        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n-        # [System.String,System.String])\n-        \"ResourceIdParts\": None,\n-    }\n-\n-\n-@export\n-class Alert(Entity):\n-    \"\"\"\n-    Alert Entity class.\n-\n-    Attributes\n-    ----------\n-    DisplayName : str\n-        Alert DisplayName\n-    CompromisedEntity : str\n-        Alert CompromisedEntity\n-    Count : int\n-        Alert Count\n-    StartTimeUtc : datetime\n-        Alert StartTimeUtc\n-    EndTimeUtc : datetime\n-        Alert EndTimeUtc\n-    Severity : str\n-        Alert Severity\n-    SystemAlertIds : List[str]\n-        Alert SystemAlertIds\n-    AlertType : str\n-        Alert AlertType\n-    VendorName : str\n-        Alert VendorName\n-    ProviderName : str\n-        Alert ProviderName\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-        Parameters\n-        ----------\n-        src_entity : Mapping[str, Any], optional\n-            Create entity from existing entity or\n-            other mapping object that implements entity properties.\n-            (the default is None)\n-\n-        Other Parameters\n-        ----------------\n-        kwargs : Dict[str, Any]\n-            Supply the entity properties as a set of\n-            kw arguments.\n-\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # DisplayName (type System.String)\n-        \"DisplayName\": None,\n-        # CompromisedEntity (type System.String)\n-        \"CompromisedEntity\": None,\n-        # Count (type System.Nullable`1[System.Int32])\n-        \"Count\": None,\n-        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"StartTimeUtc\": None,\n-        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n-        \"EndTimeUtc\": None,\n-        # Severity (type System.Nullable`1\n-        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n-        \"Severity\": None,\n-        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n-        \"SystemAlertIds\": None,\n-        # AlertType (type System.String)\n-        \"AlertType\": None,\n-        # VendorName (type System.String)\n-        \"VendorName\": None,\n-        # ProviderName (type System.String)\n-        \"ProviderName\": None,\n-    }\n-\n-\n-@export\n-class Threatintelligence(Entity):\n-    \"\"\"\n-    Threatintelligence Entity class.\n-\n-    Attributes\n-    ----------\n-    ProviderName : str\n-        Threatintelligence ProviderName\n-    ThreatType : str\n-        Threatintelligence ThreatType\n-    ThreatName : str\n-        Threatintelligence ThreatName\n-    Confidence : str\n-        Threatintelligence Confidence\n-    ReportLink : str\n-        Threatintelligence ReportLink\n-    ThreatDescription : str\n-        Threatintelligence ThreatDescription\n-\n-    \"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n-\n-    _entity_schema = {\n-        # String Name of the provider from whom this\n-        # Threat Intelligence information was received\n-        \"ProviderName\": None,\n-        \"ThreatType\": None,\n-        \"ThreatName\": None,\n-        \"Confidence\": None,\n-        \"ReportLink\": None,\n-        \"ThreatDescription\": None,\n-    }\n-\n-\n-@export\n-class UnknownEntity(Entity):\n-    \"\"\"Generic Entity class.\"\"\"\n-\n-    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n-        \"\"\"\n-        Create a new instance of the entity type.\n-\n-            :param src_entity: instantiate entity using properties of src entity\n-            :param kwargs: key-value pair representation of entity\n-        \"\"\"\n-        super().__init__(src_entity=src_entity, **kwargs)\n-\n-    @property\n-    def description_str(self) -> str:\n-        \"\"\"Return Entity Description.\"\"\"\n-        return \"OtherEntity\"\n-\n-    _entity_schema = {}  # type: Dict[str, Any]\n-\n-\n-# Dictionary to map text names of types to the class.\n-Entity.ENTITY_NAME_MAP.update(\n-    {\n-        \"account\": Account,\n-        \"host\": Host,\n-        \"process\": Process,\n-        \"file\": File,\n-        \"cloudapplication\": CloudApplication,\n-        \"dnsresolve\": DnsResolve,\n-        \"ipaddress\": IpAddress,\n-        \"ip\": IpAddress,\n-        \"networkconnection\": NetworkConnection,\n-        \"malware\": Malware,\n-        \"registry-key\": RegistryKey,\n-        \"registrykey\": RegistryKey,\n-        \"registry-value\": RegistryValue,\n-        \"registryvalue\": RegistryValue,\n-        \"host-logon-session\": HostLogonSession,\n-        \"hostlogonsession\": HostLogonSession,\n-        \"filehash\": FileHash,\n-        \"security-group\": SecurityGroup,\n-        \"securitygroup\": SecurityGroup,\n-        \"alerts\": Alert,\n-        \"alert\": Alert,\n-    }\n-)\n+# pylint: disable=wildcard-import, unused-wildcard-import\n+from ..datamodel.entities import *  # noqa: F403, F401\n",
        "source_code_with_indent": "\n\n_ENTITY_ENUMS: Dict[str, Type] = {}\n\n\n# pylint: disable=too-many-lines, invalid-name\n# pylint: disable=too-many-instance-attributes\n@export\nclass Entity(ABC):\n    <IND>\"\"\"\n    Entity abstract base class.\n\n    Implements common methods for Entity classes\n    \"\"\"\n\n    ENTITY_NAME_MAP: Dict[str, type] = {}\n    _entity_schema: Dict[str, Any] = {}\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of an entity.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            If src_entity is supplied it attempts to extract common\n            properties from the source entity and assign them to\n            the new instance. (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        self.Type = type(self).__name__.lower()\n        # If we have an unknown entity see if we a type passed in\n        if self.Type == \"unknownentity\" and \"Type\" in kwargs:\n            <IND>self.Type = kwargs[\"Type\"]\n        # Make sure Type is in the class schema dictionary\n        <DED>self._entity_schema[\"Type\"] = None\n\n        # if we didn't populate AdditionalData, add an empty dict in case it's\n        # needed\n        if \"AdditionalData\" not in self:\n            <IND>self[\"AdditionalData\"] = {}\n\n        <DED>if src_entity is not None:\n            <IND>self._extract_src_entity(src_entity)\n            # add AdditionalData dictionary if it's populated\n            if \"AdditionalData\" in src_entity:\n                <IND>self[\"AdditionalData\"] = src_entity[\"AdditionalData\"]\n\n        <DED><DED>if kwargs:\n            <IND>self.__dict__.update(kwargs)\n\n    <DED><DED>def _extract_src_entity(self, src_entity: Mapping[str, Any]):\n        <IND>\"\"\"\n        Extract source entity properties.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any]\n            The source mappable object from which to\n            extract entity properties.\n\n        \"\"\"\n        schema_dict = dict(**(self._entity_schema))\n        schema_dict[\"Type\"] = None\n        for k, v in schema_dict.items():\n            <IND>if k not in src_entity:\n                <IND>continue\n            <DED>self[k] = src_entity[k]\n\n            if v is not None:\n                <IND>try:\n                    # If the property is an enum\n                    <IND>if v in _ENTITY_ENUMS:\n                        <IND>self[k] = _ENTITY_ENUMS[v][src_entity[k]]\n                        continue\n                <DED><DED>except KeyError:\n                    # Catch key errors from invalid enum values\n                    <IND>self[k] = None\n\n                <DED>if isinstance(v, tuple):\n                    # if the property is a collection\n                    <IND>entity_list = []\n                    for col_entity in src_entity[k]:\n                        <IND>entity_list.append(Entity.instantiate_entity(col_entity))\n                    <DED>self[k] = entity_list\n                <DED>else:\n                    # else try to instantiate an entity\n                    <IND>self[k] = Entity.instantiate_entity(src_entity[k])\n\n    <DED><DED><DED><DED>def __getitem__(self, key: str):\n        <IND>\"\"\"Allow property get using dictionary key syntax.\"\"\"\n        if key in self.__dict__:\n            <IND>return self.__dict__[key]\n        <DED>if key in self._entity_schema:\n            <IND>return None\n        <DED>raise KeyError\n\n    <DED>def __setitem__(self, key: str, value: Any):\n        <IND>\"\"\"Allow property set using dictionary key syntax.\"\"\"\n        self.__dict__[key] = value\n\n    <DED>def __contains__(self, key: str):\n        <IND>\"\"\"Allow property in test.\"\"\"\n        # In operator overload\n        return key in self.__dict__\n\n    <DED>def __getattr__(self, name: str):\n        <IND>\"\"\"Return the value of the named property 'name'.\"\"\"\n        if name in self._entity_schema:\n            <IND>return None\n        <DED>raise AttributeError(f\"{name} is not a valid attribute.\")\n\n    <DED>def __iter__(self):\n        <IND>\"\"\"Iterate over entity_properties.\"\"\"\n        return iter(self.properties)\n\n    <DED>def __len__(self) -> int:\n        <IND>\"\"\"Return length/number of entity_properties.\"\"\"\n        return len(self.properties)\n\n    <DED>def __str__(self) -> str:\n        <IND>\"\"\"Return string representation of entity.\"\"\"\n        return pprint.pformat(self._to_dict(self), indent=2, width=100)\n\n    <DED>def __repr__(self) -> str:\n        <IND>\"\"\"Return repr of entity.\"\"\"\n        params = \", \".join(\n            [f\"{name}={val}\" for name, val in self.properties.items() if val]\n        )\n        if len(params) > 80:\n            <IND>params = params[:80] + \"...\"\n        <DED>return f\"{self.__class__.__name__}({params})\"\n\n    <DED>def _to_dict(self, entity) -> dict:\n        <IND>\"\"\"Return as simple nested dictionary.\"\"\"\n        ent_dict = {}\n        for prop, val in entity.properties.items():\n            <IND>if val is not None:\n                <IND>ent_dict[prop] = self._to_dict(val) if isinstance(val, Entity) else val\n        <DED><DED>return ent_dict\n\n    <DED>def _repr_html_(self) -> str:\n        <IND>\"\"\"\n        Display entity in IPython/Notebook.\n\n        Returns\n        -------\n        HTML\n            IPython HTML object\n\n        \"\"\"\n        return self.to_html()\n\n    <DED>def to_html(self) -> str:\n        <IND>\"\"\"\n        Return HTML representation of entity.\n\n        Returns\n        -------\n        str\n            HTML representation of entity\n\n        \"\"\"\n        e_text = str(self)\n        e_type = self.Type\n        e_text = e_text.replace(\"\\n\", \"<br>\").replace(\" \", \"&nbsp;\")\n        return f\"<h3>{e_type}</h3>{e_text}\"\n\n    <DED>@property\n    def properties(self) -> dict:\n        <IND>\"\"\"\n        Return dictionary properties of entity.\n\n        Returns\n        -------\n        dict\n            Entity properties.\n\n        \"\"\"\n        return {\n            name: value\n            for name, value in self.__dict__.items()\n            if not name.startswith(\"_\")\n        }\n\n    <DED>@property\n    @abstractmethod\n    def description_str(self) -> str:\n        <IND>\"\"\"\n        Return Entity Description.\n\n        Returns\n        -------\n        str\n            Entity description (optional). If not overridden\n            by the Entity instance type, it will return the\n            Type string.\n\n        \"\"\"\n        return self.Type\n\n    # pylint: disable=too-many-branches\n    <DED>@classmethod\n    def instantiate_entity(  # noqa: C901\n        cls, raw_entity: Mapping[str, Any]\n    ) -> Union[\"Entity\", Mapping[str, Any]]:\n        <IND>\"\"\"\n        Class factory to return entity from raw dictionary representation.\n\n        Parameters\n        ----------\n        raw_entity : Mapping[str, Any]\n            A mapping object (e.g. dictionary or pandas Series)\n            that contains the properties of the entity.\n\n        Returns\n        -------\n        Entity\n            The instantiated entity\n\n        \"\"\"\n        if \"Type\" not in raw_entity:\n            <IND>return raw_entity\n\n        <DED>entity_type = raw_entity[\"Type\"]\n\n        # We get an undefined-variable warning here. _ENTITY_NAME_MAP\n        # is not defined/populated until end of module since it needs\n        # entity\n        if entity_type in cls.ENTITY_NAME_MAP:\n            <IND>return cls.ENTITY_NAME_MAP[entity_type](raw_entity)\n\n        <DED>raise TypeError(\"Could not find a suitable type for {}\".format(entity_type))\n\n\n<DED><DED>@export\nclass Account(Entity):\n    <IND>\"\"\"\n    Account Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Account Name\n    NTDomain : str\n        Account NTDomain\n    UPNSuffix : str\n        Account UPNSuffix\n    Host : Host\n        Account Host\n    LogonId : str\n        Account LogonId (deprecated)\n    Sid : str\n        Account Sid\n    AadTenantId : str\n        Account AadTenantId\n    AadUserId : str\n        Account AadUserId\n    PUID : str\n        Account PUID\n    IsDomainJoined : bool\n        Account IsDomainJoined\n    DisplayName : str\n        Account DisplayName\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"subject\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing Account entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'subject' or 'target' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'subject')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        # pylint: disable=locally-disabled, line-too-long\n        super().__init__(src_entity=src_entity, **kwargs)\n        if src_event is not None:\n            <IND>if role == \"subject\" and \"SubjectUserName\" in src_event:\n                <IND>self.Name = src_event[\"SubjectUserName\"]\n                self.NTDomain = (\n                    src_event[\"SubjectUserDomain\"]\n                    if \"SubjectUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"SubjectUserSid\"]\n                    if \"SubjectUserSid\" in src_event\n                    else None\n                )\n                self.LogonId = (\n                    src_event[\"SubjectLogonId\"]\n                    if \"SubjectLogonId\" in src_event\n                    else None\n                )\n            <DED>if role == \"target\" and \"TargetUserName\" in src_event:\n                <IND>self.Name = src_event[\"TargetUserName\"]\n                self.NTDomain = (\n                    src_event[\"TargetUserDomain\"]\n                    if \"TargetUserDomain\" in src_event\n                    else None\n                )\n                self.Sid = (\n                    src_event[\"TargetUserSid\"] if \"TargetUserSid\" in src_event else None\n                )\n                self.LogonId = (\n                    src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n                )\n\n            <DED>self.AadTenantId = (\n                src_event[\"AadTenantId\"] if \"AadTenantId\" in src_event else None\n            )\n            self.AadUserId = (\n                src_event[\"AadUserId\"] if \"AadUserId\" in src_event else None\n            )\n            self.PUID = src_event[\"PUID\"] if \"PUID\" in src_event else None\n            self.DisplayName = (\n                src_event[\"DisplayName\"] if \"DisplayName\" in src_event else None\n            )\n            self.UPNSuffix = (\n                src_event[\"UPNSuffix\"] if \"UPNSuffix\" in src_event else None\n            )\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.qualified_name\n\n    <DED>@property\n    def qualified_name(self) -> str:\n        <IND>\"\"\"Windows qualified account name.\"\"\"\n        if \"Name\" not in self:\n            <IND>return \"\"\n        <DED>name = self[\"Name\"]\n        if \"NTDomain\" in self and self.NTDomain:\n            <IND>return \"{}\\\\{}\".format(self.NTDomain, name)\n        <DED>if \"UPNSuffix\" in self and self.UPNSuffix:\n            <IND>return \"{}@{}\".format(name, self.UPNSuffix)\n        <DED>if \"Host\" in self and self.Host:\n            <IND>return \"{}\\\\{}\".format(self.Host.HostName, name)\n        <DED>return name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # UPNSuffix (type System.String)\n        \"UPNSuffix\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # LogonId (type System.String)\n        \"LogonId\": None,\n        # Sid (type System.String)\n        \"Sid\": None,\n        # AadTenantId (type System.Nullable`1[System.Guid])\n        \"AadTenantId\": None,\n        # AadUserId (type System.Nullable`1[System.Guid])\n        \"AadUserId\": None,\n        # PUID (type System.Nullable`1[System.Guid])\n        \"PUID\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n    }\n\n\n<DED>@export\nclass SecurityGroup(Entity):\n    <IND>\"\"\"\n    SecurityGroup Entity class.\n\n    Attributes\n    ----------\n    DistinguishedName : str\n        SecurityGroup DistinguishedName\n    SID : str\n        SecurityGroup SID\n    ObjectGuid : str\n        SecurityGroup ObjectGuid\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self):\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.DistinguishedName\n\n    <DED>_entity_schema = {\n        # DistinguishedName (type System.String)\n        \"DistinguishedName\": None,\n        # SID (type System.String)\n        \"SID\": None,\n        # ObjectGuid (type System.String)\n        \"ObjectGuid\": None,\n    }\n\n\n<DED>@export\nclass HostLogonSession(Entity):\n    <IND>\"\"\"\n    HostLogonSession Entity class.\n\n    Attributes\n    ----------\n    Account : Account\n        HostLogonSession Account\n    StartTimeUtc : datetime\n        HostLogonSession StartTimeUtc\n    EndTimeUtc : datetime\n        HostLogonSession EndTimeUtc\n    Host : Host\n        HostLogonSession Host\n    SessionId : str\n        HostLogonSession SessionId\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if \"TimeCreatedUtc\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeCreatedUtc\"]\n            <DED>elif \"TimeGenerated\" in src_event:\n                <IND>self.StartTimeUtc = src_event[\"TimeGenerated\"]\n            <DED>self.EndTimeUtc = self.StartTimeUtc\n            self.SessionId = (\n                src_event[\"TargetLogonId\"] if \"TargetLogonId\" in src_event else None\n            )\n\n    <DED><DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Host.HostName}: session: {self.SessionId}\"\n\n    <DED>_entity_schema = {\n        # Account\n        \"Account\": \"Account\",\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Host\n        \"Host\": \"Host\",\n        # SessionId (type System.String)\n        \"SessionId\": None,\n    }\n\n\n<DED>@export\nclass CloudApplication(Entity):\n    <IND>\"\"\"\n    CloudApplication Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        CloudApplication Name\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Name\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None\n    }\n\n\n<DED>@export\nclass DnsResolve(Entity):\n    <IND>\"\"\"\n    DNS Resolve Entity class.\n\n    Attributes\n    ----------\n    DomainName : str\n        DnsResolve DomainName\n    IpAdresses : List[str]\n        DnsResolve IpAdresses\n    DnsServerIp : IPAddress\n        DnsResolve DnsServerIp\n    HostIpAddress : IPAddress\n        DnsResolve HostIpAddress\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DomainName}: IPs: {repr(self.IpAdresses)}\"\n\n    <DED>_entity_schema = {\n        # DomainName (type System.String)\n        \"DomainName\": None,\n        # IpAdresses (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.IP])\n        \"IpAdresses\": None,\n        # DnsServerIp (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DnsServerIp\": \"IPAddress\",\n        # HostIpAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"HostIpAddress\": \"IPAddress\",\n    }\n\n\n<DED>@export\nclass File(Entity):\n    <IND>\"\"\"\n    File Entity class.\n\n    Attributes\n    ----------\n    FullPath : str\n        File FullPath\n    Directory : str\n        File Directory\n    Name : str\n        File Name\n    Md5 : str\n        File Md5\n    Host : str\n        File Host\n    Sha1 : str\n        File Sha1\n    Sha256 : str\n        File Sha256\n    Sha256Ac : str\n        File Sha256Ac\n    FileHashes : List[FileHash]\n        File FileHashes\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role: str = \"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None:\n            <IND>if role == \"new\" and \"NewProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"NewProcessName\"])\n            <DED>elif role == \"parent\" and \"ParentProcessName\" in src_event:\n                <IND>self._add_paths(src_event[\"ParentProcessName\"])\n\n        <DED><DED>if \"FullPath\" not in self:\n            <IND>file = self[\"Name\"]\n            directory = self[\"Directory\"]\n            sep = self.path_separator if directory else None\n            self[\"FullPath\"] = f\"{directory}{sep}{file}\"\n\n    <DED><DED>@property\n    def path_separator(self):\n        <IND>\"\"\"Return the path separator used by the file.\"\"\"\n        directory = self[\"Directory\"]\n        if directory and \"/\" in directory:\n            <IND>return \"/\"\n        <DED>return \"\\\\\"\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.FullPath\n\n    <DED>_entity_schema = {\n        # FullPath (type System.String)\n        \"FullPath\": None,\n        # Directory (type System.String)\n        \"Directory\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Md5 (type System.String)\n        \"Md5\": None,\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": None,\n        # Sha1 (type System.String)\n        \"Sha1\": None,\n        # Sha256 (type System.String)\n        \"Sha256\": None,\n        # Sha256Ac (type System.String)\n        \"Sha256Ac\": None,\n        \"FileHashes\": (list, \"FileHash\"),\n    }\n\n    def _add_paths(self, full_path):\n        <IND>if \"/\" in full_path:\n            <IND>self.PathSeparator = \"/\"\n            self.OSFamily = OSFamily.Linux\n        <DED>else:\n            <IND>self.PathSeparator = \"\\\\\"\n            self.OSFamily = OSFamily.Windows\n\n        <DED>self.FullPath = full_path\n        self.Name = full_path.split(self.PathSeparator)[-1]\n        self.Directory = full_path.split(self.PathSeparator)[:-1]\n\n\n<DED><DED>@export\nclass FileHash(Entity):\n    <IND>\"\"\"\n    File Hash class.\n\n    Attributes\n    ----------\n    Algorithm : Algorithm\n        FileHash Algorithm\n    Value : str\n        FileHash Value\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Algorithm}: {self.Value}\"\n\n    <DED>_entity_schema = {\n        # The hash algorithm (type System.String)\n        \"Algorithm\": \"Algorithm\",\n        # Value (type System.String)\n        \"Value\": None,\n    }\n\n\n<DED>@export\nclass Algorithm(Enum):\n    <IND>\"\"\"FileHash Algorithm Enumeration.\"\"\"\n\n    Unknown = 0\n    MD5 = 1\n    SHA1 = 2\n    SHA256 = 3\n    SHA256AC = 4\n\n\n<DED>_ENTITY_ENUMS[Algorithm.__name__] = Algorithm\n\n\n@export\nclass Host(Entity):\n    <IND>\"\"\"\n    Host Entity class.\n\n    Attributes\n    ----------\n    DnsDomain : str\n        Host DnsDomain\n    NTDomain : str\n        Host NTDomain\n    HostName : str\n        Host HostName\n    NetBiosName : str\n        Host NetBiosName\n    AzureID : str\n        Host AzureID\n    OMSAgentID : str\n        Host OMSAgentID\n    OSFamily : str\n        Host OSFamily\n    IsDomainJoined : bool\n        Host IsDomainJoined\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        self._computer = None\n        if src_event is not None and \"Computer\" in src_event:\n            <IND>self._computer = src_event[\"Computer\"]\n            if \".\" in src_event[\"Computer\"]:\n                <IND>self.HostName = src_event[\"Computer\"].split(\".\", 1)[0]\n                self.DnsDomain = src_event[\"Computer\"].split(\".\", 1)[1]\n            <DED>else:\n                <IND>self.HostName = src_event[\"Computer\"]\n            <DED>self.NetBiosName = self.HostName\n\n    <DED><DED>@property\n    def computer(self) -> str:\n        <IND>\"\"\"Return computer from source event.\"\"\"\n        return self._computer if self._computer is not None else self.fqdn\n\n    <DED>@property\n    def fqdn(self) -> str:\n        <IND>\"\"\"Construct FQDN from host + dns.\"\"\"\n        if self.DnsDomain:\n            <IND>return f\"{self.HostName}.{self.DnsDomain}\"\n        <DED>return self.HostName\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.fqdn} ({self.OSFamily})\"\n\n    <DED>_entity_schema = {\n        # DnsDomain (type System.String)\n        \"DnsDomain\": None,\n        # NTDomain (type System.String)\n        \"NTDomain\": None,\n        # HostName (type System.String)\n        \"HostName\": None,\n        # NetBiosName (type System.String)\n        \"NetBiosName\": None,\n        # AzureID (type System.String)\n        \"AzureID\": None,\n        # OMSAgentID (type System.String)\n        \"OMSAgentID\": None,\n        # OSFamily (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.OSFamily])\n        \"OSFamily\": None,\n        # IsDomainJoined (type System.Nullable`1[System.Boolean])\n        \"IsDomainJoined\": None,\n    }\n\n\n<DED>@export\nclass IpAddress(Entity):\n    <IND>\"\"\"\n    IPAddress Entity class.\n\n    Attributes\n    ----------\n    Address : str\n        IpAddress Address\n    Location : GeoLocation\n        IpAddress Location\n    ThreatIntelligence : List[ThreatIntelligence]\n        IpAddress ThreatIntelligence\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n        if src_event is not None and \"IpAddress\" in src_event:\n            <IND>self.Address = src_event[\"IpAddress\"]\n\n    <DED><DED>@property\n    def ip_address(self) -> Union[IPv4Address, IPv6Address]:\n        <IND>\"\"\"Return a python ipaddress object from the entity property.\"\"\"\n        return ip_address(self[\"Address\"])\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.Address\n\n    <DED>_entity_schema = {\n        # Address (type System.String)\n        \"Address\": None,\n        # Location (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.ContextObjects.GeoLocation)\n        \"Location\": \"GeoLocation\",\n        # ThreatIntelligence (type System.Collections.Generic.List`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3\n        # .ContextObjects.ThreatIntelligence])\n        \"ThreatIntelligence\": (list, \"Threatintelligence\"),\n    }\n\n\n<DED>@export\nclass GeoLocation(Entity):\n    <IND>\"\"\"\n    GeoLocation class.\n\n    Attributes\n    ----------\n    CountryCode : str\n        GeoLocation CountryCode\n    CountryName : str\n        GeoLocation CountryName\n    State : str\n        GeoLocation State\n    City : str\n        GeoLocation City\n    Longitude : float\n        GeoLocation Longitude\n    Latitude : float\n        GeoLocation Latitude\n    Asn : str\n        GeoLocation Asn\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.CountryCode}; {self.State}; {self.City}\"\n\n    <DED>_entity_schema = {\n        # str\n        \"CountryCode\": None,\n        # str\n        \"CountryName\": None,\n        # str\n        \"State\": None,\n        # str\n        \"City\": None,\n        # double?\n        \"Longitude\": None,\n        # double?\n        \"Latitude\": None,\n        # int\n        \"Asn\": None,\n    }\n\n\n<DED>@export\nclass Malware(Entity):\n    <IND>\"\"\"\n    Malware Entity class.\n\n    Attributes\n    ----------\n    Name : str\n        Malware Name\n    Category : str\n        Malware Category\n    File : File\n        Malware File\n    Files : List[File]\n        Malware Files\n    Processes : List[Process]\n        Malware Processes\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}: {self.Category}\"\n\n    <DED>_entity_schema = {\n        # Name (type System.String)\n        \"Name\": None,\n        # Category (type System.String)\n        \"Category\": None,\n        # File (type Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.File)\n        \"File\": \"File\",\n        \"Files\": (list, \"File\"),\n        \"Processes\": (list, \"Process\"),\n    }\n\n\n<DED>@export\nclass NetworkConnection(Entity):\n    <IND>\"\"\"\n    NetworkConnection Entity class.\n\n    Attributes\n    ----------\n    SourceAddress : IPAddress\n        NetworkConnection SourceAddress\n    SourcePort : int\n        NetworkConnection SourcePort\n    DestinationAddress : IPAddress\n        NetworkConnection DestinationAddress\n    DestinationPort : int\n        NetworkConnection DestinationPort\n    Protocol : str\n        NetworkConnection Protocol\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"{}:{} [{}]-> {}:{}\".format(\n            self.SourceAddress,\n            self.SourcePort,\n            self.Protocol,\n            self.DestinationAddress,\n            self.DestinationPort,\n        )\n\n    <DED>_entity_schema = {\n        # SourceAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"SourceAddress\": \"IPAddress\",\n        # SourcePort (type System.Nullable`1[System.Int32])\n        \"SourcePort\": None,\n        # DestinationAddress (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.IP)\n        \"DestinationAddress\": \"IPAddress\",\n        # DestinationPort (type System.Nullable`1[System.Int32])\n        \"DestinationPort\": None,\n        # Protocol (type System.Nullable`1[System.Net.Sockets.ProtocolType])\n        \"Protocol\": None,\n    }\n\n\n<DED>@export\nclass Process(Entity):\n    <IND>\"\"\"\n    Process Entity class.\n\n    Attributes\n    ----------\n    ProcessId : str\n        Process ProcessId\n    CommandLine : str\n        Process CommandLine\n    ElevationToken : str\n        Process ElevationToken\n    CreationTimeUtc : datetime\n        Process CreationTimeUtc\n    ImageFile : File\n        Process ImageFile\n    Account : Account\n        Process Account\n    ParentProcess : Process\n        Process ParentProcess\n    Host : Host\n        Process Host\n    LogonSession : HostLogonSession\n        Process LogonSession\n\n    \"\"\"\n\n    def __init__(\n        self,\n        src_entity: Mapping[str, Any] = None,\n        src_event: Mapping[str, Any] = None,\n        role=\"new\",\n        **kwargs,\n    ):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n        src_event : Mapping[str, Any], optional\n            Create entity from event properties\n            (the default is None)\n        role : str, optional\n            'new' or 'parent' - only relevant if the entity\n            is being constructed from an event.\n            (the default is 'new')\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n        # pylint: disable=locally-disabled, line-too-long\n        if src_event is not None:\n            <IND>if role == \"new\":\n                <IND>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.CommandLine = (\n                    src_event[\"CommandLine\"] if \"CommandLine\" in src_event else None\n                )\n                if \"TimeCreatedUtc\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeCreatedUtc\"]\n                <DED>elif \"TimeGenerated\" in src_event:\n                    <IND>self.CreationTimeUtc = src_event[\"TimeGenerated\"]\n                <DED>self.ProcessId = (\n                    src_event[\"NewProcessId\"] if \"NewProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"new\")\n                self.Account = Account(src_event=src_event, role=\"subject\")\n\n                if \"ParentProcessName\" in src_event or \"ProcessName\" in src_event:\n                    <IND>parent = Process(src_event=src_event, role=\"parent\")\n                    self.ParentProcess = parent\n\n                # Linux properties\n                <DED>self.success = src_event[\"success\"] if \"success\" in src_event else None\n                self.audit_user = (\n                    src_event[\"audit_user\"] if \"audit_user\" in src_event else None\n                )\n                self.auid = src_event[\"auid\"] if \"auid\" in src_event else None\n                self.group = src_event[\"group\"] if \"group\" in src_event else None\n                self.gid = src_event[\"gid\"] if \"gid\" in src_event else None\n                self.effective_user = (\n                    src_event[\"effective_user\"]\n                    if \"effective_user\" in src_event\n                    else None\n                )\n                self.euid = src_event[\"euid\"] if \"euid\" in src_event else None\n                self.effective_group = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.egid = (\n                    src_event[\"effective_group\"]\n                    if \"effective_group\" in src_event\n                    else None\n                )\n                self.cwd = src_event[\"cwd\"] if \"cwd\" in src_event else None\n                self.name = src_event[\"cwd\"] if \"cwd\" in src_event else None\n            <DED>else:\n                <IND>self.ProcessId = (\n                    src_event[\"ProcessId\"] if \"ProcessId\" in src_event else None\n                )\n                self.ImageFile = File(src_event=src_event, role=\"parent\")\n\n    # pylint: enable=locally-disabled, line-too-long\n\n    <DED><DED><DED>@property\n    def ProcessName(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.Name if file else None\n\n    <DED>@property\n    def ProcessFilePath(self) -> str:  # noqa: N802\n        <IND>\"\"\"Return the name of the process file path.\"\"\"\n        file = self[\"ImageFile\"]\n        return file.FullPath if file else None\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.ProcessFilePath}: {self.CommandLine}\"\n\n    <DED>_entity_schema = {\n        # ProcessId (type System.String)\n        \"ProcessId\": None,\n        # CommandLine (type System.String)\n        \"CommandLine\": None,\n        # ElevationToken (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.ElevationToken])\n        \"ElevationToken\": None,\n        # CreationTimeUtc (type System.Nullable`1[System.DateTime])\n        \"CreationTimeUtc\": None,\n        # ImageFile (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.File)\n        \"ImageFile\": \"File\",\n        # Account (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Account)\n        \"Account\": \"Account\",\n        # ParentProcess (type Microsoft.Azure.Security.Detection.AlertContracts\n        # .V3.Entities.Process)\n        \"ParentProcess\": \"Process\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.Host)\n        \"Host\": \"Host\",\n        # Host (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.HostLogonSession)\n        \"LogonSession\": \"HostLogonSession\",\n    }\n\n\n<DED>@export\nclass RegistryHive(Enum):\n    <IND>\"\"\"RegistryHive enumeration.\"\"\"\n\n    # <summary>HKEY_LOCAL_MACHINE</summary>\n    HKEY_LOCAL_MACHINE = 0\n    # <summary>HKEY_CLASSES_ROOT</summary>\n    HKEY_CLASSES_ROOT = 1\n    # <summary>HKEY_CURRENT_CONFIG</summary>\n    HKEY_CURRENT_CONFIG = 2\n    # <summary>HKEY_USERS</summary>\n    HKEY_USERS = 3\n    # <summary>HKEY_CURRENT_USER_LOCAL_SETTINGS</summary>\n    HKEY_CURRENT_USER_LOCAL_SETTINGS = 4\n    # <summary>HKEY_PERFORMANCE_DATA</summary>\n    HKEY_PERFORMANCE_DATA = 5\n    # <summary>HKEY_PERFORMANCE_NLSTEXT</summary>\n    HKEY_PERFORMANCE_NLSTEXT = 6\n    # <summary>HKEY_PERFORMANCE_TEXT</summary>\n    HKEY_PERFORMANCE_TEXT = 7\n    # <summary>HKEY_A</summary>\n    HKEY_A = 8\n    # <summary>HKEY_CURRENT_USER</summary>\n    HKEY_CURRENT_USER = 9\n\n\n<DED>_ENTITY_ENUMS[RegistryHive.__name__] = RegistryHive\n\n\n@export\nclass RegistryKey(Entity):\n    <IND>\"\"\"\n    RegistryKey Entity class.\n\n    Attributes\n    ----------\n    Hive : RegistryHive\n        RegistryKey Hive\n    Key : str\n        RegistryKey Key\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Hive}\\\\{self.Key}\"\n\n    <DED>_entity_schema = {\n        # Hive (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Entities.RegistryHive])\n        \"Hive\": \"RegistryHive\",\n        # Key (type System.String)\n        \"Key\": None,\n    }\n\n\n<DED>class RegistryValue(Entity):\n    <IND>\"\"\"\n    RegistryValue Entity class.\n\n    Attributes\n    ----------\n    Key : str\n        RegistryValue Key\n    Name : str\n        RegistryValue Name\n    Value : str\n        RegistryValue Value\n    ValueType : str\n        RegistryValue ValueType\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.Name}[{self.ValueType}]:{repr(self.Value)}\"\n\n    <DED>_entity_schema = {\n        # Key (type Microsoft.Azure.Security.Detection\n        # .AlertContracts.V3.Entities.RegistryKey)\n        \"Key\": None,\n        # Name (type System.String)\n        \"Name\": None,\n        # Value (type System.String)\n        \"Value\": None,\n        # ValueType (type System.Nullable`1[Microsoft.Win32.RegistryValueKind])\n        \"ValueType\": None,\n    }\n\n\n<DED>@export\nclass OSFamily(Enum):\n    <IND>\"\"\"OSFamily enumeration.\"\"\"\n\n    Linux = 0\n    Windows = 1\n\n\n<DED>_ENTITY_ENUMS[OSFamily.__name__] = OSFamily\n\n\n@export\nclass ElevationToken(Enum):\n    <IND>\"\"\"ElevationToken enumeration.\"\"\"\n\n    Default = 0\n    Full = 1\n    Limited = 2\n\n\n<DED>_ENTITY_ENUMS[ElevationToken.__name__] = ElevationToken\n\n\n@export\nclass AzureResource(Entity):\n    <IND>\"\"\"\n    AzureResource Entity class.\n\n    Attributes\n    ----------\n    ResourceId : str\n        AzureResource ResourceId\n    SubscriptionId : str\n        AzureResource SubscriptionId\n    ResourceIdParts : Dict[str, str]\n        AzureResource ResourceIdParts\n\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return self.ResourceId\n\n    <DED>_entity_schema = {\n        # ResourceId (type System.String)\n        \"ResourceId\": None,\n        # SubscriptionId (type System.String)\n        \"SubscriptionId\": None,\n        # ResourceIdParts (type System.Collections.Generic.IReadOnlyDictionary`2\n        # [System.String,System.String])\n        \"ResourceIdParts\": None,\n    }\n\n\n<DED>@export\nclass Alert(Entity):\n    <IND>\"\"\"\n    Alert Entity class.\n\n    Attributes\n    ----------\n    DisplayName : str\n        Alert DisplayName\n    CompromisedEntity : str\n        Alert CompromisedEntity\n    Count : int\n        Alert Count\n    StartTimeUtc : datetime\n        Alert StartTimeUtc\n    EndTimeUtc : datetime\n        Alert EndTimeUtc\n    Severity : str\n        Alert Severity\n    SystemAlertIds : List[str]\n        Alert SystemAlertIds\n    AlertType : str\n        Alert AlertType\n    VendorName : str\n        Alert VendorName\n    ProviderName : str\n        Alert ProviderName\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n        Parameters\n        ----------\n        src_entity : Mapping[str, Any], optional\n            Create entity from existing entity or\n            other mapping object that implements entity properties.\n            (the default is None)\n\n        Other Parameters\n        ----------------\n        kwargs : Dict[str, Any]\n            Supply the entity properties as a set of\n            kw arguments.\n\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # DisplayName (type System.String)\n        \"DisplayName\": None,\n        # CompromisedEntity (type System.String)\n        \"CompromisedEntity\": None,\n        # Count (type System.Nullable`1[System.Int32])\n        \"Count\": None,\n        # StartTimeUtc (type System.Nullable`1[System.DateTime])\n        \"StartTimeUtc\": None,\n        # EndTimeUtc (type System.Nullable`1[System.DateTime])\n        \"EndTimeUtc\": None,\n        # Severity (type System.Nullable`1\n        # [Microsoft.Azure.Security.Detection.AlertContracts.V3.Severity])\n        \"Severity\": None,\n        # SystemAlertIds (type System.Collections.Generic.List`1[System.String])\n        \"SystemAlertIds\": None,\n        # AlertType (type System.String)\n        \"AlertType\": None,\n        # VendorName (type System.String)\n        \"VendorName\": None,\n        # ProviderName (type System.String)\n        \"ProviderName\": None,\n    }\n\n\n<DED>@export\nclass Threatintelligence(Entity):\n    <IND>\"\"\"\n    Threatintelligence Entity class.\n\n    Attributes\n    ----------\n    ProviderName : str\n        Threatintelligence ProviderName\n    ThreatType : str\n        Threatintelligence ThreatType\n    ThreatName : str\n        Threatintelligence ThreatName\n    Confidence : str\n        Threatintelligence Confidence\n    ReportLink : str\n        Threatintelligence ReportLink\n    ThreatDescription : str\n        Threatintelligence ThreatDescription\n\n    \"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return f\"{self.DisplayName} ({self.StartTimeUtc}) {self.CompromisedEntity}\"\n\n    <DED>_entity_schema = {\n        # String Name of the provider from whom this\n        # Threat Intelligence information was received\n        \"ProviderName\": None,\n        \"ThreatType\": None,\n        \"ThreatName\": None,\n        \"Confidence\": None,\n        \"ReportLink\": None,\n        \"ThreatDescription\": None,\n    }\n\n\n<DED>@export\nclass UnknownEntity(Entity):\n    <IND>\"\"\"Generic Entity class.\"\"\"\n\n    def __init__(self, src_entity: Mapping[str, Any] = None, **kwargs):\n        <IND>\"\"\"\n        Create a new instance of the entity type.\n\n            :param src_entity: instantiate entity using properties of src entity\n            :param kwargs: key-value pair representation of entity\n        \"\"\"\n        super().__init__(src_entity=src_entity, **kwargs)\n\n    <DED>@property\n    def description_str(self) -> str:\n        <IND>\"\"\"Return Entity Description.\"\"\"\n        return \"OtherEntity\"\n\n    <DED>_entity_schema = {}  # type: Dict[str, Any]\n\n\n# Dictionary to map text names of types to the class.\n<DED>Entity.ENTITY_NAME_MAP.update(\n    {\n        \"account\": Account,\n        \"host\": Host,\n        \"process\": Process,\n        \"file\": File,\n        \"cloudapplication\": CloudApplication,\n        \"dnsresolve\": DnsResolve,\n        \"ipaddress\": IpAddress,\n        \"ip\": IpAddress,\n        \"networkconnection\": NetworkConnection,\n        \"malware\": Malware,\n        \"registry-key\": RegistryKey,\n        \"registrykey\": RegistryKey,\n        \"registry-value\": RegistryValue,\n        \"registryvalue\": RegistryValue,\n        \"host-logon-session\": HostLogonSession,\n        \"hostlogonsession\": HostLogonSession,\n        \"filehash\": FileHash,\n        \"security-group\": SecurityGroup,\n        \"securitygroup\": SecurityGroup,\n        \"alerts\": Alert,\n        \"alert\": Alert,\n    }\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom ..datamodel.entities import *  # noqa: F403, F401\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/nbwidgets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/nbwidgets.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/nbwidgets.py:276:8 Incompatible variable type [9]: origin_time is declared to have type `datetime` but is used as type `None`.",
    "message": " origin_time is declared to have type `datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 276,
    "warning_line": "        origin_time: datetime = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    _label_style = {\"description_width\": \"initial\"}\n\n    # pylint: disable=too-many-arguments\n    def __init__(\n        self,\n        origin_time: datetime = None,\n        before: Optional[int] = None,\n        after: Optional[int] = None,\n        max_before: Optional[int] = None,\n        max_after: Optional[int] = None,\n        label: str = None,\n        units: str = \"min\",\n        auto_display: bool = False,\n        **kwargs,\n",
        "source_code_len": 432,
        "target_code": "\n    _ALLOWED_KWARGS = [\n        \"origin_time\",\n        \"before\",\n        \"after\",\n        \"start\",\n        \"end\",\n        \"max_before\",\n        \"max_after\",\n        \"label\",\n        \"description\",\n        \"units\",\n        \"auto_display\",\n        \"timespan\",\n        \"register\",\n    ]\n\n    _label_style = {\"description_width\": \"initial\"}\n\n    def __init__(\n        self,\n        **kwargs,\n",
        "target_code_len": 389,
        "diff_format": "@@ -270,15 +272,22 @@\n \n+    _ALLOWED_KWARGS = [\n+        \"origin_time\",\n+        \"before\",\n+        \"after\",\n+        \"start\",\n+        \"end\",\n+        \"max_before\",\n+        \"max_after\",\n+        \"label\",\n+        \"description\",\n+        \"units\",\n+        \"auto_display\",\n+        \"timespan\",\n+        \"register\",\n+    ]\n+\n     _label_style = {\"description_width\": \"initial\"}\n \n-    # pylint: disable=too-many-arguments\n     def __init__(\n         self,\n-        origin_time: datetime = None,\n-        before: Optional[int] = None,\n-        after: Optional[int] = None,\n-        max_before: Optional[int] = None,\n-        max_after: Optional[int] = None,\n-        label: str = None,\n-        units: str = \"min\",\n-        auto_display: bool = False,\n         **kwargs,\n",
        "source_code_with_indent": "\n    _label_style = {\"description_width\": \"initial\"}\n\n    # pylint: disable=too-many-arguments\n    def __init__(\n        self,\n        origin_time: datetime = None,\n        before: Optional[int] = None,\n        after: Optional[int] = None,\n        max_before: Optional[int] = None,\n        max_after: Optional[int] = None,\n        label: str = None,\n        units: str = \"min\",\n        auto_display: bool = False,\n        **kwargs,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    _ALLOWED_KWARGS = [\n        \"origin_time\",\n        \"before\",\n        \"after\",\n        \"start\",\n        \"end\",\n        \"max_before\",\n        \"max_after\",\n        \"label\",\n        \"description\",\n        \"units\",\n        \"auto_display\",\n        \"timespan\",\n        \"register\",\n    ]\n\n    _label_style = {\"description_width\": \"initial\"}\n\n    def __init__(\n        self,\n        **kwargs,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "668732aac0281820031af77d90f830f1ede6a697",
    "filename": "msticpy/nbtools/nbwidgets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/nbwidgets.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/nbwidgets.py:281:8 Incompatible variable type [9]: label is declared to have type `str` but is used as type `None`.",
    "message": " label is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 281,
    "warning_line": "        label: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    _label_style = {\"description_width\": \"initial\"}\n\n    # pylint: disable=too-many-arguments\n    def __init__(\n        self,\n        origin_time: datetime = None,\n        before: Optional[int] = None,\n        after: Optional[int] = None,\n        max_before: Optional[int] = None,\n        max_after: Optional[int] = None,\n        label: str = None,\n        units: str = \"min\",\n        auto_display: bool = False,\n        **kwargs,\n",
        "source_code_len": 432,
        "target_code": "\n    _ALLOWED_KWARGS = [\n        \"origin_time\",\n        \"before\",\n        \"after\",\n        \"start\",\n        \"end\",\n        \"max_before\",\n        \"max_after\",\n        \"label\",\n        \"description\",\n        \"units\",\n        \"auto_display\",\n        \"timespan\",\n        \"register\",\n    ]\n\n    _label_style = {\"description_width\": \"initial\"}\n\n    def __init__(\n        self,\n        **kwargs,\n",
        "target_code_len": 389,
        "diff_format": "@@ -270,15 +272,22 @@\n \n+    _ALLOWED_KWARGS = [\n+        \"origin_time\",\n+        \"before\",\n+        \"after\",\n+        \"start\",\n+        \"end\",\n+        \"max_before\",\n+        \"max_after\",\n+        \"label\",\n+        \"description\",\n+        \"units\",\n+        \"auto_display\",\n+        \"timespan\",\n+        \"register\",\n+    ]\n+\n     _label_style = {\"description_width\": \"initial\"}\n \n-    # pylint: disable=too-many-arguments\n     def __init__(\n         self,\n-        origin_time: datetime = None,\n-        before: Optional[int] = None,\n-        after: Optional[int] = None,\n-        max_before: Optional[int] = None,\n-        max_after: Optional[int] = None,\n-        label: str = None,\n-        units: str = \"min\",\n-        auto_display: bool = False,\n         **kwargs,\n",
        "source_code_with_indent": "\n    _label_style = {\"description_width\": \"initial\"}\n\n    # pylint: disable=too-many-arguments\n    def __init__(\n        self,\n        origin_time: datetime = None,\n        before: Optional[int] = None,\n        after: Optional[int] = None,\n        max_before: Optional[int] = None,\n        max_after: Optional[int] = None,\n        label: str = None,\n        units: str = \"min\",\n        auto_display: bool = False,\n        **kwargs,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    _ALLOWED_KWARGS = [\n        \"origin_time\",\n        \"before\",\n        \"after\",\n        \"start\",\n        \"end\",\n        \"max_before\",\n        \"max_after\",\n        \"label\",\n        \"description\",\n        \"units\",\n        \"auto_display\",\n        \"timespan\",\n        \"register\",\n    ]\n\n    _label_style = {\"description_width\": \"initial\"}\n\n    def __init__(\n        self,\n        **kwargs,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]