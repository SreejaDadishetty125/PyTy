[
  {
    "project": "TheAlgorithms/Python",
    "commit": "977511b3a3711ad9067cc1e8478c696e9f5f157d",
    "filename": "graphs/depth_first_search.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/graphs/depth_first_search.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graphs/depth_first_search.py:32:4 Incompatible return type [7]: Expected `typing.Set[int]` but got `typing.Set[str]`.",
    "message": " Expected `typing.Set[int]` but got `typing.Set[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 32,
    "warning_line": "    return explored",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\ndef depth_first_search(graph: dict, start: str) -> set[int]:\n    \"\"\"Depth First Search on Graph\n    :param graph: directed graph in dictionary format\n    :param vertex: starting vertex as a string\n    :returns: the trace of the search\n    >>> G = { \"A\": [\"B\", \"C\", \"D\"], \"B\": [\"A\", \"D\", \"E\"],\n    ... \"C\": [\"A\", \"F\"], \"D\": [\"B\", \"D\"], \"E\": [\"B\", \"F\"],\n    ... \"F\": [\"C\", \"E\", \"G\"], \"G\": [\"F\"] }\n    >>> start = \"A\"\n    >>> output_G = list({'A', 'B', 'C', 'D', 'E', 'F', 'G'})\n    >>> all(x in output_G for x in list(depth_first_search(G, \"A\")))\n    True\n    >>> all(x in output_G for x in list(depth_first_search(G, \"G\")))\n    True\n",
        "source_code_len": 634,
        "target_code": "\nfrom typing import Set\n\n\ndef depth_first_search(graph: dict, start: str) -> Set[str]:\n    \"\"\"Depth First Search on Graph\n    :param graph: directed graph in dictionary format\n    :param start: starting vertex as a string\n    :returns: the trace of the search\n    >>> input_G = { \"A\": [\"B\", \"C\", \"D\"], \"B\": [\"A\", \"D\", \"E\"],\n    ... \"C\": [\"A\", \"F\"], \"D\": [\"B\", \"D\"], \"E\": [\"B\", \"F\"],\n    ... \"F\": [\"C\", \"E\", \"G\"], \"G\": [\"F\"] }\n    >>> output_G = list({'A', 'B', 'C', 'D', 'E', 'F', 'G'})\n    >>> all(x in output_G for x in list(depth_first_search(input_G, \"A\")))\n    True\n    >>> all(x in output_G for x in list(depth_first_search(input_G, \"G\")))\n    True\n",
        "target_code_len": 655,
        "diff_format": "@@ -4,16 +4,17 @@\n \n+from typing import Set\n \n-def depth_first_search(graph: dict, start: str) -> set[int]:\n+\n+def depth_first_search(graph: dict, start: str) -> Set[str]:\n     \"\"\"Depth First Search on Graph\n     :param graph: directed graph in dictionary format\n-    :param vertex: starting vertex as a string\n+    :param start: starting vertex as a string\n     :returns: the trace of the search\n-    >>> G = { \"A\": [\"B\", \"C\", \"D\"], \"B\": [\"A\", \"D\", \"E\"],\n+    >>> input_G = { \"A\": [\"B\", \"C\", \"D\"], \"B\": [\"A\", \"D\", \"E\"],\n     ... \"C\": [\"A\", \"F\"], \"D\": [\"B\", \"D\"], \"E\": [\"B\", \"F\"],\n     ... \"F\": [\"C\", \"E\", \"G\"], \"G\": [\"F\"] }\n-    >>> start = \"A\"\n     >>> output_G = list({'A', 'B', 'C', 'D', 'E', 'F', 'G'})\n-    >>> all(x in output_G for x in list(depth_first_search(G, \"A\")))\n+    >>> all(x in output_G for x in list(depth_first_search(input_G, \"A\")))\n     True\n-    >>> all(x in output_G for x in list(depth_first_search(G, \"G\")))\n+    >>> all(x in output_G for x in list(depth_first_search(input_G, \"G\")))\n     True\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\ndef depth_first_search(graph: dict, start: str) -> set[int]:\n    <IND>",
        "target_code_with_indent": "\nfrom typing import Set\n\n\ndef depth_first_search(graph: dict, start: str) -> Set[str]:\n    <IND>"
      }
    ]
  }
]