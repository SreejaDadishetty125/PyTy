[
  {
    "project": "common-workflow-language/cwltool",
    "commit": "1e88597545ff07255a076bf0ad57421af3cec89f",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:323:4 Incompatible return type [7]: Expected `None` but got `Tuple[Dict[str, typing.Any], Dict[str, typing.Any]]`.",
    "message": " Expected `None` but got `Tuple[Dict[str, typing.Any], Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 323,
    "warning_line": "    return (deps, absdeps)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def printdeps(obj, document_loader, stdout, relative_deps, uri, basedir=None):\n    # type: (Mapping[Text, Any], Loader, IO[Any], bool, Text, Text) -> None\n    deps = {\"class\": \"File\",\n",
        "source_code_len": 184,
        "target_code": "def printdeps(obj, document_loader, stdout, relative_deps, uri, basedir=None):\n    # type: (Mapping[Text, Any], Loader, IO[Any], bool, Text, Text) -> Tuple[Dict[Text, Any], Dict[Text, Any]]\n    deps = {\"class\": \"File\",\n",
        "target_code_len": 219,
        "diff_format": "@@ -300,3 +300,3 @@\n def printdeps(obj, document_loader, stdout, relative_deps, uri, basedir=None):\n-    # type: (Mapping[Text, Any], Loader, IO[Any], bool, Text, Text) -> None\n+    # type: (Mapping[Text, Any], Loader, IO[Any], bool, Text, Text) -> Tuple[Dict[Text, Any], Dict[Text, Any]]\n     deps = {\"class\": \"File\",\n",
        "source_code_with_indent": "<DED><DED><DED>def printdeps(obj, document_loader, stdout, relative_deps, uri, basedir=None):\n    # type: (Mapping[Text, Any], Loader, IO[Any], bool, Text, Text) -> None\n    <IND>deps = {\"class\": \"File\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def printdeps(obj, document_loader, stdout, relative_deps, uri, basedir=None):\n    # type: (Mapping[Text, Any], Loader, IO[Any], bool, Text, Text) -> Tuple[Dict[Text, Any], Dict[Text, Any]]\n    <IND>deps = {\"class\": \"File\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]