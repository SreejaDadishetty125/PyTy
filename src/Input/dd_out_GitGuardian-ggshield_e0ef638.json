[
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:55:24 Unsupported operand [58]: `-` is not supported for operand types `str` and `typing.Union[int, str]`.",
    "message": " `-` is not supported for operand types `str` and `typing.Union[int, str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 55,
    "warning_line": "        if old_line and line - old_line != 1:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:59:22 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 59,
    "warning_line": "                lines[line].build_line_count(padding, is_secret=True), nl=False,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:67:45 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to anonymous call but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to anonymous call but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "                    f\"{display_patch(content(line)[index:flat_match.index_start])}\",",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:72:48 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to anonymous call but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to anonymous call but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "                    display_match_value(content(line)[flat_match.index_start : index]),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:82:34 Unsupported operand [58]: `+` is not supported for operand types `str` and `int`.",
    "message": " `+` is not supported for operand types `str` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 82,
    "warning_line": "                            lines[line + match_line_index].build_line_count(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:88:40 Unsupported operand [58]: `+` is not supported for operand types `str` and `int`.",
    "message": " `+` is not supported for operand types `str` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 88,
    "warning_line": "                        multiline_end = line + match_line_index",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:92:41 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to anonymous call but got `typing.Union[int, str]`.",
    "message": " Expected `int` for 1st positional only parameter to anonymous call but got `typing.Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 92,
    "warning_line": "                f\"{display_patch(content(multiline_end if multiline_end else line)[index:])}\"  # noqa",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:102:22 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 102,
    "warning_line": "                lines[line].build_line_count(padding, is_secret=False), nl=False,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:104:48 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to anonymous call but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to anonymous call but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 104,
    "warning_line": "            click.echo(f\"{display_patch(content(line))}\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:164:26 Incompatible parameter type [6]: Expected `List[Line]` for 1st positional only parameter to call `get_padding` but got `List[str]`.",
    "message": " Expected `List[Line]` for 1st positional only parameter to call `get_padding` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 164,
    "warning_line": "    padding = get_padding(lines)"
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:175:62 Incompatible parameter type [6]: Expected `List[Line]` for 2nd positional only parameter to call `update_policy_break_matches` but got `List[str]`.",
    "message": " Expected `List[Line]` for 2nd positional only parameter to call `update_policy_break_matches` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 175,
    "warning_line": "            update_policy_break_matches(policy_break.matches, lines, is_patch)"
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:180:16 Incompatible parameter type [6]: Expected `List[Line]` for 2nd positional only parameter to call `leak_message_located` but got `List[str]`.",
    "message": " Expected `List[Line]` for 2nd positional only parameter to call `leak_message_located` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 180,
    "warning_line": "                lines,"
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:296:16 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `set.update` but got `range`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `set.update` but got `range`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 296,
    "warning_line": "                range(max(match.line_start - nb_lines + 1, 0), match.line_start + 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/message.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/message.py:300:20 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `set.update` but got `range`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `set.update` but got `range`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 300,
    "warning_line": "                    range(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_len": 210,
        "target_code": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_len": 210,
        "diff_format": "@@ -288,5 +288,5 @@\n     flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n-) -> Set[str]:\n+) -> Set[int]:\n     \"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n-    lines_to_display: Set[str] = set()\n+    lines_to_display: Set[int] = set()\n \n",
        "source_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[str]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[str] = set()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    flat_matches_dict: Dict[int, List[Match]], lines: List, nb_lines: int\n) -> Set[int]:\n    <IND>\"\"\" Retrieve the line indexes to display in the content with no secrets. \"\"\"\n    lines_to_display: Set[int] = set()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/utils.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/utils.py:52:4 Incompatible return type [7]: Expected `List[str]` but got `List[Line]`.",
    "message": " Expected `List[str]` but got `List[Line]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 52,
    "warning_line": "    return list(get_lines_from_file(content))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    content: str, filemode: Filemode, is_patch: bool, show_secrets: bool\n) -> List[str]:\n    \"\"\"\n",
        "source_code_len": 97,
        "target_code": "    content: str, filemode: Filemode, is_patch: bool, show_secrets: bool\n) -> List[Line]:\n    \"\"\"\n",
        "target_code_len": 98,
        "diff_format": "@@ -37,3 +37,3 @@\n     content: str, filemode: Filemode, is_patch: bool, show_secrets: bool\n-) -> List[str]:\n+) -> List[Line]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    content: str, filemode: Filemode, is_patch: bool, show_secrets: bool\n) -> List[str]:\n    <IND>",
        "target_code_with_indent": "    content: str, filemode: Filemode, is_patch: bool, show_secrets: bool\n) -> List[Line]:\n    <IND>"
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e0ef6389d22d4e2d962284e7875d239b28bbe58d",
    "filename": "ggshield/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/utils.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/utils.py:117:12 Incompatible return type [7]: Expected `List[typing.Any]` but got `typing.Generator[Line, None, None]`.",
    "message": " Expected `List[typing.Any]` but got `typing.Generator[Line, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 117,
    "warning_line": "            yield Line(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_lines_from_patch(content: str, filemode: Filemode) -> List:\n    \"\"\" Return the lines with line number from a git patch. \"\"\"\n",
        "source_code_len": 133,
        "target_code": "\ndef get_lines_from_patch(content: str, filemode: Filemode) -> Iterable[Line]:\n    \"\"\" Return the lines with line number from a git patch. \"\"\"\n",
        "target_code_len": 143,
        "diff_format": "@@ -62,3 +62,3 @@\n \n-def get_lines_from_patch(content: str, filemode: Filemode) -> List:\n+def get_lines_from_patch(content: str, filemode: Filemode) -> Iterable[Line]:\n     \"\"\" Return the lines with line number from a git patch. \"\"\"\n",
        "source_code_with_indent": "\n<DED><DED>def get_lines_from_patch(content: str, filemode: Filemode) -> List:\n    <IND>\"\"\" Return the lines with line number from a git patch. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def get_lines_from_patch(content: str, filemode: Filemode) -> Iterable[Line]:\n    <IND>\"\"\" Return the lines with line number from a git patch. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]