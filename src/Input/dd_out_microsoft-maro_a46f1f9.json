[
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/agent/abs_agent_manager.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/agent/abs_agent_manager.py:43:8 Incompatible variable type [9]: state_shaper is declared to have type `StateShaper` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/abs_agent_manager.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/agent/abs_agent_manager.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/agent/abs_agent_manager.py:44:8 Incompatible variable type [9]: action_shaper is declared to have type `ActionShaper` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/abs_agent_manager.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/agent/abs_agent_manager.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/agent/abs_agent_manager.py:45:8 Incompatible variable type [9]: experience_shaper is declared to have type `ExperienceShaper` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/abs_agent_manager.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/agent/simple_agent_manager.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/agent/simple_agent_manager.py:23:8 Incompatible variable type [9]: state_shaper is declared to have type `StateShaper` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/simple_agent_manager.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/agent/simple_agent_manager.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/agent/simple_agent_manager.py:24:8 Incompatible variable type [9]: action_shaper is declared to have type `ActionShaper` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/simple_agent_manager.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/agent/simple_agent_manager.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/agent/simple_agent_manager.py:25:8 Incompatible variable type [9]: experience_shaper is declared to have type `ExperienceShaper` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/simple_agent_manager.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/agent/simple_agent_manager.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/agent/simple_agent_manager.py:88:4 Inconsistent override [14]: `maro.rl.agent.simple_agent_manager.SimpleAgentManager.train` overrides method defined in `AbsAgentManager` inconsistently. Could not find parameter `experience_by_agent` in overriding signature.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/simple_agent_manager.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/ddpg.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/ddpg.py:57:65 Incompatible variable type [9]: explorer is declared to have type `NoiseExplorer` but is used as type `None`.",
    "message": " explorer is declared to have type `NoiseExplorer` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 57,
    "warning_line": "    def __init__(self, model: LearningModel, config: DDPGConfig, explorer: NoiseExplorer = None):"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/ddpg.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/ddpg.py:80:4 Inconsistent override [14]: `maro.rl.algorithms.ddpg.DDPG.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `maro.rl.algorithms.ddpg.DDPG.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 80,
    "warning_line": "    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        states = torch.from_numpy(states).to(self._device)\n",
        "source_code_len": 168,
        "target_code": "\n    def train(self):\n        if len(self._experience_pool) < self._config.min_exp_to_train:\n            return\n\n        for _ in range(self._config.num_batches):\n            indexes, sample = self._experience_pool.sample(self._config.batch_size)\n            state = np.asarray(sample[\"state\"])\n            action = np.asarray(sample[\"action\"])\n            reward = np.asarray(sample[\"reward\"])\n            next_state = np.asarray(sample[\"next_state\"])\n            self._train_on_batch(state, action, reward, next_state)\n\n    def _train_on_batch(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        states = torch.from_numpy(states).to(self._device)\n",
        "target_code_len": 699,
        "diff_format": "@@ -79,3 +98,15 @@\n \n-    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n+    def train(self):\n+        if len(self._experience_pool) < self._config.min_exp_to_train:\n+            return\n+\n+        for _ in range(self._config.num_batches):\n+            indexes, sample = self._experience_pool.sample(self._config.batch_size)\n+            state = np.asarray(sample[\"state\"])\n+            action = np.asarray(sample[\"action\"])\n+            reward = np.asarray(sample[\"reward\"])\n+            next_state = np.asarray(sample[\"next_state\"])\n+            self._train_on_batch(state, action, reward, next_state)\n+\n+    def _train_on_batch(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n         states = torch.from_numpy(states).to(self._device)\n",
        "source_code_with_indent": "\n    <DED>def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        <IND>states = torch.from_numpy(states).to(self._device)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def train(self):\n        <IND>if len(self._experience_pool) < self._config.min_exp_to_train:\n            <IND>return\n\n        <DED>for _ in range(self._config.num_batches):\n            <IND>indexes, sample = self._experience_pool.sample(self._config.batch_size)\n            state = np.asarray(sample[\"state\"])\n            action = np.asarray(sample[\"action\"])\n            reward = np.asarray(sample[\"reward\"])\n            next_state = np.asarray(sample[\"next_state\"])\n            self._train_on_batch(state, action, reward, next_state)\n\n    <DED><DED>def _train_on_batch(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        <IND>states = torch.from_numpy(states).to(self._device)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/ddpg.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/ddpg.py:80:4 Inconsistent override [14]: `maro.rl.algorithms.ddpg.DDPG.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `maro.rl.algorithms.ddpg.DDPG.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 80,
    "warning_line": "    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        states = torch.from_numpy(states).to(self._device)\n",
        "source_code_len": 168,
        "target_code": "\n    def train(self):\n        if len(self._experience_pool) < self._config.min_exp_to_train:\n            return\n\n        for _ in range(self._config.num_batches):\n            indexes, sample = self._experience_pool.sample(self._config.batch_size)\n            state = np.asarray(sample[\"state\"])\n            action = np.asarray(sample[\"action\"])\n            reward = np.asarray(sample[\"reward\"])\n            next_state = np.asarray(sample[\"next_state\"])\n            self._train_on_batch(state, action, reward, next_state)\n\n    def _train_on_batch(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        states = torch.from_numpy(states).to(self._device)\n",
        "target_code_len": 699,
        "diff_format": "@@ -79,3 +98,15 @@\n \n-    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n+    def train(self):\n+        if len(self._experience_pool) < self._config.min_exp_to_train:\n+            return\n+\n+        for _ in range(self._config.num_batches):\n+            indexes, sample = self._experience_pool.sample(self._config.batch_size)\n+            state = np.asarray(sample[\"state\"])\n+            action = np.asarray(sample[\"action\"])\n+            reward = np.asarray(sample[\"reward\"])\n+            next_state = np.asarray(sample[\"next_state\"])\n+            self._train_on_batch(state, action, reward, next_state)\n+\n+    def _train_on_batch(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n         states = torch.from_numpy(states).to(self._device)\n",
        "source_code_with_indent": "\n    <DED>def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        <IND>states = torch.from_numpy(states).to(self._device)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def train(self):\n        <IND>if len(self._experience_pool) < self._config.min_exp_to_train:\n            <IND>return\n\n        <DED>for _ in range(self._config.num_batches):\n            <IND>indexes, sample = self._experience_pool.sample(self._config.batch_size)\n            state = np.asarray(sample[\"state\"])\n            action = np.asarray(sample[\"action\"])\n            reward = np.asarray(sample[\"reward\"])\n            next_state = np.asarray(sample[\"next_state\"])\n            self._train_on_batch(state, action, reward, next_state)\n\n    <DED><DED>def _train_on_batch(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):\n        <IND>states = torch.from_numpy(states).to(self._device)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/dqn.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/dqn.py:44:8 Incompatible variable type [9]: advantage_mode is declared to have type `str` but is used as type `None`.",
    "message": " advantage_mode is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "        advantage_mode: str = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/dqn.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/dqn.py:125:4 Inconsistent override [14]: `maro.rl.algorithms.dqn.DQN.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `maro.rl.algorithms.dqn.DQN.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 125,
    "warning_line": "    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/dqn.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/dqn.py:125:4 Inconsistent override [14]: `maro.rl.algorithms.dqn.DQN.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `maro.rl.algorithms.dqn.DQN.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 125,
    "warning_line": "    def train(self, states: np.ndarray, actions: np.ndarray, rewards: np.ndarray, next_states: np.ndarray):"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/policy_optimization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/policy_optimization.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/policy_optimization.py:57:4 Inconsistent override [14]: `maro.rl.algorithms.policy_optimization.PolicyOptimization.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `maro.rl.algorithms.policy_optimization.PolicyOptimization.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 57,
    "warning_line": "    def train("
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/policy_optimization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/policy_optimization.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/policy_optimization.py:57:4 Inconsistent override [14]: `maro.rl.algorithms.policy_optimization.PolicyOptimization.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `maro.rl.algorithms.policy_optimization.PolicyOptimization.train` overrides method defined in `AbsAlgorithm` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 57,
    "warning_line": "    def train("
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/algorithms/policy_optimization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/policy_optimization.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/policy_optimization.py:109:8 Incompatible variable type [9]: clip_ratio is declared to have type `float` but is used as type `None`.",
    "message": " clip_ratio is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 109,
    "warning_line": "        clip_ratio: float = None"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/fc_block.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/model/fc_block.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/models/fc_block.py:36:21 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 36,
    "warning_line": "        hidden_dims: [int],"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/fc_block.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/model/fc_block.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/models/fc_block.py:42:8 Incompatible variable type [9]: dropout_p is declared to have type `float` but is used as type `None`.",
    "message": " dropout_p is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 42,
    "warning_line": "        dropout_p: float = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/fc_block.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/model/fc_block.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/models/fc_block.py:43:8 Incompatible variable type [9]: gradient_threshold is declared to have type `float` but is used as type `None`.",
    "message": " gradient_threshold is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 43,
    "warning_line": "        gradient_threshold: float = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/fc_block.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/model/fc_block.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/models/fc_block.py:44:8 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "        name: str = None"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/learning_model.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/models/learning_model.py:27:43 Invalid type [31]: Expression `[maro.rl.models.abs_block.AbsBlock]` is not a valid type.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/models/learning_model.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/learning_model.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/models/learning_model.py:73:8 Incompatible variable type [9]: shared_stack is declared to have type `NNStack` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/models/learning_model.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/learning_model.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/models/learning_model.py:74:8 Incompatible variable type [9]: optimizer_options is declared to have type `Union[Dict[str, OptimizerOptions], OptimizerOptions]` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/models/learning_model.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/learning_model.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/models/learning_model.py:117:28 Invalid type [31]: Expression `[str]` is not a valid type.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/models/learning_model.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/learning_model.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/models/learning_model.py:136:31 Incompatible variable type [9]: task_name is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/models/learning_model.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/learning_model.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/models/learning_model.py:138:21 Call error [29]: `NNStack` is not a function.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/models/learning_model.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/models/learning_model.py",
    "min_patch_found": false,
    "full_warning_msg": "maro/rl/models/learning_model.py:151:30 Incompatible variable type [9]: task_name is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/models/learning_model.py'",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/scheduling/scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/scheduling/scheduler.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/scheduling/scheduler.py:19:36 Incompatible variable type [9]: early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 19,
    "warning_line": "    def __init__(self, max_ep: int, early_stopping_checker: Callable = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable\n\nfrom maro.utils.exception.rl_toolkit_exception import InfiniteTrainingLoop, InvalidEpisode\n\n\nclass Scheduler(object):\n    \"\"\"Scheduler that generates exploration parameters for each episode.\n\n    Args:\n        max_ep (int): Maximum number of episodes to be run. If -1, an early stopping callback is expected to prevent\n            the training loop from running forever.\n        early_stopping_checker (Callable): Function that returns a boolean indicating whether early stopping should\n            be triggered. Defaults to None, in which case no early stopping check will be performed.\n    \"\"\"\n\n    def __init__(self, max_ep: int, early_stopping_checker: Callable = None):\n        if max_ep < -1:\n            raise InvalidEpisode(\"max_episode can only be a non-negative integer or -1.\")\n        if max_ep == -1 and early_stopping_checker is None:\n            raise InfiniteTrainingLoop(\n                \"A positive max_ep or an early stopping checker must be provided to prevent the training loop from \"\n                \"running forever.\"\n            )\n        self._max_ep = max_ep\n        self._early_stopping_checker = early_stopping_checker\n        self._current_ep = -1\n        self._performance_history = []\n        self._exploration_params = None\n\n",
        "source_code_len": 1287,
        "target_code": "\nclass Scheduler(object):\n    \"\"\"Scheduler that generates new parameters each iteration.\n\n    Args:\n        max_iter (int): Maximum number of iterations. If -1, using the scheduler in a for-loop\n            will result in an infinite loop unless the ``check_for_stopping`` method is implemented.\n    \"\"\"\n\n    def __init__(self, max_iter: int = -1):\n        if max_iter <= 0 and max_iter != -1:\n            raise ValueError(\"max_iter must be a positive integer or -1.\")\n        self._max_iter = max_iter\n        self._current_iter = -1\n        self.performance_history = []\n\n",
        "target_code_len": 574,
        "diff_format": "@@ -3,30 +3,16 @@\n \n-from typing import Callable\n-\n-from maro.utils.exception.rl_toolkit_exception import InfiniteTrainingLoop, InvalidEpisode\n-\n-\n class Scheduler(object):\n-    \"\"\"Scheduler that generates exploration parameters for each episode.\n+    \"\"\"Scheduler that generates new parameters each iteration.\n \n     Args:\n-        max_ep (int): Maximum number of episodes to be run. If -1, an early stopping callback is expected to prevent\n-            the training loop from running forever.\n-        early_stopping_checker (Callable): Function that returns a boolean indicating whether early stopping should\n-            be triggered. Defaults to None, in which case no early stopping check will be performed.\n+        max_iter (int): Maximum number of iterations. If -1, using the scheduler in a for-loop\n+            will result in an infinite loop unless the ``check_for_stopping`` method is implemented.\n     \"\"\"\n \n-    def __init__(self, max_ep: int, early_stopping_checker: Callable = None):\n-        if max_ep < -1:\n-            raise InvalidEpisode(\"max_episode can only be a non-negative integer or -1.\")\n-        if max_ep == -1 and early_stopping_checker is None:\n-            raise InfiniteTrainingLoop(\n-                \"A positive max_ep or an early stopping checker must be provided to prevent the training loop from \"\n-                \"running forever.\"\n-            )\n-        self._max_ep = max_ep\n-        self._early_stopping_checker = early_stopping_checker\n-        self._current_ep = -1\n-        self._performance_history = []\n-        self._exploration_params = None\n+    def __init__(self, max_iter: int = -1):\n+        if max_iter <= 0 and max_iter != -1:\n+            raise ValueError(\"max_iter must be a positive integer or -1.\")\n+        self._max_iter = max_iter\n+        self._current_iter = -1\n+        self.performance_history = []\n \n",
        "source_code_with_indent": "\nfrom typing import Callable\n\nfrom maro.utils.exception.rl_toolkit_exception import InfiniteTrainingLoop, InvalidEpisode\n\n\nclass Scheduler(object):\n    <IND>\"\"\"Scheduler that generates exploration parameters for each episode.\n\n    Args:\n        max_ep (int): Maximum number of episodes to be run. If -1, an early stopping callback is expected to prevent\n            the training loop from running forever.\n        early_stopping_checker (Callable): Function that returns a boolean indicating whether early stopping should\n            be triggered. Defaults to None, in which case no early stopping check will be performed.\n    \"\"\"\n\n    def __init__(self, max_ep: int, early_stopping_checker: Callable = None):\n        <IND>if max_ep < -1:\n            <IND>raise InvalidEpisode(\"max_episode can only be a non-negative integer or -1.\")\n        <DED>if max_ep == -1 and early_stopping_checker is None:\n            <IND>raise InfiniteTrainingLoop(\n                \"A positive max_ep or an early stopping checker must be provided to prevent the training loop from \"\n                \"running forever.\"\n            )\n        <DED>self._max_ep = max_ep\n        self._early_stopping_checker = early_stopping_checker\n        self._current_ep = -1\n        self._performance_history = []\n        self._exploration_params = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass Scheduler(object):\n    <IND>\"\"\"Scheduler that generates new parameters each iteration.\n\n    Args:\n        max_iter (int): Maximum number of iterations. If -1, using the scheduler in a for-loop\n            will result in an infinite loop unless the ``check_for_stopping`` method is implemented.\n    \"\"\"\n\n    def __init__(self, max_iter: int = -1):\n        <IND>if max_iter <= 0 and max_iter != -1:\n            <IND>raise ValueError(\"max_iter must be a positive integer or -1.\")\n        <DED>self._max_iter = max_iter\n        self._current_iter = -1\n        self.performance_history = []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/scheduling/simple_parameter_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/scheduling/simple_parameter_scheduler.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/scheduling/simple_parameter_scheduler.py:27:8 Incompatible variable type [9]: early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "        early_stopping_checker: Callable = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/scheduling/simple_parameter_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/scheduling/simple_parameter_scheduler.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/scheduling/simple_parameter_scheduler.py:29:25 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 29,
    "warning_line": "        parameter_names: [str],"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/scheduling/simple_parameter_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/scheduling/simple_parameter_scheduler.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/scheduling/simple_parameter_scheduler.py:78:8 Incompatible variable type [9]: early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 78,
    "warning_line": "        early_stopping_checker: Callable = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable, Union\n\n",
        "source_code_len": 37,
        "target_code": "\nfrom typing import List, Union\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Callable, Union\n+from typing import List, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Callable, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "source_code_len": 188,
        "target_code": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "target_code_len": 134,
        "diff_format": "@@ -25,6 +23,4 @@\n         self,\n-        max_ep: int,\n-        early_stopping_checker: Callable = None,\n-        *,\n-        parameter_names: [str],\n+        max_iter: int,\n+        parameter_names: List[str],\n         start_values: Union[float, list, tuple, np.ndarray],\n",
        "source_code_with_indent": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ):\n        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_len": 135,
        "target_code": "    ):\n        super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_len": 90,
        "diff_format": "@@ -32,3 +28,3 @@\n     ):\n-        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n+        super().__init__(max_iter)\n         self._parameter_names = parameter_names\n",
        "source_code_with_indent": "    ):\n        <IND>super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ):\n        <IND>super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        split_ep: float,\n",
        "source_code_len": 152,
        "target_code": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        split_ep: float,\n",
        "target_code_len": 98,
        "diff_format": "@@ -76,6 +70,4 @@\n         self,\n-        max_ep: int,\n-        early_stopping_checker: Callable = None,\n-        *,\n-        parameter_names: [str],\n+        max_iter: int,\n+        parameter_names: List[str],\n         split_ep: float,\n",
        "source_code_with_indent": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        split_ep: float,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        split_ep: float,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ):\n        if split_ep <= 0 or split_ep >= max_ep:\n            raise ValueError(\"split_ep must be between 0 and max_ep - 1.\")\n        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_len": 258,
        "target_code": "    ):\n        if split_ep <= 0 or split_ep >= max_iter:\n            raise ValueError(\"split_ep must be between 0 and max_iter - 1.\")\n        super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_len": 217,
        "diff_format": "@@ -85,5 +77,5 @@\n     ):\n-        if split_ep <= 0 or split_ep >= max_ep:\n-            raise ValueError(\"split_ep must be between 0 and max_ep - 1.\")\n-        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n+        if split_ep <= 0 or split_ep >= max_iter:\n+            raise ValueError(\"split_ep must be between 0 and max_iter - 1.\")\n+        super().__init__(max_iter)\n         self._parameter_names = parameter_names\n",
        "source_code_with_indent": "    ):\n        <IND>if split_ep <= 0 or split_ep >= max_ep:\n            <IND>raise ValueError(\"split_ep must be between 0 and max_ep - 1.\")\n        <DED>super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ):\n        <IND>if split_ep <= 0 or split_ep >= max_iter:\n            <IND>raise ValueError(\"split_ep must be between 0 and max_iter - 1.\")\n        <DED>super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_ep - split_ep - 1)\n\n    def get_next_exploration_params(self):\n        current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_ep < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "source_code_len": 410,
        "target_code": "        self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_iter - split_ep - 1)\n\n    def next_params(self):\n        current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_iter < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "target_code_len": 398,
        "diff_format": "@@ -108,7 +100,7 @@\n         self._delta_1 = (mid_values - self._current_values) / split_ep\n-        self._delta_2 = (end_values - mid_values) / (max_ep - split_ep - 1)\n+        self._delta_2 = (end_values - mid_values) / (max_iter - split_ep - 1)\n \n-    def get_next_exploration_params(self):\n+    def next_params(self):\n         current_values = self._current_values.copy()\n-        self._current_values += self._delta_1 if self._current_ep < self._split_ep else self._delta_2\n+        self._current_values += self._delta_1 if self._current_iter < self._split_ep else self._delta_2\n         return dict(zip(self._parameter_names, current_values))\n",
        "source_code_with_indent": "        <DED>self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_ep - split_ep - 1)\n\n    <DED>def get_next_exploration_params(self):\n        <IND>current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_ep < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_iter - split_ep - 1)\n\n    <DED>def next_params(self):\n        <IND>current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_iter < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/scheduling/simple_parameter_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/scheduling/simple_parameter_scheduler.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/scheduling/simple_parameter_scheduler.py:80:25 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 80,
    "warning_line": "        parameter_names: [str],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable, Union\n\n",
        "source_code_len": 37,
        "target_code": "\nfrom typing import List, Union\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Callable, Union\n+from typing import List, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Callable, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "source_code_len": 188,
        "target_code": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "target_code_len": 134,
        "diff_format": "@@ -25,6 +23,4 @@\n         self,\n-        max_ep: int,\n-        early_stopping_checker: Callable = None,\n-        *,\n-        parameter_names: [str],\n+        max_iter: int,\n+        parameter_names: List[str],\n         start_values: Union[float, list, tuple, np.ndarray],\n",
        "source_code_with_indent": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        start_values: Union[float, list, tuple, np.ndarray],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ):\n        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_len": 135,
        "target_code": "    ):\n        super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_len": 90,
        "diff_format": "@@ -32,3 +28,3 @@\n     ):\n-        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n+        super().__init__(max_iter)\n         self._parameter_names = parameter_names\n",
        "source_code_with_indent": "    ):\n        <IND>super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ):\n        <IND>super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        split_ep: float,\n",
        "source_code_len": 152,
        "target_code": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        split_ep: float,\n",
        "target_code_len": 98,
        "diff_format": "@@ -76,6 +70,4 @@\n         self,\n-        max_ep: int,\n-        early_stopping_checker: Callable = None,\n-        *,\n-        parameter_names: [str],\n+        max_iter: int,\n+        parameter_names: List[str],\n         split_ep: float,\n",
        "source_code_with_indent": "        self,\n        max_ep: int,\n        early_stopping_checker: Callable = None,\n        *,\n        parameter_names: [str],\n        split_ep: float,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        max_iter: int,\n        parameter_names: List[str],\n        split_ep: float,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ):\n        if split_ep <= 0 or split_ep >= max_ep:\n            raise ValueError(\"split_ep must be between 0 and max_ep - 1.\")\n        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_len": 258,
        "target_code": "    ):\n        if split_ep <= 0 or split_ep >= max_iter:\n            raise ValueError(\"split_ep must be between 0 and max_iter - 1.\")\n        super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_len": 217,
        "diff_format": "@@ -85,5 +77,5 @@\n     ):\n-        if split_ep <= 0 or split_ep >= max_ep:\n-            raise ValueError(\"split_ep must be between 0 and max_ep - 1.\")\n-        super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n+        if split_ep <= 0 or split_ep >= max_iter:\n+            raise ValueError(\"split_ep must be between 0 and max_iter - 1.\")\n+        super().__init__(max_iter)\n         self._parameter_names = parameter_names\n",
        "source_code_with_indent": "    ):\n        <IND>if split_ep <= 0 or split_ep >= max_ep:\n            <IND>raise ValueError(\"split_ep must be between 0 and max_ep - 1.\")\n        <DED>super().__init__(max_ep, early_stopping_checker=early_stopping_checker)\n        self._parameter_names = parameter_names\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ):\n        <IND>if split_ep <= 0 or split_ep >= max_iter:\n            <IND>raise ValueError(\"split_ep must be between 0 and max_iter - 1.\")\n        <DED>super().__init__(max_iter)\n        self._parameter_names = parameter_names\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_ep - split_ep - 1)\n\n    def get_next_exploration_params(self):\n        current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_ep < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "source_code_len": 410,
        "target_code": "        self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_iter - split_ep - 1)\n\n    def next_params(self):\n        current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_iter < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "target_code_len": 398,
        "diff_format": "@@ -108,7 +100,7 @@\n         self._delta_1 = (mid_values - self._current_values) / split_ep\n-        self._delta_2 = (end_values - mid_values) / (max_ep - split_ep - 1)\n+        self._delta_2 = (end_values - mid_values) / (max_iter - split_ep - 1)\n \n-    def get_next_exploration_params(self):\n+    def next_params(self):\n         current_values = self._current_values.copy()\n-        self._current_values += self._delta_1 if self._current_ep < self._split_ep else self._delta_2\n+        self._current_values += self._delta_1 if self._current_iter < self._split_ep else self._delta_2\n         return dict(zip(self._parameter_names, current_values))\n",
        "source_code_with_indent": "        <DED>self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_ep - split_ep - 1)\n\n    <DED>def get_next_exploration_params(self):\n        <IND>current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_ep < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self._delta_1 = (mid_values - self._current_values) / split_ep\n        self._delta_2 = (end_values - mid_values) / (max_iter - split_ep - 1)\n\n    <DED>def next_params(self):\n        <IND>current_values = self._current_values.copy()\n        self._current_values += self._delta_1 if self._current_iter < self._split_ep else self._delta_2\n        return dict(zip(self._parameter_names, current_values))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/storage/column_based_store.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/storage/simple_store.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/storage/column_based_store.py:38:43 Incompatible variable type [9]: overwrite_type is declared to have type `OverwriteType` but is used as type `None`.",
    "message": " overwrite_type is declared to have type `OverwriteType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 38,
    "warning_line": "    def __init__(self, capacity: int = -1, overwrite_type: OverwriteType = None):"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/storage/column_based_store.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/storage/simple_store.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/storage/column_based_store.py:87:27 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 87,
    "warning_line": "    def get(self, indexes: [int]) -> dict:"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/storage/column_based_store.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/storage/simple_store.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/storage/column_based_store.py:90:4 Inconsistent override [14]: `maro.rl.storage.column_based_store.ColumnBasedStore.put` overrides method defined in `AbsStore` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `Sequence[typing.Any]`.",
    "message": " `maro.rl.storage.column_based_store.ColumnBasedStore.put` overrides method defined in `AbsStore` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `Sequence[typing.Any]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 90,
    "warning_line": "    def put(self, contents: dict, overwrite_indexes: Sequence = None) -> List[int]:"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/storage/column_based_store.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/storage/simple_store.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/storage/column_based_store.py:90:34 Incompatible variable type [9]: overwrite_indexes is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "message": " overwrite_indexes is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 90,
    "warning_line": "    def put(self, contents: dict, overwrite_indexes: Sequence = None) -> List[int]:"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/rl/storage/column_based_store.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/storage/simple_store.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/storage/column_based_store.py:122:4 Inconsistent override [14]: `maro.rl.storage.column_based_store.ColumnBasedStore.update` overrides method defined in `AbsStore` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `Sequence[typing.Any]`.",
    "message": " `maro.rl.storage.column_based_store.ColumnBasedStore.update` overrides method defined in `AbsStore` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `Sequence[typing.Any]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 122,
    "warning_line": "    def update(self, indexes: Sequence, contents: dict) -> Sequence:"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/utils/exception/rl_toolkit_exception.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/utils/exception/rl_toolkit_exception.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/utils/exception/rl_toolkit_exception.py:34:23 Incompatible variable type [9]: msg is declared to have type `str` but is used as type `None`.",
    "message": " msg is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "    def __init__(self, msg: str = None):"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/utils/exception/rl_toolkit_exception.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/utils/exception/rl_toolkit_exception.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/utils/exception/rl_toolkit_exception.py:40:23 Incompatible variable type [9]: msg is declared to have type `str` but is used as type `None`.",
    "message": " msg is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "    def __init__(self, msg: str = None):"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/utils/exception/rl_toolkit_exception.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/utils/exception/rl_toolkit_exception.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/utils/exception/rl_toolkit_exception.py:46:23 Incompatible variable type [9]: msg is declared to have type `str` but is used as type `None`.",
    "message": " msg is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 46,
    "warning_line": "    def __init__(self, msg: str = None):"
  },
  {
    "project": "microsoft/maro",
    "commit": "a46f1f9bea5f5786633b45885b261fdc8bdf9235",
    "filename": "maro/utils/exception/rl_toolkit_exception.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/utils/exception/rl_toolkit_exception.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/utils/exception/rl_toolkit_exception.py:52:23 Incompatible variable type [9]: msg is declared to have type `str` but is used as type `None`.",
    "message": " msg is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 52,
    "warning_line": "    def __init__(self, msg: str = None):"
  }
]