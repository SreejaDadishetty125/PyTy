[
  {
    "project": "greyli/apiflask",
    "commit": "410e7c3874380cb910a7215349cf25f7d760390f",
    "filename": "src/apiflask/security.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/greyli-apiflask/src/apiflask/security.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/apiflask/security.py:72:8 Incompatible return type [7]: Expected `typing.Callable[[HTTPError], t.Union[typing.Callable[[t.Dict[str, typing.Any], _typeshed.wsgi.StartResponse], t.Iterable[bytes]], t.Dict[str, typing.Any], t.Generator[str, None, None], t.Tuple[t.Union[t.Dict[str, typing.Any], t.Generator[str, None, None], bytes, flask.wrappers.Response, str], t.Union[t.Dict[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]], t.List[t.Tuple[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]]], werkzeug.datastructures.Headers]], t.Tuple[t.Union[t.Dict[str, typing.Any], t.Generator[str, None, None], bytes, flask.wrappers.Response, str], t.Union[int, str]], t.Tuple[t.Union[t.Dict[str, typing.Any], t.Generator[str, None, None], bytes, flask.wrappers.Response, str], t.Union[int, str], t.Union[t.Dict[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]], t.List[t.Tuple[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]]], werkzeug.datastructures.Headers]], bytes, flask.wrappers.Response, str]]` but got implicit return value of `None`.",
    "message": " Expected `typing.Callable[[HTTPError], t.Union[typing.Callable[[t.Dict[str, typing.Any], _typeshed.wsgi.StartResponse], t.Iterable[bytes]], t.Dict[str, typing.Any], t.Generator[str, None, None], t.Tuple[t.Union[t.Dict[str, typing.Any], t.Generator[str, None, None], bytes, flask.wrappers.Response, str], t.Union[t.Dict[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]], t.List[t.Tuple[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]]], werkzeug.datastructures.Headers]], t.Tuple[t.Union[t.Dict[str, typing.Any], t.Generator[str, None, None], bytes, flask.wrappers.Response, str], t.Union[int, str]], t.Tuple[t.Union[t.Dict[str, typing.Any], t.Generator[str, None, None], bytes, flask.wrappers.Response, str], t.Union[int, str], t.Union[t.Dict[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]], t.List[t.Tuple[str, t.Union[t.List[str], str, typing.Tuple[str, ...]]]], werkzeug.datastructures.Headers]], bytes, flask.wrappers.Response, str]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 72,
    "warning_line": "        self.error_handler(lambda status_code: f(HTTPError(status_code)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        self.error_handler(lambda status_code: f(HTTPError(status_code)))\n\n",
        "source_code_len": 87,
        "target_code": "        \"\"\"\n        self.error_handler(lambda status_code: f(HTTPError(status_code)))  # type: ignore\n\n",
        "target_code_len": 103,
        "diff_format": "@@ -71,3 +71,3 @@\n         \"\"\"\n-        self.error_handler(lambda status_code: f(HTTPError(status_code)))\n+        self.error_handler(lambda status_code: f(HTTPError(status_code)))  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        self.error_handler(lambda status_code: f(HTTPError(status_code)))\n\n",
        "target_code_with_indent": "\n        self.error_handler(lambda status_code: f(HTTPError(status_code)))  # type: ignore\n\n"
      }
    ]
  }
]