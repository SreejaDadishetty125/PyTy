[
  {
    "project": "napari/napari",
    "commit": "41c725f302b8fa24eea7c6307ee799aeb6065a13",
    "filename": "napari/settings/_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/napari-napari/napari/settings/_base.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "napari/settings/_base.py:149:19 Incompatible variable type [9]: path is declared to have type `Union[Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `Union[Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 149,
    "warning_line": "    def save(self, path: Union[str, Path] = None, **dict_kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def save(self, path: Union[str, Path] = None, **dict_kwargs):\n        \"\"\"Save current settings to path.\n",
        "source_code_len": 109,
        "target_code": "\n    def save(self, path: Union[str, Path, None] = None, **dict_kwargs):\n        \"\"\"Save current settings to path.\n",
        "target_code_len": 115,
        "diff_format": "@@ -148,3 +148,3 @@\n \n-    def save(self, path: Union[str, Path] = None, **dict_kwargs):\n+    def save(self, path: Union[str, Path, None] = None, **dict_kwargs):\n         \"\"\"Save current settings to path.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def save(self, path: Union[str, Path] = None, **dict_kwargs):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def save(self, path: Union[str, Path, None] = None, **dict_kwargs):\n        <IND>"
      }
    ]
  },
  {
    "project": "napari/napari",
    "commit": "41c725f302b8fa24eea7c6307ee799aeb6065a13",
    "filename": "napari/settings/_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/napari-napari/napari/settings/_base.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "napari/settings/_base.py:162:19 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `EventedConfigFileSettings._dump` but got `Path`.",
    "message": " Expected `str` for 1st positional only parameter to call `EventedConfigFileSettings._dump` but got `Path`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 162,
    "warning_line": "        self._dump(path, self._save_dict(**dict_kwargs))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        path.parent.mkdir(exist_ok=True, parents=True)\n        self._dump(path, self._save_dict(**dict_kwargs))\n\n    def _dump(self, path: str, data: dict):\n        \"\"\"Encode and dump `data` to `path` using a path-appropriate encoder.\"\"\"\n        if str(path).endswith(('.yaml', '.yml')):\n            data = self._yaml_dump(data)\n        elif str(path).endswith(\".json\"):\n            json_dumps = self.__config__.json_dumps\n            data = json_dumps(data, default=self.__json_encoder__)\n        else:\n",
        "source_code_len": 504,
        "target_code": "        path.parent.mkdir(exist_ok=True, parents=True)\n        self._dump(str(path), self._save_dict(**dict_kwargs))\n\n    def _dump(self, path: str, data: Dict) -> None:\n        \"\"\"Encode and dump `data` to `path` using a path-appropriate encoder.\"\"\"\n        if str(path).endswith(('.yaml', '.yml')):\n            _data = self._yaml_dump(data)\n        elif str(path).endswith(\".json\"):\n            json_dumps = self.__config__.json_dumps\n            _data = json_dumps(data, default=self.__json_encoder__)\n        else:\n",
        "target_code_len": 519,
        "diff_format": "@@ -161,11 +161,11 @@\n         path.parent.mkdir(exist_ok=True, parents=True)\n-        self._dump(path, self._save_dict(**dict_kwargs))\n-\n-    def _dump(self, path: str, data: dict):\n+        self._dump(str(path), self._save_dict(**dict_kwargs))\n+\n+    def _dump(self, path: str, data: Dict) -> None:\n         \"\"\"Encode and dump `data` to `path` using a path-appropriate encoder.\"\"\"\n         if str(path).endswith(('.yaml', '.yml')):\n-            data = self._yaml_dump(data)\n+            _data = self._yaml_dump(data)\n         elif str(path).endswith(\".json\"):\n             json_dumps = self.__config__.json_dumps\n-            data = json_dumps(data, default=self.__json_encoder__)\n+            _data = json_dumps(data, default=self.__json_encoder__)\n         else:\n",
        "source_code_with_indent": "        path.parent.mkdir(exist_ok=True, parents=True)\n        self._dump(path, self._save_dict(**dict_kwargs))\n\n    <DED>def _dump(self, path: str, data: dict):\n        <IND>\"\"\"Encode and dump `data` to `path` using a path-appropriate encoder.\"\"\"\n        if str(path).endswith(('.yaml', '.yml')):\n            <IND>data = self._yaml_dump(data)\n        <DED>elif str(path).endswith(\".json\"):\n            <IND>json_dumps = self.__config__.json_dumps\n            data = json_dumps(data, default=self.__json_encoder__)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        path.parent.mkdir(exist_ok=True, parents=True)\n        self._dump(str(path), self._save_dict(**dict_kwargs))\n\n    <DED>def _dump(self, path: str, data: Dict) -> None:\n        <IND>\"\"\"Encode and dump `data` to `path` using a path-appropriate encoder.\"\"\"\n        if str(path).endswith(('.yaml', '.yml')):\n            <IND>_data = self._yaml_dump(data)\n        <DED>elif str(path).endswith(\".json\"):\n            <IND>json_dumps = self.__config__.json_dumps\n            _data = json_dumps(data, default=self.__json_encoder__)\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        with open(path, 'w') as target:\n            target.write(data)\n\n",
        "source_code_len": 72,
        "target_code": "        with open(path, 'w') as target:\n            target.write(_data)\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -175,3 +175,3 @@\n         with open(path, 'w') as target:\n-            target.write(data)\n+            target.write(_data)\n \n",
        "source_code_with_indent": "        <DED>with open(path, 'w') as target:\n            <IND>target.write(data)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>with open(path, 'w') as target:\n            <IND>target.write(_data)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]