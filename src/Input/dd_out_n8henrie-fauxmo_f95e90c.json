[
  {
    "project": "n8henrie/fauxmo",
    "commit": "f95e90ccb3194e85b04011d8e64eac096ce9fdd9",
    "filename": "src/fauxmo/protocols.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/n8henrie-fauxmo/src/fauxmo/protocols.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/fauxmo/protocols.py:314:4 Inconsistent override [14]: `src.fauxmo.protocols.SSDPServer.datagram_received` overrides method defined in `asyncio.protocols.DatagramProtocol` inconsistently. Could not find parameter `data` in overriding signature.",
    "message": " `src.fauxmo.protocols.SSDPServer.datagram_received` overrides method defined in `asyncio.protocols.DatagramProtocol` inconsistently. Could not find parameter `data` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 314,
    "warning_line": "    def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from email.utils import formatdate\nfrom typing import AnyStr, cast, Iterable, Tuple\n\n",
        "source_code_len": 85,
        "target_code": "from email.utils import formatdate\nfrom typing import cast, Iterable, Text, Tuple, Union\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -6,3 +6,3 @@\n from email.utils import formatdate\n-from typing import AnyStr, cast, Iterable, Tuple\n+from typing import cast, Iterable, Text, Tuple, Union\n \n",
        "source_code_with_indent": "from email.utils import formatdate\nfrom typing import AnyStr, cast, Iterable, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from email.utils import formatdate\nfrom typing import cast, Iterable, Text, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n        \"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        #TODO\n        data_ is a workaround for AnyStr issue with casting (see\n        https://github.com/python/typeshed/issues/439). If\n        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n\n        Args:\n            data_: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data_, bytes):\n            data = data_.decode('utf8')\n        else:\n            data = data_\n\n",
        "source_code_len": 583,
        "target_code": "\n    def datagram_received(self, data: Union[bytes, Text],\n                          addr: Tuple[str, int]) -> None:\n        \"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        Args:\n            data: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data, bytes):\n            data = data.decode('utf8')\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -313,18 +313,12 @@\n \n-    def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n+    def datagram_received(self, data: Union[bytes, Text],\n+                          addr: Tuple[str, int]) -> None:\n         \"\"\"Check incoming UDP data for requests for Wemo devices.\n \n-        #TODO\n-        data_ is a workaround for AnyStr issue with casting (see\n-        https://github.com/python/typeshed/issues/439). If\n-        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n-\n-        Args:\n-            data_: Incoming data content\n+        Args:\n+            data: Incoming data content\n             addr: Address sending data\n         \"\"\"\n-        if isinstance(data_, bytes):\n-            data = data_.decode('utf8')\n-        else:\n-            data = data_\n+        if isinstance(data, bytes):\n+            data = data.decode('utf8')\n \n",
        "source_code_with_indent": "\n    <DED>def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n        <IND>\"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        #TODO\n        data_ is a workaround for AnyStr issue with casting (see\n        https://github.com/python/typeshed/issues/439). If\n        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n\n        Args:\n            data_: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data_, bytes):\n            <IND>data = data_.decode('utf8')\n        <DED>else:\n            <IND>data = data_\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def datagram_received(self, data: Union[bytes, Text],\n                          addr: Tuple[str, int]) -> None:\n        <IND>\"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        Args:\n            data: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data, bytes):\n            <IND>data = data.decode('utf8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "n8henrie/fauxmo",
    "commit": "f95e90ccb3194e85b04011d8e64eac096ce9fdd9",
    "filename": "src/fauxmo/protocols.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/n8henrie-fauxmo/src/fauxmo/protocols.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/fauxmo/protocols.py:341:36 Incompatible parameter type [6]: Expected `typing.Union[bytes, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `bytes.__contains__` but got `str`.",
    "message": " Expected `typing.Union[bytes, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `bytes.__contains__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 341,
    "warning_line": "                                 if pattern in data), None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from email.utils import formatdate\nfrom typing import AnyStr, cast, Iterable, Tuple\n\n",
        "source_code_len": 85,
        "target_code": "from email.utils import formatdate\nfrom typing import cast, Iterable, Text, Tuple, Union\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -6,3 +6,3 @@\n from email.utils import formatdate\n-from typing import AnyStr, cast, Iterable, Tuple\n+from typing import cast, Iterable, Text, Tuple, Union\n \n",
        "source_code_with_indent": "from email.utils import formatdate\nfrom typing import AnyStr, cast, Iterable, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from email.utils import formatdate\nfrom typing import cast, Iterable, Text, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n        \"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        #TODO\n        data_ is a workaround for AnyStr issue with casting (see\n        https://github.com/python/typeshed/issues/439). If\n        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n\n        Args:\n            data_: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data_, bytes):\n            data = data_.decode('utf8')\n        else:\n            data = data_\n\n",
        "source_code_len": 583,
        "target_code": "\n    def datagram_received(self, data: Union[bytes, Text],\n                          addr: Tuple[str, int]) -> None:\n        \"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        Args:\n            data: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data, bytes):\n            data = data.decode('utf8')\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -313,18 +313,12 @@\n \n-    def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n+    def datagram_received(self, data: Union[bytes, Text],\n+                          addr: Tuple[str, int]) -> None:\n         \"\"\"Check incoming UDP data for requests for Wemo devices.\n \n-        #TODO\n-        data_ is a workaround for AnyStr issue with casting (see\n-        https://github.com/python/typeshed/issues/439). If\n-        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n-\n-        Args:\n-            data_: Incoming data content\n+        Args:\n+            data: Incoming data content\n             addr: Address sending data\n         \"\"\"\n-        if isinstance(data_, bytes):\n-            data = data_.decode('utf8')\n-        else:\n-            data = data_\n+        if isinstance(data, bytes):\n+            data = data.decode('utf8')\n \n",
        "source_code_with_indent": "\n    <DED>def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n        <IND>\"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        #TODO\n        data_ is a workaround for AnyStr issue with casting (see\n        https://github.com/python/typeshed/issues/439). If\n        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n\n        Args:\n            data_: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data_, bytes):\n            <IND>data = data_.decode('utf8')\n        <DED>else:\n            <IND>data = data_\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def datagram_received(self, data: Union[bytes, Text],\n                          addr: Tuple[str, int]) -> None:\n        <IND>\"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        Args:\n            data: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data, bytes):\n            <IND>data = data.decode('utf8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "n8henrie/fauxmo",
    "commit": "f95e90ccb3194e85b04011d8e64eac096ce9fdd9",
    "filename": "src/fauxmo/protocols.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/n8henrie-fauxmo/src/fauxmo/protocols.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/fauxmo/protocols.py:342:11 Incompatible parameter type [6]: Expected `typing.Union[bytes, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `bytes.__contains__` but got `str`.",
    "message": " Expected `typing.Union[bytes, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `bytes.__contains__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 342,
    "warning_line": "        if 'MAN: \"ssdp:discover\"' in data and discover_pattern:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from email.utils import formatdate\nfrom typing import AnyStr, cast, Iterable, Tuple\n\n",
        "source_code_len": 85,
        "target_code": "from email.utils import formatdate\nfrom typing import cast, Iterable, Text, Tuple, Union\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -6,3 +6,3 @@\n from email.utils import formatdate\n-from typing import AnyStr, cast, Iterable, Tuple\n+from typing import cast, Iterable, Text, Tuple, Union\n \n",
        "source_code_with_indent": "from email.utils import formatdate\nfrom typing import AnyStr, cast, Iterable, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from email.utils import formatdate\nfrom typing import cast, Iterable, Text, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n        \"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        #TODO\n        data_ is a workaround for AnyStr issue with casting (see\n        https://github.com/python/typeshed/issues/439). If\n        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n\n        Args:\n            data_: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data_, bytes):\n            data = data_.decode('utf8')\n        else:\n            data = data_\n\n",
        "source_code_len": 583,
        "target_code": "\n    def datagram_received(self, data: Union[bytes, Text],\n                          addr: Tuple[str, int]) -> None:\n        \"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        Args:\n            data: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data, bytes):\n            data = data.decode('utf8')\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -313,18 +313,12 @@\n \n-    def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n+    def datagram_received(self, data: Union[bytes, Text],\n+                          addr: Tuple[str, int]) -> None:\n         \"\"\"Check incoming UDP data for requests for Wemo devices.\n \n-        #TODO\n-        data_ is a workaround for AnyStr issue with casting (see\n-        https://github.com/python/typeshed/issues/439). If\n-        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n-\n-        Args:\n-            data_: Incoming data content\n+        Args:\n+            data: Incoming data content\n             addr: Address sending data\n         \"\"\"\n-        if isinstance(data_, bytes):\n-            data = data_.decode('utf8')\n-        else:\n-            data = data_\n+        if isinstance(data, bytes):\n+            data = data.decode('utf8')\n \n",
        "source_code_with_indent": "\n    <DED>def datagram_received(self, data_: AnyStr, addr: Tuple[str, int]) -> None:\n        <IND>\"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        #TODO\n        data_ is a workaround for AnyStr issue with casting (see\n        https://github.com/python/typeshed/issues/439). If\n        https://github.com/python/typeshed/pull/1819 is merged, fix this.\n\n        Args:\n            data_: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data_, bytes):\n            <IND>data = data_.decode('utf8')\n        <DED>else:\n            <IND>data = data_\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def datagram_received(self, data: Union[bytes, Text],\n                          addr: Tuple[str, int]) -> None:\n        <IND>\"\"\"Check incoming UDP data for requests for Wemo devices.\n\n        Args:\n            data: Incoming data content\n            addr: Address sending data\n        \"\"\"\n        if isinstance(data, bytes):\n            <IND>data = data.decode('utf8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]