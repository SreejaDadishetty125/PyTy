[
  {
    "project": "syrusakbary/promise",
    "commit": "03bd9902d9a583f42ec7d4e41d346bed60867ba2",
    "filename": "promise/promise.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/syrusakbary-promise/promise/promise.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "promise/promise.py:794:12 Incompatible return type [7]: Expected `Promise[Dict[Hashable, Variable[S](contravariant)]]` but got `Promise[Variable[T]]`.",
    "message": " Expected `Promise[Dict[Hashable, Variable[S](contravariant)]]` but got `Promise[Variable[T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 794,
    "warning_line": "            return cls.resolve(dict_type())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if not m:\n            return cls.resolve(dict_type())\n\n",
        "source_code_len": 63,
        "target_code": "        if not m:\n            return cls.resolve(dict_type())  # type: ignore\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -793,3 +793,3 @@\n         if not m:\n-            return cls.resolve(dict_type())\n+            return cls.resolve(dict_type())  # type: ignore\n \n",
        "source_code_with_indent": "        if not m:\n            <IND>return cls.resolve(dict_type())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if not m:\n            <IND>return cls.resolve(dict_type())  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "syrusakbary/promise",
    "commit": "03bd9902d9a583f42ec7d4e41d346bed60867ba2",
    "filename": "promise/promise.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/syrusakbary-promise/promise/promise.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "promise/promise.py:794:31 Incompatible parameter type [6]: Expected `Variable[T]` for 1st positional only parameter to call `Promise.resolve` but got `Dict[Hashable, Promise[Variable[S](contravariant)]]`.",
    "message": " Expected `Variable[T]` for 1st positional only parameter to call `Promise.resolve` but got `Dict[Hashable, Promise[Variable[S](contravariant)]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 794,
    "warning_line": "            return cls.resolve(dict_type())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if not m:\n            return cls.resolve(dict_type())\n\n",
        "source_code_len": 63,
        "target_code": "        if not m:\n            return cls.resolve(dict_type())  # type: ignore\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -793,3 +793,3 @@\n         if not m:\n-            return cls.resolve(dict_type())\n+            return cls.resolve(dict_type())  # type: ignore\n \n",
        "source_code_with_indent": "        if not m:\n            <IND>return cls.resolve(dict_type())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if not m:\n            <IND>return cls.resolve(dict_type())  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]