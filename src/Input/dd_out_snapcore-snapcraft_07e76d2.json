[
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/cli/_channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/cli/_channel_map.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/cli/_channel_map.py:123:8 Incompatible parameter type [6]: Expected `str` for 2nd parameter `fallback` to call `_get_channel_hint` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `fallback` to call `_get_channel_hint` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "        fallback=channel_info.fallback,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_channel_hint(*, channel_map, fallback: str, architecture: str) -> str:\n    tick = _HINTS.CLOSED\n",
        "source_code_len": 106,
        "target_code": "\ndef _get_channel_hint(\n    *, channel_map, fallback: Optional[str], architecture: str\n) -> str:\n    tick = _HINTS.CLOSED\n",
        "target_code_len": 122,
        "diff_format": "@@ -39,3 +39,5 @@\n \n-def _get_channel_hint(*, channel_map, fallback: str, architecture: str) -> str:\n+def _get_channel_hint(\n+    *, channel_map, fallback: Optional[str], architecture: str\n+) -> str:\n     tick = _HINTS.CLOSED\n",
        "source_code_with_indent": "\n<DED>def _get_channel_hint(*, channel_map, fallback: str, architecture: str) -> str:\n    <IND>tick = _HINTS.CLOSED\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _get_channel_hint(\n    *, channel_map, fallback: Optional[str], architecture: str\n) -> str:\n    <IND>tick = _HINTS.CLOSED\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/cli/_channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/cli/_channel_map.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/cli/_channel_map.py:151:18 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 151,
    "warning_line": "            100 - progressive_mapped_channel.progressive.percentage,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        # Setup progress for the actually released revision, this needs to be\n        # calculated. But only show it if the channel is open.\n        progress_string = \"{} {:.0f}%\".format(\n            _HINTS.PROGRESSING_TO,\n            100 - progressive_mapped_channel.progressive.percentage,\n        )\n    else:\n",
        "source_code_len": 322,
        "target_code": "        )\n        if progressive_mapped_channel.progressive.percentage is None:\n            percentage = 0.0\n        else:\n            percentage = progressive_mapped_channel.progressive.percentage\n        # Setup progress for the actually released revision, this needs to be\n        # calculated. But only show it if the channel is open.\n        progress_string = \"{} {:.0f}%\".format(_HINTS.PROGRESSING_TO, 100 - percentage)\n    else:\n",
        "target_code_len": 436,
        "diff_format": "@@ -146,8 +149,9 @@\n         )\n+        if progressive_mapped_channel.progressive.percentage is None:\n+            percentage = 0.0\n+        else:\n+            percentage = progressive_mapped_channel.progressive.percentage\n         # Setup progress for the actually released revision, this needs to be\n         # calculated. But only show it if the channel is open.\n-        progress_string = \"{} {:.0f}%\".format(\n-            _HINTS.PROGRESSING_TO,\n-            100 - progressive_mapped_channel.progressive.percentage,\n-        )\n+        progress_string = \"{} {:.0f}%\".format(_HINTS.PROGRESSING_TO, 100 - percentage)\n     else:\n",
        "source_code_with_indent": "        )\n        # Setup progress for the actually released revision, this needs to be\n        # calculated. But only show it if the channel is open.\n        progress_string = \"{} {:.0f}%\".format(\n            _HINTS.PROGRESSING_TO,\n            100 - progressive_mapped_channel.progressive.percentage,\n        )\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        if progressive_mapped_channel.progressive.percentage is None:\n            <IND>percentage = 0.0\n        <DED>else:\n            <IND>percentage = progressive_mapped_channel.progressive.percentage\n        # Setup progress for the actually released revision, this needs to be\n        # calculated. But only show it if the channel is open.\n        <DED>progress_string = \"{} {:.0f}%\".format(_HINTS.PROGRESSING_TO, 100 - percentage)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:46:12 Incompatible parameter type [6]: Expected `Optional[str]` for 1st parameter `key` to call `Progressive.__init__` but got `Union[None, bool, str]`.",
    "message": " Expected `Optional[str]` for 1st parameter `key` to call `Progressive.__init__` but got `Union[None, bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 46,
    "warning_line": "            key=payload[\"key\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n        jsonschema.validate(\n",
        "source_code_len": 135,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n        jsonschema.validate(\n",
        "target_code_len": 112,
        "diff_format": "@@ -37,3 +37,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:47:12 Incompatible parameter type [6]: Expected `Optional[bool]` for 2nd parameter `paused` to call `Progressive.__init__` but got `Union[None, bool, str]`.",
    "message": " Expected `Optional[bool]` for 2nd parameter `paused` to call `Progressive.__init__` but got `Union[None, bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "            paused=payload[\"paused\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n        jsonschema.validate(\n",
        "source_code_len": 135,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n        jsonschema.validate(\n",
        "target_code_len": 112,
        "diff_format": "@@ -37,3 +37,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:48:12 Incompatible parameter type [6]: Expected `Optional[float]` for 3rd parameter `percentage` to call `Progressive.__init__` but got `Union[None, bool, str]`.",
    "message": " Expected `Optional[float]` for 3rd parameter `percentage` to call `Progressive.__init__` but got `Union[None, bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "            percentage=payload[\"percentage\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n        jsonschema.validate(\n",
        "source_code_len": 135,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n        jsonschema.validate(\n",
        "target_code_len": 112,
        "diff_format": "@@ -37,3 +37,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[str, Optional[bool]]]) -> \"Progressive\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Progressive\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:52:8 Incompatible return type [7]: Expected `Dict[str, Union[None, bool, str]]` but got `Dict[str, Union[None, bool, float, str]]`.",
    "message": " Expected `Dict[str, Union[None, bool, str]]` but got `Dict[str, Union[None, bool, float, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 52,
    "warning_line": "        return {\"key\": self.key, \"paused\": self.paused, \"percentage\": self.percentage}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def marshal(self) -> Dict[str, Union[str, Optional[bool]]]:\n        return {\"key\": self.key, \"paused\": self.paused, \"percentage\": self.percentage}\n",
        "source_code_len": 152,
        "target_code": "\n    def marshal(self) -> Dict[str, Any]:\n        return {\"key\": self.key, \"paused\": self.paused, \"percentage\": self.percentage}\n",
        "target_code_len": 129,
        "diff_format": "@@ -50,3 +50,3 @@\n \n-    def marshal(self) -> Dict[str, Union[str, Optional[bool]]]:\n+    def marshal(self) -> Dict[str, Any]:\n         return {\"key\": self.key, \"paused\": self.paused, \"percentage\": self.percentage}\n",
        "source_code_with_indent": "\n    <DED>def marshal(self) -> Dict[str, Union[str, Optional[bool]]]:\n        <IND>return {\"key\": self.key, \"paused\": self.paused, \"percentage\": self.percentage}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def marshal(self) -> Dict[str, Any]:\n        <IND>return {\"key\": self.key, \"paused\": self.paused, \"percentage\": self.percentage}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:122:12 Incompatible parameter type [6]: Expected `int` for 1st parameter `revision` to call `Revision.__init__` but got `Union[List[str], int, str]`.",
    "message": " Expected `int` for 1st parameter `revision` to call `Revision.__init__` but got `Union[List[str], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 122,
    "warning_line": "            revision=payload[\"revision\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n        jsonschema.validate(\n",
        "source_code_len": 132,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n        jsonschema.validate(\n",
        "target_code_len": 109,
        "diff_format": "@@ -116,3 +116,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:123:12 Incompatible parameter type [6]: Expected `str` for 2nd parameter `version` to call `Revision.__init__` but got `Union[List[str], int, str]`.",
    "message": " Expected `str` for 2nd parameter `version` to call `Revision.__init__` but got `Union[List[str], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "            version=payload[\"version\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n        jsonschema.validate(\n",
        "source_code_len": 132,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n        jsonschema.validate(\n",
        "target_code_len": 109,
        "diff_format": "@@ -116,3 +116,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:124:12 Incompatible parameter type [6]: Expected `List[str]` for 3rd parameter `architectures` to call `Revision.__init__` but got `Union[List[str], int, str]`.",
    "message": " Expected `List[str]` for 3rd parameter `architectures` to call `Revision.__init__` but got `Union[List[str], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "            architectures=payload[\"architectures\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n        jsonschema.validate(\n",
        "source_code_len": 132,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n        jsonschema.validate(\n",
        "target_code_len": 109,
        "diff_format": "@@ -116,3 +116,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Union[int, str, List[str]]]) -> \"Revision\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"Revision\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:159:12 Incompatible parameter type [6]: Expected `str` for 1st parameter `name` to call `SnapChannel.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `name` to call `SnapChannel.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "            name=payload[\"name\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n        jsonschema.validate(\n",
        "source_code_len": 122,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n        jsonschema.validate(\n",
        "target_code_len": 112,
        "diff_format": "@@ -150,3 +150,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:160:12 Incompatible parameter type [6]: Expected `str` for 2nd parameter `track` to call `SnapChannel.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `track` to call `SnapChannel.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 160,
    "warning_line": "            track=payload[\"track\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n        jsonschema.validate(\n",
        "source_code_len": 122,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n        jsonschema.validate(\n",
        "target_code_len": 112,
        "diff_format": "@@ -150,3 +150,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snapcore/snapcraft",
    "commit": "07e76d237dbf73bbda69b5e984d74a4edefe0580",
    "filename": "snapcraft/storeapi/v2/channel_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snapcore-snapcraft/snapcraft/storeapi/v2/channel_map.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snapcraft/storeapi/v2/channel_map.py:161:12 Incompatible parameter type [6]: Expected `str` for 3rd parameter `risk` to call `SnapChannel.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd parameter `risk` to call `SnapChannel.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 161,
    "warning_line": "            risk=payload[\"risk\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n        jsonschema.validate(\n",
        "source_code_len": 122,
        "target_code": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n        jsonschema.validate(\n",
        "target_code_len": 112,
        "diff_format": "@@ -150,3 +150,3 @@\n     @classmethod\n-    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n+    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n         jsonschema.validate(\n",
        "source_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Optional[str]]) -> \"SnapChannel\":\n        <IND>jsonschema.validate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def unmarshal(cls, payload: Dict[str, Any]) -> \"SnapChannel\":\n        <IND>jsonschema.validate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]