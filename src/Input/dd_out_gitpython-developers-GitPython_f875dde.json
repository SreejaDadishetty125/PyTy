[
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/diff.py",
    "min_patch_found": false,
    "full_warning_msg": "git/diff.py:291:38 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `mode_str_to_int` but got `Union[bytes, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/diff.py",
    "min_patch_found": false,
    "full_warning_msg": "git/diff.py:292:38 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `mode_str_to_int` but got `Union[bytes, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/base.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/base.py:81:19 Call error [29]: `Union[Blob, Commit, TagObject, Tree]` is not a function.",
    "message": " `Union[Blob, Commit, TagObject, Tree]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 81,
    "warning_line": "            return get_object_type_by_name(b'commit')(repo, sha1)"
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/base.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/base.py:81:43 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_object_type_by_name` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_object_type_by_name` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 81,
    "warning_line": "            return get_object_type_by_name(b'commit')(repo, sha1)"
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/base.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/base.py:84:15 Call error [29]: `Union[Blob, Commit, TagObject, Tree]` is not a function.",
    "message": " `Union[Blob, Commit, TagObject, Tree]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 84,
    "warning_line": "        inst = get_object_type_by_name(oinfo.type)(repo, oinfo.binsha)"
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/tag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/tag.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/tag.py:66:16 Call error [29]: `Union[TagObject, git.objects.blob.Blob, git.objects.commit.Commit, git.objects.tree.Tree]` is not a function.",
    "message": " `Union[TagObject, git.objects.blob.Blob, git.objects.commit.Commit, git.objects.tree.Tree]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 66,
    "warning_line": "                get_object_type_by_name(type_name.encode('ascii'))(self.repo, hex_to_bin(hexsha))"
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/tag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/tag.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/tag.py:66:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_object_type_by_name` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_object_type_by_name` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "                get_object_type_by_name(type_name.encode('ascii'))(self.repo, hex_to_bin(hexsha))"
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/util.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/util.py:64:8 Incompatible return type [7]: Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[Commit]`.",
    "message": " Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[Commit]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 64,
    "warning_line": "        return commit.Commit",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_len": 139,
        "diff_format": "@@ -20,3 +20,3 @@\n # typing ------------------------------------------------------------\n-from typing import Literal, TYPE_CHECKING, Tuple, Union\n+from typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n \n",
        "source_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\ndef get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    \"\"\"\n",
        "target_code_len": 164,
        "diff_format": "@@ -53,3 +54,4 @@\n \n-def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n+def get_object_type_by_name(object_type_name: bytes\n+                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    <IND>"
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/util.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/util.py:67:8 Incompatible return type [7]: Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[TagObject]`.",
    "message": " Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[TagObject]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 67,
    "warning_line": "        return tag.TagObject",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_len": 139,
        "diff_format": "@@ -20,3 +20,3 @@\n # typing ------------------------------------------------------------\n-from typing import Literal, TYPE_CHECKING, Tuple, Union\n+from typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n \n",
        "source_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\ndef get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    \"\"\"\n",
        "target_code_len": 164,
        "diff_format": "@@ -53,3 +54,4 @@\n \n-def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n+def get_object_type_by_name(object_type_name: bytes\n+                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    <IND>"
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/util.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/util.py:70:8 Incompatible return type [7]: Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[Blob]`.",
    "message": " Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[Blob]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "        return blob.Blob",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_len": 139,
        "diff_format": "@@ -20,3 +20,3 @@\n # typing ------------------------------------------------------------\n-from typing import Literal, TYPE_CHECKING, Tuple, Union\n+from typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n \n",
        "source_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\ndef get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    \"\"\"\n",
        "target_code_len": 164,
        "diff_format": "@@ -53,3 +54,4 @@\n \n-def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n+def get_object_type_by_name(object_type_name: bytes\n+                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    <IND>"
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "f875ddea28b09f2b78496266c80502d5dc2b7411",
    "filename": "git/objects/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/util.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/util.py:73:8 Incompatible return type [7]: Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[Tree]`.",
    "message": " Expected `Union[Blob, Commit, TagObject, Tree]` but got `typing.Type[Tree]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 73,
    "warning_line": "        return tree.Tree",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_len": 139,
        "diff_format": "@@ -20,3 +20,3 @@\n # typing ------------------------------------------------------------\n-from typing import Literal, TYPE_CHECKING, Tuple, Union\n+from typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n \n",
        "source_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# typing ------------------------------------------------------------\nfrom typing import Literal, TYPE_CHECKING, Tuple, Type, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\ndef get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    \"\"\"\n",
        "target_code_len": 164,
        "diff_format": "@@ -53,3 +54,4 @@\n \n-def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n+def get_object_type_by_name(object_type_name: bytes\n+                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: str) -> Union['Commit', 'TagObject', 'Tree', 'Blob']:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_object_type_by_name(object_type_name: bytes\n                            ) -> Union[Type['Commit'], Type['TagObject'], Type['Tree'], Type['Blob']]:\n    <IND>"
      }
    ]
  }
]