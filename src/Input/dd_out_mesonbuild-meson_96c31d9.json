[
  {
    "project": "mesonbuild/meson",
    "commit": "96c31d9dbced6a6537dc04bdd9505fbbbb8ff9bf",
    "filename": "tools/boost_names.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/tools/boost_names.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tools/boost_names.py:226:21 Incompatible parameter type [6]: Expected `T.Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `sorted` but got `T.List[BoostModule]`.",
    "message": " Expected `T.Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `sorted` but got `T.List[BoostModule]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 226,
    "warning_line": "    modules = sorted(modules)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __lt__(self, other: object) -> T.Union[bool, 'NotImplemented']:\n        if isinstance(other, BoostLibrary):\n",
        "source_code_len": 117,
        "target_code": "\n    def __lt__(self, other: object) -> bool:\n        if isinstance(other, BoostLibrary):\n",
        "target_code_len": 90,
        "diff_format": "@@ -50,3 +50,3 @@\n \n-    def __lt__(self, other: object) -> T.Union[bool, 'NotImplemented']:\n+    def __lt__(self, other: object) -> bool:\n         if isinstance(other, BoostLibrary):\n",
        "source_code_with_indent": "\n    <DED>def __lt__(self, other: object) -> T.Union[bool, 'NotImplemented']:\n        <IND>if isinstance(other, BoostLibrary):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __lt__(self, other: object) -> bool:\n        <IND>if isinstance(other, BoostLibrary):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __lt__(self, other: object) -> T.Union[bool, 'NotImplemented']:\n        if isinstance(other, BoostModule):\n",
        "source_code_len": 116,
        "target_code": "\n    def __lt__(self, other: object) -> bool:\n        if isinstance(other, BoostModule):\n",
        "target_code_len": 89,
        "diff_format": "@@ -73,3 +73,3 @@\n \n-    def __lt__(self, other: object) -> T.Union[bool, 'NotImplemented']:\n+    def __lt__(self, other: object) -> bool:\n         if isinstance(other, BoostModule):\n",
        "source_code_with_indent": "\n    <DED>def __lt__(self, other: object) -> T.Union[bool, 'NotImplemented']:\n        <IND>if isinstance(other, BoostModule):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __lt__(self, other: object) -> bool:\n        <IND>if isinstance(other, BoostModule):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]