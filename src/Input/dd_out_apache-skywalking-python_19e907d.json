[
  {
    "project": "apache/skywalking-python",
    "commit": "19e907d2bf11f2a629bc7bc480eeb9efe1f95b8c",
    "filename": "skywalking/trace/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-skywalking-python/skywalking/trace/context.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "skywalking/trace/context.py:229:38 Incompatible variable type [9]: carrier is declared to have type `Carrier` but is used as type `None`.",
    "message": " carrier is declared to have type `Carrier` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 229,
    "warning_line": "    def new_entry_span(self, op: str, carrier: 'Carrier' = None) -> Span:"
  },
  {
    "project": "apache/skywalking-python",
    "commit": "19e907d2bf11f2a629bc7bc480eeb9efe1f95b8c",
    "filename": "skywalking/trace/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-skywalking-python/skywalking/trace/context.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "skywalking/trace/context.py:234:48 Incompatible variable type [9]: carrier is declared to have type `Carrier` but is used as type `None`.",
    "message": " carrier is declared to have type `Carrier` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 234,
    "warning_line": "    def new_exit_span(self, op: str, peer: str, carrier: 'Carrier' = None) -> Span:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def new_exit_span(self, op: str, peer: str, carrier: 'Carrier' = None) -> Span:\n        span = self.ignore_check(op, Kind.Exit)\n",
        "source_code_len": 133,
        "target_code": "\n    def new_exit_span(self, op: str, peer: str) -> Span:\n        span = self.ignore_check(op, Kind.Exit)\n",
        "target_code_len": 106,
        "diff_format": "@@ -113,3 +114,3 @@\n \n-    def new_exit_span(self, op: str, peer: str, carrier: 'Carrier' = None) -> Span:\n+    def new_exit_span(self, op: str, peer: str) -> Span:\n         span = self.ignore_check(op, Kind.Exit)\n",
        "source_code_with_indent": "\n    <DED>def new_exit_span(self, op: str, peer: str, carrier: 'Carrier' = None) -> Span:\n        <IND>span = self.ignore_check(op, Kind.Exit)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def new_exit_span(self, op: str, peer: str) -> Span:\n        <IND>span = self.ignore_check(op, Kind.Exit)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        )\n\n        if carrier is not None:\n            span.inject(carrier=carrier)\n\n",
        "source_code_len": 85,
        "target_code": "        )\n\n",
        "target_code_len": 11,
        "diff_format": "@@ -128,5 +129,2 @@\n         )\n-\n-        if carrier is not None:\n-            span.inject(carrier=carrier)\n \n",
        "source_code_with_indent": "        )\n\n        if carrier is not None:\n            <IND>span.inject(carrier=carrier)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def new_exit_span(self, op: str, peer: str, carrier: 'Carrier' = None) -> Span:\n        if carrier is not None:\n            self._noop_span.inject(carrier)\n\n        return self._noop_span\n",
        "source_code_len": 193,
        "target_code": "\n    def new_exit_span(self, op: str, peer: str) -> Span:\n        return self._noop_span\n",
        "target_code_len": 89,
        "diff_format": "@@ -233,6 +232,3 @@\n \n-    def new_exit_span(self, op: str, peer: str, carrier: 'Carrier' = None) -> Span:\n-        if carrier is not None:\n-            self._noop_span.inject(carrier)\n-\n+    def new_exit_span(self, op: str, peer: str) -> Span:\n         return self._noop_span\n",
        "source_code_with_indent": "\n    <DED>def new_exit_span(self, op: str, peer: str, carrier: 'Carrier' = None) -> Span:\n        <IND>if carrier is not None:\n            <IND>self._noop_span.inject(carrier)\n\n        <DED>return self._noop_span\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def new_exit_span(self, op: str, peer: str) -> Span:\n        <IND>return self._noop_span\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]