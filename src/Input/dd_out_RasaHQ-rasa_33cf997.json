[
  {
    "project": "RasaHQ/rasa",
    "commit": "33cf997b925ffde129c4c2d823825bd07edd16ce",
    "filename": "rasa/data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RasaHQ-rasa/rasa/data.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rasa/data.py:98:4 Incompatible return type [7]: Expected `Tuple[Set[str], Set[str]]` but got `Tuple[List[typing.Any], List[typing.Any]]`.",
    "message": " Expected `Tuple[Set[str], Set[str]]` but got `Tuple[List[typing.Any], List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 98,
    "warning_line": "    return sorted(story_files), sorted(nlu_data_files)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Tuple, List, Text, Set, Union, Optional\nfrom rasa.nlu.training_data import loading\n",
        "source_code_len": 112,
        "target_code": "import re\nfrom typing import Tuple, List, Text, Set, Union, Optional, Iterable\nfrom rasa.nlu.training_data import loading\n",
        "target_code_len": 122,
        "diff_format": "@@ -6,3 +6,3 @@\n import re\n-from typing import Tuple, List, Text, Set, Union, Optional\n+from typing import Tuple, List, Text, Set, Union, Optional, Iterable\n from rasa.nlu.training_data import loading\n",
        "source_code_with_indent": "import re\nfrom typing import Tuple, List, Text, Set, Union, Optional\nfrom rasa.nlu.training_data import loading\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Tuple, List, Text, Set, Union, Optional, Iterable\nfrom rasa.nlu.training_data import loading\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    paths: Optional[Union[Text, List[Text]]]\n) -> Tuple[Set[Text], Set[Text]]:\n    \"\"\"Recursively collects all training files from a list of paths.\n",
        "source_code_len": 148,
        "target_code": "    paths: Optional[Union[Text, List[Text]]]\n) -> Tuple[List[Text], List[Text]]:\n    \"\"\"Recursively collects all training files from a list of paths.\n",
        "target_code_len": 150,
        "diff_format": "@@ -62,3 +62,3 @@\n     paths: Optional[Union[Text, List[Text]]]\n-) -> Tuple[Set[Text], Set[Text]]:\n+) -> Tuple[List[Text], List[Text]]:\n     \"\"\"Recursively collects all training files from a list of paths.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    paths: Optional[Union[Text, List[Text]]]\n) -> Tuple[Set[Text], Set[Text]]:\n    <IND>",
        "target_code_with_indent": "    paths: Optional[Union[Text, List[Text]]]\n) -> Tuple[List[Text], List[Text]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _copy_files_to_new_dir(files: Set[Text]) -> Text:\n    directory = tempfile.mkdtemp()\n",
        "source_code_len": 90,
        "target_code": "\ndef _copy_files_to_new_dir(files: Iterable[Text]) -> Text:\n    directory = tempfile.mkdtemp()\n",
        "target_code_len": 95,
        "diff_format": "@@ -205,3 +205,3 @@\n \n-def _copy_files_to_new_dir(files: Set[Text]) -> Text:\n+def _copy_files_to_new_dir(files: Iterable[Text]) -> Text:\n     directory = tempfile.mkdtemp()\n",
        "source_code_with_indent": "\n<DED>def _copy_files_to_new_dir(files: Set[Text]) -> Text:\n    <IND>directory = tempfile.mkdtemp()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _copy_files_to_new_dir(files: Iterable[Text]) -> Text:\n    <IND>directory = tempfile.mkdtemp()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]