[
  {
    "project": "ebellocchia/bip_utils",
    "commit": "d66f0d354df25b0fdde751daf430d61bd176432d",
    "filename": "bip_utils/ss58/ss58.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ebellocchia-bip_utils/bip_utils/ss58/ss58.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bip_utils/ss58/ss58.py:94:12 Incompatible variable type [9]: ss58_format is declared to have type `int` but is used as type `bytes`.",
    "message": " ss58_format is declared to have type `int` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 94,
    "warning_line": "            ss58_format = ConvUtils.IntegerToBytes(ss58_format)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if ss58_format <= SS58Const.SIMPLE_ACCOUNT_FORMAT_MAX_VAL:\n            ss58_format = ConvUtils.IntegerToBytes(ss58_format)\n        # Full address\n",
        "source_code_len": 154,
        "target_code": "        if ss58_format <= SS58Const.SIMPLE_ACCOUNT_FORMAT_MAX_VAL:\n            ss58_format_bytes = ConvUtils.IntegerToBytes(ss58_format)\n        # Full address\n",
        "target_code_len": 160,
        "diff_format": "@@ -93,3 +93,3 @@\n         if ss58_format <= SS58Const.SIMPLE_ACCOUNT_FORMAT_MAX_VAL:\n-            ss58_format = ConvUtils.IntegerToBytes(ss58_format)\n+            ss58_format_bytes = ConvUtils.IntegerToBytes(ss58_format)\n         # Full address\n",
        "source_code_with_indent": "        <DED>if ss58_format <= SS58Const.SIMPLE_ACCOUNT_FORMAT_MAX_VAL:\n            <IND>ss58_format = ConvUtils.IntegerToBytes(ss58_format)\n        # Full address\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if ss58_format <= SS58Const.SIMPLE_ACCOUNT_FORMAT_MAX_VAL:\n            <IND>ss58_format_bytes = ConvUtils.IntegerToBytes(ss58_format)\n        # Full address\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ebellocchia/bip_utils",
    "commit": "d66f0d354df25b0fdde751daf430d61bd176432d",
    "filename": "bip_utils/ss58/ss58.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ebellocchia-bip_utils/bip_utils/ss58/ss58.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bip_utils/ss58/ss58.py:98:12 Incompatible variable type [9]: ss58_format is declared to have type `int` but is used as type `bytes`.",
    "message": " ss58_format is declared to have type `int` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 98,
    "warning_line": "            ss58_format = bytes([",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_len": 152,
        "target_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_len": 158,
        "diff_format": "@@ -97,3 +97,3 @@\n             # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n-            ss58_format = bytes([\n+            ss58_format_bytes = bytes([\n                 ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ebellocchia/bip_utils",
    "commit": "d66f0d354df25b0fdde751daf430d61bd176432d",
    "filename": "bip_utils/ss58/ss58.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ebellocchia-bip_utils/bip_utils/ss58/ss58.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bip_utils/ss58/ss58.py:104:32 Unsupported operand [58]: `+` is not supported for operand types `int` and `bytes`.",
    "message": " `+` is not supported for operand types `int` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 104,
    "warning_line": "        payload = ss58_format + data_bytes",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_len": 152,
        "target_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_len": 158,
        "diff_format": "@@ -97,3 +97,3 @@\n             # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n-            ss58_format = bytes([\n+            ss58_format_bytes = bytes([\n                 ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Get payload\n        payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_len": 92,
        "target_code": "        # Get payload\n        payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_len": 98,
        "diff_format": "@@ -103,3 +103,3 @@\n         # Get payload\n-        payload = ss58_format + data_bytes\n+        payload = ss58_format_bytes + data_bytes\n         # Compute checksum\n",
        "source_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ebellocchia/bip_utils",
    "commit": "d66f0d354df25b0fdde751daf430d61bd176432d",
    "filename": "bip_utils/ss58/ss58.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ebellocchia-bip_utils/bip_utils/ss58/ss58.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bip_utils/ss58/ss58.py:106:45 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `SS58Utils.ComputeChecksum` but got `int`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `SS58Utils.ComputeChecksum` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 106,
    "warning_line": "        checksum = SS58Utils.ComputeChecksum(payload)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_len": 152,
        "target_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_len": 158,
        "diff_format": "@@ -97,3 +97,3 @@\n             # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n-            ss58_format = bytes([\n+            ss58_format_bytes = bytes([\n                 ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Get payload\n        payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_len": 92,
        "target_code": "        # Get payload\n        payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_len": 98,
        "diff_format": "@@ -103,3 +103,3 @@\n         # Get payload\n-        payload = ss58_format + data_bytes\n+        payload = ss58_format_bytes + data_bytes\n         # Compute checksum\n",
        "source_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ebellocchia/bip_utils",
    "commit": "d66f0d354df25b0fdde751daf430d61bd176432d",
    "filename": "bip_utils/ss58/ss58.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ebellocchia-bip_utils/bip_utils/ss58/ss58.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bip_utils/ss58/ss58.py:108:36 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `bip_utils.base58.base58.Base58Encoder.Encode` but got `int`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `bip_utils.base58.base58.Base58Encoder.Encode` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "        return Base58Encoder.Encode(payload + checksum)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_len": 152,
        "target_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_len": 158,
        "diff_format": "@@ -97,3 +97,3 @@\n             # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n-            ss58_format = bytes([\n+            ss58_format_bytes = bytes([\n                 ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Get payload\n        payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_len": 92,
        "target_code": "        # Get payload\n        payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_len": 98,
        "diff_format": "@@ -103,3 +103,3 @@\n         # Get payload\n-        payload = ss58_format + data_bytes\n+        payload = ss58_format_bytes + data_bytes\n         # Compute checksum\n",
        "source_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ebellocchia/bip_utils",
    "commit": "d66f0d354df25b0fdde751daf430d61bd176432d",
    "filename": "bip_utils/ss58/ss58.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ebellocchia-bip_utils/bip_utils/ss58/ss58.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bip_utils/ss58/ss58.py:108:46 Unsupported operand [58]: `+` is not supported for operand types `int` and `bytes`.",
    "message": " `+` is not supported for operand types `int` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 108,
    "warning_line": "        return Base58Encoder.Encode(payload + checksum)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_len": 152,
        "target_code": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_len": 158,
        "diff_format": "@@ -97,3 +97,3 @@\n             # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n-            ss58_format = bytes([\n+            ss58_format_bytes = bytes([\n                 ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # 0b00HHHHHH_MMLLLLLL -> (0b01LLLLLL, 0bHHHHHHMM)\n            <IND>ss58_format_bytes = bytes([\n                ((ss58_format & 0x00FC) >> 2) | 0x0040,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Get payload\n        payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_len": 92,
        "target_code": "        # Get payload\n        payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_len": 98,
        "diff_format": "@@ -103,3 +103,3 @@\n         # Get payload\n-        payload = ss58_format + data_bytes\n+        payload = ss58_format_bytes + data_bytes\n         # Compute checksum\n",
        "source_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format + data_bytes\n        # Compute checksum\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Get payload\n        <DED>payload = ss58_format_bytes + data_bytes\n        # Compute checksum\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]