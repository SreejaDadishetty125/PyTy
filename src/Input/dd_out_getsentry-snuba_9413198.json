[
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/processors/test_arrayjoin_optimizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/processors/test_arrayjoin_optimizer.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/processors/test_arrayjoin_optimizer.py:342:8 Incompatible parameter type [6]: Expected `snuba.datasets.storage.ReadableStorage` for 1st parameter `storage` to call `SingleStorageQueryPlanBuilder.__init__` but got `Optional[snuba.datasets.storage.WritableTableStorage]`.",
    "message": " Expected `snuba.datasets.storage.ReadableStorage` for 1st parameter `storage` to call `SingleStorageQueryPlanBuilder.__init__` but got `Optional[snuba.datasets.storage.WritableTableStorage]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 342,
    "warning_line": "        storage=entity.get_writable_storage(), mappers=transaction_translator,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    entity = get_entity(query.get_from_clause().key)\n    for p in entity.get_query_processors():\n",
        "source_code_len": 97,
        "target_code": "    entity = get_entity(query.get_from_clause().key)\n    storage = entity.get_writable_storage()\n    assert storage is not None\n    for p in entity.get_query_processors():\n",
        "target_code_len": 172,
        "diff_format": "@@ -335,2 +336,4 @@\n     entity = get_entity(query.get_from_clause().key)\n+    storage = entity.get_writable_storage()\n+    assert storage is not None\n     for p in entity.get_query_processors():\n",
        "source_code_with_indent": "    entity = get_entity(query.get_from_clause().key)\n    for p in entity.get_query_processors():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    entity = get_entity(query.get_from_clause().key)\n    storage = entity.get_writable_storage()\n    assert storage is not None\n    for p in entity.get_query_processors():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    query_plan = SingleStorageQueryPlanBuilder(\n        storage=entity.get_writable_storage(), mappers=transaction_translator,\n    ).build_and_rank_plans(query, request.settings)[0]\n",
        "source_code_len": 182,
        "target_code": "    query_plan = SingleStorageQueryPlanBuilder(\n        storage=storage, mappers=transaction_translator,\n    ).build_and_rank_plans(query, request.settings)[0]\n",
        "target_code_len": 160,
        "diff_format": "@@ -341,3 +344,3 @@\n     query_plan = SingleStorageQueryPlanBuilder(\n-        storage=entity.get_writable_storage(), mappers=transaction_translator,\n+        storage=storage, mappers=transaction_translator,\n     ).build_and_rank_plans(query, request.settings)[0]\n",
        "source_code_with_indent": "    query_plan = SingleStorageQueryPlanBuilder(\n        storage=entity.get_writable_storage(), mappers=transaction_translator,\n    ).build_and_rank_plans(query, request.settings)[0]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    query_plan = SingleStorageQueryPlanBuilder(\n        storage=storage, mappers=transaction_translator,\n    ).build_and_rank_plans(query, request.settings)[0]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_expressions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_expressions.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_expressions.py:184:62 Incompatible parameter type [6]: Expected `typing.Tuple[Expression, ...]` for 3rd positional only parameter to call `FunctionCall.__init__` but got `Argument`.",
    "message": " Expected `typing.Tuple[Expression, ...]` for 3rd positional only parameter to call `FunctionCall.__init__` but got `Argument`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 184,
    "warning_line": "    lm = Lambda(None, (\"x\", \"y\"), FunctionCall(None, \"test\", (Argument(None, \"x\"))))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from snuba.query.expressions import (\n",
        "source_code_len": 38,
        "target_code": "from typing import Set\n\nfrom snuba.query.expressions import (\n",
        "target_code_len": 62,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Set\n+\n from snuba.query.expressions import (\n",
        "source_code_with_indent": "from snuba.query.expressions import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Set\n\nfrom snuba.query.expressions import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    function_2 = CurriedFunctionCall(None, function_1, (column1,))\n    lm = Lambda(None, (\"x\", \"y\"), FunctionCall(None, \"test\", (Argument(None, \"x\"))))\n\n    s = set()\n    s.add(column1)\n",
        "source_code_len": 186,
        "target_code": "    function_2 = CurriedFunctionCall(None, function_1, (column1,))\n    lm = Lambda(None, (\"x\", \"y\"), FunctionCall(None, \"test\", (Argument(None, \"x\"),)))\n\n    s: Set[Expression] = set()\n    s.add(column1)\n",
        "target_code_len": 204,
        "diff_format": "@@ -183,5 +185,5 @@\n     function_2 = CurriedFunctionCall(None, function_1, (column1,))\n-    lm = Lambda(None, (\"x\", \"y\"), FunctionCall(None, \"test\", (Argument(None, \"x\"))))\n+    lm = Lambda(None, (\"x\", \"y\"), FunctionCall(None, \"test\", (Argument(None, \"x\"),)))\n \n-    s = set()\n+    s: Set[Expression] = set()\n     s.add(column1)\n",
        "source_code_with_indent": "    function_2 = CurriedFunctionCall(None, function_1, (column1,))\n    lm = Lambda(None, (\"x\", \"y\"), FunctionCall(None, \"test\", (Argument(None, \"x\"))))\n\n    s = set()\n    s.add(column1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    function_2 = CurriedFunctionCall(None, function_1, (column1,))\n    lm = Lambda(None, (\"x\", \"y\"), FunctionCall(None, \"test\", (Argument(None, \"x\"),)))\n\n    s: Set[Expression] = set()\n    s.add(column1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_organization_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_organization_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_organization_extension.py:19:47 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 19,
    "warning_line": "    valid_data = validate_jsonschema(raw_data, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\n",
        "source_code_len": 14,
        "target_code": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n",
        "source_code_with_indent": "import pytest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 276,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 308,
        "diff_format": "@@ -16,6 +18,7 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"organization\": 2}\n \n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_len": 389,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_len": 409,
        "diff_format": "@@ -30,10 +33,11 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n+        validate_jsonschema({\"organization\": \"2\"}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n+        validate_jsonschema({\"organization\": 0}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n+        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_organization_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_organization_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_organization_extension.py:20:18 Incompatible parameter type [6]: Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "message": " Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 20,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\n",
        "source_code_len": 14,
        "target_code": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n",
        "source_code_with_indent": "import pytest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 276,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 308,
        "diff_format": "@@ -16,6 +18,7 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"organization\": 2}\n \n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_len": 389,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_len": 409,
        "diff_format": "@@ -30,10 +33,11 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n+        validate_jsonschema({\"organization\": \"2\"}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n+        validate_jsonschema({\"organization\": 0}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n+        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_organization_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_organization_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_organization_extension.py:20:38 Incompatible parameter type [6]: Expected `typing.Optional[typing.Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "message": " Expected `typing.Optional[typing.Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 20,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\n",
        "source_code_len": 14,
        "target_code": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n",
        "source_code_with_indent": "import pytest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 276,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 308,
        "diff_format": "@@ -16,6 +18,7 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"organization\": 2}\n \n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_len": 389,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_len": 409,
        "diff_format": "@@ -30,10 +33,11 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n+        validate_jsonschema({\"organization\": \"2\"}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n+        validate_jsonschema({\"organization\": 0}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n+        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_organization_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_organization_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_organization_extension.py:33:51 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\n",
        "source_code_len": 14,
        "target_code": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n",
        "source_code_with_indent": "import pytest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 276,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 308,
        "diff_format": "@@ -16,6 +18,7 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"organization\": 2}\n \n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_len": 389,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_len": 409,
        "diff_format": "@@ -30,10 +33,11 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n+        validate_jsonschema({\"organization\": \"2\"}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n+        validate_jsonschema({\"organization\": 0}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n+        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_organization_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_organization_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_organization_extension.py:36:49 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        validate_jsonschema({\"organization\": 0}, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\n",
        "source_code_len": 14,
        "target_code": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n",
        "source_code_with_indent": "import pytest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 276,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 308,
        "diff_format": "@@ -16,6 +18,7 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"organization\": 2}\n \n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_len": 389,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_len": 409,
        "diff_format": "@@ -30,10 +33,11 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n+        validate_jsonschema({\"organization\": \"2\"}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n+        validate_jsonschema({\"organization\": 0}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n+        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_organization_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_organization_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_organization_extension.py:39:51 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `typing.Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 39,
    "warning_line": "        validate_jsonschema({\"organization\": [2]}, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\n",
        "source_code_len": 14,
        "target_code": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n",
        "source_code_with_indent": "import pytest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, cast\n\nimport pytest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 276,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 308,
        "diff_format": "@@ -16,6 +18,7 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"organization\": 2}\n \n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"organization\": 2}\n\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_len": 389,
        "target_code": "    extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": 0}, schema)\n\n    with pytest.raises(ValidationError):\n        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_len": 409,
        "diff_format": "@@ -30,10 +33,11 @@\n     extension = OrganizationExtension()\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n+        validate_jsonschema({\"organization\": \"2\"}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": 0}, extension.get_schema())\n+        validate_jsonschema({\"organization\": 0}, schema)\n \n     with pytest.raises(ValidationError):\n-        validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n+        validate_jsonschema({\"organization\": [2]}, schema)\n",
        "source_code_with_indent": "    <IND>extension = OrganizationExtension()\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, extension.get_schema())\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, extension.get_schema())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = OrganizationExtension()\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n\n    with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": \"2\"}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": 0}, schema)\n\n    <DED>with pytest.raises(ValidationError):\n        <IND>validate_jsonschema({\"organization\": [2]}, schema)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:48:37 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 1st positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 1st positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "    valid_data = validate_jsonschema(raw_data, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:48:47 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "    valid_data = validate_jsonschema(raw_data, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:49:18 Incompatible parameter type [6]: Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "message": " Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:49:38 Incompatible parameter type [6]: Expected `typing.Optional[Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "message": " Expected `typing.Optional[Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:59:47 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 59,
    "warning_line": "    valid_data = validate_jsonschema(raw_data, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:60:18 Incompatible parameter type [6]: Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "message": " Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 60,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:60:38 Incompatible parameter type [6]: Expected `typing.Optional[Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "message": " Expected `typing.Optional[Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 60,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:79:47 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "    valid_data = validate_jsonschema(raw_data, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:80:18 Incompatible parameter type [6]: Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "message": " Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 80,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_project_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_project_extension.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_project_extension.py:80:38 Incompatible parameter type [6]: Expected `typing.Optional[Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "message": " Expected `typing.Optional[Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 80,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_len": 43,
        "target_code": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Mapping, Sequence\n+from typing import Any, MutableMapping, Sequence, cast\n \n",
        "source_code_with_indent": "from typing import Any, Mapping, Sequence\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, MutableMapping, Sequence, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_len": 124,
        "target_code": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_len": 131,
        "diff_format": "@@ -42,3 +42,3 @@\n def test_project_extension_query_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: Mapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_project_extension_query_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_conditions: Sequence[Condition],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 262,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 294,
        "diff_format": "@@ -47,4 +47,5 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -57,5 +58,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [1, 2]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [1, 2]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_len": 297,
        "target_code": "    extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_len": 329,
        "diff_format": "@@ -77,5 +79,6 @@\n     extension = ProjectExtension(project_column=\"project_id\")\n+    schema = cast(MutableMapping[str, Any], extension.get_schema())\n     raw_data = {\"project\": [3, 4]}\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+    valid_data = validate_jsonschema(raw_data, schema)\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n     request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>extension = ProjectExtension(project_column=\"project_id\")\n    schema = cast(MutableMapping[str, Any], extension.get_schema())\n    raw_data = {\"project\": [3, 4]}\n    valid_data = validate_jsonschema(raw_data, schema)\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n    request_settings = HTTPRequestSettings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_query.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_query.py:11:8 Incompatible parameter type [6]: Expected `typing.Optional[snuba.query.LimitBy]` for 2nd parameter `limitby` to call `Query.__init__` but got `typing.Tuple[int, str]`.",
    "message": " Expected `typing.Optional[snuba.query.LimitBy]` for 2nd parameter `limitby` to call `Query.__init__` but got `typing.Tuple[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 11,
    "warning_line": "        limitby=(100, \"environment\"),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from snuba.clickhouse.query import Query\nfrom snuba.query import SelectedExpression\nfrom snuba.query.data_source.simple import Table\n",
        "source_code_len": 133,
        "target_code": "from snuba.clickhouse.query import Query\nfrom snuba.query import LimitBy, SelectedExpression\nfrom snuba.query.data_source.simple import Table\n",
        "target_code_len": 142,
        "diff_format": "@@ -2,3 +2,3 @@\n from snuba.clickhouse.query import Query\n-from snuba.query import SelectedExpression\n+from snuba.query import LimitBy, SelectedExpression\n from snuba.query.data_source.simple import Table\n",
        "source_code_with_indent": "from snuba.clickhouse.query import Query\nfrom snuba.query import SelectedExpression\nfrom snuba.query.data_source.simple import Table\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from snuba.clickhouse.query import Query\nfrom snuba.query import LimitBy, SelectedExpression\nfrom snuba.query.data_source.simple import Table\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        Table(\"my_table\", ColumnSet([])),\n        limitby=(100, \"environment\"),\n        limit=100,\n",
        "source_code_len": 99,
        "target_code": "        Table(\"my_table\", ColumnSet([])),\n        limitby=LimitBy(\n            100, Column(alias=None, table_name=\"my_table\", column_name=\"environment\")\n        ),\n        limit=100,\n",
        "target_code_len": 183,
        "diff_format": "@@ -10,3 +10,5 @@\n         Table(\"my_table\", ColumnSet([])),\n-        limitby=(100, \"environment\"),\n+        limitby=LimitBy(\n+            100, Column(alias=None, table_name=\"my_table\", column_name=\"environment\")\n+        ),\n         limit=100,\n",
        "source_code_with_indent": "        Table(\"my_table\", ColumnSet([])),\n        limitby=(100, \"environment\"),\n        limit=100,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        Table(\"my_table\", ColumnSet([])),\n        limitby=LimitBy(\n            100, Column(alias=None, table_name=\"my_table\", column_name=\"environment\")\n        ),\n        limit=100,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_timeseries_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_timeseries_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_timeseries_extension.py:91:37 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 1st positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 1st positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "    valid_data = validate_jsonschema(raw_data, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_len": 88,
        "target_code": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -1,4 +1,5 @@\n+from datetime import datetime, timedelta\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n-from datetime import datetime, timedelta\n-from typing import Any, Mapping\n \n",
        "source_code_with_indent": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_len": 110,
        "target_code": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_len": 117,
        "diff_format": "@@ -80,3 +81,3 @@\n def test_query_extension_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_ast_condition: Expression,\n",
        "source_code_with_indent": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_len": 162,
        "target_code": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_len": 189,
        "diff_format": "@@ -90,4 +91,7 @@\n     )\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+\n+    valid_data = validate_jsonschema(\n+        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n+    )\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n \n",
        "source_code_with_indent": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_timeseries_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_timeseries_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_timeseries_extension.py:91:47 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `typing.MutableMapping[str, typing.Any]` for 2nd positional only parameter to call `validate_jsonschema` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "    valid_data = validate_jsonschema(raw_data, extension.get_schema())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_len": 88,
        "target_code": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -1,4 +1,5 @@\n+from datetime import datetime, timedelta\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n-from datetime import datetime, timedelta\n-from typing import Any, Mapping\n \n",
        "source_code_with_indent": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_len": 110,
        "target_code": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_len": 117,
        "diff_format": "@@ -80,3 +81,3 @@\n def test_query_extension_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_ast_condition: Expression,\n",
        "source_code_with_indent": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_len": 162,
        "target_code": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_len": 189,
        "diff_format": "@@ -90,4 +91,7 @@\n     )\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+\n+    valid_data = validate_jsonschema(\n+        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n+    )\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n \n",
        "source_code_with_indent": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_timeseries_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_timeseries_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_timeseries_extension.py:92:18 Incompatible parameter type [6]: Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "message": " Expected `typing.Optional[QueryEntity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[str, typing.List[Variable[_T]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 92,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_len": 88,
        "target_code": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -1,4 +1,5 @@\n+from datetime import datetime, timedelta\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n-from datetime import datetime, timedelta\n-from typing import Any, Mapping\n \n",
        "source_code_with_indent": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_len": 110,
        "target_code": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_len": 117,
        "diff_format": "@@ -80,3 +81,3 @@\n def test_query_extension_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_ast_condition: Expression,\n",
        "source_code_with_indent": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_len": 162,
        "target_code": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_len": 189,
        "diff_format": "@@ -90,4 +91,7 @@\n     )\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+\n+    valid_data = validate_jsonschema(\n+        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n+    )\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n \n",
        "source_code_with_indent": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_timeseries_extension.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_timeseries_extension.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_timeseries_extension.py:92:38 Incompatible parameter type [6]: Expected `typing.Optional[typing.Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "message": " Expected `typing.Optional[typing.Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `QueryEntity`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 92,
    "warning_line": "    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_len": 88,
        "target_code": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -1,4 +1,5 @@\n+from datetime import datetime, timedelta\n+from typing import Any, MutableMapping, cast\n+\n import pytest\n-from datetime import datetime, timedelta\n-from typing import Any, Mapping\n \n",
        "source_code_with_indent": "import pytest\nfrom datetime import datetime, timedelta\nfrom typing import Any, Mapping\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime, timedelta\nfrom typing import Any, MutableMapping, cast\n\nimport pytest\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_len": 110,
        "target_code": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_len": 117,
        "diff_format": "@@ -80,3 +81,3 @@\n def test_query_extension_processing(\n-    raw_data: Mapping[str, Any],\n+    raw_data: MutableMapping[str, Any],\n     expected_ast_condition: Expression,\n",
        "source_code_with_indent": "def test_query_extension_processing(\n    raw_data: Mapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def test_query_extension_processing(\n    raw_data: MutableMapping[str, Any],\n    expected_ast_condition: Expression,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_len": 162,
        "target_code": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_len": 189,
        "diff_format": "@@ -90,4 +91,7 @@\n     )\n-    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n-    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n+\n+    valid_data = validate_jsonschema(\n+        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n+    )\n+    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n \n",
        "source_code_with_indent": "    )\n    valid_data = validate_jsonschema(raw_data, extension.get_schema())\n    query = Query({\"conditions\": []}, QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n\n    valid_data = validate_jsonschema(\n        raw_data, cast(MutableMapping[str, Any], extension.get_schema())\n    )\n    query = Query(QueryEntity(EntityKey.EVENTS, ColumnSet([])))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "94131980600d5cf7a0bf2e887ff5856586b5482a",
    "filename": "tests/query/test_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/query/test_visitor.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/query/test_visitor.py:63:8 Incompatible return type [7]: Expected `List[Expression]` but got `List[Lambda]`.",
    "message": " Expected `List[Expression]` but got `List[Lambda]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 63,
    "warning_line": "        return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.__visited_nodes.append(exp)\n        self.__visited_nodes.append(exp.transform.accept(self))\n        ret = [exp]\n        ret.extend(exp.transform.accept(self))\n        return ret\n",
        "source_code_len": 191,
        "target_code": "        self.__visited_nodes.append(exp)\n        self.__visited_nodes.extend(exp.transformation.accept(self))\n        ret: List[Expression] = [exp]\n        ret.extend(exp.transformation.accept(self))\n        return ret\n",
        "target_code_len": 219,
        "diff_format": "@@ -59,5 +59,5 @@\n         self.__visited_nodes.append(exp)\n-        self.__visited_nodes.append(exp.transform.accept(self))\n-        ret = [exp]\n-        ret.extend(exp.transform.accept(self))\n+        self.__visited_nodes.extend(exp.transformation.accept(self))\n+        ret: List[Expression] = [exp]\n+        ret.extend(exp.transformation.accept(self))\n         return ret\n",
        "source_code_with_indent": "        <IND>self.__visited_nodes.append(exp)\n        self.__visited_nodes.append(exp.transform.accept(self))\n        ret = [exp]\n        ret.extend(exp.transform.accept(self))\n        return ret\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.__visited_nodes.append(exp)\n        self.__visited_nodes.extend(exp.transformation.accept(self))\n        ret: List[Expression] = [exp]\n        ret.extend(exp.transformation.accept(self))\n        return ret\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]