[
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/commands/pulse_command.py",
    "min_patch_found": false,
    "full_warning_msg": "qiskit/pulse/commands/pulse_command.py:30:23 Incompatible variable type [9]: duration is declared to have type `int` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/commands/pulse_command.py'",
    "dd_fail": true
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/commands/pulse_command.py",
    "min_patch_found": false,
    "full_warning_msg": "qiskit/pulse/commands/pulse_command.py:44:13 Incompatible variable type [9]: scaling is declared to have type `float` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/commands/pulse_command.py'",
    "dd_fail": true
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/instructions/acquire.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/acquire.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/acquire.py:113:60 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Optional[List[AcquireChannel]]`.",
    "message": " Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Optional[List[AcquireChannel]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 113,
    "warning_line": "            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n        if name is None and channels is None:\n            name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n        elif name is None:\n            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n                                            tuple(reg_slot), kernel, discriminator)))\n\n        if channels is not None:\n            super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n        else:\n            super().__init__(duration, name=name)\n\n        self._acquires = channels\n",
        "source_code_len": 543,
        "target_code": "\n        self._acquires = channels\n",
        "target_code_len": 35,
        "diff_format": "@@ -109,13 +110,2 @@\n \n-        if name is None and channels is None:\n-            name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n-        elif name is None:\n-            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n-                                            tuple(reg_slot), kernel, discriminator)))\n-\n-        if channels is not None:\n-            super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n-        else:\n-            super().__init__(duration, name=name)\n-\n         self._acquires = channels\n",
        "source_code_with_indent": "\n        <DED>if name is None and channels is None:\n            <IND>name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n        <DED>elif name is None:\n            <IND>name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n                                            tuple(reg_slot), kernel, discriminator)))\n\n        <DED>if channels is not None:\n            <IND>super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n        <DED>else:\n            <IND>super().__init__(duration, name=name)\n\n        <DED>self._acquires = channels\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self._acquires = channels\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/instructions/acquire.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/acquire.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/acquire.py:113:77 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Union[None, List[MemorySlot], MemorySlot]`.",
    "message": " Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Union[None, List[MemorySlot], MemorySlot]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 113,
    "warning_line": "            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n        if name is None and channels is None:\n            name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n        elif name is None:\n            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n                                            tuple(reg_slot), kernel, discriminator)))\n\n        if channels is not None:\n            super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n        else:\n            super().__init__(duration, name=name)\n\n        self._acquires = channels\n",
        "source_code_len": 543,
        "target_code": "\n        self._acquires = channels\n",
        "target_code_len": 35,
        "diff_format": "@@ -109,13 +110,2 @@\n \n-        if name is None and channels is None:\n-            name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n-        elif name is None:\n-            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n-                                            tuple(reg_slot), kernel, discriminator)))\n-\n-        if channels is not None:\n-            super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n-        else:\n-            super().__init__(duration, name=name)\n-\n         self._acquires = channels\n",
        "source_code_with_indent": "\n        <DED>if name is None and channels is None:\n            <IND>name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n        <DED>elif name is None:\n            <IND>name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n                                            tuple(reg_slot), kernel, discriminator)))\n\n        <DED>if channels is not None:\n            <IND>super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n        <DED>else:\n            <IND>super().__init__(duration, name=name)\n\n        <DED>self._acquires = channels\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self._acquires = channels\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/instructions/acquire.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/acquire.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/acquire.py:114:50 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Optional[RegisterSlot]`.",
    "message": " Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Optional[RegisterSlot]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 114,
    "warning_line": "                                            tuple(reg_slot), kernel, discriminator)))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n        if name is None and channels is None:\n            name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n        elif name is None:\n            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n                                            tuple(reg_slot), kernel, discriminator)))\n\n        if channels is not None:\n            super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n        else:\n            super().__init__(duration, name=name)\n\n        self._acquires = channels\n",
        "source_code_len": 543,
        "target_code": "\n        self._acquires = channels\n",
        "target_code_len": 35,
        "diff_format": "@@ -109,13 +110,2 @@\n \n-        if name is None and channels is None:\n-            name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n-        elif name is None:\n-            name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n-                                            tuple(reg_slot), kernel, discriminator)))\n-\n-        if channels is not None:\n-            super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n-        else:\n-            super().__init__(duration, name=name)\n-\n         self._acquires = channels\n",
        "source_code_with_indent": "\n        <DED>if name is None and channels is None:\n            <IND>name = 'acq{:10x}'.format(hash((duration, kernel, discriminator)))\n        <DED>elif name is None:\n            <IND>name = 'acq{:10x}'.format(hash((duration, tuple(channels), tuple(mem_slot),\n                                            tuple(reg_slot), kernel, discriminator)))\n\n        <DED>if channels is not None:\n            <IND>super().__init__(duration, *channels, *mem_slot, *reg_slot, name=name)\n        <DED>else:\n            <IND>super().__init__(duration, name=name)\n\n        <DED>self._acquires = channels\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self._acquires = channels\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/instructions/frequency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/frequency.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/frequency.py:50:28 Incompatible parameter type [6]: Expected `qiskit.pulse.channels.Channel` for 2nd positional only parameter to call `Instruction.__init__` but got `Optional[PulseChannel]`.",
    "message": " Expected `qiskit.pulse.channels.Channel` for 2nd positional only parameter to call `Instruction.__init__` but got `Optional[PulseChannel]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "        super().__init__(0, channel, name=name)"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/instructions/frequency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/frequency.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/frequency.py:56:8 Incompatible return type [7]: Expected `List[Union[PulseChannel, int]]` but got `List[Union[PulseChannel, float]]`.",
    "message": " Expected `List[Union[PulseChannel, int]]` but got `List[Union[PulseChannel, float]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 56,
    "warning_line": "        return [self.frequency, self.channel]"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/instructions/snapshot.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/snapshot.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/snapshot.py:60:8 Incompatible return type [7]: Expected `SnapshotChannel` but got `qiskit.pulse.channels.Channel`.",
    "message": " Expected `SnapshotChannel` but got `qiskit.pulse.channels.Channel`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 60,
    "warning_line": "        return self.channels[0]"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "d06f5bf800979fe5369de7f0fd06689771ecc324",
    "filename": "qiskit/pulse/reschedule.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/reschedule.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/reschedule.py:200:33 Incompatible parameter type [6]: Expected `qiskit.pulse.channels.PulseChannel` for 1st positional only parameter to call `qiskit.pulse.instructions.delay.Delay.__call__` but got `Channel`.",
    "message": " Expected `qiskit.pulse.channels.PulseChannel` for 1st positional only parameter to call `qiskit.pulse.instructions.delay.Delay.__call__` but got `Channel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 200,
    "warning_line": "        schedule |= Delay(until)(channel)"
  }
]