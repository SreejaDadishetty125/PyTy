[
  {
    "project": "pantsbuild/pants",
    "commit": "14759e1065e307c7760299670da30f64ffdbf783",
    "filename": "src/python/pants/engine/scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/scheduler.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/scheduler.py:497:18 Invalid type [31]: Expression `pants.util.objects.datatype(\"Step\", [\"step_id\", \"node\", \"dependencies\", \"inline_nodes\", \"project_tree\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"Step\", [\"step_id\", \"node\", \"dependencies\", \"inline_nodes\", \"project_tree\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 497,
    "warning_line": "class StepRequest(datatype('Step', ['step_id', 'node', 'dependencies', 'inline_nodes', 'project_tree'])):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass StepRequest(datatype('Step', ['step_id', 'node', 'dependencies', 'inline_nodes', 'project_tree'])):\n  \"\"\"Additional inputs needed to run Node.step for the given Node.\n\n  TODO: Unclear why this has a ProjectTree reference; should be passed in by the Engine.\n\n  :param step_id: A unique id for the step, to ease comparison.\n  :param node: The Node instance that will run.\n  :param dependencies: The declared dependencies of the Node from previous Waiting steps.\n  :param inline_nodes: See `LocalScheduler._inline_nodes`.\n  :param project_tree: A FileSystemProjectTree instance.\n  \"\"\"\n\n  def __call__(self, node_builder):\n    \"\"\"Called by the Engine in order to execute this Step.\"\"\"\n    step_context = StepContext(node_builder, self.project_tree, self.dependencies, self.inline_nodes)\n    state = self.node.step(step_context)\n    return StepResult(state)\n\n  def __eq__(self, other):\n    return type(self) == type(other) and self.step_id == other.step_id\n\n  def __ne__(self, other):\n    return not (self == other)\n\n  def __hash__(self):\n    return hash(self.step_id)\n\n\nclass StepResult(datatype('Step', ['state'])):\n  \"\"\"The result of running a Step, passed back to the Scheduler via the Promise class.\n\n  :param state: The State value returned by the Step.\n  \"\"\"\n\n\nclass LocalScheduler(object):\n",
        "source_code_len": 1300,
        "target_code": "\nclass LocalScheduler(object):\n",
        "target_code_len": 31,
        "diff_format": "@@ -496,37 +477,2 @@\n \n-class StepRequest(datatype('Step', ['step_id', 'node', 'dependencies', 'inline_nodes', 'project_tree'])):\n-  \"\"\"Additional inputs needed to run Node.step for the given Node.\n-\n-  TODO: Unclear why this has a ProjectTree reference; should be passed in by the Engine.\n-\n-  :param step_id: A unique id for the step, to ease comparison.\n-  :param node: The Node instance that will run.\n-  :param dependencies: The declared dependencies of the Node from previous Waiting steps.\n-  :param inline_nodes: See `LocalScheduler._inline_nodes`.\n-  :param project_tree: A FileSystemProjectTree instance.\n-  \"\"\"\n-\n-  def __call__(self, node_builder):\n-    \"\"\"Called by the Engine in order to execute this Step.\"\"\"\n-    step_context = StepContext(node_builder, self.project_tree, self.dependencies, self.inline_nodes)\n-    state = self.node.step(step_context)\n-    return StepResult(state)\n-\n-  def __eq__(self, other):\n-    return type(self) == type(other) and self.step_id == other.step_id\n-\n-  def __ne__(self, other):\n-    return not (self == other)\n-\n-  def __hash__(self):\n-    return hash(self.step_id)\n-\n-\n-class StepResult(datatype('Step', ['state'])):\n-  \"\"\"The result of running a Step, passed back to the Scheduler via the Promise class.\n-\n-  :param state: The State value returned by the Step.\n-  \"\"\"\n-\n-\n class LocalScheduler(object):\n",
        "source_code_with_indent": "\n<DED><DED>class StepRequest(datatype('Step', ['step_id', 'node', 'dependencies', 'inline_nodes', 'project_tree'])):\n  <IND>\"\"\"Additional inputs needed to run Node.step for the given Node.\n\n  TODO: Unclear why this has a ProjectTree reference; should be passed in by the Engine.\n\n  :param step_id: A unique id for the step, to ease comparison.\n  :param node: The Node instance that will run.\n  :param dependencies: The declared dependencies of the Node from previous Waiting steps.\n  :param inline_nodes: See `LocalScheduler._inline_nodes`.\n  :param project_tree: A FileSystemProjectTree instance.\n  \"\"\"\n\n  def __call__(self, node_builder):\n    <IND>\"\"\"Called by the Engine in order to execute this Step.\"\"\"\n    step_context = StepContext(node_builder, self.project_tree, self.dependencies, self.inline_nodes)\n    state = self.node.step(step_context)\n    return StepResult(state)\n\n  <DED>def __eq__(self, other):\n    <IND>return type(self) == type(other) and self.step_id == other.step_id\n\n  <DED>def __ne__(self, other):\n    <IND>return not (self == other)\n\n  <DED>def __hash__(self):\n    <IND>return hash(self.step_id)\n\n\n<DED><DED>class StepResult(datatype('Step', ['state'])):\n  <IND>\"\"\"The result of running a Step, passed back to the Scheduler via the Promise class.\n\n  :param state: The State value returned by the Step.\n  \"\"\"\n\n\n<DED>class LocalScheduler(object):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class LocalScheduler(object):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pantsbuild/pants",
    "commit": "14759e1065e307c7760299670da30f64ffdbf783",
    "filename": "src/python/pants/engine/scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/scheduler.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/scheduler.py:525:17 Invalid type [31]: Expression `pants.util.objects.datatype(\"Step\", [\"state\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"Step\", [\"state\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 525,
    "warning_line": "class StepResult(datatype('Step', ['state'])):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass StepRequest(datatype('Step', ['step_id', 'node', 'dependencies', 'inline_nodes', 'project_tree'])):\n  \"\"\"Additional inputs needed to run Node.step for the given Node.\n\n  TODO: Unclear why this has a ProjectTree reference; should be passed in by the Engine.\n\n  :param step_id: A unique id for the step, to ease comparison.\n  :param node: The Node instance that will run.\n  :param dependencies: The declared dependencies of the Node from previous Waiting steps.\n  :param inline_nodes: See `LocalScheduler._inline_nodes`.\n  :param project_tree: A FileSystemProjectTree instance.\n  \"\"\"\n\n  def __call__(self, node_builder):\n    \"\"\"Called by the Engine in order to execute this Step.\"\"\"\n    step_context = StepContext(node_builder, self.project_tree, self.dependencies, self.inline_nodes)\n    state = self.node.step(step_context)\n    return StepResult(state)\n\n  def __eq__(self, other):\n    return type(self) == type(other) and self.step_id == other.step_id\n\n  def __ne__(self, other):\n    return not (self == other)\n\n  def __hash__(self):\n    return hash(self.step_id)\n\n\nclass StepResult(datatype('Step', ['state'])):\n  \"\"\"The result of running a Step, passed back to the Scheduler via the Promise class.\n\n  :param state: The State value returned by the Step.\n  \"\"\"\n\n\nclass LocalScheduler(object):\n",
        "source_code_len": 1300,
        "target_code": "\nclass LocalScheduler(object):\n",
        "target_code_len": 31,
        "diff_format": "@@ -496,37 +477,2 @@\n \n-class StepRequest(datatype('Step', ['step_id', 'node', 'dependencies', 'inline_nodes', 'project_tree'])):\n-  \"\"\"Additional inputs needed to run Node.step for the given Node.\n-\n-  TODO: Unclear why this has a ProjectTree reference; should be passed in by the Engine.\n-\n-  :param step_id: A unique id for the step, to ease comparison.\n-  :param node: The Node instance that will run.\n-  :param dependencies: The declared dependencies of the Node from previous Waiting steps.\n-  :param inline_nodes: See `LocalScheduler._inline_nodes`.\n-  :param project_tree: A FileSystemProjectTree instance.\n-  \"\"\"\n-\n-  def __call__(self, node_builder):\n-    \"\"\"Called by the Engine in order to execute this Step.\"\"\"\n-    step_context = StepContext(node_builder, self.project_tree, self.dependencies, self.inline_nodes)\n-    state = self.node.step(step_context)\n-    return StepResult(state)\n-\n-  def __eq__(self, other):\n-    return type(self) == type(other) and self.step_id == other.step_id\n-\n-  def __ne__(self, other):\n-    return not (self == other)\n-\n-  def __hash__(self):\n-    return hash(self.step_id)\n-\n-\n-class StepResult(datatype('Step', ['state'])):\n-  \"\"\"The result of running a Step, passed back to the Scheduler via the Promise class.\n-\n-  :param state: The State value returned by the Step.\n-  \"\"\"\n-\n-\n class LocalScheduler(object):\n",
        "source_code_with_indent": "\n<DED><DED>class StepRequest(datatype('Step', ['step_id', 'node', 'dependencies', 'inline_nodes', 'project_tree'])):\n  <IND>\"\"\"Additional inputs needed to run Node.step for the given Node.\n\n  TODO: Unclear why this has a ProjectTree reference; should be passed in by the Engine.\n\n  :param step_id: A unique id for the step, to ease comparison.\n  :param node: The Node instance that will run.\n  :param dependencies: The declared dependencies of the Node from previous Waiting steps.\n  :param inline_nodes: See `LocalScheduler._inline_nodes`.\n  :param project_tree: A FileSystemProjectTree instance.\n  \"\"\"\n\n  def __call__(self, node_builder):\n    <IND>\"\"\"Called by the Engine in order to execute this Step.\"\"\"\n    step_context = StepContext(node_builder, self.project_tree, self.dependencies, self.inline_nodes)\n    state = self.node.step(step_context)\n    return StepResult(state)\n\n  <DED>def __eq__(self, other):\n    <IND>return type(self) == type(other) and self.step_id == other.step_id\n\n  <DED>def __ne__(self, other):\n    <IND>return not (self == other)\n\n  <DED>def __hash__(self):\n    <IND>return hash(self.step_id)\n\n\n<DED><DED>class StepResult(datatype('Step', ['state'])):\n  <IND>\"\"\"The result of running a Step, passed back to the Scheduler via the Promise class.\n\n  :param state: The State value returned by the Step.\n  \"\"\"\n\n\n<DED>class LocalScheduler(object):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class LocalScheduler(object):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]