[
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/bcp/bcp_transport.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/bcp/bcp_transport.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/bcp/bcp_transport.py:88:8 Incompatible return type [7]: Expected `BaseBcpClient` but got `bool`.",
    "message": " Expected `BaseBcpClient` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 88,
    "warning_line": "        return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import asyncio\n\n",
        "source_code_len": 16,
        "target_code": "import asyncio\n\nfrom typing import Union\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -2,2 +2,4 @@\n import asyncio\n+\n+from typing import Union\n \n",
        "source_code_with_indent": "import asyncio\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import asyncio\n\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_named_client(self, client_name) -> BaseBcpClient:\n        \"\"\"Get a client by name.\"\"\"\n",
        "source_code_len": 99,
        "target_code": "\n    def get_named_client(self, client_name) -> Union[BaseBcpClient, bool]:\n        \"\"\"Get a client by name.\"\"\"\n",
        "target_code_len": 112,
        "diff_format": "@@ -82,3 +84,3 @@\n \n-    def get_named_client(self, client_name) -> BaseBcpClient:\n+    def get_named_client(self, client_name) -> Union[BaseBcpClient, bool]:\n         \"\"\"Get a client by name.\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def get_named_client(self, client_name) -> BaseBcpClient:\n        <IND>\"\"\"Get a client by name.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def get_named_client(self, client_name) -> Union[BaseBcpClient, bool]:\n        <IND>\"\"\"Get a client by name.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/events.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/events.py:260:46 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 260,
    "warning_line": "    def wait_for_any_event(self, event_names: [str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom mpf.core.mpf_controller import MpfController\n",
        "source_code_len": 51,
        "target_code": "\nfrom typing import Dict\nfrom typing import List\n\nfrom mpf.core.mpf_controller import MpfController\n",
        "target_code_len": 100,
        "diff_format": "@@ -9,2 +9,5 @@\n \n+from typing import Dict\n+from typing import List\n+\n from mpf.core.mpf_controller import MpfController\n",
        "source_code_with_indent": "\nfrom mpf.core.mpf_controller import MpfController\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict\nfrom typing import List\n\nfrom mpf.core.mpf_controller import MpfController\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wait_for_any_event(self, event_names: [str]):\n        \"\"\"Wait for any event from event_names.\"\"\"\n        future = asyncio.Future(loop=self.machine.clock.loop)\n        keys = []\n        for event_name in event_names:\n",
        "source_code_len": 225,
        "target_code": "\n    def wait_for_any_event(self, event_names: List[str]) -> asyncio.Future:\n        \"\"\"Wait for any event from event_names.\"\"\"\n        future = asyncio.Future(loop=self.machine.clock.loop)   # type: asyncio.Future\n        keys = []   # type: List[EventHandlerKey]\n        for event_name in event_names:\n",
        "target_code_len": 304,
        "diff_format": "@@ -259,6 +299,6 @@\n \n-    def wait_for_any_event(self, event_names: [str]):\n+    def wait_for_any_event(self, event_names: List[str]) -> asyncio.Future:\n         \"\"\"Wait for any event from event_names.\"\"\"\n-        future = asyncio.Future(loop=self.machine.clock.loop)\n-        keys = []\n+        future = asyncio.Future(loop=self.machine.clock.loop)   # type: asyncio.Future\n+        keys = []   # type: List[EventHandlerKey]\n         for event_name in event_names:\n",
        "source_code_with_indent": "\n    <DED>def wait_for_any_event(self, event_names: [str]):\n        <IND>\"\"\"Wait for any event from event_names.\"\"\"\n        future = asyncio.Future(loop=self.machine.clock.loop)\n        keys = []\n        for event_name in event_names:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wait_for_any_event(self, event_names: List[str]) -> asyncio.Future:\n        <IND>\"\"\"Wait for any event from event_names.\"\"\"\n        future = asyncio.Future(loop=self.machine.clock.loop)   # type: asyncio.Future\n        keys = []   # type: List[EventHandlerKey]\n        for event_name in event_names:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/events.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/events.py:271:60 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 271,
    "warning_line": "    def _wait_handler(self, _future: asyncio.Future, _keys: [str], **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom mpf.core.mpf_controller import MpfController\n",
        "source_code_len": 51,
        "target_code": "\nfrom typing import Dict\nfrom typing import List\n\nfrom mpf.core.mpf_controller import MpfController\n",
        "target_code_len": 100,
        "diff_format": "@@ -9,2 +9,5 @@\n \n+from typing import Dict\n+from typing import List\n+\n from mpf.core.mpf_controller import MpfController\n",
        "source_code_with_indent": "\nfrom mpf.core.mpf_controller import MpfController\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict\nfrom typing import List\n\nfrom mpf.core.mpf_controller import MpfController\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _wait_handler(self, _future: asyncio.Future, _keys: [str], **kwargs):\n        for key in _keys:\n",
        "source_code_len": 105,
        "target_code": "\n    def _wait_handler(self, _future: asyncio.Future, _keys: List[EventHandlerKey], **kwargs):\n        for key in _keys:\n",
        "target_code_len": 121,
        "diff_format": "@@ -270,3 +310,3 @@\n \n-    def _wait_handler(self, _future: asyncio.Future, _keys: [str], **kwargs):\n+    def _wait_handler(self, _future: asyncio.Future, _keys: List[EventHandlerKey], **kwargs):\n         for key in _keys:\n",
        "source_code_with_indent": "\n    <DED>def _wait_handler(self, _future: asyncio.Future, _keys: [str], **kwargs):\n        <IND>for key in _keys:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _wait_handler(self, _future: asyncio.Future, _keys: List[EventHandlerKey], **kwargs):\n        <IND>for key in _keys:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/file_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/file_manager.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/file_manager.py:123:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 123,
    "warning_line": "            return filename",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                raise FileNotFoundError(\"File not found: {}\".format(filename))\n\n",
        "source_code_len": 81,
        "target_code": "\n            raise FileNotFoundError(\"File not found: {}\".format(filename))\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -119,3 +123,3 @@\n \n-                raise FileNotFoundError(\"File not found: {}\".format(filename))\n+            raise FileNotFoundError(\"File not found: {}\".format(filename))\n \n",
        "source_code_with_indent": "\n                <DED><DED>raise FileNotFoundError(\"File not found: {}\".format(filename))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            <DED><DED><DED>raise FileNotFoundError(\"File not found: {}\".format(filename))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/service_controller.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/service_controller.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/service_controller.py:64:30 Invalid type [31]: Expression `[$local_mpf?core?service_controller$CoilMap]` is not a valid type.",
    "message": " Expression `[$local_mpf?core?service_controller$CoilMap]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 64,
    "warning_line": "    def get_coil_map(self) -> [CoilMap]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import namedtuple\n\n",
        "source_code_len": 36,
        "target_code": "from collections import namedtuple\n\nfrom typing import List\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -7,2 +7,4 @@\n from collections import namedtuple\n+\n+from typing import List\n \n",
        "source_code_with_indent": "from collections import namedtuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import namedtuple\n\nfrom typing import List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_coil_map(self) -> [CoilMap]:\n        \"\"\"Return a map of all coils in the machine.\"\"\"\n",
        "source_code_len": 98,
        "target_code": "\n    def get_coil_map(self) -> List[CoilMap]:\n        \"\"\"Return a map of all coils in the machine.\"\"\"\n",
        "target_code_len": 102,
        "diff_format": "@@ -63,3 +65,3 @@\n \n-    def get_coil_map(self) -> [CoilMap]:\n+    def get_coil_map(self) -> List[CoilMap]:\n         \"\"\"Return a map of all coils in the machine.\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def get_coil_map(self) -> [CoilMap]:\n        <IND>\"\"\"Return a map of all coils in the machine.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def get_coil_map(self) -> List[CoilMap]:\n        <IND>\"\"\"Return a map of all coils in the machine.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/settings_controller.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/settings_controller.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/settings_controller.py:54:30 Invalid type [31]: Expression `set(str, $local_mpf?core?settings_controller$SettingEntry)` is not a valid type.",
    "message": " Expression `set(str, $local_mpf?core?settings_controller$SettingEntry)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 54,
    "warning_line": "    def get_settings(self) -> {str, SettingEntry}:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import namedtuple\n\n",
        "source_code_len": 36,
        "target_code": "from collections import namedtuple\n\nfrom typing import Dict, List\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -2,2 +2,4 @@\n from collections import namedtuple\n+\n+from typing import Dict, List\n \n",
        "source_code_with_indent": "from collections import namedtuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import namedtuple\n\nfrom typing import Dict, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_settings(self) -> {str, SettingEntry}:\n        \"\"\"Return all available settings.\"\"\"\n",
        "source_code_len": 97,
        "target_code": "\n    def get_settings(self) -> List[SettingEntry]:\n        \"\"\"Return all available settings.\"\"\"\n",
        "target_code_len": 96,
        "diff_format": "@@ -53,3 +55,3 @@\n \n-    def get_settings(self) -> {str, SettingEntry}:\n+    def get_settings(self) -> List[SettingEntry]:\n         \"\"\"Return all available settings.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def get_settings(self) -> {str, SettingEntry}:\n        <IND>\"\"\"Return all available settings.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_settings(self) -> List[SettingEntry]:\n        <IND>\"\"\"Return all available settings.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/utility_functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/utility_functions.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/utility_functions.py:680:32 Invalid type [31]: Expression `[asyncio.Future]` is not a valid type.",
    "message": " Expression `[asyncio.Future]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 680,
    "warning_line": "    def cancel_futures(futures: [asyncio.Future]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_len": 44,
        "target_code": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -7,2 +7,3 @@\n from ruamel.yaml.compat import ordereddict\n+from typing import Dict, Iterable, List\n \n",
        "source_code_with_indent": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def cancel_futures(futures: [asyncio.Future]):\n        \"\"\"Cancel futures.\"\"\"\n",
        "source_code_len": 99,
        "target_code": "    @staticmethod\n    def cancel_futures(futures: Iterable[asyncio.Future]):\n        \"\"\"Cancel futures.\"\"\"\n",
        "target_code_len": 107,
        "diff_format": "@@ -679,3 +680,3 @@\n     @staticmethod\n-    def cancel_futures(futures: [asyncio.Future]):\n+    def cancel_futures(futures: Iterable[asyncio.Future]):\n         \"\"\"Cancel futures.\"\"\"\n",
        "source_code_with_indent": "    <DED><DED>@staticmethod\n    def cancel_futures(futures: [asyncio.Future]):\n        <IND>\"\"\"Cancel futures.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>@staticmethod\n    def cancel_futures(futures: Iterable[asyncio.Future]):\n        <IND>\"\"\"Cancel futures.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/utility_functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/utility_functions.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/utility_functions.py:687:21 Invalid type [31]: Expression `[asyncio.Future]` is not a valid type.",
    "message": " Expression `[asyncio.Future]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 687,
    "warning_line": "    def any(futures: [asyncio.Future], loop, timeout=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_len": 44,
        "target_code": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -7,2 +7,3 @@\n from ruamel.yaml.compat import ordereddict\n+from typing import Dict, Iterable, List\n \n",
        "source_code_with_indent": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def any(futures: [asyncio.Future], loop, timeout=None):\n        \"\"\"Return first future.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @staticmethod\n    def any(futures: Iterable[asyncio.Future], loop, timeout=None):\n        \"\"\"Return first future.\"\"\"\n",
        "target_code_len": 121,
        "diff_format": "@@ -686,3 +687,3 @@\n     @staticmethod\n-    def any(futures: [asyncio.Future], loop, timeout=None):\n+    def any(futures: Iterable[asyncio.Future], loop, timeout=None):\n         \"\"\"Return first future.\"\"\"\n",
        "source_code_with_indent": "    <DED><DED><DED>@staticmethod\n    def any(futures: [asyncio.Future], loop, timeout=None):\n        <IND>\"\"\"Return first future.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED><DED>@staticmethod\n    def any(futures: Iterable[asyncio.Future], loop, timeout=None):\n        <IND>\"\"\"Return first future.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/utility_functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/utility_functions.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/utility_functions.py:701:23 Invalid type [31]: Expression `[asyncio.Future]` is not a valid type.",
    "message": " Expression `[asyncio.Future]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 701,
    "warning_line": "    def first(futures: [asyncio.Future], loop, timeout=None, cancel_others=True):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_len": 44,
        "target_code": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -7,2 +7,3 @@\n from ruamel.yaml.compat import ordereddict\n+from typing import Dict, Iterable, List\n \n",
        "source_code_with_indent": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @asyncio.coroutine\n    def first(futures: [asyncio.Future], loop, timeout=None, cancel_others=True):\n        \"\"\"Return first future and cancel others.\"\"\"\n",
        "source_code_len": 158,
        "target_code": "    @asyncio.coroutine\n    def first(futures: Iterable[asyncio.Future], loop, timeout=None, cancel_others=True):\n        \"\"\"Return first future and cancel others.\"\"\"\n",
        "target_code_len": 166,
        "diff_format": "@@ -700,3 +701,3 @@\n     @asyncio.coroutine\n-    def first(futures: [asyncio.Future], loop, timeout=None, cancel_others=True):\n+    def first(futures: Iterable[asyncio.Future], loop, timeout=None, cancel_others=True):\n         \"\"\"Return first future and cancel others.\"\"\"\n",
        "source_code_with_indent": "    @asyncio.coroutine\n    def first(futures: [asyncio.Future], loop, timeout=None, cancel_others=True):\n        <IND>\"\"\"Return first future and cancel others.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @asyncio.coroutine\n    def first(futures: Iterable[asyncio.Future], loop, timeout=None, cancel_others=True):\n        <IND>\"\"\"Return first future and cancel others.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/utility_functions.py",
    "min_patch_found": false,
    "full_warning_msg": "mpf/core/utility_functions.py:722:22 Invalid type [31]: Expression `{ asyncio.Future:str }` is not a valid type.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/utility_functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/utility_functions.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/utility_functions.py:729:46 Invalid type [31]: Expression `[]` is not a valid type.",
    "message": " Expression `[]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 729,
    "warning_line": "    def get_named_list_from_objects(switches: []) -> [str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_len": 44,
        "target_code": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -7,2 +7,3 @@\n from ruamel.yaml.compat import ordereddict\n+from typing import Dict, Iterable, List\n \n",
        "source_code_with_indent": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def get_named_list_from_objects(switches: []) -> [str]:\n        \"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "    @staticmethod\n    def get_named_list_from_objects(switches) -> List[str]:\n        \"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "target_code_len": 146,
        "diff_format": "@@ -728,3 +729,3 @@\n     @staticmethod\n-    def get_named_list_from_objects(switches: []) -> [str]:\n+    def get_named_list_from_objects(switches) -> List[str]:\n         \"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def get_named_list_from_objects(switches: []) -> [str]:\n        <IND>\"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def get_named_list_from_objects(switches) -> List[str]:\n        <IND>\"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "9a4530c6fc7259000a51237c1c792c93fd10a7bb",
    "filename": "mpf/core/utility_functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/utility_functions.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/utility_functions.py:729:53 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 729,
    "warning_line": "    def get_named_list_from_objects(switches: []) -> [str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_len": 44,
        "target_code": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -7,2 +7,3 @@\n from ruamel.yaml.compat import ordereddict\n+from typing import Dict, Iterable, List\n \n",
        "source_code_with_indent": "from ruamel.yaml.compat import ordereddict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ruamel.yaml.compat import ordereddict\nfrom typing import Dict, Iterable, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def get_named_list_from_objects(switches: []) -> [str]:\n        \"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "    @staticmethod\n    def get_named_list_from_objects(switches) -> List[str]:\n        \"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "target_code_len": 146,
        "diff_format": "@@ -728,3 +729,3 @@\n     @staticmethod\n-    def get_named_list_from_objects(switches: []) -> [str]:\n+    def get_named_list_from_objects(switches) -> List[str]:\n         \"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def get_named_list_from_objects(switches: []) -> [str]:\n        <IND>\"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def get_named_list_from_objects(switches) -> List[str]:\n        <IND>\"\"\"Return a list of names from a list of switch objects.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]