[
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/calendar_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/calendar_drawer.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/calendar_drawer.py:80:81 Incompatible parameter type [6]: Expected `bool` for 3rd positional only parameter to call `TracksDrawer.color` but got `typing.List[typing.Any]`.",
    "message": " Expected `bool` for 3rd positional only parameter to call `TracksDrawer.color` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 80,
    "warning_line": "                    color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    length = sum([t.length for t in tracks])\n                    color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])\n                    d.add(d.rect(pos, dim, fill=color))\n",
        "source_code_len": 232,
        "target_code": "                    length = sum([t.length for t in tracks])\n                    has_special = len([t for t in tracks if t.special]) > 0\n                    color = self.color(self.poster.length_range_by_date, length, has_special)\n                    d.add(d.rect(pos, dim, fill=color))\n",
        "target_code_len": 287,
        "diff_format": "@@ -79,3 +85,4 @@\n                     length = sum([t.length for t in tracks])\n-                    color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])\n+                    has_special = len([t for t in tracks if t.special]) > 0\n+                    color = self.color(self.poster.length_range_by_date, length, has_special)\n                     d.add(d.rect(pos, dim, fill=color))\n",
        "source_code_with_indent": "                    length = sum([t.length for t in tracks])\n                    color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])\n                    d.add(d.rect(pos, dim, fill=color))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    length = sum([t.length for t in tracks])\n                    has_special = len([t for t in tracks if t.special]) > 0\n                    color = self.color(self.poster.length_range_by_date, length, has_special)\n                    d.add(d.rect(pos, dim, fill=color))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/circular_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/circular_drawer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/circular_drawer.py:155:69 Incompatible parameter type [6]: Expected `bool` for 3rd positional only parameter to call `TracksDrawer.color` but got `List[Track]`.",
    "message": " Expected `bool` for 3rd positional only parameter to call `TracksDrawer.color` but got `List[Track]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 155,
    "warning_line": "        color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        length = sum([t.length for t in tracks])\n        color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])\n        r1 = rr.lower()\n",
        "source_code_len": 176,
        "target_code": "        length = sum([t.length for t in tracks])\n        has_special = len([t for t in tracks if t.special]) > 0\n        color = self.color(self.poster.length_range_by_date, length, has_special)\n        r1 = rr.lower()\n",
        "target_code_len": 219,
        "diff_format": "@@ -154,3 +160,4 @@\n         length = sum([t.length for t in tracks])\n-        color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])\n+        has_special = len([t for t in tracks if t.special]) > 0\n+        color = self.color(self.poster.length_range_by_date, length, has_special)\n         r1 = rr.lower()\n",
        "source_code_with_indent": "        <IND>length = sum([t.length for t in tracks])\n        color = self.color(self.poster.length_range_by_date, length, [t for t in tracks if t.special])\n        r1 = rr.lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>length = sum([t.length for t in tracks])\n        has_special = len([t for t in tracks if t.special]) > 0\n        color = self.color(self.poster.length_range_by_date, length, has_special)\n        r1 = rr.lower()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:28:53 Unsupported operand [58]: `*` is not supported for operand types `typing.Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `typing.Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 28,
    "warning_line": "        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:29:53 Unsupported operand [58]: `*` is not supported for operand types `typing.Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `typing.Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 29,
    "warning_line": "        spacing_y = 0 if count_y <= 1 else (size.y - cell_size * count_y) / (count_y - 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:33:59 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `float`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 33,
    "warning_line": "            p = XY(index % count_x, index // count_x) * XY(cell_size + spacing_x, cell_size + spacing_y)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:33:82 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `float`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 33,
    "warning_line": "            p = XY(index % count_x, index // count_x) * XY(cell_size + spacing_x, cell_size + spacing_y)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:35:38 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "message": " Expected `float` for 1st positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "                             0.9 * XY(cell_size, cell_size),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:35:49 Incompatible parameter type [6]: Expected `float` for 2nd positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "message": " Expected `float` for 2nd positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "                             0.9 * XY(cell_size, cell_size),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:36:48 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "message": " Expected `float` for 1st positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "                             offset + 0.05 * XY(cell_size, cell_size) + p)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "flopp/GpxTrackPoster",
    "commit": "9aeab965da054b491c53caf4343eb3d506846338",
    "filename": "gpxtrackposter/grid_drawer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flopp-GpxTrackPoster/gpxtrackposter/grid_drawer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gpxtrackposter/grid_drawer.py:36:59 Incompatible parameter type [6]: Expected `float` for 2nd positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "message": " Expected `float` for 2nd positional only parameter to call `XY.__init__` but got `typing.Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "                             offset + 0.05 * XY(cell_size, cell_size) + p)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_len": 43,
        "target_code": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_len": 79,
        "diff_format": "@@ -7,2 +7,3 @@\n import svgwrite\n+from .exceptions import PosterError\n from .poster import Poster\n",
        "source_code_with_indent": "import svgwrite\nfrom .poster import Poster\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import svgwrite\nfrom .exceptions import PosterError\nfrom .poster import Poster\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_len": 233,
        "target_code": "        \"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            raise PosterError('No tracks to draw.')\n        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            raise PosterError('Unable to compute grid.')\n        count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_len": 465,
        "diff_format": "@@ -26,3 +27,8 @@\n         \"\"\"For each track, draw it on the poster.\"\"\"\n-        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n+        if self.poster.tracks is None:\n+            raise PosterError('No tracks to draw.')\n+        cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n+        if cell_size is None or counts is None:\n+            raise PosterError('Unable to compute grid.')\n+        count_x, count_y = counts[0], counts[1]\n         spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        cell_size, (count_x, count_y) = utils.compute_grid(len(self.poster.tracks), size)\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"For each track, draw it on the poster.\"\"\"\n        if self.poster.tracks is None:\n            <IND>raise PosterError('No tracks to draw.')\n        <DED>cell_size, counts = utils.compute_grid(len(self.poster.tracks), size)\n        if cell_size is None or counts is None:\n            <IND>raise PosterError('Unable to compute grid.')\n        <DED>count_x, count_y = counts[0], counts[1]\n        spacing_x = 0 if count_x <= 1 else (size.x - cell_size * count_x) / (count_x - 1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]