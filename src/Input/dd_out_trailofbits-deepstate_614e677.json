[
  {
    "project": "trailofbits/deepstate",
    "commit": "614e677b11a24b274ffc8fcc41d1cfd324dfbda4",
    "filename": "bin/deepstate/core/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-deepstate/bin/deepstate/core/base.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bin/deepstate/core/base.py:124:33 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `bool`.",
    "message": " Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "      _args[\"no_exit_compile\"] = True",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      # execution will continue. Delete config as well\n      _args[\"no_exit_compile\"] = True\n      del _args[\"config\"]\n",
        "source_code_len": 119,
        "target_code": "      # execution will continue. Delete config as well\n      _args[\"no_exit_compile\"] = True # type: ignore\n      del _args[\"config\"]\n",
        "target_code_len": 134,
        "diff_format": "@@ -123,3 +135,3 @@\n       # execution will continue. Delete config as well\n-      _args[\"no_exit_compile\"] = True\n+      _args[\"no_exit_compile\"] = True # type: ignore\n       del _args[\"config\"]\n",
        "source_code_with_indent": "      # execution will continue. Delete config as well\n      _args[\"no_exit_compile\"] = True\n      del _args[\"config\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      # execution will continue. Delete config as well\n      _args[\"no_exit_compile\"] = True # type: ignore\n      del _args[\"config\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trailofbits/deepstate",
    "commit": "614e677b11a24b274ffc8fcc41d1cfd324dfbda4",
    "filename": "bin/deepstate/core/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-deepstate/bin/deepstate/core/base.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bin/deepstate/core/base.py:148:13 Unbound name [10]: Name `ConfigType` is used but not defined in the current scope.",
    "message": " Name `ConfigType` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 148,
    "warning_line": "    context: ConfigType = dict()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    context: ConfigType = dict()\n\n",
        "source_code_len": 35,
        "target_code": "\n    context: ConfigType = dict() # type: ignore\n\n",
        "target_code_len": 50,
        "diff_format": "@@ -147,3 +159,3 @@\n \n-    context: ConfigType = dict()\n+    context: ConfigType = dict() # type: ignore\n \n",
        "source_code_with_indent": "\n    context: ConfigType = dict()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    context: ConfigType = dict() # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trailofbits/deepstate",
    "commit": "614e677b11a24b274ffc8fcc41d1cfd324dfbda4",
    "filename": "bin/deepstate/core/fuzz.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-deepstate/bin/deepstate/core/fuzz.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bin/deepstate/core/fuzz.py:240:95 Unbound name [10]: Name `cls` is used but not defined in the current scope.",
    "message": " Name `cls` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 240,
    "warning_line": "      raise FuzzFrontendError(\"No {}-instrumented DeepState static library found in {}\".format(cls, lib_path))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if not os.path.isfile(lib_path):\n      raise FuzzFrontendError(\"No {}-instrumented DeepState static library found in {}\".format(cls, lib_path))\n    L.debug(f\"Static library path: {lib_path}\")\n",
        "source_code_len": 196,
        "target_code": "    if not os.path.isfile(lib_path):\n      raise FuzzFrontendError(\"No {}-instrumented DeepState static library found in {}\".format(self, lib_path))\n    L.debug(f\"Static library path: {lib_path}\")\n",
        "target_code_len": 197,
        "diff_format": "@@ -239,3 +255,3 @@\n     if not os.path.isfile(lib_path):\n-      raise FuzzFrontendError(\"No {}-instrumented DeepState static library found in {}\".format(cls, lib_path))\n+      raise FuzzFrontendError(\"No {}-instrumented DeepState static library found in {}\".format(self, lib_path))\n     L.debug(f\"Static library path: {lib_path}\")\n",
        "source_code_with_indent": "    <DED>if not os.path.isfile(lib_path):\n      <IND>raise FuzzFrontendError(\"No {}-instrumented DeepState static library found in {}\".format(cls, lib_path))\n    <DED>L.debug(f\"Static library path: {lib_path}\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if not os.path.isfile(lib_path):\n      <IND>raise FuzzFrontendError(\"No {}-instrumented DeepState static library found in {}\".format(self, lib_path))\n    <DED>L.debug(f\"Static library path: {lib_path}\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trailofbits/deepstate",
    "commit": "614e677b11a24b274ffc8fcc41d1cfd324dfbda4",
    "filename": "bin/deepstate/core/fuzz.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-deepstate/bin/deepstate/core/fuzz.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bin/deepstate/core/fuzz.py:249:56 Unsupported operand [58]: `+` is not supported for operand types `List[Optional[str]]` and `List[str]`.",
    "message": " `+` is not supported for operand types `List[Optional[str]]` and `List[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 249,
    "warning_line": "    compiler_args = [\"-std=c++11\", self.compile_test] + flags + \\",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # initialize command with prepended compiler\n    compiler_args = [\"-std=c++11\", self.compile_test] + flags + \\\n                    [\"-o\", _out_bin]\n    compile_cmd = [self.compiler] + compiler_args\n",
        "source_code_len": 202,
        "target_code": "    # initialize command with prepended compiler\n    compiler_args: List[str] = [\"-std=c++11\", self.compile_test] + flags + [\"-o\", _out_bin] # type: ignore\n    compile_cmd = [self.compiler] + compiler_args\n",
        "target_code_len": 206,
        "diff_format": "@@ -248,4 +264,3 @@\n     # initialize command with prepended compiler\n-    compiler_args = [\"-std=c++11\", self.compile_test] + flags + \\\n-                    [\"-o\", _out_bin]\n+    compiler_args: List[str] = [\"-std=c++11\", self.compile_test] + flags + [\"-o\", _out_bin] # type: ignore\n     compile_cmd = [self.compiler] + compiler_args\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "    # initialize command with prepended compiler\n    compiler_args: List[str] = [\"-std=c++11\", self.compile_test] + flags + [\"-o\", _out_bin] # type: ignore\n    compile_cmd = [self.compiler] + compiler_args\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "    # initialize command with prepended compiler\n    compiler_args = [\"-std=c++11\", self.compile_test] + flags +                    [\"-o\", _out_bin]\n    compile_cmd = [self.compiler] + compiler_args\n"
      }
    ]
  },
  {
    "project": "trailofbits/deepstate",
    "commit": "614e677b11a24b274ffc8fcc41d1cfd324dfbda4",
    "filename": "bin/deepstate/core/fuzz.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-deepstate/bin/deepstate/core/fuzz.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bin/deepstate/core/fuzz.py:251:36 Unsupported operand [58]: `+` is not supported for operand types `List[str]` and `List[Optional[str]]`.",
    "message": " `+` is not supported for operand types `List[str]` and `List[Optional[str]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 251,
    "warning_line": "    compile_cmd = [self.compiler] + compiler_args",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # initialize command with prepended compiler\n    compiler_args = [\"-std=c++11\", self.compile_test] + flags + \\\n                    [\"-o\", _out_bin]\n    compile_cmd = [self.compiler] + compiler_args\n",
        "source_code_len": 202,
        "target_code": "    # initialize command with prepended compiler\n    compiler_args: List[str] = [\"-std=c++11\", self.compile_test] + flags + [\"-o\", _out_bin] # type: ignore\n    compile_cmd = [self.compiler] + compiler_args\n",
        "target_code_len": 206,
        "diff_format": "@@ -248,4 +264,3 @@\n     # initialize command with prepended compiler\n-    compiler_args = [\"-std=c++11\", self.compile_test] + flags + \\\n-                    [\"-o\", _out_bin]\n+    compiler_args: List[str] = [\"-std=c++11\", self.compile_test] + flags + [\"-o\", _out_bin] # type: ignore\n     compile_cmd = [self.compiler] + compiler_args\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "    # initialize command with prepended compiler\n    compiler_args: List[str] = [\"-std=c++11\", self.compile_test] + flags + [\"-o\", _out_bin] # type: ignore\n    compile_cmd = [self.compiler] + compiler_args\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "    # initialize command with prepended compiler\n    compiler_args = [\"-std=c++11\", self.compile_test] + flags +                    [\"-o\", _out_bin]\n    compile_cmd = [self.compiler] + compiler_args\n"
      }
    ]
  },
  {
    "project": "trailofbits/deepstate",
    "commit": "614e677b11a24b274ffc8fcc41d1cfd324dfbda4",
    "filename": "bin/deepstate/core/fuzz.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-deepstate/bin/deepstate/core/fuzz.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bin/deepstate/core/fuzz.py:420:4 Incompatible variable type [9]: results is declared to have type `List[int]` but is used as type `multiprocessing.pool.ApplyResult[int]`.",
    "message": " results is declared to have type `List[int]` but is used as type `multiprocessing.pool.ApplyResult[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 420,
    "warning_line": "    results = pool.apply_async(self._run, args=(command,))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    pool = multiprocessing.Pool(processes=self.num_workers)\n    results = pool.apply_async(self._run, args=(command,))\n\n",
        "source_code_len": 120,
        "target_code": "    pool = multiprocessing.Pool(processes=self.num_workers)\n    results = pool.apply_async(self._run, args=(command,)) # type: ignore\n\n",
        "target_code_len": 135,
        "diff_format": "@@ -419,3 +434,3 @@\n     pool = multiprocessing.Pool(processes=self.num_workers)\n-    results = pool.apply_async(self._run, args=(command,))\n+    results = pool.apply_async(self._run, args=(command,)) # type: ignore\n \n",
        "source_code_with_indent": "    pool = multiprocessing.Pool(processes=self.num_workers)\n    results = pool.apply_async(self._run, args=(command,))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    pool = multiprocessing.Pool(processes=self.num_workers)\n    results = pool.apply_async(self._run, args=(command,)) # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]