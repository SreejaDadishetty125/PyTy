[
  {
    "project": "dbrattli/aioreactive",
    "commit": "dc5d4fd118bbe8251b593aaf7e8508ce0c75622d",
    "filename": "aioreactive/combine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-aioreactive/aioreactive/combine.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aioreactive/combine.py:148:4 Incompatible return type [7]: Expected `typing.Callable[[AsyncObservable[Variable[TSource]]], AsyncObservable[Variable[TSource]]]` but got `typing.Callable[[Named(source, AsyncObservable[AsyncObservable[Variable[TSource]]])], AsyncObservable[Variable[TSource]]]`.",
    "message": " Expected `typing.Callable[[AsyncObservable[Variable[TSource]]], AsyncObservable[Variable[TSource]]]` but got `typing.Callable[[Named(source, AsyncObservable[AsyncObservable[Variable[TSource]]])], AsyncObservable[Variable[TSource]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 148,
    "warning_line": "    return _",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef merge_inner(max_concurrent: int = 0) -> Callable[[AsyncObservable[TSource]], AsyncObservable[TSource]]:\n    def _(source: AsyncObservable[AsyncObservable[TSource]]) -> AsyncObservable[TSource]:\n",
        "source_code_len": 199,
        "target_code": "\ndef merge_inner(\n    max_concurrent: int = 0,\n) -> Callable[[AsyncObservable[AsyncObservable[TSource]]], AsyncObservable[TSource]]:\n    def _(source: AsyncObservable[AsyncObservable[TSource]]) -> AsyncObservable[TSource]:\n",
        "target_code_len": 223,
        "diff_format": "@@ -46,3 +46,5 @@\n \n-def merge_inner(max_concurrent: int = 0) -> Callable[[AsyncObservable[TSource]], AsyncObservable[TSource]]:\n+def merge_inner(\n+    max_concurrent: int = 0,\n+) -> Callable[[AsyncObservable[AsyncObservable[TSource]]], AsyncObservable[TSource]]:\n     def _(source: AsyncObservable[AsyncObservable[TSource]]) -> AsyncObservable[TSource]:\n",
        "source_code_with_indent": "\n<DED><DED>def merge_inner(max_concurrent: int = 0) -> Callable[[AsyncObservable[TSource]], AsyncObservable[TSource]]:\n    <IND>def _(source: AsyncObservable[AsyncObservable[TSource]]) -> AsyncObservable[TSource]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def merge_inner(\n    max_concurrent: int = 0,\n) -> Callable[[AsyncObservable[AsyncObservable[TSource]]], AsyncObservable[TSource]]:\n    <IND>def _(source: AsyncObservable[AsyncObservable[TSource]]) -> AsyncObservable[TSource]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbrattli/aioreactive",
    "commit": "dc5d4fd118bbe8251b593aaf7e8508ce0c75622d",
    "filename": "aioreactive/create.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-aioreactive/aioreactive/create.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aioreactive/create.py:93:12 Incompatible variable type [9]: task is declared to have type `Optional[asyncio.futures.Future[Variable[TSource]]]` but is used as type `asyncio.tasks.Task[None]`.",
    "message": " task is declared to have type `Optional[asyncio.futures.Future[Variable[TSource]]]` but is used as type `asyncio.tasks.Task[None]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 93,
    "warning_line": "            task = asyncio.ensure_future(worker())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async def subscribe_async(observer: AsyncObserver[TSource]) -> AsyncDisposable:\n        task: Optional[Future[TSource]] = None\n\n",
        "source_code_len": 132,
        "target_code": "    async def subscribe_async(observer: AsyncObserver[TSource]) -> AsyncDisposable:\n        task: Optional[Future[None]] = None\n\n",
        "target_code_len": 129,
        "diff_format": "@@ -73,3 +73,3 @@\n     async def subscribe_async(observer: AsyncObserver[TSource]) -> AsyncDisposable:\n-        task: Optional[Future[TSource]] = None\n+        task: Optional[Future[None]] = None\n \n",
        "source_code_with_indent": "    <IND>async def subscribe_async(observer: AsyncObserver[TSource]) -> AsyncDisposable:\n        <IND>task: Optional[Future[TSource]] = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>async def subscribe_async(observer: AsyncObserver[TSource]) -> AsyncDisposable:\n        <IND>task: Optional[Future[None]] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbrattli/aioreactive",
    "commit": "dc5d4fd118bbe8251b593aaf7e8508ce0c75622d",
    "filename": "aioreactive/notification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-aioreactive/aioreactive/notification.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aioreactive/notification.py:114:12 Incompatible return type [7]: Expected `Iterable[Variable[TSource]]` but got `Iterable[Exception]`.",
    "message": " Expected `Iterable[Variable[TSource]]` but got `Iterable[Exception]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 114,
    "warning_line": "            return [self.exception]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __match__(self, pattern: Any) -> Iterable[TSource]:\n        if isinstance(self, pattern):\n",
        "source_code_len": 99,
        "target_code": "\n    def __match__(self, pattern: Any) -> Iterable[Exception]:\n        if isinstance(self, pattern):\n",
        "target_code_len": 101,
        "diff_format": "@@ -111,3 +111,3 @@\n \n-    def __match__(self, pattern: Any) -> Iterable[TSource]:\n+    def __match__(self, pattern: Any) -> Iterable[Exception]:\n         if isinstance(self, pattern):\n",
        "source_code_with_indent": "\n    <DED>def __match__(self, pattern: Any) -> Iterable[TSource]:\n        <IND>if isinstance(self, pattern):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __match__(self, pattern: Any) -> Iterable[Exception]:\n        <IND>if isinstance(self, pattern):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbrattli/aioreactive",
    "commit": "dc5d4fd118bbe8251b593aaf7e8508ce0c75622d",
    "filename": "aioreactive/observers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-aioreactive/aioreactive/observers.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aioreactive/observers.py:74:30 Incompatible parameter type [6]: Expected `Variable[TSource]` for 1st positional only parameter to call `asyncio.futures.Future.set_result` but got `bool`.",
    "message": " Expected `Variable[TSource]` for 1st positional only parameter to call `asyncio.futures.Future.set_result` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 74,
    "warning_line": "        self._pull.set_result(True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._push: Future[TSource] = Future()\n        self._pull: Future[TSource] = Future()\n\n        self._awaiters: List[Future[TSource]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_len": 207,
        "target_code": "        self._push: Future[TSource] = Future()\n        self._pull: Future[bool] = Future()\n\n        self._awaiters: List[Future[bool]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "target_code_len": 201,
        "diff_format": "@@ -24,5 +24,5 @@\n         self._push: Future[TSource] = Future()\n-        self._pull: Future[TSource] = Future()\n-\n-        self._awaiters: List[Future[TSource]] = []\n+        self._pull: Future[bool] = Future()\n+\n+        self._awaiters: List[Future[bool]] = []\n         self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_with_indent": "        self._push: Future[TSource] = Future()\n        self._pull: Future[TSource] = Future()\n\n        self._awaiters: List[Future[TSource]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._push: Future[TSource] = Future()\n        self._pull: Future[bool] = Future()\n\n        self._awaiters: List[Future[bool]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        while self._busy:\n            fut: Future[TSource] = Future()\n            self._awaiters.append(fut)\n",
        "source_code_len": 109,
        "target_code": "        while self._busy:\n            fut: Future[bool] = Future()\n            self._awaiters.append(fut)\n",
        "target_code_len": 106,
        "diff_format": "@@ -60,3 +60,3 @@\n         while self._busy:\n-            fut: Future[TSource] = Future()\n+            fut: Future[bool] = Future()\n             self._awaiters.append(fut)\n",
        "source_code_with_indent": "        <IND>while self._busy:\n            <IND>fut: Future[TSource] = Future()\n            self._awaiters.append(fut)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>while self._busy:\n            <IND>fut: Future[bool] = Future()\n            self._awaiters.append(fut)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbrattli/aioreactive",
    "commit": "dc5d4fd118bbe8251b593aaf7e8508ce0c75622d",
    "filename": "aioreactive/observers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-aioreactive/aioreactive/observers.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aioreactive/observers.py:78:31 Incompatible parameter type [6]: Expected `Variable[TSource]` for 1st positional only parameter to call `asyncio.futures.Future.set_result` but got `bool`.",
    "message": " Expected `Variable[TSource]` for 1st positional only parameter to call `asyncio.futures.Future.set_result` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "            awaiter.set_result(True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._push: Future[TSource] = Future()\n        self._pull: Future[TSource] = Future()\n\n        self._awaiters: List[Future[TSource]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_len": 207,
        "target_code": "        self._push: Future[TSource] = Future()\n        self._pull: Future[bool] = Future()\n\n        self._awaiters: List[Future[bool]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "target_code_len": 201,
        "diff_format": "@@ -24,5 +24,5 @@\n         self._push: Future[TSource] = Future()\n-        self._pull: Future[TSource] = Future()\n-\n-        self._awaiters: List[Future[TSource]] = []\n+        self._pull: Future[bool] = Future()\n+\n+        self._awaiters: List[Future[bool]] = []\n         self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_with_indent": "        self._push: Future[TSource] = Future()\n        self._pull: Future[TSource] = Future()\n\n        self._awaiters: List[Future[TSource]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._push: Future[TSource] = Future()\n        self._pull: Future[bool] = Future()\n\n        self._awaiters: List[Future[bool]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        while self._busy:\n            fut: Future[TSource] = Future()\n            self._awaiters.append(fut)\n",
        "source_code_len": 109,
        "target_code": "        while self._busy:\n            fut: Future[bool] = Future()\n            self._awaiters.append(fut)\n",
        "target_code_len": 106,
        "diff_format": "@@ -60,3 +60,3 @@\n         while self._busy:\n-            fut: Future[TSource] = Future()\n+            fut: Future[bool] = Future()\n             self._awaiters.append(fut)\n",
        "source_code_with_indent": "        <IND>while self._busy:\n            <IND>fut: Future[TSource] = Future()\n            self._awaiters.append(fut)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>while self._busy:\n            <IND>fut: Future[bool] = Future()\n            self._awaiters.append(fut)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbrattli/aioreactive",
    "commit": "dc5d4fd118bbe8251b593aaf7e8508ce0c75622d",
    "filename": "aioreactive/observers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-aioreactive/aioreactive/observers.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aioreactive/observers.py:298:28 Incompatible parameter type [6]: Expected `Variable[TSource]` for 1st positional only parameter to call `asyncio.futures.Future.set_result` but got `Optional[Variable[TSource]]`.",
    "message": " Expected `Variable[TSource]` for 1st positional only parameter to call `asyncio.futures.Future.set_result` but got `Optional[Variable[TSource]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 298,
    "warning_line": "            self.set_result(self._last_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from asyncio import Future, iscoroutinefunction\nfrom typing import AsyncIterable, AsyncIterator, Awaitable, Callable, List, Optional, Tuple, TypeVar\n\n",
        "source_code_len": 150,
        "target_code": "from asyncio import Future, iscoroutinefunction\nfrom typing import AsyncIterable, AsyncIterator, Awaitable, Callable, List, Optional, Tuple, TypeVar, cast\n\n",
        "target_code_len": 156,
        "diff_format": "@@ -2,3 +2,3 @@\n from asyncio import Future, iscoroutinefunction\n-from typing import AsyncIterable, AsyncIterator, Awaitable, Callable, List, Optional, Tuple, TypeVar\n+from typing import AsyncIterable, AsyncIterator, Awaitable, Callable, List, Optional, Tuple, TypeVar, cast\n \n",
        "source_code_with_indent": "from asyncio import Future, iscoroutinefunction\nfrom typing import AsyncIterable, AsyncIterator, Awaitable, Callable, List, Optional, Tuple, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio import Future, iscoroutinefunction\nfrom typing import AsyncIterable, AsyncIterator, Awaitable, Callable, List, Optional, Tuple, TypeVar, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._push: Future[TSource] = Future()\n        self._pull: Future[TSource] = Future()\n\n        self._awaiters: List[Future[TSource]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_len": 207,
        "target_code": "        self._push: Future[TSource] = Future()\n        self._pull: Future[bool] = Future()\n\n        self._awaiters: List[Future[bool]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "target_code_len": 201,
        "diff_format": "@@ -24,5 +24,5 @@\n         self._push: Future[TSource] = Future()\n-        self._pull: Future[TSource] = Future()\n-\n-        self._awaiters: List[Future[TSource]] = []\n+        self._pull: Future[bool] = Future()\n+\n+        self._awaiters: List[Future[bool]] = []\n         self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_with_indent": "        self._push: Future[TSource] = Future()\n        self._pull: Future[TSource] = Future()\n\n        self._awaiters: List[Future[TSource]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._push: Future[TSource] = Future()\n        self._pull: Future[bool] = Future()\n\n        self._awaiters: List[Future[bool]] = []\n        self._subscription: Optional[AsyncDisposable] = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        while self._busy:\n            fut: Future[TSource] = Future()\n            self._awaiters.append(fut)\n",
        "source_code_len": 109,
        "target_code": "        while self._busy:\n            fut: Future[bool] = Future()\n            self._awaiters.append(fut)\n",
        "target_code_len": 106,
        "diff_format": "@@ -60,3 +60,3 @@\n         while self._busy:\n-            fut: Future[TSource] = Future()\n+            fut: Future[bool] = Future()\n             self._awaiters.append(fut)\n",
        "source_code_with_indent": "        <IND>while self._busy:\n            <IND>fut: Future[TSource] = Future()\n            self._awaiters.append(fut)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>while self._busy:\n            <IND>fut: Future[bool] = Future()\n            self._awaiters.append(fut)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self._has_value:\n            self.set_result(self._last_value)\n        else:\n",
        "source_code_len": 88,
        "target_code": "        if self._has_value:\n            self.set_result(cast(TSource, self._last_value))\n        else:\n",
        "target_code_len": 103,
        "diff_format": "@@ -297,3 +297,3 @@\n         if self._has_value:\n-            self.set_result(self._last_value)\n+            self.set_result(cast(TSource, self._last_value))\n         else:\n",
        "source_code_with_indent": "        if self._has_value:\n            <IND>self.set_result(self._last_value)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self._has_value:\n            <IND>self.set_result(cast(TSource, self._last_value))\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]