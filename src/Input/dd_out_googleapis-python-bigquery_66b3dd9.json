[
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:1890:12 Incompatible return type [7]: Expected `job.base.UnknownJob` but got `job.load.LoadJob`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:1894:12 Incompatible return type [7]: Expected `job.base.UnknownJob` but got `job.extract.ExtractJob`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:1896:12 Incompatible return type [7]: Expected `job.base.UnknownJob` but got `job.query.QueryJob`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:1936:16 Incompatible parameter type [6]: Expected `job.load.LoadJobConfig` for 3rd parameter `job_config` to call `Client.load_table_from_uri` but got `job.base._JobConfig`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:1956:16 Incompatible parameter type [6]: Expected `job.copy_.CopyJobConfig` for 3rd parameter `job_config` to call `Client.copy_table` but got `job.base._JobConfig`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:1976:16 Incompatible parameter type [6]: Expected `job.extract.ExtractJobConfig` for 3rd parameter `job_config` to call `Client.extract_table` but got `job.base._JobConfig`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:1989:23 Incompatible parameter type [6]: Expected `job.query.QueryJobConfig` for 2nd parameter `job_config` to call `Client.query` but got `job.base._JobConfig`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:2066:8 Incompatible return type [7]: Expected `Union[job.copy_.CopyJob, job.extract.ExtractJob, job.load.LoadJob, job.query.QueryJob]` but got `job.base.UnknownJob`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:2140:8 Incompatible return type [7]: Expected `Union[job.copy_.CopyJob, job.extract.ExtractJob, job.load.LoadJob, job.query.QueryJob]` but got `job.base.UnknownJob`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:2442:8 Incompatible return type [7]: Expected `job.load.LoadJob` but got `job.base.UnknownJob`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3421:57 Incompatible parameter type [6]: Expected `bool` for 3rd positional only parameter to call `Client.insert_rows_json` but got `Dict[typing.Any, typing.Any]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3421:57 Incompatible parameter type [6]: Expected `float` for 3rd positional only parameter to call `Client.insert_rows_json` but got `Dict[typing.Any, typing.Any]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3421:57 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `Client.insert_rows_json` but got `Dict[typing.Any, typing.Any]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3575:35 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3577:35 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3585:39 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3590:38 Incompatible parameter type [6]: Expected `typing.List[typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `bool`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3593:42 Incompatible parameter type [6]: Expected `typing.List[typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `bool`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3596:37 Incompatible parameter type [6]: Expected `typing.List[typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3838:35 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `int`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3840:52 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `bool`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3880:18 Incompatible parameter type [6]: Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/client.py",
    "min_patch_found": false,
    "full_warning_msg": "google/cloud/bigquery/client.py:3897:18 Incompatible parameter type [6]: Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/dbapi/_helpers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/dbapi/_helpers.py:231:8 Incompatible variable type [9]: type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
    "message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 231,
    "warning_line": "        type_ = query.ArrayQueryParameterType(sub_type, name=name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
        "source_code_len": 179,
        "target_code": "    if type_type == SCALAR:\n        result_type = sub_type\n    elif type_type == ARRAY:\n        result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
        "target_code_len": 191,
        "diff_format": "@@ -228,5 +228,5 @@\n     if type_type == SCALAR:\n-        type_ = sub_type\n+        result_type = sub_type\n     elif type_type == ARRAY:\n-        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n+        result_type = query.ArrayQueryParameterType(sub_type, name=name)\n     elif type_type == STRUCT:\n",
        "source_code_with_indent": "    if type_type == SCALAR:\n        <IND>type_ = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if type_type == SCALAR:\n        <IND>result_type = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/dbapi/_helpers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/dbapi/_helpers.py:237:8 Incompatible variable type [9]: type_ is declared to have type `str` but is used as type `query.StructQueryParameterType`.",
    "message": " type_ is declared to have type `str` but is used as type `query.StructQueryParameterType`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 237,
    "warning_line": "        type_ = query.StructQueryParameterType(*fields, name=name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ]\n        type_ = query.StructQueryParameterType(*fields, name=name)\n    else:  # pragma: NO COVER\n",
        "source_code_len": 107,
        "target_code": "        ]\n        result_type = query.StructQueryParameterType(*fields, name=name)\n    else:  # pragma: NO COVER\n",
        "target_code_len": 113,
        "diff_format": "@@ -236,3 +236,3 @@\n         ]\n-        type_ = query.StructQueryParameterType(*fields, name=name)\n+        result_type = query.StructQueryParameterType(*fields, name=name)\n     else:  # pragma: NO COVER\n",
        "source_code_with_indent": "        ]\n        type_ = query.StructQueryParameterType(*fields, name=name)\n    <DED>else:  # pragma: NO COVER\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ]\n        result_type = query.StructQueryParameterType(*fields, name=name)\n    <DED>else:  # pragma: NO COVER\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/job/query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/job/query.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/job/query.py:197:12 Incompatible variable type [9]: value is declared to have type `Optional[int]` but is used as type `str`.",
    "message": " value is declared to have type `Optional[int]` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 197,
    "warning_line": "            value = str(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def statement_timeout_ms(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementTimeoutMs\"] = value\n\n",
        "source_code_len": 178,
        "target_code": "    def statement_timeout_ms(self, value: Union[int, None]):\n        new_value = None if value is None else str(value)\n        self._properties[\"statementTimeoutMs\"] = new_value\n\n",
        "target_code_len": 179,
        "diff_format": "@@ -195,5 +195,4 @@\n     def statement_timeout_ms(self, value: Union[int, None]):\n-        if value is not None:\n-            value = str(value)\n-        self._properties[\"statementTimeoutMs\"] = value\n+        new_value = None if value is None else str(value)\n+        self._properties[\"statementTimeoutMs\"] = new_value\n \n",
        "source_code_with_indent": "    def statement_timeout_ms(self, value: Union[int, None]):\n        <IND>if value is not None:\n            <IND>value = str(value)\n        <DED>self._properties[\"statementTimeoutMs\"] = value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def statement_timeout_ms(self, value: Union[int, None]):\n        <IND>new_value = None if value is None else str(value)\n        self._properties[\"statementTimeoutMs\"] = new_value\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/job/query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/job/query.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/job/query.py:211:12 Incompatible variable type [9]: value is declared to have type `Optional[int]` but is used as type `str`.",
    "message": " value is declared to have type `Optional[int]` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 211,
    "warning_line": "            value = str(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value\n\n",
        "source_code_len": 180,
        "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
        "target_code_len": 181,
        "diff_format": "@@ -209,5 +208,4 @@\n     def statement_byte_budget(self, value: Union[int, None]):\n-        if value is not None:\n-            value = str(value)\n-        self._properties[\"statementByteBudget\"] = value\n+        new_value = None if value is None else str(value)\n+        self._properties[\"statementByteBudget\"] = new_value\n \n",
        "source_code_with_indent": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>if value is not None:\n            <IND>value = str(value)\n        <DED>self._properties[\"statementByteBudget\"] = value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/job/query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/job/query.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/job/query.py:670:12 Incompatible variable type [9]: value is declared to have type `Optional[ScriptOptions]` but is used as type `Dict[str, typing.Any]`.",
    "message": " value is declared to have type `Optional[ScriptOptions]` but is used as type `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 670,
    "warning_line": "            value = value.to_api_repr()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def script_options(self, value: Union[ScriptOptions, None]):\n        if value is not None:\n            value = value.to_api_repr()\n        self._set_sub_prop(\"scriptOptions\", value)\n\n",
        "source_code_len": 187,
        "target_code": "    def script_options(self, value: Union[ScriptOptions, None]):\n        new_value = None if value is None else value.to_api_repr()\n        self._set_sub_prop(\"scriptOptions\", new_value)\n\n",
        "target_code_len": 188,
        "diff_format": "@@ -668,5 +666,4 @@\n     def script_options(self, value: Union[ScriptOptions, None]):\n-        if value is not None:\n-            value = value.to_api_repr()\n-        self._set_sub_prop(\"scriptOptions\", value)\n+        new_value = None if value is None else value.to_api_repr()\n+        self._set_sub_prop(\"scriptOptions\", new_value)\n \n",
        "source_code_with_indent": "    def script_options(self, value: Union[ScriptOptions, None]):\n        <IND>if value is not None:\n            <IND>value = value.to_api_repr()\n        <DED>self._set_sub_prop(\"scriptOptions\", value)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def script_options(self, value: Union[ScriptOptions, None]):\n        <IND>new_value = None if value is None else value.to_api_repr()\n        self._set_sub_prop(\"scriptOptions\", new_value)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/job/query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/job/query.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "google/cloud/bigquery/job/query.py:1333:4 Inconsistent override [15]: `google.cloud.bigquery.job.query.QueryJob.result` overrides method defined in `_AsyncJob` inconsistently. Returned type `Union[RowIterator, _EmptyRowIterator]` is not a subtype of the overridden return `_AsyncJob`.",
    "message": " `google.cloud.bigquery.job.query.QueryJob.result` overrides method defined in `_AsyncJob` inconsistently. Returned type `Union[RowIterator, _EmptyRowIterator]` is not a subtype of the overridden return `_AsyncJob`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 1333,
    "warning_line": "    def result(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def result(\n        self,\n",
        "source_code_len": 31,
        "target_code": "\n    def result(  # type: ignore  # (complaints about the overloaded signature)\n        self,\n",
        "target_code_len": 94,
        "diff_format": "@@ -1332,3 +1329,3 @@\n \n-    def result(\n+    def result(  # type: ignore  # (complaints about the overloaded signature)\n         self,\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def result(\n        self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def result(  # type: ignore  # (complaints about the overloaded signature)\n        self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/query.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/query.py:479:31 Incompatible parameter type [6]: Expected `Dict[str, unknown]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `Dict[str, unknown]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 479,
    "warning_line": "            resource[\"name\"] = self.name",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            value = converter(value)\n        resource = {\n            \"parameterType\": {\"type\": self.type_},\n",
        "source_code_len": 109,
        "target_code": "            value = converter(value)\n        resource: Dict[str, Any] = {\n            \"parameterType\": {\"type\": self.type_},\n",
        "target_code_len": 125,
        "diff_format": "@@ -473,3 +473,3 @@\n             value = converter(value)\n-        resource = {\n+        resource: Dict[str, Any] = {\n             \"parameterType\": {\"type\": self.type_},\n",
        "source_code_with_indent": "            <IND>value = converter(value)\n        <DED>resource = {\n            \"parameterType\": {\"type\": self.type_},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>value = converter(value)\n        <DED>resource: Dict[str, Any] = {\n            \"parameterType\": {\"type\": self.type_},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/query.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/query.py:585:4 Inconsistent override [15]: `google.cloud.bigquery.query.ArrayQueryParameter.from_api_repr` overrides method defined in `_AbstractQueryParameter` inconsistently. Returned type `ArrayQueryParameter` is not a subtype of the overridden return `ScalarQueryParameter`.",
    "message": " `google.cloud.bigquery.query.ArrayQueryParameter.from_api_repr` overrides method defined in `_AbstractQueryParameter` inconsistently. Returned type `ArrayQueryParameter` is not a subtype of the overridden return `ScalarQueryParameter`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 585,
    "warning_line": "    def from_api_repr(cls, resource: dict) -> \"ArrayQueryParameter\":",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"ScalarQueryParameter\":\n        \"\"\"Factory: construct parameter from JSON resource.\n",
        "source_code_len": 147,
        "target_code": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"_AbstractQueryParameter\":\n        \"\"\"Factory: construct parameter from JSON resource.\n",
        "target_code_len": 150,
        "diff_format": "@@ -369,3 +369,3 @@\n     @classmethod\n-    def from_api_repr(cls, resource: dict) -> \"ScalarQueryParameter\":\n+    def from_api_repr(cls, resource: dict) -> \"_AbstractQueryParameter\":\n         \"\"\"Factory: construct parameter from JSON resource.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"ScalarQueryParameter\":\n        <IND>",
        "target_code_with_indent": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"_AbstractQueryParameter\":\n        <IND>"
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/query.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/query.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "google/cloud/bigquery/query.py:718:4 Inconsistent override [15]: `google.cloud.bigquery.query.StructQueryParameter.from_api_repr` overrides method defined in `_AbstractQueryParameter` inconsistently. Returned type `StructQueryParameter` is not a subtype of the overridden return `ScalarQueryParameter`.",
    "message": " `google.cloud.bigquery.query.StructQueryParameter.from_api_repr` overrides method defined in `_AbstractQueryParameter` inconsistently. Returned type `StructQueryParameter` is not a subtype of the overridden return `ScalarQueryParameter`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 718,
    "warning_line": "    def from_api_repr(cls, resource: dict) -> \"StructQueryParameter\":",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"ScalarQueryParameter\":\n        \"\"\"Factory: construct parameter from JSON resource.\n",
        "source_code_len": 147,
        "target_code": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"_AbstractQueryParameter\":\n        \"\"\"Factory: construct parameter from JSON resource.\n",
        "target_code_len": 150,
        "diff_format": "@@ -369,3 +369,3 @@\n     @classmethod\n-    def from_api_repr(cls, resource: dict) -> \"ScalarQueryParameter\":\n+    def from_api_repr(cls, resource: dict) -> \"_AbstractQueryParameter\":\n         \"\"\"Factory: construct parameter from JSON resource.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"ScalarQueryParameter\":\n        <IND>",
        "target_code_with_indent": "    @classmethod\n    def from_api_repr(cls, resource: dict) -> \"_AbstractQueryParameter\":\n        <IND>"
      }
    ]
  },
  {
    "project": "googleapis/python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery/google/cloud/bigquery/table.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "google/cloud/bigquery/table.py:1766:8 Incompatible variable type [9]: max_queue_size is declared to have type `int` but is used as type `object`.",
    "message": " max_queue_size is declared to have type `int` but is used as type `object`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1766,
    "warning_line": "        max_queue_size: int = _pandas_helpers._MAX_QUEUE_SIZE_DEFAULT,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        dtypes: Dict[str, Any] = None,\n        max_queue_size: int = _pandas_helpers._MAX_QUEUE_SIZE_DEFAULT,\n    ) -> \"pandas.DataFrame\":\n",
        "source_code_len": 139,
        "target_code": "        dtypes: Dict[str, Any] = None,\n        max_queue_size: int = _pandas_helpers._MAX_QUEUE_SIZE_DEFAULT,  # type: ignore\n    ) -> \"pandas.DataFrame\":\n",
        "target_code_len": 155,
        "diff_format": "@@ -1765,3 +1765,3 @@\n         dtypes: Dict[str, Any] = None,\n-        max_queue_size: int = _pandas_helpers._MAX_QUEUE_SIZE_DEFAULT,\n+        max_queue_size: int = _pandas_helpers._MAX_QUEUE_SIZE_DEFAULT,  # type: ignore\n     ) -> \"pandas.DataFrame\":\n",
        "source_code_with_indent": "        dtypes: Dict[str, Any] = None,\n        max_queue_size: int = _pandas_helpers._MAX_QUEUE_SIZE_DEFAULT,\n    ) -> \"pandas.DataFrame\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        dtypes: Dict[str, Any] = None,\n        max_queue_size: int = _pandas_helpers._MAX_QUEUE_SIZE_DEFAULT,  # type: ignore\n    ) -> \"pandas.DataFrame\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]