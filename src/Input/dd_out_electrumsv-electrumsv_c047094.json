[
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/digitalbitbox/digitalbitbox.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/devices/digitalbitbox/digitalbitbox.py:700:75 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/digitalbitbox/digitalbitbox.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/devices/digitalbitbox/digitalbitbox.py:724:75 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/keepkey/keepkey.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/devices/keepkey/keepkey.py:335:63 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/keepkey/keepkey.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/devices/keepkey/keepkey.py:344:63 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/ledger/ledger.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/devices/ledger/ledger.py:523:68 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/ledger/ledger.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/devices/ledger/ledger.py:531:68 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/trezor/trezor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/devices/trezor/trezor.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/devices/trezor/trezor.py:277:63 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "message": " Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 277,
    "warning_line": "        client.handler = cast(\"QtHandler\", self.create_handler(wizard))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/devices/trezor/trezor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/devices/trezor/trezor.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/devices/trezor/trezor.py:286:63 Incompatible parameter type [6]: Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "message": " Expected `electrumsv.gui.qt.main_window.ElectrumWindow` for 1st positional only parameter to call `HW_PluginBase.create_handler` but got `AccountWizard`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 286,
    "warning_line": "        client.handler = cast(\"QtHandler\", self.create_handler(wizard))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/amountedit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/amountedit.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "electrumsv/gui/qt/amountedit.py:105:4 Inconsistent override [15]: `electrumsv.gui.qt.amountedit.BTCAmountEdit.get_amount` overrides method defined in `AmountEdit` inconsistently. Returned type `Optional[int]` is not a subtype of the overridden return `Optional[Decimal]`.",
    "message": " `electrumsv.gui.qt.amountedit.BTCAmountEdit.get_amount` overrides method defined in `AmountEdit` inconsistently. Returned type `Optional[int]` is not a subtype of the overridden return `Optional[Decimal]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 105,
    "warning_line": "    def get_amount(self) -> Optional[int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def get_amount(self) -> Optional[int]:\n        try:\n",
        "source_code_len": 57,
        "target_code": "\n    # NOTE(typing) Arbitrary requirement that subclasses can't do different things.\n    def get_amount(self) -> Optional[int]: # type: ignore[override]\n        try:\n",
        "target_code_len": 166,
        "diff_format": "@@ -104,3 +106,4 @@\n \n-    def get_amount(self) -> Optional[int]:\n+    # NOTE(typing) Arbitrary requirement that subclasses can't do different things.\n+    def get_amount(self) -> Optional[int]: # type: ignore[override]\n         try:\n",
        "source_code_with_indent": "\n    <DED>def get_amount(self) -> Optional[int]:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # NOTE(typing) Arbitrary requirement that subclasses can't do different things.\n    <DED>def get_amount(self) -> Optional[int]: # type: ignore[override]\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/amountedit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/amountedit.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/amountedit.py:132:4 Inconsistent override [15]: `electrumsv.gui.qt.amountedit.BTCSatsByteEdit.get_amount` overrides method defined in `AmountEdit` inconsistently. Returned type `Optional[float]` is not a subtype of the overridden return `Optional[Decimal]`.",
    "message": " `electrumsv.gui.qt.amountedit.BTCSatsByteEdit.get_amount` overrides method defined in `AmountEdit` inconsistently. Returned type `Optional[float]` is not a subtype of the overridden return `Optional[Decimal]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 132,
    "warning_line": "    def get_amount(self) -> Optional[float]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_amount(self) -> Optional[float]:\n        try:\n",
        "source_code_len": 59,
        "target_code": "\n    def get_satoshis_per_byte(self) -> Optional[float]:\n        try:\n",
        "target_code_len": 70,
        "diff_format": "@@ -131,3 +134,3 @@\n \n-    def get_amount(self) -> Optional[float]:\n+    def get_satoshis_per_byte(self) -> Optional[float]:\n         try:\n",
        "source_code_with_indent": "\n    <DED>def get_amount(self) -> Optional[float]:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_satoshis_per_byte(self) -> Optional[float]:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/cosigner_pool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/cosigner_pool.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/cosigner_pool.py:151:62 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `CosignerItem.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `CosignerItem.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 151,
    "warning_line": "                items.append(CosignerItem(window, account_id, xpub, pubkey_bytes,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import List, NamedTuple, Optional, Set, TYPE_CHECKING\nfrom xmlrpc.client import ServerProxy\n",
        "source_code_len": 116,
        "target_code": "import time\nfrom typing import cast, List, NamedTuple, Optional, Set, TYPE_CHECKING\nfrom xmlrpc.client import ServerProxy\n",
        "target_code_len": 122,
        "diff_format": "@@ -33,3 +33,3 @@\n import time\n-from typing import List, NamedTuple, Optional, Set, TYPE_CHECKING\n+from typing import cast, List, NamedTuple, Optional, Set, TYPE_CHECKING\n from xmlrpc.client import ServerProxy\n",
        "source_code_with_indent": "import time\nfrom typing import List, NamedTuple, Optional, Set, TYPE_CHECKING\nfrom xmlrpc.client import ServerProxy\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import cast, List, NamedTuple, Optional, Set, TYPE_CHECKING\nfrom xmlrpc.client import ServerProxy\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            for keystore in account.get_keystores():\n                xpub = keystore.get_master_public_key()\n                pubkey = bip32_key_from_string(xpub)\n",
        "source_code_len": 162,
        "target_code": "            for keystore in account.get_keystores():\n                xpub = cast(str, keystore.get_master_public_key())\n                pubkey = bip32_key_from_string(xpub)\n",
        "target_code_len": 173,
        "diff_format": "@@ -146,3 +146,3 @@\n             for keystore in account.get_keystores():\n-                xpub = keystore.get_master_public_key()\n+                xpub = cast(str, keystore.get_master_public_key())\n                 pubkey = bip32_key_from_string(xpub)\n",
        "source_code_with_indent": "            for keystore in account.get_keystores():\n                <IND>xpub = keystore.get_master_public_key()\n                pubkey = bip32_key_from_string(xpub)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            for keystore in account.get_keystores():\n                <IND>xpub = cast(str, keystore.get_master_public_key())\n                pubkey = bip32_key_from_string(xpub)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/cosigners_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/cosigners_view.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/cosigners_view.py:93:34 Incompatible parameter type [6]: Expected `Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `CosignerCard`.",
    "message": " Expected `Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `CosignerCard`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 93,
    "warning_line": "        key_edit = ShowQRTextEdit(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        key_edit = ShowQRTextEdit(self)\n        key_edit.setPlaceholderText(_(\"Paste any extended public key for this cosigner here, or \"\n",
        "source_code_len": 139,
        "target_code": "\n        key_edit = ShowQRTextEdit()\n        key_edit.setPlaceholderText(_(\"Paste any extended public key for this cosigner here, or \"\n",
        "target_code_len": 135,
        "diff_format": "@@ -92,3 +95,3 @@\n \n-        key_edit = ShowQRTextEdit(self)\n+        key_edit = ShowQRTextEdit()\n         key_edit.setPlaceholderText(_(\"Paste any extended public key for this cosigner here, or \"\n",
        "source_code_with_indent": "\n        key_edit = ShowQRTextEdit(self)\n        key_edit.setPlaceholderText(_(\"Paste any extended public key for this cosigner here, or \"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        key_edit = ShowQRTextEdit()\n        key_edit.setPlaceholderText(_(\"Paste any extended public key for this cosigner here, or \"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/cosigners_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/cosigners_view.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/cosigners_view.py:127:55 Incompatible parameter type [6]: Expected `KeyStore` for 3rd positional only parameter to call `SecuredDataDialog.__init__` but got `typing.Union[None, electrumsv.keystore.BIP32_KeyStore, electrumsv.keystore.Hardware_KeyStore, electrumsv.keystore.Old_KeyStore]`.",
    "message": " Expected `KeyStore` for 3rd positional only parameter to call `SecuredDataDialog.__init__` but got `typing.Union[None, electrumsv.keystore.BIP32_KeyStore, electrumsv.keystore.Hardware_KeyStore, electrumsv.keystore.Old_KeyStore]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "        d = SecuredDataDialog(self._main_window, self, self._state.keystore, password)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/cosigners_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/cosigners_view.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/cosigners_view.py:180:12 Incompatible attribute type [8]: Attribute `keystore` declared in class `CosignerState` has type `typing.Union[None, electrumsv.keystore.BIP32_KeyStore, electrumsv.keystore.Hardware_KeyStore, electrumsv.keystore.Old_KeyStore]` but is used as type `KeyStore`.",
    "message": " Attribute `keystore` declared in class `CosignerState` has type `typing.Union[None, electrumsv.keystore.BIP32_KeyStore, electrumsv.keystore.Hardware_KeyStore, electrumsv.keystore.Old_KeyStore]` but is used as type `KeyStore`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 180,
    "warning_line": "            self._state.keystore = keystore"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/history_list.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/history_list.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/history_list.py:155:4 Inconsistent override [14]: `electrumsv.gui.qt.history_list.HistoryList.on_edited` overrides method defined in `MyTreeWidget` inconsistently. Could not find parameter `prior` in overriding signature.",
    "message": " `electrumsv.gui.qt.history_list.HistoryList.on_edited` overrides method defined in `MyTreeWidget` inconsistently. Could not find parameter `prior` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 155,
    "warning_line": "    def on_edited(self, item: QTreeWidgetItem, column: int, prior_text: str) -> None:"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/key_dialog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/key_dialog.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "electrumsv/gui/qt/key_dialog.py:114:8 Incompatible attribute type [8]: Attribute `get_domain` declared in class `history_list.HistoryList` has type `BoundMethod[typing.Callable(history_list.HistoryList.get_domain)[[Named(self, history_list.HistoryList)], Optional[Sequence[int]]], history_list.HistoryList]` but is used as type `BoundMethod[typing.Callable(KeyDialog.get_domain)[[Named(self, KeyDialog)], Optional[Sequence[int]]], KeyDialog]`.",
    "message": " Attribute `get_domain` declared in class `history_list.HistoryList` has type `BoundMethod[typing.Callable(history_list.HistoryList.get_domain)[[Named(self, history_list.HistoryList)], Optional[Sequence[int]]], history_list.HistoryList]` but is used as type `BoundMethod[typing.Callable(KeyDialog.get_domain)[[Named(self, KeyDialog)], Optional[Sequence[int]]], KeyDialog]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 114,
    "warning_line": "        self._history_list.get_domain = self.get_domain",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self._history_list._on_account_change(self._account_id, self._account)\n        self._history_list.get_domain = self.get_domain\n        vbox.addWidget(self._history_list)\n",
        "source_code_len": 178,
        "target_code": "        self._history_list._on_account_change(self._account_id, self._account)\n        # NOTE(typing) I have no idea why we are suddenly getting \"Cannot assign to a method\"\n        self._history_list.get_domain = self.get_domain # type: ignore[assignment]\n        vbox.addWidget(self._history_list)\n",
        "target_code_len": 299,
        "diff_format": "@@ -113,3 +111,4 @@\n         self._history_list._on_account_change(self._account_id, self._account)\n-        self._history_list.get_domain = self.get_domain\n+        # NOTE(typing) I have no idea why we are suddenly getting \"Cannot assign to a method\"\n+        self._history_list.get_domain = self.get_domain # type: ignore[assignment]\n         vbox.addWidget(self._history_list)\n",
        "source_code_with_indent": "        self._history_list._on_account_change(self._account_id, self._account)\n        self._history_list.get_domain = self.get_domain\n        vbox.addWidget(self._history_list)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._history_list._on_account_change(self._account_id, self._account)\n        # NOTE(typing) I have no idea why we are suddenly getting \"Cannot assign to a method\"\n        self._history_list.get_domain = self.get_domain # type: ignore[assignment]\n        vbox.addWidget(self._history_list)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/receive_dialog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/receive_dialog.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/receive_dialog.py:94:8 Incompatible attribute type [8]: Attribute `_view` declared in class `ReceiveDialog` has type `ReceiveView` but is used as type `None`.",
    "message": " Attribute `_view` declared in class `ReceiveDialog` has type `ReceiveView` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 94,
    "warning_line": "        self._view = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._view = view\n        self._main_window = weakref.proxy(main_window)\n",
        "source_code_len": 82,
        "target_code": "\n        self._view: Optional[\"ReceiveView\"] = view\n        self._main_window = weakref.proxy(main_window)\n",
        "target_code_len": 107,
        "diff_format": "@@ -66,3 +68,3 @@\n \n-        self._view = view\n+        self._view: Optional[\"ReceiveView\"] = view\n         self._main_window = weakref.proxy(main_window)\n",
        "source_code_with_indent": "\n        self._view = view\n        self._main_window = weakref.proxy(main_window)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._view: Optional[\"ReceiveView\"] = view\n        self._main_window = weakref.proxy(main_window)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/secured_data_dialog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/secured_data_dialog.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/secured_data_dialog.py:91:39 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `SecuredDataDialog`.",
    "message": " Expected `typing.Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `SecuredDataDialog`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "            seed_edit = ShowQRTextEdit(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            seed_edit = ShowQRTextEdit(self)\n            seed_edit.setFixedHeight(80)\n",
        "source_code_len": 87,
        "target_code": "\n            seed_edit = ShowQRTextEdit()\n            seed_edit.setFixedHeight(80)\n",
        "target_code_len": 83,
        "diff_format": "@@ -90,3 +94,3 @@\n \n-            seed_edit = ShowQRTextEdit(self)\n+            seed_edit = ShowQRTextEdit()\n             seed_edit.setFixedHeight(80)\n",
        "source_code_with_indent": "\n            seed_edit = ShowQRTextEdit(self)\n            seed_edit.setFixedHeight(80)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            seed_edit = ShowQRTextEdit()\n            seed_edit.setFixedHeight(80)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/secured_data_dialog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/secured_data_dialog.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/secured_data_dialog.py:103:45 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `SecuredDataDialog`.",
    "message": " Expected `typing.Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `SecuredDataDialog`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 103,
    "warning_line": "            passphrase_edit = ShowQRTextEdit(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "source_code_len": 88,
        "target_code": "\nfrom typing import cast, Union\nfrom weakref import ProxyType\n\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "target_code_len": 150,
        "diff_format": "@@ -28,2 +28,5 @@\n \n+from typing import cast, Union\n+from weakref import ProxyType\n+\n from bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "source_code_with_indent": "\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import cast, Union\nfrom weakref import ProxyType\n\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ...i18n import _\nfrom ...keystore import KeyStore\n\n",
        "source_code_len": 56,
        "target_code": "from ...i18n import _\nfrom ...keystore import BIP32_KeyStore, Deterministic_KeyStore, KeyStore\n\n",
        "target_code_len": 96,
        "diff_format": "@@ -35,3 +38,3 @@\n from ...i18n import _\n-from ...keystore import KeyStore\n+from ...keystore import BIP32_KeyStore, Deterministic_KeyStore, KeyStore\n \n",
        "source_code_with_indent": "from ...i18n import _\nfrom ...keystore import KeyStore\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ...i18n import _\nfrom ...keystore import BIP32_KeyStore, Deterministic_KeyStore, KeyStore\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        assert keystore.derivation_type in (DerivationType.BIP32, DerivationType.ELECTRUM_OLD)\n\n        self._seed_edit = None\n        if keystore.seed is not None:\n            seed_text = keystore.get_seed(password)\n\n",
        "source_code_len": 218,
        "target_code": "        assert keystore.derivation_type in (DerivationType.BIP32, DerivationType.ELECTRUM_OLD)\n        deterministic_keystore = cast(Deterministic_KeyStore, keystore)\n\n        self._seed_edit = None\n        if deterministic_keystore.seed is not None:\n            seed_text = deterministic_keystore.get_seed(password)\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -57,6 +60,7 @@\n         assert keystore.derivation_type in (DerivationType.BIP32, DerivationType.ELECTRUM_OLD)\n+        deterministic_keystore = cast(Deterministic_KeyStore, keystore)\n \n         self._seed_edit = None\n-        if keystore.seed is not None:\n-            seed_text = keystore.get_seed(password)\n+        if deterministic_keystore.seed is not None:\n+            seed_text = deterministic_keystore.get_seed(password)\n \n",
        "source_code_with_indent": "        assert keystore.derivation_type in (DerivationType.BIP32, DerivationType.ELECTRUM_OLD)\n\n        self._seed_edit = None\n        if keystore.seed is not None:\n            <IND>seed_text = keystore.get_seed(password)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        assert keystore.derivation_type in (DerivationType.BIP32, DerivationType.ELECTRUM_OLD)\n        deterministic_keystore = cast(Deterministic_KeyStore, keystore)\n\n        self._seed_edit = None\n        if deterministic_keystore.seed is not None:\n            <IND>seed_text = deterministic_keystore.get_seed(password)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        passphrase_widget: QWidget\n        if keystore.passphrase:\n            passphrase_text = keystore.get_passphrase(password)\n\n            passphrase_edit = ShowQRTextEdit(self)\n            passphrase_edit.setFixedHeight(80)\n",
        "source_code_len": 230,
        "target_code": "        passphrase_widget: QWidget\n        if deterministic_keystore.passphrase:\n            passphrase_text = deterministic_keystore.get_passphrase(password)\n\n            passphrase_edit = ShowQRTextEdit()\n            passphrase_edit.setFixedHeight(80)\n",
        "target_code_len": 254,
        "diff_format": "@@ -99,6 +103,6 @@\n         passphrase_widget: QWidget\n-        if keystore.passphrase:\n-            passphrase_text = keystore.get_passphrase(password)\n+        if deterministic_keystore.passphrase:\n+            passphrase_text = deterministic_keystore.get_passphrase(password)\n \n-            passphrase_edit = ShowQRTextEdit(self)\n+            passphrase_edit = ShowQRTextEdit()\n             passphrase_edit.setFixedHeight(80)\n",
        "source_code_with_indent": "        <DED>passphrase_widget: QWidget\n        if keystore.passphrase:\n            <IND>passphrase_text = keystore.get_passphrase(password)\n\n            passphrase_edit = ShowQRTextEdit(self)\n            passphrase_edit.setFixedHeight(80)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>passphrase_widget: QWidget\n        if deterministic_keystore.passphrase:\n            <IND>passphrase_text = deterministic_keystore.get_passphrase(password)\n\n            passphrase_edit = ShowQRTextEdit()\n            passphrase_edit.setFixedHeight(80)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/secured_data_dialog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/secured_data_dialog.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/secured_data_dialog.py:117:43 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `SecuredDataDialog`.",
    "message": " Expected `typing.Optional[str]` for 1st positional only parameter to call `ShowQRTextEdit.__init__` but got `SecuredDataDialog`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 117,
    "warning_line": "                xprv_edit = ShowQRTextEdit(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "source_code_len": 88,
        "target_code": "\nfrom typing import cast, Union\nfrom weakref import ProxyType\n\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "target_code_len": 150,
        "diff_format": "@@ -28,2 +28,5 @@\n \n+from typing import cast, Union\n+from weakref import ProxyType\n+\n from bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "source_code_with_indent": "\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import cast, Union\nfrom weakref import ProxyType\n\nfrom bitcoinx import bip32_key_from_string, BIP39Mnemonic, ElectrumMnemonic, Wordlists\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ...i18n import _\nfrom ...keystore import KeyStore\n\n",
        "source_code_len": 56,
        "target_code": "from ...i18n import _\nfrom ...keystore import BIP32_KeyStore, Deterministic_KeyStore, KeyStore\n\n",
        "target_code_len": 96,
        "diff_format": "@@ -35,3 +38,3 @@\n from ...i18n import _\n-from ...keystore import KeyStore\n+from ...keystore import BIP32_KeyStore, Deterministic_KeyStore, KeyStore\n \n",
        "source_code_with_indent": "from ...i18n import _\nfrom ...keystore import KeyStore\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ...i18n import _\nfrom ...keystore import BIP32_KeyStore, Deterministic_KeyStore, KeyStore\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if keystore.derivation_type == DerivationType.BIP32:\n            if keystore.xprv is not None:\n                xprv_text = keystore.get_master_private_key(password)\n                private_key = bip32_key_from_string(xprv_text)\n\n                xprv_edit = ShowQRTextEdit(self)\n                xprv_edit.setFixedHeight(80)\n",
        "source_code_len": 331,
        "target_code": "        if keystore.derivation_type == DerivationType.BIP32:\n            bip32_keystore = cast(BIP32_KeyStore, keystore)\n            if bip32_keystore.xprv is not None:\n                xprv_text = bip32_keystore.get_master_private_key(password)\n                private_key = bip32_key_from_string(xprv_text)\n\n                xprv_edit = ShowQRTextEdit()\n                xprv_edit.setFixedHeight(80)\n",
        "target_code_len": 399,
        "diff_format": "@@ -112,7 +116,8 @@\n         if keystore.derivation_type == DerivationType.BIP32:\n-            if keystore.xprv is not None:\n-                xprv_text = keystore.get_master_private_key(password)\n+            bip32_keystore = cast(BIP32_KeyStore, keystore)\n+            if bip32_keystore.xprv is not None:\n+                xprv_text = bip32_keystore.get_master_private_key(password)\n                 private_key = bip32_key_from_string(xprv_text)\n \n-                xprv_edit = ShowQRTextEdit(self)\n+                xprv_edit = ShowQRTextEdit()\n                 xprv_edit.setFixedHeight(80)\n",
        "source_code_with_indent": "        if keystore.derivation_type == DerivationType.BIP32:\n            <IND>if keystore.xprv is not None:\n                <IND>xprv_text = keystore.get_master_private_key(password)\n                private_key = bip32_key_from_string(xprv_text)\n\n                xprv_edit = ShowQRTextEdit(self)\n                xprv_edit.setFixedHeight(80)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if keystore.derivation_type == DerivationType.BIP32:\n            <IND>bip32_keystore = cast(BIP32_KeyStore, keystore)\n            if bip32_keystore.xprv is not None:\n                <IND>xprv_text = bip32_keystore.get_master_private_key(password)\n                private_key = bip32_key_from_string(xprv_text)\n\n                xprv_edit = ShowQRTextEdit()\n                xprv_edit.setFixedHeight(80)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/transaction_dialog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/transaction_dialog.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/transaction_dialog.py:573:8 Incompatible variable type [9]: tx_text is declared to have type `str` but is used as type `typing.Union[Dict[str, typing.Any], str]`.",
    "message": " tx_text is declared to have type `str` but is used as type `typing.Union[Dict[str, typing.Any], str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 573,
    "warning_line": "        tx_text: str = tx_data if type(tx_data) is str else json.dumps(tx_data)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/transaction_dialog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/transaction_dialog.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/transaction_dialog.py:842:31 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 842,
    "warning_line": "                value_delta -= input.value",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            for input in tx.inputs:\n                value_delta -= input.value\n            for output in tx.outputs:\n",
        "source_code_len": 117,
        "target_code": "            for input in tx.inputs:\n                value_delta -= cast(int, input.value)\n            for output in tx.outputs:\n",
        "target_code_len": 128,
        "diff_format": "@@ -841,3 +844,3 @@\n             for input in tx.inputs:\n-                value_delta -= input.value\n+                value_delta -= cast(int, input.value)\n             for output in tx.outputs:\n",
        "source_code_with_indent": "            for input in tx.inputs:\n                <IND>value_delta -= input.value\n            <DED>for output in tx.outputs:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            for input in tx.inputs:\n                <IND>value_delta -= cast(int, input.value)\n            <DED>for output in tx.outputs:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "c047094ed736db27426d43bf3042097b5567e6fe",
    "filename": "electrumsv/gui/qt/wallet_wizard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/wallet_wizard.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/wallet_wizard.py:781:32 Unsupported operand [58]: `+` is not supported for operand types `Optional[str]` and `str`.",
    "message": " `+` is not supported for operand types `Optional[str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 781,
    "warning_line": "        row_desc_label = QLabel(entry.name +",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        row_desc_label = QLabel(entry.name +\n",
        "source_code_len": 46,
        "target_code": "\n        assert entry.name is not None\n        row_desc_label = QLabel(entry.name +\n",
        "target_code_len": 84,
        "diff_format": "@@ -780,2 +782,3 @@\n \n+        assert entry.name is not None\n         row_desc_label = QLabel(entry.name +\n",
        "source_code_with_indent": "\n        row_desc_label = QLabel(entry.name +\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        assert entry.name is not None\n        row_desc_label = QLabel(entry.name +\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]