[
  {
    "project": "karlch/vimiv-qt",
    "commit": "4ce84989a3b7460ee03fb4d41a08b5d9a2d4ccc0",
    "filename": "vimiv/commands/aliases.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlch-vimiv-qt/vimiv/commands/aliases.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vimiv/commands/aliases.py:65:4 Incompatible variable type [9]: mode is declared to have type `str` but is used as type `api.modes.Mode`.",
    "message": " mode is declared to have type `str` but is used as type `api.modes.Mode`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 65,
    "warning_line": "    mode = api.modes.get_by_name(mode)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    commandstr = \" \".join(command)\n    mode = api.modes.get_by_name(mode)\n    if name in api.commands.names(mode):\n        raise api.commands.CommandError(\"Not overriding default command %s\" % (name))\n    _aliases[mode][name] = commandstr\n",
        "source_code_len": 239,
        "target_code": "    commandstr = \" \".join(command)\n    modeobj = api.modes.get_by_name(mode)\n    if name in api.commands.names(modeobj):\n        raise api.commands.CommandError(\"Not overriding default command %s\" % (name))\n    _aliases[modeobj][name] = commandstr\n",
        "target_code_len": 248,
        "diff_format": "@@ -64,5 +64,5 @@\n     commandstr = \" \".join(command)\n-    mode = api.modes.get_by_name(mode)\n-    if name in api.commands.names(mode):\n+    modeobj = api.modes.get_by_name(mode)\n+    if name in api.commands.names(modeobj):\n         raise api.commands.CommandError(\"Not overriding default command %s\" % (name))\n-    _aliases[mode][name] = commandstr\n+    _aliases[modeobj][name] = commandstr\n",
        "source_code_with_indent": "    commandstr = \" \".join(command)\n    mode = api.modes.get_by_name(mode)\n    if name in api.commands.names(mode):\n        <IND>raise api.commands.CommandError(\"Not overriding default command %s\" % (name))\n    <DED>_aliases[mode][name] = commandstr\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    commandstr = \" \".join(command)\n    modeobj = api.modes.get_by_name(mode)\n    if name in api.commands.names(modeobj):\n        <IND>raise api.commands.CommandError(\"Not overriding default command %s\" % (name))\n    <DED>_aliases[modeobj][name] = commandstr\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "karlch/vimiv-qt",
    "commit": "4ce84989a3b7460ee03fb4d41a08b5d9a2d4ccc0",
    "filename": "vimiv/config/configcommands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlch-vimiv-qt/vimiv/config/configcommands.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vimiv/config/configcommands.py:67:4 Incompatible variable type [9]: command is declared to have type `List[str]` but is used as type `str`.",
    "message": " command is declared to have type `List[str]` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 67,
    "warning_line": "    command = \" \".join(command)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    modeobj = api.modes.get_by_name(mode) if mode else api.modes.current()\n    command = \" \".join(command)\n    api.keybindings.bind(keybinding, command, modeobj)\n\n",
        "source_code_len": 163,
        "target_code": "    modeobj = api.modes.get_by_name(mode) if mode else api.modes.current()\n    api.keybindings.bind(keybinding, \" \".join(command), modeobj)\n\n",
        "target_code_len": 141,
        "diff_format": "@@ -66,4 +66,3 @@\n     modeobj = api.modes.get_by_name(mode) if mode else api.modes.current()\n-    command = \" \".join(command)\n-    api.keybindings.bind(keybinding, command, modeobj)\n+    api.keybindings.bind(keybinding, \" \".join(command), modeobj)\n \n",
        "source_code_with_indent": "    modeobj = api.modes.get_by_name(mode) if mode else api.modes.current()\n    command = \" \".join(command)\n    api.keybindings.bind(keybinding, command, modeobj)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    modeobj = api.modes.get_by_name(mode) if mode else api.modes.current()\n    api.keybindings.bind(keybinding, \" \".join(command), modeobj)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "karlch/vimiv-qt",
    "commit": "4ce84989a3b7460ee03fb4d41a08b5d9a2d4ccc0",
    "filename": "vimiv/gui/image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlch-vimiv-qt/vimiv/gui/image.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vimiv/gui/image.py:211:20 Incompatible variable type [9]: level is declared to have type `argtypes.ImageScaleFloat` but is used as type `int`.",
    "message": " level is declared to have type `argtypes.ImageScaleFloat` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 211,
    "warning_line": "    def scale(self, level: argtypes.ImageScaleFloat = 1, count: int = 1):"
  },
  {
    "project": "karlch/vimiv-qt",
    "commit": "4ce84989a3b7460ee03fb4d41a08b5d9a2d4ccc0",
    "filename": "vimiv/imutils/immanipulate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlch-vimiv-qt/vimiv/imutils/immanipulate.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vimiv/imutils/immanipulate.py:87:25 Incompatible variable type [9]: value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "message": " value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 87,
    "warning_line": "    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_len": 165,
        "target_code": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,4 +22,4 @@\n from vimiv import api\n-from vimiv.commands import argtypes\n-from vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\n+from vimiv.commands.argtypes import ManipulateLevel\n+from vimiv.imutils import _c_manipulate  # type: ignore # noqa\n from vimiv.utils import clamp\n",
        "source_code_with_indent": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "source_code_len": 167,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "target_code_len": 175,
        "diff_format": "@@ -86,3 +86,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate brightness.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "source_code_len": 110,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 232,
        "diff_format": "@@ -99,4 +99,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"brightness\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"brightness\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "source_code_len": 163,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "target_code_len": 171,
        "diff_format": "@@ -104,3 +107,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate contrast.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "source_code_len": 108,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 230,
        "diff_format": "@@ -117,4 +120,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"contrast\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"contrast\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      }
    ]
  },
  {
    "project": "karlch/vimiv-qt",
    "commit": "4ce84989a3b7460ee03fb4d41a08b5d9a2d4ccc0",
    "filename": "vimiv/imutils/immanipulate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlch-vimiv-qt/vimiv/imutils/immanipulate.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vimiv/imutils/immanipulate.py:100:8 Incompatible variable type [9]: value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "message": " value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 100,
    "warning_line": "        value = count if count else value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_len": 165,
        "target_code": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,4 +22,4 @@\n from vimiv import api\n-from vimiv.commands import argtypes\n-from vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\n+from vimiv.commands.argtypes import ManipulateLevel\n+from vimiv.imutils import _c_manipulate  # type: ignore # noqa\n from vimiv.utils import clamp\n",
        "source_code_with_indent": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "source_code_len": 167,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "target_code_len": 175,
        "diff_format": "@@ -86,3 +86,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate brightness.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "source_code_len": 110,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 232,
        "diff_format": "@@ -99,4 +99,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"brightness\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"brightness\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "source_code_len": 163,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "target_code_len": 171,
        "diff_format": "@@ -104,3 +107,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate contrast.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "source_code_len": 108,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 230,
        "diff_format": "@@ -117,4 +120,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"contrast\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"contrast\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      }
    ]
  },
  {
    "project": "karlch/vimiv-qt",
    "commit": "4ce84989a3b7460ee03fb4d41a08b5d9a2d4ccc0",
    "filename": "vimiv/imutils/immanipulate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlch-vimiv-qt/vimiv/imutils/immanipulate.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vimiv/imutils/immanipulate.py:105:23 Incompatible variable type [9]: value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "message": " value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 105,
    "warning_line": "    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_len": 165,
        "target_code": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,4 +22,4 @@\n from vimiv import api\n-from vimiv.commands import argtypes\n-from vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\n+from vimiv.commands.argtypes import ManipulateLevel\n+from vimiv.imutils import _c_manipulate  # type: ignore # noqa\n from vimiv.utils import clamp\n",
        "source_code_with_indent": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "source_code_len": 167,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "target_code_len": 175,
        "diff_format": "@@ -86,3 +86,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate brightness.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "source_code_len": 110,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 232,
        "diff_format": "@@ -99,4 +99,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"brightness\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"brightness\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "source_code_len": 163,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "target_code_len": 171,
        "diff_format": "@@ -104,3 +107,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate contrast.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "source_code_len": 108,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 230,
        "diff_format": "@@ -117,4 +120,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"contrast\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"contrast\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      }
    ]
  },
  {
    "project": "karlch/vimiv-qt",
    "commit": "4ce84989a3b7460ee03fb4d41a08b5d9a2d4ccc0",
    "filename": "vimiv/imutils/immanipulate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlch-vimiv-qt/vimiv/imutils/immanipulate.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vimiv/imutils/immanipulate.py:118:8 Incompatible variable type [9]: value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "message": " value is declared to have type `argtypes.ManipulateLevel` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "        value = count if count else value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_len": 165,
        "target_code": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,4 +22,4 @@\n from vimiv import api\n-from vimiv.commands import argtypes\n-from vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\n+from vimiv.commands.argtypes import ManipulateLevel\n+from vimiv.imutils import _c_manipulate  # type: ignore # noqa\n from vimiv.utils import clamp\n",
        "source_code_with_indent": "from vimiv import api\nfrom vimiv.commands import argtypes\nfrom vimiv.imutils import _c_manipulate  # pylint: disable=no-name-in-module\nfrom vimiv.utils import clamp\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from vimiv import api\nfrom vimiv.commands.argtypes import ManipulateLevel\nfrom vimiv.imutils import _c_manipulate  # type: ignore # noqa\nfrom vimiv.utils import clamp\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "source_code_len": 167,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate brightness.\n",
        "target_code_len": 175,
        "diff_format": "@@ -86,3 +86,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate brightness.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def brightness(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "source_code_len": 110,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 232,
        "diff_format": "@@ -99,4 +99,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"brightness\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"brightness\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"brightness\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"brightness\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "source_code_len": 163,
        "target_code": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        \"\"\"Manipulate contrast.\n",
        "target_code_len": 171,
        "diff_format": "@@ -104,3 +107,3 @@\n     @api.commands.register(mode=api.modes.MANIPULATE)\n-    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n+    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n         \"\"\"Manipulate contrast.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: argtypes.ManipulateLevel = 0, count: int = 0):\n        <IND>",
        "target_code_with_indent": "    @api.commands.register(mode=api.modes.MANIPULATE)\n    def contrast(self, value: ManipulateLevel = ManipulateLevel(0), count: int = 0):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "source_code_len": 108,
        "target_code": "        \"\"\"\n        try:\n            value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        except ValueError as e:\n            raise api.commands.CommandError(str(e))\n\n",
        "target_code_len": 230,
        "diff_format": "@@ -117,4 +120,7 @@\n         \"\"\"\n-        value = count if count else value\n-        self._update_manipulation(\"contrast\", value)\n+        try:\n+            value = ManipulateLevel(count) if count else value\n+            self._update_manipulation(\"contrast\", value)\n+        except ValueError as e:\n+            raise api.commands.CommandError(str(e))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value = count if count else value\n        self._update_manipulation(\"contrast\", value)\n\n",
        "target_code_with_indent": "\n        try:\n            <IND>value = ManipulateLevel(count) if count else value\n            self._update_manipulation(\"contrast\", value)\n        <DED>except ValueError as e:\n            <IND>raise api.commands.CommandError(str(e))\n\n"
      }
    ]
  }
]