[
  {
    "project": "python-poetry/poetry-core",
    "commit": "35ef5285ffc3198683ff5d5ccc2d6117720db8e1",
    "filename": "poetry/core/vcs/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/vcs/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/vcs/__init__.py:31:4 Incompatible return type [7]: Expected `Git` but got `typing.Optional[Git]`.",
    "message": " Expected `Git` but got `typing.Optional[Git]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 31,
    "warning_line": "    return vcs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -4,2 +4,3 @@\n from pathlib import Path\n+from typing import Optional\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_vcs(directory: Path) -> Git:\n    working_dir = Path.cwd()\n    os.chdir(str(directory.resolve()))\n\n",
        "source_code_len": 107,
        "target_code": "\ndef get_vcs(directory: Path) -> Optional[Git]:\n    working_dir = Path.cwd()\n    os.chdir(str(directory.resolve()))\n\n    vcs: Optional[Git]\n\n",
        "target_code_len": 141,
        "diff_format": "@@ -8,5 +9,7 @@\n \n-def get_vcs(directory: Path) -> Git:\n+def get_vcs(directory: Path) -> Optional[Git]:\n     working_dir = Path.cwd()\n     os.chdir(str(directory.resolve()))\n+\n+    vcs: Optional[Git]\n \n",
        "source_code_with_indent": "\ndef get_vcs(directory: Path) -> Git:\n    <IND>working_dir = Path.cwd()\n    os.chdir(str(directory.resolve()))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef get_vcs(directory: Path) -> Optional[Git]:\n    <IND>working_dir = Path.cwd()\n    os.chdir(str(directory.resolve()))\n\n    vcs: Optional[Git]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "35ef5285ffc3198683ff5d5ccc2d6117720db8e1",
    "filename": "poetry/core/vcs/git.py",
    "min_patch_found": false,
    "full_warning_msg": "poetry/core/vcs/git.py:275:31 Incompatible parameter type [6]: Expected `Variable[typing.AnyStr <: [str, bytes]]` for 2nd positional only parameter to call `re.match` but got `Optional[str]`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "35ef5285ffc3198683ff5d5ccc2d6117720db8e1",
    "filename": "poetry/core/vcs/git.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/vcs/git.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/vcs/git.py:402:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 402,
    "warning_line": "            raise GitError(f\"Invalid Git parameter: {parameter}\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _check_parameter(self, parameter: str) -> str:\n        \"\"\"\n",
        "source_code_len": 68,
        "target_code": "\n    def _check_parameter(self, parameter: str) -> None:\n        \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -396,3 +396,3 @@\n \n-    def _check_parameter(self, parameter: str) -> str:\n+    def _check_parameter(self, parameter: str) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _check_parameter(self, parameter: str) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _check_parameter(self, parameter: str) -> None:\n        <IND>"
      }
    ]
  }
]