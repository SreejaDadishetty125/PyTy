[
  {
    "project": "aiokitchen/aiomisc",
    "commit": "7f3954b0f9e268ba7c2843250b32be54fce453fa",
    "filename": "aiomisc/aggregate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiokitchen-aiomisc/aiomisc/aggregate.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiomisc/aggregate.py:42:30 Incompatible variable type [9]: max_count is declared to have type `int` but is used as type `None`.",
    "message": " max_count is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 42,
    "warning_line": "            leeway_ms: float, max_count: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: int = None,\n    ):\n",
        "source_code_len": 96,
        "target_code": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: Optional[int] = None,\n    ):\n",
        "target_code_len": 106,
        "diff_format": "@@ -41,3 +41,3 @@\n             self, func: AggFunc, *,\n-            leeway_ms: float, max_count: int = None,\n+            leeway_ms: float, max_count: Optional[int] = None,\n     ):\n",
        "source_code_with_indent": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: int = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: Optional[int] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiokitchen/aiomisc",
    "commit": "7f3954b0f9e268ba7c2843250b32be54fce453fa",
    "filename": "aiomisc/aggregate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiokitchen-aiomisc/aiomisc/aggregate.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiomisc/aggregate.py:172:32 Incompatible variable type [9]: max_count is declared to have type `int` but is used as type `None`.",
    "message": " max_count is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 172,
    "warning_line": "def aggregate(leeway_ms: float, max_count: int = None) -> Callable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ResultNotSet(Exception):\n    pass\n",
        "source_code_len": 41,
        "target_code": "\nclass ResultNotSetError(Exception):\n    pass\n",
        "target_code_len": 46,
        "diff_format": "@@ -19,3 +19,3 @@\n \n-class ResultNotSet(Exception):\n+class ResultNotSetError(Exception):\n     pass\n",
        "source_code_with_indent": "\n<DED>class ResultNotSet(Exception):\n    <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class ResultNotSetError(Exception):\n    <IND>pass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: int = None,\n    ):\n",
        "source_code_len": 96,
        "target_code": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: Optional[int] = None,\n    ):\n",
        "target_code_len": 106,
        "diff_format": "@@ -41,3 +41,3 @@\n             self, func: AggFunc, *,\n-            leeway_ms: float, max_count: int = None,\n+            leeway_ms: float, max_count: Optional[int] = None,\n     ):\n",
        "source_code_with_indent": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: int = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: Optional[int] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if not future.done():\n                future.set_exception(ResultNotSet)\n\n\ndef aggregate(leeway_ms: float, max_count: int = None) -> Callable:\n    \"\"\"\n",
        "source_code_len": 163,
        "target_code": "            if not future.done():\n                future.set_exception(ResultNotSetError)\n\n\ndef aggregate(leeway_ms: float, max_count: Optional[int] = None) -> Callable:\n    \"\"\"\n",
        "target_code_len": 178,
        "diff_format": "@@ -168,6 +168,6 @@\n             if not future.done():\n-                future.set_exception(ResultNotSet)\n-\n-\n-def aggregate(leeway_ms: float, max_count: int = None) -> Callable:\n+                future.set_exception(ResultNotSetError)\n+\n+\n+def aggregate(leeway_ms: float, max_count: Optional[int] = None) -> Callable:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            <IND>if not future.done():\n                <IND>future.set_exception(ResultNotSet)\n\n\n<DED><DED><DED><DED>def aggregate(leeway_ms: float, max_count: int = None) -> Callable:\n    <IND>",
        "target_code_with_indent": "            <IND>if not future.done():\n                <IND>future.set_exception(ResultNotSetError)\n\n\n<DED><DED><DED><DED>def aggregate(leeway_ms: float, max_count: Optional[int] = None) -> Callable:\n    <IND>"
      }
    ]
  },
  {
    "project": "aiokitchen/aiomisc",
    "commit": "7f3954b0f9e268ba7c2843250b32be54fce453fa",
    "filename": "aiomisc/aggregate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiokitchen-aiomisc/aiomisc/aggregate.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiomisc/aggregate.py:200:38 Incompatible variable type [9]: max_count is declared to have type `int` but is used as type `None`.",
    "message": " max_count is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 200,
    "warning_line": "def aggregate_async(leeway_ms: float, max_count: int = None) -> Callable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ResultNotSet(Exception):\n    pass\n",
        "source_code_len": 41,
        "target_code": "\nclass ResultNotSetError(Exception):\n    pass\n",
        "target_code_len": 46,
        "diff_format": "@@ -19,3 +19,3 @@\n \n-class ResultNotSet(Exception):\n+class ResultNotSetError(Exception):\n     pass\n",
        "source_code_with_indent": "\n<DED>class ResultNotSet(Exception):\n    <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class ResultNotSetError(Exception):\n    <IND>pass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: int = None,\n    ):\n",
        "source_code_len": 96,
        "target_code": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: Optional[int] = None,\n    ):\n",
        "target_code_len": 106,
        "diff_format": "@@ -41,3 +41,3 @@\n             self, func: AggFunc, *,\n-            leeway_ms: float, max_count: int = None,\n+            leeway_ms: float, max_count: Optional[int] = None,\n     ):\n",
        "source_code_with_indent": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: int = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, func: AggFunc, *,\n            leeway_ms: float, max_count: Optional[int] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if not future.done():\n                future.set_exception(ResultNotSet)\n\n\ndef aggregate(leeway_ms: float, max_count: int = None) -> Callable:\n    \"\"\"\n",
        "source_code_len": 163,
        "target_code": "            if not future.done():\n                future.set_exception(ResultNotSetError)\n\n\ndef aggregate(leeway_ms: float, max_count: Optional[int] = None) -> Callable:\n    \"\"\"\n",
        "target_code_len": 178,
        "diff_format": "@@ -168,6 +168,6 @@\n             if not future.done():\n-                future.set_exception(ResultNotSet)\n-\n-\n-def aggregate(leeway_ms: float, max_count: int = None) -> Callable:\n+                future.set_exception(ResultNotSetError)\n+\n+\n+def aggregate(leeway_ms: float, max_count: Optional[int] = None) -> Callable:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            <IND>if not future.done():\n                <IND>future.set_exception(ResultNotSet)\n\n\n<DED><DED><DED><DED>def aggregate(leeway_ms: float, max_count: int = None) -> Callable:\n    <IND>",
        "target_code_with_indent": "            <IND>if not future.done():\n                <IND>future.set_exception(ResultNotSetError)\n\n\n<DED><DED><DED><DED>def aggregate(leeway_ms: float, max_count: Optional[int] = None) -> Callable:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef aggregate_async(leeway_ms: float, max_count: int = None) -> Callable:\n    \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\ndef aggregate_async(\n        leeway_ms: float, max_count: Optional[int] = None,\n) -> Callable:\n    \"\"\"\n",
        "target_code_len": 104,
        "diff_format": "@@ -199,3 +199,5 @@\n \n-def aggregate_async(leeway_ms: float, max_count: int = None) -> Callable:\n+def aggregate_async(\n+        leeway_ms: float, max_count: Optional[int] = None,\n+) -> Callable:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def aggregate_async(leeway_ms: float, max_count: int = None) -> Callable:\n    <IND>",
        "target_code_with_indent": "\n<DED>def aggregate_async(\n        leeway_ms: float, max_count: Optional[int] = None,\n) -> Callable:\n    <IND>"
      }
    ]
  }
]