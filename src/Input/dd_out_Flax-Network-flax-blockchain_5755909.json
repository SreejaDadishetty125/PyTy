[
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/mempool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/mempool.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/mempool.py:35:22 Invalid type [31]: Expression `typing.Dict[slice(src.types.sized_bytes.bytes32, src.types.sized_bytes.bytes32, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(src.types.sized_bytes.bytes32, src.types.sized_bytes.bytes32, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 35,
    "warning_line": "        self.allSeen: Dict[bytes32: bytes32] = {}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.allSeen: Dict[bytes32: bytes32] = {}\n        # Mempool for each tip\n",
        "source_code_len": 82,
        "target_code": "\n        self.allSeen: Dict[bytes32, bytes32] = {}\n        # Mempool for each tip\n",
        "target_code_len": 82,
        "diff_format": "@@ -34,3 +34,3 @@\n \n-        self.allSeen: Dict[bytes32: bytes32] = {}\n+        self.allSeen: Dict[bytes32, bytes32] = {}\n         # Mempool for each tip\n",
        "source_code_with_indent": "\n        self.allSeen: Dict[bytes32: bytes32] = {}\n        # Mempool for each tip\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self.allSeen: Dict[bytes32, bytes32] = {}\n        # Mempool for each tip\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/mempool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/mempool.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/mempool.py:136:36 Invalid type [31]: Expression `typing.Dict[slice(src.types.sized_bytes.bytes32, src.types.mempool_item.MempoolItem, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(src.types.sized_bytes.bytes32, src.types.mempool_item.MempoolItem, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 136,
    "warning_line": "            conflicting_pool_items: Dict[bytes32: MempoolItem] = {}"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/mempool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/mempool.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/mempool.py:187:75 Incompatible parameter type [6]: Expected `uint64` for 4th positional only parameter to call `MempoolItem.__init__` but got `int`.",
    "message": " Expected `uint64` for 4th positional only parameter to call `MempoolItem.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 187,
    "warning_line": "            new_item = MempoolItem(new_spend, fees_per_cost, uint64(fees), cost)"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/util/Conditions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/util/Conditions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/util/Conditions.py:43:7 Invalid type [31]: Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 43,
    "warning_line": "    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
        "source_code_len": 194,
        "target_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
        "target_code_len": 194,
        "diff_format": "@@ -42,3 +42,3 @@\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n-    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n+    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n     for _ in conditions:\n",
        "source_code_with_indent": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/util/blockchain_check_conditions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/util/blockchain_check_conditions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/util/blockchain_check_conditions.py:69:26 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `src.util.struct_stream.StructStream.__new__` but got `float`.",
    "message": " Expected `int` for 1st positional only parameter to call `src.util.struct_stream.StructStream.__new__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "    current_time = uint64(time.time() * 1000)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    current_time = uint64(time.time() * 1000)\n    if current_time < expected_mili_time:\n",
        "source_code_len": 89,
        "target_code": "\n    current_time = uint64(int(time.time() * 1000))\n    if current_time < expected_mili_time:\n",
        "target_code_len": 94,
        "diff_format": "@@ -68,3 +69,3 @@\n \n-    current_time = uint64(time.time() * 1000)\n+    current_time = uint64(int(time.time() * 1000))\n     if current_time < expected_mili_time:\n",
        "source_code_with_indent": "\n    <DED>current_time = uint64(time.time() * 1000)\n    if current_time < expected_mili_time:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>current_time = uint64(int(time.time() * 1000))\n    if current_time < expected_mili_time:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]