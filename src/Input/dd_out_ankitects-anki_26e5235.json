[
  {
    "project": "ankitects/anki",
    "commit": "26e52358469e60104954791f24b78d6f8a870b6b",
    "filename": "qt/aqt/browser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ankitects-anki/qt/aqt/browser.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qt/aqt/browser.py:639:8 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 639,
    "warning_line": "        self.search()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def search_for(self, search: str, prompt: Optional[str] = None) -> bool:\n        \"\"\"Keep track of search string so that we reuse identical search when\n",
        "source_code_len": 156,
        "target_code": "\n    def search_for(self, search: str, prompt: Optional[str] = None):\n        \"\"\"Keep track of search string so that we reuse identical search when\n",
        "target_code_len": 148,
        "diff_format": "@@ -629,3 +629,3 @@\n \n-    def search_for(self, search: str, prompt: Optional[str] = None) -> bool:\n+    def search_for(self, search: str, prompt: Optional[str] = None):\n         \"\"\"Keep track of search string so that we reuse identical search when\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def search_for(self, search: str, prompt: Optional[str] = None) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def search_for(self, search: str, prompt: Optional[str] = None):\n        <IND>"
      }
    ]
  }
]