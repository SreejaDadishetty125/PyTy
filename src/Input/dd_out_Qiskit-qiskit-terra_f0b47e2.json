[
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "f0b47e2484ef1a09a3b93b60fd4c6b2e10c67849",
    "filename": "qiskit/pulse/instructions/instruction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/instruction.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/instruction.py:135:8 Incompatible return type [7]: Expected `Tuple[ScheduleComponent]` but got `Tuple[]`.",
    "message": " Expected `Tuple[ScheduleComponent]` but got `Tuple[]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 135,
    "warning_line": "        return ()"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "f0b47e2484ef1a09a3b93b60fd4c6b2e10c67849",
    "filename": "qiskit/pulse/instructions/instruction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/instruction.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/instruction.py:304:4 Inconsistent override [14]: `qiskit.pulse.instructions.instruction.Instruction.__add__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "message": " `qiskit.pulse.instructions.instruction.Instruction.__add__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 304,
    "warning_line": "    def __add__(self, other: ScheduleComponent) -> Schedule:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __add__(self, other: ScheduleComponent) -> Schedule:\n        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\"\"\"\n        return self.append(other)\n\n    def __or__(self, other: ScheduleComponent) -> Schedule:\n        \"\"\"Return a new schedule which is the union of `self` and `other`.\"\"\"\n        return self.insert(0, other)\n\n    def __lshift__(self, time: int) -> Schedule:\n        \"\"\"Return a new schedule which is shifted forward by `time`.\"\"\"\n        return self.shift(time)\n",
        "source_code_len": 515,
        "target_code": "\n    def __add__(self, other):\n        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to be appended\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` appended after this instruction at t=0.\n        \"\"\"\n        return self.append(other)\n\n    def __or__(self, other):\n        \"\"\"Return a new schedule which is the union of `self` and `other`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to union with\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` inserted with this instruction at t=0\n        \"\"\"\n        return self.insert(0, other)\n\n    def __lshift__(self, time: int):\n        \"\"\"Return a new schedule which is shifted forward by `time`.\n\n        Returns:\n            Schedule: The shifted schedule\n        \"\"\"\n        return self.shift(time)\n",
        "target_code_len": 968,
        "diff_format": "@@ -303,12 +319,30 @@\n \n-    def __add__(self, other: ScheduleComponent) -> Schedule:\n-        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\"\"\"\n+    def __add__(self, other):\n+        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\n+\n+        Args:\n+            other (Union['Schedule', 'Instruction']): Schedule or instruction to be appended\n+\n+        Returns:\n+            Schedule: A new schedule with ``schedule`` appended after this instruction at t=0.\n+        \"\"\"\n         return self.append(other)\n \n-    def __or__(self, other: ScheduleComponent) -> Schedule:\n-        \"\"\"Return a new schedule which is the union of `self` and `other`.\"\"\"\n+    def __or__(self, other):\n+        \"\"\"Return a new schedule which is the union of `self` and `other`.\n+\n+        Args:\n+            other (Union['Schedule', 'Instruction']): Schedule or instruction to union with\n+\n+        Returns:\n+            Schedule: A new schedule with ``schedule`` inserted with this instruction at t=0\n+        \"\"\"\n         return self.insert(0, other)\n \n-    def __lshift__(self, time: int) -> Schedule:\n-        \"\"\"Return a new schedule which is shifted forward by `time`.\"\"\"\n+    def __lshift__(self, time: int):\n+        \"\"\"Return a new schedule which is shifted forward by `time`.\n+\n+        Returns:\n+            Schedule: The shifted schedule\n+        \"\"\"\n         return self.shift(time)\n",
        "source_code_with_indent": "\n    <DED>def __add__(self, other: ScheduleComponent) -> Schedule:\n        <IND>\"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\"\"\"\n        return self.append(other)\n\n    <DED>def __or__(self, other: ScheduleComponent) -> Schedule:\n        <IND>\"\"\"Return a new schedule which is the union of `self` and `other`.\"\"\"\n        return self.insert(0, other)\n\n    <DED>def __lshift__(self, time: int) -> Schedule:\n        <IND>\"\"\"Return a new schedule which is shifted forward by `time`.\"\"\"\n        return self.shift(time)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __add__(self, other):\n        <IND>\"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to be appended\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` appended after this instruction at t=0.\n        \"\"\"\n        return self.append(other)\n\n    <DED>def __or__(self, other):\n        <IND>\"\"\"Return a new schedule which is the union of `self` and `other`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to union with\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` inserted with this instruction at t=0\n        \"\"\"\n        return self.insert(0, other)\n\n    <DED>def __lshift__(self, time: int):\n        <IND>\"\"\"Return a new schedule which is shifted forward by `time`.\n\n        Returns:\n            Schedule: The shifted schedule\n        \"\"\"\n        return self.shift(time)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "f0b47e2484ef1a09a3b93b60fd4c6b2e10c67849",
    "filename": "qiskit/pulse/instructions/instruction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/instructions/instruction.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/instructions/instruction.py:308:4 Inconsistent override [14]: `qiskit.pulse.instructions.instruction.Instruction.__or__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "message": " `qiskit.pulse.instructions.instruction.Instruction.__or__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 308,
    "warning_line": "    def __or__(self, other: ScheduleComponent) -> Schedule:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __add__(self, other: ScheduleComponent) -> Schedule:\n        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\"\"\"\n        return self.append(other)\n\n    def __or__(self, other: ScheduleComponent) -> Schedule:\n        \"\"\"Return a new schedule which is the union of `self` and `other`.\"\"\"\n        return self.insert(0, other)\n\n    def __lshift__(self, time: int) -> Schedule:\n        \"\"\"Return a new schedule which is shifted forward by `time`.\"\"\"\n        return self.shift(time)\n",
        "source_code_len": 515,
        "target_code": "\n    def __add__(self, other):\n        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to be appended\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` appended after this instruction at t=0.\n        \"\"\"\n        return self.append(other)\n\n    def __or__(self, other):\n        \"\"\"Return a new schedule which is the union of `self` and `other`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to union with\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` inserted with this instruction at t=0\n        \"\"\"\n        return self.insert(0, other)\n\n    def __lshift__(self, time: int):\n        \"\"\"Return a new schedule which is shifted forward by `time`.\n\n        Returns:\n            Schedule: The shifted schedule\n        \"\"\"\n        return self.shift(time)\n",
        "target_code_len": 968,
        "diff_format": "@@ -303,12 +319,30 @@\n \n-    def __add__(self, other: ScheduleComponent) -> Schedule:\n-        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\"\"\"\n+    def __add__(self, other):\n+        \"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\n+\n+        Args:\n+            other (Union['Schedule', 'Instruction']): Schedule or instruction to be appended\n+\n+        Returns:\n+            Schedule: A new schedule with ``schedule`` appended after this instruction at t=0.\n+        \"\"\"\n         return self.append(other)\n \n-    def __or__(self, other: ScheduleComponent) -> Schedule:\n-        \"\"\"Return a new schedule which is the union of `self` and `other`.\"\"\"\n+    def __or__(self, other):\n+        \"\"\"Return a new schedule which is the union of `self` and `other`.\n+\n+        Args:\n+            other (Union['Schedule', 'Instruction']): Schedule or instruction to union with\n+\n+        Returns:\n+            Schedule: A new schedule with ``schedule`` inserted with this instruction at t=0\n+        \"\"\"\n         return self.insert(0, other)\n \n-    def __lshift__(self, time: int) -> Schedule:\n-        \"\"\"Return a new schedule which is shifted forward by `time`.\"\"\"\n+    def __lshift__(self, time: int):\n+        \"\"\"Return a new schedule which is shifted forward by `time`.\n+\n+        Returns:\n+            Schedule: The shifted schedule\n+        \"\"\"\n         return self.shift(time)\n",
        "source_code_with_indent": "\n    <DED>def __add__(self, other: ScheduleComponent) -> Schedule:\n        <IND>\"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\"\"\"\n        return self.append(other)\n\n    <DED>def __or__(self, other: ScheduleComponent) -> Schedule:\n        <IND>\"\"\"Return a new schedule which is the union of `self` and `other`.\"\"\"\n        return self.insert(0, other)\n\n    <DED>def __lshift__(self, time: int) -> Schedule:\n        <IND>\"\"\"Return a new schedule which is shifted forward by `time`.\"\"\"\n        return self.shift(time)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __add__(self, other):\n        <IND>\"\"\"Return a new schedule with `other` inserted within `self` at `start_time`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to be appended\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` appended after this instruction at t=0.\n        \"\"\"\n        return self.append(other)\n\n    <DED>def __or__(self, other):\n        <IND>\"\"\"Return a new schedule which is the union of `self` and `other`.\n\n        Args:\n            other (Union['Schedule', 'Instruction']): Schedule or instruction to union with\n\n        Returns:\n            Schedule: A new schedule with ``schedule`` inserted with this instruction at t=0\n        \"\"\"\n        return self.insert(0, other)\n\n    <DED>def __lshift__(self, time: int):\n        <IND>\"\"\"Return a new schedule which is shifted forward by `time`.\n\n        Returns:\n            Schedule: The shifted schedule\n        \"\"\"\n        return self.shift(time)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "f0b47e2484ef1a09a3b93b60fd4c6b2e10c67849",
    "filename": "qiskit/pulse/schedule.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/schedule.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/schedule.py:777:4 Inconsistent override [14]: `qiskit.pulse.schedule.Schedule.__add__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "message": " `qiskit.pulse.schedule.Schedule.__add__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 777,
    "warning_line": "    def __add__(self, other: ScheduleComponent) -> 'Schedule':"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "f0b47e2484ef1a09a3b93b60fd4c6b2e10c67849",
    "filename": "qiskit/pulse/schedule.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/pulse/schedule.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/pulse/schedule.py:781:4 Inconsistent override [14]: `qiskit.pulse.schedule.Schedule.__or__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "message": " `qiskit.pulse.schedule.Schedule.__or__` overrides method defined in `ScheduleComponent` inconsistently. Could not find parameter `schedule` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 781,
    "warning_line": "    def __or__(self, other: ScheduleComponent) -> 'Schedule':"
  }
]