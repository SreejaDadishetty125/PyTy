[
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/attacks/evasion/auto_attack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/evasion/auto_attack.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/evasion/auto_attack.py:108:25 Incompatible parameter type [6]: Expected `art.estimators.classification.classifier.ClassifierGradients` for 1st parameter `classifier` to call `DeepFool.__init__` but got `BaseEstimator`.",
    "message": " Expected `art.estimators.classification.classifier.ClassifierGradients` for 1st parameter `classifier` to call `DeepFool.__init__` but got `BaseEstimator`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "                DeepFool(classifier=estimator, max_iter=100, epsilon=1e-6, nb_grads=3, batch_size=batch_size)"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/attacks/evasion/auto_attack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/evasion/auto_attack.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/evasion/auto_attack.py:111:29 Incompatible parameter type [6]: Expected `art.estimators.classification.classifier.Classifier` for 1st parameter `estimator` to call `SquareAttack.__init__` but got `BaseEstimator`.",
    "message": " Expected `art.estimators.classification.classifier.Classifier` for 1st parameter `estimator` to call `SquareAttack.__init__` but got `BaseEstimator`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 111,
    "warning_line": "                SquareAttack(estimator=estimator, norm=norm, max_iter=5000, eps=eps, p_init=0.8, nb_restarts=5)"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/attacks/evasion/dpatch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/evasion/dpatch.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/evasion/dpatch.py:155:87 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 155,
    "warning_line": "        x: np.ndarray, patch: np.ndarray, random_location: bool, channels_first: bool, channel_index: int = Deprecated",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _augment_images_with_patch(\n        x: np.ndarray, patch: np.ndarray, random_location: bool, channels_first: bool, channel_index: int = Deprecated\n    ) -> Tuple[np.ndarray, List[Dict[str, int]]]:\n",
        "source_code_len": 205,
        "target_code": "    def _augment_images_with_patch(\n        x: np.ndarray, patch: np.ndarray, random_location: bool, channels_first: bool, channel_index=Deprecated\n    ) -> Tuple[np.ndarray, List[Dict[str, int]]]:\n",
        "target_code_len": 198,
        "diff_format": "@@ -154,3 +154,3 @@\n     def _augment_images_with_patch(\n-        x: np.ndarray, patch: np.ndarray, random_location: bool, channels_first: bool, channel_index: int = Deprecated\n+        x: np.ndarray, patch: np.ndarray, random_location: bool, channels_first: bool, channel_index=Deprecated\n     ) -> Tuple[np.ndarray, List[Dict[str, int]]]:\n",
        "source_code_with_indent": "    def _augment_images_with_patch(\n        x: np.ndarray, patch: np.ndarray, random_location: bool, channels_first: bool, channel_index: int = Deprecated\n    ) -> Tuple[np.ndarray, List[Dict[str, int]]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _augment_images_with_patch(\n        x: np.ndarray, patch: np.ndarray, random_location: bool, channels_first: bool, channel_index=Deprecated\n    ) -> Tuple[np.ndarray, List[Dict[str, int]]]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_numpy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_numpy.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_numpy.py:94:12 Incompatible parameter type [6]: Expected `int` for 2nd parameter `norm` to call `FastGradientMethod.__init__` but got `Union[float, int]`.",
    "message": " Expected `int` for 2nd parameter `norm` to call `FastGradientMethod.__init__` but got `Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 94,
    "warning_line": "            norm=norm,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        estimator: ClassifierGradients,\n        norm: Union[float, int] = np.inf,\n        eps: float = 0.3,\n",
        "source_code_len": 108,
        "target_code": "        estimator: ClassifierGradients,\n        norm: int = np.inf,\n        eps: float = 0.3,\n",
        "target_code_len": 94,
        "diff_format": "@@ -65,3 +65,3 @@\n         estimator: ClassifierGradients,\n-        norm: Union[float, int] = np.inf,\n+        norm: int = np.inf,\n         eps: float = 0.3,\n",
        "source_code_with_indent": "        estimator: ClassifierGradients,\n        norm: Union[float, int] = np.inf,\n        eps: float = 0.3,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        estimator: ClassifierGradients,\n        norm: int = np.inf,\n        eps: float = 0.3,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_pytorch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_pytorch.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_pytorch.py:277:4 Inconsistent override [14]: `art.attacks.evasion.projected_gradient_descent.projected_gradient_descent_pytorch.ProjectedGradientDescentPyTorch._compute` overrides method defined in `art.attacks.evasion.fast_gradient.FastGradientMethod` inconsistently. Could not find parameter `project` in overriding signature.",
    "message": " `art.attacks.evasion.projected_gradient_descent.projected_gradient_descent_pytorch.ProjectedGradientDescentPyTorch._compute` overrides method defined in `art.attacks.evasion.fast_gradient.FastGradientMethod` inconsistently. Could not find parameter `project` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 277,
    "warning_line": "    def _compute(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for i_max_iter in range(self.max_iter):\n            adv_x = self._compute(\n                adv_x, inputs, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "source_code_len": 200,
        "target_code": "        for i_max_iter in range(self.max_iter):\n            adv_x = self._compute_torch(\n                adv_x, inputs, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "target_code_len": 206,
        "diff_format": "@@ -214,3 +214,3 @@\n         for i_max_iter in range(self.max_iter):\n-            adv_x = self._compute(\n+            adv_x = self._compute_torch(\n                 adv_x, inputs, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "source_code_with_indent": "        <DED>for i_max_iter in range(self.max_iter):\n            <IND>adv_x = self._compute(\n                adv_x, inputs, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>for i_max_iter in range(self.max_iter):\n            <IND>adv_x = self._compute_torch(\n                adv_x, inputs, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _compute(\n        self,\n",
        "source_code_len": 33,
        "target_code": "\n    def _compute_torch(\n        self,\n",
        "target_code_len": 39,
        "diff_format": "@@ -276,3 +276,3 @@\n \n-    def _compute(\n+    def _compute_torch(\n         self,\n",
        "source_code_with_indent": "\n    <DED>def _compute(\n        self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _compute_torch(\n        self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_tensorflow_v2.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_tensorflow_v2.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_tensorflow_v2.py:267:4 Inconsistent override [14]: `art.attacks.evasion.projected_gradient_descent.projected_gradient_descent_tensorflow_v2.ProjectedGradientDescentTensorFlowV2._compute` overrides method defined in `art.attacks.evasion.fast_gradient.FastGradientMethod` inconsistently. Could not find parameter `project` in overriding signature.",
    "message": " `art.attacks.evasion.projected_gradient_descent.projected_gradient_descent_tensorflow_v2.ProjectedGradientDescentTensorFlowV2._compute` overrides method defined in `art.attacks.evasion.fast_gradient.FastGradientMethod` inconsistently. Could not find parameter `project` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 267,
    "warning_line": "    def _compute(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for i_max_iter in range(self.max_iter):\n            adv_x = self._compute(\n                adv_x, x, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "source_code_len": 195,
        "target_code": "        for i_max_iter in range(self.max_iter):\n            adv_x = self._compute_tf(\n                adv_x, x, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "target_code_len": 198,
        "diff_format": "@@ -204,3 +204,3 @@\n         for i_max_iter in range(self.max_iter):\n-            adv_x = self._compute(\n+            adv_x = self._compute_tf(\n                 adv_x, x, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "source_code_with_indent": "        for i_max_iter in range(self.max_iter):\n            <IND>adv_x = self._compute(\n                adv_x, x, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for i_max_iter in range(self.max_iter):\n            <IND>adv_x = self._compute_tf(\n                adv_x, x, targets, mask, self.eps, self.eps_step, self.num_random_init > 0 and i_max_iter == 0,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _compute(\n        self,\n",
        "source_code_len": 33,
        "target_code": "\n    def _compute_tf(\n        self,\n",
        "target_code_len": 36,
        "diff_format": "@@ -266,3 +266,3 @@\n \n-    def _compute(\n+    def _compute_tf(\n         self,\n",
        "source_code_with_indent": "\n    <DED>def _compute(\n        self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _compute_tf(\n        self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/defences/detector/poison/activation_defence.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/detector/poison/activation_defence.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/defences/detector/poison/activation_defence.py:135:35 Unsupported operand [58]: `//` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `//` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 135,
    "warning_line": "            for batch_idx in range(num_samples // batch_size):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            # calculate is_clean_by_class for each batch\n            for batch_idx in range(num_samples // batch_size):\n                x_batch, y_batch = self.generator.get_batch()\n",
        "source_code_len": 182,
        "target_code": "            # calculate is_clean_by_class for each batch\n            for batch_idx in range(num_samples // batch_size):  # type: ignore\n                x_batch, y_batch = self.generator.get_batch()\n",
        "target_code_len": 198,
        "diff_format": "@@ -134,3 +134,3 @@\n             # calculate is_clean_by_class for each batch\n-            for batch_idx in range(num_samples // batch_size):\n+            for batch_idx in range(num_samples // batch_size):  # type: ignore\n                 x_batch, y_batch = self.generator.get_batch()\n",
        "source_code_with_indent": "            # calculate is_clean_by_class for each batch\n            for batch_idx in range(num_samples // batch_size):\n                <IND>x_batch, y_batch = self.generator.get_batch()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # calculate is_clean_by_class for each batch\n            for batch_idx in range(num_samples // batch_size):  # type: ignore\n                <IND>x_batch, y_batch = self.generator.get_batch()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/defences/detector/poison/activation_defence.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/detector/poison/activation_defence.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/defences/detector/poison/activation_defence.py:234:35 Unsupported operand [58]: `//` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `//` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 234,
    "warning_line": "            for batch_idx in range(num_samples // batch_size):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            num_classes = self.classifier.nb_classes\n            for batch_idx in range(num_samples // batch_size):\n                x_batch, y_batch = self.generator.get_batch()\n",
        "source_code_len": 178,
        "target_code": "            num_classes = self.classifier.nb_classes\n            for batch_idx in range(num_samples // batch_size):  # type: ignore\n                x_batch, y_batch = self.generator.get_batch()\n",
        "target_code_len": 194,
        "diff_format": "@@ -233,3 +233,3 @@\n             num_classes = self.classifier.nb_classes\n-            for batch_idx in range(num_samples // batch_size):\n+            for batch_idx in range(num_samples // batch_size):  # type: ignore\n                 x_batch, y_batch = self.generator.get_batch()\n",
        "source_code_with_indent": "            num_classes = self.classifier.nb_classes\n            for batch_idx in range(num_samples // batch_size):\n                <IND>x_batch, y_batch = self.generator.get_batch()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            num_classes = self.classifier.nb_classes\n            for batch_idx in range(num_samples // batch_size):  # type: ignore\n                <IND>x_batch, y_batch = self.generator.get_batch()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/defences/preprocessor/jpeg_compression.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/preprocessor/jpeg_compression.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/preprocessor/jpeg_compression.py:62:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 62,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        quality: int = 50,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 106,
        "target_code": "        quality: int = 50,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 99,
        "diff_format": "@@ -61,3 +61,3 @@\n         quality: int = 50,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        quality: int = 50,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        quality: int = 50,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/defences/preprocessor/mp3_compression.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/preprocessor/mp3_compression.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/preprocessor/mp3_compression.py:52:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 52,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        sample_rate: int,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 105,
        "target_code": "        sample_rate: int,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 98,
        "diff_format": "@@ -51,3 +51,3 @@\n         sample_rate: int,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        sample_rate: int,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        sample_rate: int,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/defences/preprocessor/resample.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/preprocessor/resample.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/preprocessor/resample.py:52:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 52,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        sr_new: int,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 100,
        "target_code": "        sr_new: int,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 93,
        "diff_format": "@@ -51,3 +51,3 @@\n         sr_new: int,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        sr_new: int,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        sr_new: int,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/defences/preprocessor/spatial_smoothing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/preprocessor/spatial_smoothing.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/preprocessor/spatial_smoothing.py:60:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 60,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        window_size: int = 3,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 109,
        "target_code": "        window_size: int = 3,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 102,
        "diff_format": "@@ -59,3 +59,3 @@\n         window_size: int = 3,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        window_size: int = 3,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        window_size: int = 3,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/defences/preprocessor/thermometer_encoding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/preprocessor/thermometer_encoding.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/preprocessor/thermometer_encoding.py:59:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 59,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        num_space: int = 10,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 108,
        "target_code": "        num_space: int = 10,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 101,
        "diff_format": "@@ -58,3 +58,3 @@\n         num_space: int = 10,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        num_space: int = 10,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        num_space: int = 10,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/ensemble.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/classification/ensemble.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/classification/ensemble.py:52:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 52,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        classifier_weights: Union[list, np.ndarray, None] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 145,
        "target_code": "        classifier_weights: Union[list, np.ndarray, None] = None,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 138,
        "diff_format": "@@ -51,3 +51,3 @@\n         classifier_weights: Union[list, np.ndarray, None] = None,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        classifier_weights: Union[list, np.ndarray, None] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        classifier_weights: Union[list, np.ndarray, None] = None,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/ensemble.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/classification/ensemble.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/classification/ensemble.py:206:4 Inconsistent override [14]: `art.estimators.classification.ensemble.EnsembleClassifier.get_activations` overrides method defined in `NeuralNetworkMixin` inconsistently. Could not find parameter `framework` in overriding signature.",
    "message": " `art.estimators.classification.ensemble.EnsembleClassifier.get_activations` overrides method defined in `NeuralNetworkMixin` inconsistently. Could not find parameter `framework` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 206,
    "warning_line": "    def get_activations(self, x: np.ndarray, layer: Union[int, str], batch_size: int = 128) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_activations(self, x: np.ndarray, layer: Union[int, str], batch_size: int = 128) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def get_activations(\n        self, x: np.ndarray, layer: Union[int, str], batch_size: int, framework: bool = False\n    ) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -205,3 +206,5 @@\n \n-    def get_activations(self, x: np.ndarray, layer: Union[int, str], batch_size: int = 128) -> np.ndarray:\n+    def get_activations(\n+        self, x: np.ndarray, layer: Union[int, str], batch_size: int, framework: bool = False\n+    ) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_activations(self, x: np.ndarray, layer: Union[int, str], batch_size: int = 128) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_activations(\n        self, x: np.ndarray, layer: Union[int, str], batch_size: int, framework: bool = False\n    ) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/keras.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/classification/keras.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/classification/keras.py:72:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 113,
        "target_code": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 106,
        "diff_format": "@@ -71,3 +71,3 @@\n         use_logits: bool = False,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/mxnet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/classification/mxnet.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/classification/mxnet.py:67:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 67,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ctx: Optional[\"mx.context.Context\"] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = True,\n",
        "source_code_len": 130,
        "target_code": "        ctx: Optional[\"mx.context.Context\"] = None,\n        channel_index=Deprecated,\n        channels_first: bool = True,\n",
        "target_code_len": 123,
        "diff_format": "@@ -66,3 +66,3 @@\n         ctx: Optional[\"mx.context.Context\"] = None,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = True,\n",
        "source_code_with_indent": "        ctx: Optional[\"mx.context.Context\"] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = True,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ctx: Optional[\"mx.context.Context\"] = None,\n        channel_index=Deprecated,\n        channels_first: bool = True,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/pytorch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/classification/pytorch.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/classification/pytorch.py:64:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 64,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        optimizer: Optional[\"torch.optim.Optimizer\"] = None,  # type: ignore\n        channel_index: int = Deprecated,\n        channels_first: bool = True,\n",
        "source_code_len": 155,
        "target_code": "        optimizer: Optional[\"torch.optim.Optimizer\"] = None,  # type: ignore\n        channel_index=Deprecated,\n        channels_first: bool = True,\n",
        "target_code_len": 148,
        "diff_format": "@@ -63,3 +63,3 @@\n         optimizer: Optional[\"torch.optim.Optimizer\"] = None,  # type: ignore\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = True,\n",
        "source_code_with_indent": "        optimizer: Optional[\"torch.optim.Optimizer\"] = None,  # type: ignore\n        channel_index: int = Deprecated,\n        channels_first: bool = True,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        optimizer: Optional[\"torch.optim.Optimizer\"] = None,  # type: ignore\n        channel_index=Deprecated,\n        channels_first: bool = True,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/tensorflow.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/classification/tensorflow.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/classification/tensorflow.py:66:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        sess: Optional[\"tf.Session\"] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 124,
        "target_code": "        sess: Optional[\"tf.Session\"] = None,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 117,
        "diff_format": "@@ -65,3 +65,3 @@\n         sess: Optional[\"tf.Session\"] = None,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        sess: Optional[\"tf.Session\"] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        sess: Optional[\"tf.Session\"] = None,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/tensorflow.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/classification/tensorflow.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/classification/tensorflow.py:659:8 Incompatible variable type [9]: channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 659,
    "warning_line": "        channel_index: int = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        train_step: Optional[Callable] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_len": 126,
        "target_code": "        train_step: Optional[Callable] = None,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_len": 119,
        "diff_format": "@@ -658,3 +659,3 @@\n         train_step: Optional[Callable] = None,\n-        channel_index: int = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: bool = False,\n",
        "source_code_with_indent": "        train_step: Optional[Callable] = None,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        train_step: Optional[Callable] = None,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:416:14 Incompatible variable type [9]: channel_index is declared to have type `Optional[int]` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `Optional[int]` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 416,
    "warning_line": "        self, channel_index: Optional[int] = Deprecated, channels_first: Optional[bool] = None, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @deprecated_keyword_arg(\"channel_index\", end_version=\"1.5.0\", replaced_by=\"channels_first\")\n    def __init__(\n        self, channel_index: Optional[int] = Deprecated, channels_first: Optional[bool] = None, **kwargs\n    ) -> None:\n        \"\"\"\n",
        "source_code_len": 246,
        "target_code": "    @deprecated_keyword_arg(\"channel_index\", end_version=\"1.5.0\", replaced_by=\"channels_first\")\n    def __init__(self, channel_index=Deprecated, channels_first: Optional[bool] = None, **kwargs) -> None:\n        \"\"\"\n",
        "target_code_len": 215,
        "diff_format": "@@ -414,5 +414,3 @@\n     @deprecated_keyword_arg(\"channel_index\", end_version=\"1.5.0\", replaced_by=\"channels_first\")\n-    def __init__(\n-        self, channel_index: Optional[int] = Deprecated, channels_first: Optional[bool] = None, **kwargs\n-    ) -> None:\n+    def __init__(self, channel_index=Deprecated, channels_first: Optional[bool] = None, **kwargs) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    @deprecated_keyword_arg(\"channel_index\", end_version=\"1.5.0\", replaced_by=\"channels_first\")\n    def __init__(\n        self, channel_index: Optional[int] = Deprecated, channels_first: Optional[bool] = None, **kwargs\n    ) -> None:\n        <IND>",
        "target_code_with_indent": "    @deprecated_keyword_arg(\"channel_index\", end_version=\"1.5.0\", replaced_by=\"channels_first\")\n    def __init__(self, channel_index=Deprecated, channels_first: Optional[bool] = None, **kwargs) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:433:8 Incompatible attribute type [8]: Attribute `_channels_first` declared in class `NeuralNetworkMixin` has type `bool` but is used as type `Optional[bool]`.",
    "message": " Attribute `_channels_first` declared in class `NeuralNetworkMixin` has type `bool` but is used as type `Optional[bool]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 433,
    "warning_line": "        self._channels_first: bool = channels_first",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._channel_index = channel_index\n        self._channels_first: bool = channels_first\n        super().__init__(**kwargs)\n\n",
        "source_code_len": 132,
        "target_code": "        self._channel_index = channel_index\n        self._channels_first: Optional[bool] = channels_first\n        super().__init__()\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -432,4 +431,4 @@\n         self._channel_index = channel_index\n-        self._channels_first: bool = channels_first\n-        super().__init__(**kwargs)\n+        self._channels_first: Optional[bool] = channels_first\n+        super().__init__()\n \n",
        "source_code_with_indent": "        <DED>self._channel_index = channel_index\n        self._channels_first: bool = channels_first\n        super().__init__(**kwargs)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self._channel_index = channel_index\n        self._channels_first: Optional[bool] = channels_first\n        super().__init__()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def channels_first(self) -> bool:\n        \"\"\"\n",
        "source_code_len": 64,
        "target_code": "    @property\n    def channels_first(self) -> Optional[bool]:\n        \"\"\"\n",
        "target_code_len": 74,
        "diff_format": "@@ -524,3 +523,3 @@\n     @property\n-    def channels_first(self) -> bool:\n+    def channels_first(self) -> Optional[bool]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@property\n    def channels_first(self) -> bool:\n        <IND>",
        "target_code_with_indent": "    <DED>@property\n    def channels_first(self) -> Optional[bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/estimators/estimator.py:480:20 Unsupported operand [58]: `/` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 480,
    "warning_line": "                int(generator.size / generator.batch_size), desc=\"Epoch %i/%i\" % (i + 1, nb_epochs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            for _ in trange(\n                int(generator.size / generator.batch_size), desc=\"Epoch %i/%i\" % (i + 1, nb_epochs)\n            ):  # type: ignore\n",
        "source_code_len": 160,
        "target_code": "            for _ in trange(\n                int(generator.size / generator.batch_size), desc=\"Epoch %i/%i\" % (i + 1, nb_epochs)  # type: ignore\n            ):  # type: ignore\n",
        "target_code_len": 176,
        "diff_format": "@@ -479,3 +478,3 @@\n             for _ in trange(\n-                int(generator.size / generator.batch_size), desc=\"Epoch %i/%i\" % (i + 1, nb_epochs)\n+                int(generator.size / generator.batch_size), desc=\"Epoch %i/%i\" % (i + 1, nb_epochs)  # type: ignore\n             ):  # type: ignore\n",
        "source_code_with_indent": "            <IND>for _ in trange(\n                int(generator.size / generator.batch_size), desc=\"Epoch %i/%i\" % (i + 1, nb_epochs)\n            ):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>for _ in trange(\n                int(generator.size / generator.batch_size), desc=\"Epoch %i/%i\" % (i + 1, nb_epochs)  # type: ignore\n            ):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/object_detection/PyTorchFasterRCNN.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/object_detection/PyTorchFasterRCNN.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/object_detection/PyTorchFasterRCNN.py:50:8 Incompatible variable type [9]: channel_index is declared to have type `Optional[int]` but is used as type `art.utils._Deprecated`.",
    "message": " channel_index is declared to have type `Optional[int]` but is used as type `art.utils._Deprecated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 50,
    "warning_line": "        channel_index: Optional[int] = Deprecated,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        clip_values: Optional[\"CLIP_VALUES_TYPE\"] = None,\n        channel_index: Optional[int] = Deprecated,\n        channels_first: Optional[bool] = None,\n",
        "source_code_len": 156,
        "target_code": "        clip_values: Optional[\"CLIP_VALUES_TYPE\"] = None,\n        channel_index=Deprecated,\n        channels_first: Optional[bool] = None,\n",
        "target_code_len": 139,
        "diff_format": "@@ -49,3 +49,3 @@\n         clip_values: Optional[\"CLIP_VALUES_TYPE\"] = None,\n-        channel_index: Optional[int] = Deprecated,\n+        channel_index=Deprecated,\n         channels_first: Optional[bool] = None,\n",
        "source_code_with_indent": "        clip_values: Optional[\"CLIP_VALUES_TYPE\"] = None,\n        channel_index: Optional[int] = Deprecated,\n        channels_first: Optional[bool] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        clip_values: Optional[\"CLIP_VALUES_TYPE\"] = None,\n        channel_index=Deprecated,\n        channels_first: Optional[bool] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]