[
  {
    "project": "TheAlgorithms/Python",
    "commit": "3ea5a13334f2d573167456c0c9ee4c90497c9466",
    "filename": "graphs/bellman_ford.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/graphs/bellman_ford.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graphs/bellman_ford.py:33:12 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 33,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef printDist(dist, V):\n    print(\"Vertex Distance\")\n    distances = (\"INF\" if d == float(\"inf\") else d for d in dist)\n    print(\"\\t\".join(f\"{i}\\t{d}\" for i, d in enumerate(distances)))\n\n\ndef BellmanFord(graph: list[dict[str, int]], V: int, E: int, src: int) -> int:\n    \"\"\"\n",
        "source_code_len": 276,
        "target_code": "\ndef print_distance(distance: list[float], src):\n    print(f\"Vertex\\tShortest Distance from vertex {src}\")\n    for i, d in enumerate(distance):\n        print(f\"{i}\\t\\t{d}\")\n\n\ndef check_negative_cycle(\n    graph: list[dict[str, int]], distance: list[float], edge_count: int\n):\n    for j in range(edge_count):\n        u, v, w = [graph[j][k] for k in [\"src\", \"dst\", \"weight\"]]\n        if distance[u] != float(\"inf\") and distance[u] + w < distance[v]:\n            return True\n    return False\n\n\ndef bellman_ford(\n    graph: list[dict[str, int]], vertex_count: int, edge_count: int, src: int\n) -> list[float]:\n    \"\"\"\n",
        "target_code_len": 613,
        "diff_format": "@@ -3,9 +3,21 @@\n \n-def printDist(dist, V):\n-    print(\"Vertex Distance\")\n-    distances = (\"INF\" if d == float(\"inf\") else d for d in dist)\n-    print(\"\\t\".join(f\"{i}\\t{d}\" for i, d in enumerate(distances)))\n+def print_distance(distance: list[float], src):\n+    print(f\"Vertex\\tShortest Distance from vertex {src}\")\n+    for i, d in enumerate(distance):\n+        print(f\"{i}\\t\\t{d}\")\n \n \n-def BellmanFord(graph: list[dict[str, int]], V: int, E: int, src: int) -> int:\n+def check_negative_cycle(\n+    graph: list[dict[str, int]], distance: list[float], edge_count: int\n+):\n+    for j in range(edge_count):\n+        u, v, w = [graph[j][k] for k in [\"src\", \"dst\", \"weight\"]]\n+        if distance[u] != float(\"inf\") and distance[u] + w < distance[v]:\n+            return True\n+    return False\n+\n+\n+def bellman_ford(\n+    graph: list[dict[str, int]], vertex_count: int, edge_count: int, src: int\n+) -> list[float]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef printDist(dist, V):\n    <IND>print(\"Vertex Distance\")\n    distances = (\"INF\" if d == float(\"inf\") else d for d in dist)\n    print(\"\\t\".join(f\"{i}\\t{d}\" for i, d in enumerate(distances)))\n\n\n<DED>def BellmanFord(graph: list[dict[str, int]], V: int, E: int, src: int) -> int:\n    <IND>",
        "target_code_with_indent": "\ndef print_distance(distance: list[float], src):\n    <IND>print(f\"Vertex\\tShortest Distance from vertex {src}\")\n    for i, d in enumerate(distance):\n        <IND>print(f\"{i}\\t\\t{d}\")\n\n\n<DED><DED>def check_negative_cycle(\n    graph: list[dict[str, int]], distance: list[float], edge_count: int\n):\n    <IND>for j in range(edge_count):\n        <IND>u, v, w = [graph[j][k] for k in [\"src\", \"dst\", \"weight\"]]\n        if distance[u] != float(\"inf\") and distance[u] + w < distance[v]:\n            <IND>return True\n    <DED><DED>return False\n\n\n<DED>def bellman_ford(\n    graph: list[dict[str, int]], vertex_count: int, edge_count: int, src: int\n) -> list[float]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    other vertices.\n    \"\"\"\n    mdist = [float(\"inf\") for i in range(V)]\n    mdist[src] = 0.0\n\n    for i in range(V - 1):\n        for j in range(E):\n            u = graph[j][\"src\"]\n            v = graph[j][\"dst\"]\n            w = graph[j][\"weight\"]\n\n            if mdist[u] != float(\"inf\") and mdist[u] + w < mdist[v]:\n                mdist[v] = mdist[u] + w\n    for j in range(E):\n        u = graph[j][\"src\"]\n        v = graph[j][\"dst\"]\n        w = graph[j][\"weight\"]\n\n        if mdist[u] != float(\"inf\") and mdist[u] + w < mdist[v]:\n            print(\"Negative cycle found. Solution not possible.\")\n            return\n\n    printDist(mdist, V)\n    return src\n\n",
        "source_code_len": 660,
        "target_code": "    other vertices.\n    >>> edges = [(2, 1, -10), (3, 2, 3), (0, 3, 5), (0, 1, 4)]\n    >>> g = [{\"src\": s, \"dst\": d, \"weight\": w} for s, d, w in edges]\n    >>> bellman_ford(g, 4, 4, 0)\n    [0.0, -2.0, 8.0, 5.0]\n    >>> g = [{\"src\": s, \"dst\": d, \"weight\": w} for s, d, w in edges + [(1, 3, 5)]]\n    >>> bellman_ford(g, 4, 5, 0)\n    Traceback (most recent call last):\n     ...\n    Exception: Negative cycle found\n    \"\"\"\n    distance = [float(\"inf\")] * vertex_count\n    distance[src] = 0.0\n\n    for i in range(vertex_count - 1):\n        for j in range(edge_count):\n            u, v, w = [graph[j][k] for k in [\"src\", \"dst\", \"weight\"]]\n\n            if distance[u] != float(\"inf\") and distance[u] + w < distance[v]:\n                distance[v] = distance[u] + w\n\n    negative_cycle_exists = check_negative_cycle(graph, distance, edge_count)\n    if negative_cycle_exists:\n        raise Exception(\"Negative cycle found\")\n\n    return distance\n\n",
        "target_code_len": 937,
        "diff_format": "@@ -13,25 +25,27 @@\n     other vertices.\n+    >>> edges = [(2, 1, -10), (3, 2, 3), (0, 3, 5), (0, 1, 4)]\n+    >>> g = [{\"src\": s, \"dst\": d, \"weight\": w} for s, d, w in edges]\n+    >>> bellman_ford(g, 4, 4, 0)\n+    [0.0, -2.0, 8.0, 5.0]\n+    >>> g = [{\"src\": s, \"dst\": d, \"weight\": w} for s, d, w in edges + [(1, 3, 5)]]\n+    >>> bellman_ford(g, 4, 5, 0)\n+    Traceback (most recent call last):\n+     ...\n+    Exception: Negative cycle found\n     \"\"\"\n-    mdist = [float(\"inf\") for i in range(V)]\n-    mdist[src] = 0.0\n+    distance = [float(\"inf\")] * vertex_count\n+    distance[src] = 0.0\n \n-    for i in range(V - 1):\n-        for j in range(E):\n-            u = graph[j][\"src\"]\n-            v = graph[j][\"dst\"]\n-            w = graph[j][\"weight\"]\n+    for i in range(vertex_count - 1):\n+        for j in range(edge_count):\n+            u, v, w = [graph[j][k] for k in [\"src\", \"dst\", \"weight\"]]\n \n-            if mdist[u] != float(\"inf\") and mdist[u] + w < mdist[v]:\n-                mdist[v] = mdist[u] + w\n-    for j in range(E):\n-        u = graph[j][\"src\"]\n-        v = graph[j][\"dst\"]\n-        w = graph[j][\"weight\"]\n+            if distance[u] != float(\"inf\") and distance[u] + w < distance[v]:\n+                distance[v] = distance[u] + w\n \n-        if mdist[u] != float(\"inf\") and mdist[u] + w < mdist[v]:\n-            print(\"Negative cycle found. Solution not possible.\")\n-            return\n+    negative_cycle_exists = check_negative_cycle(graph, distance, edge_count)\n+    if negative_cycle_exists:\n+        raise Exception(\"Negative cycle found\")\n \n-    printDist(mdist, V)\n-    return src\n+    return distance\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    mdist = [float(\"inf\") for i in range(V)]\n    mdist[src] = 0.0\n\n    for i in range(V - 1):\n        <IND>for j in range(E):\n            <IND>u = graph[j][\"src\"]\n            v = graph[j][\"dst\"]\n            w = graph[j][\"weight\"]\n\n            if mdist[u] != float(\"inf\") and mdist[u] + w < mdist[v]:\n                <IND>mdist[v] = mdist[u] + w\n    <DED><DED><DED>for j in range(E):\n        <IND>u = graph[j][\"src\"]\n        v = graph[j][\"dst\"]\n        w = graph[j][\"weight\"]\n\n        if mdist[u] != float(\"inf\") and mdist[u] + w < mdist[v]:\n            <IND>print(\"Negative cycle found. Solution not possible.\")\n            return\n\n    <DED><DED>printDist(mdist, V)\n    return src\n\n",
        "target_code_with_indent": "\n    distance = [float(\"inf\")] * vertex_count\n    distance[src] = 0.0\n\n    for i in range(vertex_count - 1):\n        <IND>for j in range(edge_count):\n            <IND>u, v, w = [graph[j][k] for k in [\"src\", \"dst\", \"weight\"]]\n\n            if distance[u] != float(\"inf\") and distance[u] + w < distance[v]:\n                <IND>distance[v] = distance[u] + w\n\n    <DED><DED><DED>negative_cycle_exists = check_negative_cycle(graph, distance, edge_count)\n    if negative_cycle_exists:\n        <IND>raise Exception(\"Negative cycle found\")\n\n    <DED>return distance\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    graph = [dict() for j in range(E)]\n\n    for i in range(E):\n        graph[i][i] = 0.0\n\n    for i in range(E):\n        print(\"\\nEdge \", i + 1)\n        src = int(input(\"Enter source:\").strip())\n        dst = int(input(\"Enter destination:\").strip())\n        weight = float(input(\"Enter weight:\").strip())\n        graph[i] = {\"src\": src, \"dst\": dst, \"weight\": weight}\n\n    gsrc = int(input(\"\\nEnter shortest path source:\").strip())\n    BellmanFord(graph, V, E, gsrc)\n",
        "source_code_len": 467,
        "target_code": "\n    graph: list[dict[str, int]] = [dict() for j in range(E)]\n\n    for i in range(E):\n        print(\"Edge \", i + 1)\n        src, dest, weight = [\n            int(x)\n            for x in input(\"Enter source, destination, weight: \").strip().split(\" \")\n        ]\n        graph[i] = {\"src\": src, \"dst\": dest, \"weight\": weight}\n\n    source = int(input(\"\\nEnter shortest path source:\").strip())\n    shortest_distance = bellman_ford(graph, V, E, source)\n    print_distance(shortest_distance, 0)\n",
        "target_code_len": 488,
        "diff_format": "@@ -42,15 +60,14 @@\n \n-    graph = [dict() for j in range(E)]\n+    graph: list[dict[str, int]] = [dict() for j in range(E)]\n \n     for i in range(E):\n-        graph[i][i] = 0.0\n+        print(\"Edge \", i + 1)\n+        src, dest, weight = [\n+            int(x)\n+            for x in input(\"Enter source, destination, weight: \").strip().split(\" \")\n+        ]\n+        graph[i] = {\"src\": src, \"dst\": dest, \"weight\": weight}\n \n-    for i in range(E):\n-        print(\"\\nEdge \", i + 1)\n-        src = int(input(\"Enter source:\").strip())\n-        dst = int(input(\"Enter destination:\").strip())\n-        weight = float(input(\"Enter weight:\").strip())\n-        graph[i] = {\"src\": src, \"dst\": dst, \"weight\": weight}\n-\n-    gsrc = int(input(\"\\nEnter shortest path source:\").strip())\n-    BellmanFord(graph, V, E, gsrc)\n+    source = int(input(\"\\nEnter shortest path source:\").strip())\n+    shortest_distance = bellman_ford(graph, V, E, source)\n+    print_distance(shortest_distance, 0)\n",
        "source_code_with_indent": "\n    graph = [dict() for j in range(E)]\n\n    for i in range(E):\n        <IND>graph[i][i] = 0.0\n\n    <DED>for i in range(E):\n        <IND>print(\"\\nEdge \", i + 1)\n        src = int(input(\"Enter source:\").strip())\n        dst = int(input(\"Enter destination:\").strip())\n        weight = float(input(\"Enter weight:\").strip())\n        graph[i] = {\"src\": src, \"dst\": dst, \"weight\": weight}\n\n    <DED>gsrc = int(input(\"\\nEnter shortest path source:\").strip())\n    BellmanFord(graph, V, E, gsrc)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    graph: list[dict[str, int]] = [dict() for j in range(E)]\n\n    for i in range(E):\n        <IND>print(\"Edge \", i + 1)\n        src, dest, weight = [\n            int(x)\n            for x in input(\"Enter source, destination, weight: \").strip().split(\" \")\n        ]\n        graph[i] = {\"src\": src, \"dst\": dest, \"weight\": weight}\n\n    <DED>source = int(input(\"\\nEnter shortest path source:\").strip())\n    shortest_distance = bellman_ford(graph, V, E, source)\n    print_distance(shortest_distance, 0)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]