[
  {
    "project": "sobjornstad/AnkiLPCG",
    "commit": "d13948219da852af2be34c7229d84e63ba6f1290",
    "filename": "src/gen_notes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sobjornstad-AnkiLPCG/src/gen_notes.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/gen_notes.py:81:4 Inconsistent override [14]: `src.gen_notes.Beginning.populate_note` overrides method defined in `PoemLine` inconsistently. Could not find parameter `recite_lines` in overriding signature.",
    "message": " `src.gen_notes.Beginning.populate_note` overrides method defined in `PoemLine` inconsistently. Could not find parameter `recite_lines` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 81,
    "warning_line": "    def populate_note(self, note: 'Note', title: str, tags: List[str],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def populate_note(self, note: 'Note', title: str, tags: List[str],\n                      context_lines: int, deck_id: int) -> None:\n        raise AssertionError(\"The Beginning node cannot be used to populate a note.\")\n",
        "source_code_len": 222,
        "target_code": "    def populate_note(self, note: 'Note', title: str, tags: List[str],\n                      context_lines: int, recite_lines: int, deck_id: int) -> None:\n        raise AssertionError(\"The Beginning node cannot be used to populate a note.\")\n",
        "target_code_len": 241,
        "diff_format": "@@ -81,3 +85,3 @@\n     def populate_note(self, note: 'Note', title: str, tags: List[str],\n-                      context_lines: int, deck_id: int) -> None:\n+                      context_lines: int, recite_lines: int, deck_id: int) -> None:\n         raise AssertionError(\"The Beginning node cannot be used to populate a note.\")\n",
        "source_code_with_indent": "    <DED>def populate_note(self, note: 'Note', title: str, tags: List[str],\n                      context_lines: int, deck_id: int) -> None:\n        <IND>raise AssertionError(\"The Beginning node cannot be used to populate a note.\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def populate_note(self, note: 'Note', title: str, tags: List[str],\n                      context_lines: int, recite_lines: int, deck_id: int) -> None:\n        <IND>raise AssertionError(\"The Beginning node cannot be used to populate a note.\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sobjornstad/AnkiLPCG",
    "commit": "d13948219da852af2be34c7229d84e63ba6f1290",
    "filename": "src/gen_notes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sobjornstad-AnkiLPCG/src/gen_notes.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/gen_notes.py:118:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 118,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> str:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -47,3 +51,3 @@\n \n-    def _get_prompt(self, configured_recitation_lines: int) -> str:\n+    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_prompt(self, configured_recitation_lines: int) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> str:\n        # It's important to calculate the lines_to_recite for _this_ instance\n",
        "source_code_len": 147,
        "target_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        # It's important to calculate the lines_to_recite for _this_ instance\n",
        "target_code_len": 157,
        "diff_format": "@@ -111,3 +115,3 @@\n \n-    def _get_prompt(self, configured_recitation_lines: int) -> str:\n+    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n         # It's important to calculate the lines_to_recite for _this_ instance\n",
        "source_code_with_indent": "\n    <DED><DED>def _get_prompt(self, configured_recitation_lines: int) -> str:\n        # It's important to calculate the lines_to_recite for _this_ instance\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        # It's important to calculate the lines_to_recite for _this_ instance\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sobjornstad/AnkiLPCG",
    "commit": "d13948219da852af2be34c7229d84e63ba6f1290",
    "filename": "src/gen_notes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sobjornstad-AnkiLPCG/src/gen_notes.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/gen_notes.py:163:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 163,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> str:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -47,3 +51,3 @@\n \n-    def _get_prompt(self, configured_recitation_lines: int) -> str:\n+    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_prompt(self, configured_recitation_lines: int) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> str:\n        lines_to_recite = len(self._get_text(configured_recitation_lines))\n",
        "source_code_len": 144,
        "target_code": "\n    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        lines_to_recite = len(self._get_text(configured_recitation_lines))\n",
        "target_code_len": 154,
        "diff_format": "@@ -159,3 +163,3 @@\n \n-    def _get_prompt(self, configured_recitation_lines: int) -> str:\n+    def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n         lines_to_recite = len(self._get_text(configured_recitation_lines))\n",
        "source_code_with_indent": "\n    <DED><DED>def _get_prompt(self, configured_recitation_lines: int) -> str:\n        <IND>lines_to_recite = len(self._get_text(configured_recitation_lines))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _get_prompt(self, configured_recitation_lines: int) -> Optional[str]:\n        <IND>lines_to_recite = len(self._get_text(configured_recitation_lines))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]