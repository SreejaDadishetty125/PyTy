[
  {
    "project": "samuelcolvin/pydantic",
    "commit": "5da8b9cdedf94100379565e0a7b9f69ddbe4ee9d",
    "filename": "pydantic/datetime_parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/datetime_parse.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/datetime_parse.py:195:20 Incompatible parameter type [6]: Expected `Union[int, timezone]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[timezone]`.",
    "message": " Expected `Union[int, timezone]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[timezone]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 195,
    "warning_line": "    kw_['tzinfo'] = tzinfo",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import date, datetime, time, timedelta, timezone\nfrom typing import Dict, Union\n\n",
        "source_code_len": 95,
        "target_code": "from datetime import date, datetime, time, timedelta, timezone\nfrom typing import Dict, Optional, Type, Union\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -18,3 +18,3 @@\n from datetime import date, datetime, time, timedelta, timezone\n-from typing import Dict, Union\n+from typing import Dict, Optional, Type, Union\n \n",
        "source_code_with_indent": "from datetime import date, datetime, time, timedelta, timezone\nfrom typing import Dict, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import date, datetime, time, timedelta, timezone\nfrom typing import Dict, Optional, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_date(value: Union[date, StrBytesIntFloat]) -> date:\n",
        "source_code_len": 63,
        "target_code": "\ndef _parse_timezone(value: Optional[str], error: Type[Exception]) -> Union[None, int, timezone]:\n    if value == 'Z':\n        return timezone.utc\n    elif value is not None:\n        offset_mins = int(value[-2:]) if len(value) > 3 else 0\n        offset = 60 * int(value[1:3]) + offset_mins\n        if value[0] == '-':\n            offset = -offset\n        try:\n            return timezone(timedelta(minutes=offset))\n        except ValueError:\n            raise error()\n    else:\n        return None\n\n\ndef parse_date(value: Union[date, StrBytesIntFloat]) -> date:\n",
        "target_code_len": 562,
        "diff_format": "@@ -83,2 +81,18 @@\n \n+def _parse_timezone(value: Optional[str], error: Type[Exception]) -> Union[None, int, timezone]:\n+    if value == 'Z':\n+        return timezone.utc\n+    elif value is not None:\n+        offset_mins = int(value[-2:]) if len(value) > 3 else 0\n+        offset = 60 * int(value[1:3]) + offset_mins\n+        if value[0] == '-':\n+            offset = -offset\n+        try:\n+            return timezone(timedelta(minutes=offset))\n+        except ValueError:\n+            raise error()\n+    else:\n+        return None\n+\n+\n def parse_date(value: Union[date, StrBytesIntFloat]) -> date:\n",
        "source_code_with_indent": "\n<DED>def parse_date(value: Union[date, StrBytesIntFloat]) -> date:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _parse_timezone(value: Optional[str], error: Type[Exception]) -> Union[None, int, timezone]:\n    <IND>if value == 'Z':\n        <IND>return timezone.utc\n    <DED>elif value is not None:\n        <IND>offset_mins = int(value[-2:]) if len(value) > 3 else 0\n        offset = 60 * int(value[1:3]) + offset_mins\n        if value[0] == '-':\n            <IND>offset = -offset\n        <DED>try:\n            <IND>return timezone(timedelta(minutes=offset))\n        <DED>except ValueError:\n            <IND>raise error()\n    <DED><DED>else:\n        <IND>return None\n\n\n<DED><DED>def parse_date(value: Union[date, StrBytesIntFloat]) -> date:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    tzinfo_str = kw.pop('tzinfo')\n    if tzinfo_str == 'Z':\n        tzinfo = timezone.utc\n    elif tzinfo_str is not None:\n        offset_mins = int(tzinfo_str[-2:]) if len(tzinfo_str) > 3 else 0\n        offset = 60 * int(tzinfo_str[1:3]) + offset_mins\n        if tzinfo_str[0] == '-':\n            offset = -offset\n        tzinfo = timezone(timedelta(minutes=offset))\n    else:\n        tzinfo = None\n\n    kw_: Dict[str, Union[int, timezone]] = {k: int(v) for k, v in kw.items() if v is not None}\n    kw_['tzinfo'] = tzinfo\n",
        "source_code_len": 524,
        "target_code": "\n    tzinfo = _parse_timezone(kw.pop('tzinfo'), errors.DateTimeError)\n    kw_: Dict[str, Union[None, int, timezone]] = {k: int(v) for k, v in kw.items() if v is not None}\n    kw_['tzinfo'] = tzinfo\n",
        "target_code_len": 198,
        "diff_format": "@@ -181,15 +195,4 @@\n \n-    tzinfo_str = kw.pop('tzinfo')\n-    if tzinfo_str == 'Z':\n-        tzinfo = timezone.utc\n-    elif tzinfo_str is not None:\n-        offset_mins = int(tzinfo_str[-2:]) if len(tzinfo_str) > 3 else 0\n-        offset = 60 * int(tzinfo_str[1:3]) + offset_mins\n-        if tzinfo_str[0] == '-':\n-            offset = -offset\n-        tzinfo = timezone(timedelta(minutes=offset))\n-    else:\n-        tzinfo = None\n-\n-    kw_: Dict[str, Union[int, timezone]] = {k: int(v) for k, v in kw.items() if v is not None}\n+    tzinfo = _parse_timezone(kw.pop('tzinfo'), errors.DateTimeError)\n+    kw_: Dict[str, Union[None, int, timezone]] = {k: int(v) for k, v in kw.items() if v is not None}\n     kw_['tzinfo'] = tzinfo\n",
        "source_code_with_indent": "\n    <DED>tzinfo_str = kw.pop('tzinfo')\n    if tzinfo_str == 'Z':\n        <IND>tzinfo = timezone.utc\n    <DED>elif tzinfo_str is not None:\n        <IND>offset_mins = int(tzinfo_str[-2:]) if len(tzinfo_str) > 3 else 0\n        offset = 60 * int(tzinfo_str[1:3]) + offset_mins\n        if tzinfo_str[0] == '-':\n            <IND>offset = -offset\n        <DED>tzinfo = timezone(timedelta(minutes=offset))\n    <DED>else:\n        <IND>tzinfo = None\n\n    <DED>kw_: Dict[str, Union[int, timezone]] = {k: int(v) for k, v in kw.items() if v is not None}\n    kw_['tzinfo'] = tzinfo\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>tzinfo = _parse_timezone(kw.pop('tzinfo'), errors.DateTimeError)\n    kw_: Dict[str, Union[None, int, timezone]] = {k: int(v) for k, v in kw.items() if v is not None}\n    kw_['tzinfo'] = tzinfo\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]