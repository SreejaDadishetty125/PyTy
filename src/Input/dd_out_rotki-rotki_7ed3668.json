[
  {
    "project": "rotki/rotki",
    "commit": "7ed36688ee758142f616d0b0266d8704647aa4fd",
    "filename": "rotkehlchen/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/blockchain.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/blockchain.py:145:36 Incompatible parameter type [6]: Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "                self.all_eth_tokens['MLN (old)']['address'],"
  },
  {
    "project": "rotki/rotki",
    "commit": "7ed36688ee758142f616d0b0266d8704647aa4fd",
    "filename": "rotkehlchen/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/blockchain.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/blockchain.py:146:36 Incompatible parameter type [6]: Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "                self.all_eth_tokens['MLN (old)']['decimal'],"
  },
  {
    "project": "rotki/rotki",
    "commit": "7ed36688ee758142f616d0b0266d8704647aa4fd",
    "filename": "rotkehlchen/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/blockchain.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/blockchain.py:154:36 Incompatible parameter type [6]: Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 154,
    "warning_line": "                self.all_eth_tokens['MLN (new)']['address'],"
  },
  {
    "project": "rotki/rotki",
    "commit": "7ed36688ee758142f616d0b0266d8704647aa4fd",
    "filename": "rotkehlchen/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/blockchain.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/blockchain.py:155:36 Incompatible parameter type [6]: Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.EthToken` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 155,
    "warning_line": "                self.all_eth_tokens['MLN (new)']['decimal'],"
  },
  {
    "project": "rotki/rotki",
    "commit": "7ed36688ee758142f616d0b0266d8704647aa4fd",
    "filename": "rotkehlchen/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/utils.py:119:32 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `combine_dicts` but got `Union[Dict[typing.Any, typing.Any], int]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `combine_dicts` but got `Union[Dict[typing.Any, typing.Any], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "        return combine_dicts(a, b)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    if isinstance(a, Dict):\n        return combine_dicts(a, b)\n    elif isinstance(a, int):\n        return a + b\n\n",
        "source_code_len": 207,
        "target_code": "def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    if isinstance(a, Dict) and isinstance(b, Dict):\n        return combine_dicts(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return a + b\n\n    raise ValueError(f'Invalid input to add_ints_or_combine_dicts. a: {a}, b: {b}')\n\n",
        "target_code_len": 339,
        "diff_format": "@@ -117,6 +117,8 @@\n def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n-    if isinstance(a, Dict):\n+    if isinstance(a, Dict) and isinstance(b, Dict):\n         return combine_dicts(a, b)\n-    elif isinstance(a, int):\n+    elif isinstance(a, int) and isinstance(b, int):\n         return a + b\n+\n+    raise ValueError(f'Invalid input to add_ints_or_combine_dicts. a: {a}, b: {b}')\n \n",
        "source_code_with_indent": "<DED>def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    <IND>if isinstance(a, Dict):\n        <IND>return combine_dicts(a, b)\n    <DED>elif isinstance(a, int):\n        <IND>return a + b\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    <IND>if isinstance(a, Dict) and isinstance(b, Dict):\n        <IND>return combine_dicts(a, b)\n    <DED>elif isinstance(a, int) and isinstance(b, int):\n        <IND>return a + b\n\n    <DED>raise ValueError(f'Invalid input to add_ints_or_combine_dicts. a: {a}, b: {b}')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "7ed36688ee758142f616d0b0266d8704647aa4fd",
    "filename": "rotkehlchen/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/utils.py:121:19 Unsupported operand [58]: `+` is not supported for operand types `int` and `Union[Dict[typing.Any, typing.Any], int]`.",
    "message": " `+` is not supported for operand types `int` and `Union[Dict[typing.Any, typing.Any], int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 121,
    "warning_line": "        return a + b",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    if isinstance(a, Dict):\n        return combine_dicts(a, b)\n    elif isinstance(a, int):\n        return a + b\n\n",
        "source_code_len": 207,
        "target_code": "def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    if isinstance(a, Dict) and isinstance(b, Dict):\n        return combine_dicts(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return a + b\n\n    raise ValueError(f'Invalid input to add_ints_or_combine_dicts. a: {a}, b: {b}')\n\n",
        "target_code_len": 339,
        "diff_format": "@@ -117,6 +117,8 @@\n def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n-    if isinstance(a, Dict):\n+    if isinstance(a, Dict) and isinstance(b, Dict):\n         return combine_dicts(a, b)\n-    elif isinstance(a, int):\n+    elif isinstance(a, int) and isinstance(b, int):\n         return a + b\n+\n+    raise ValueError(f'Invalid input to add_ints_or_combine_dicts. a: {a}, b: {b}')\n \n",
        "source_code_with_indent": "<DED>def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    <IND>if isinstance(a, Dict):\n        <IND>return combine_dicts(a, b)\n    <DED>elif isinstance(a, int):\n        <IND>return a + b\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def add_ints_or_combine_dicts(a: Union[Dict, int], b: Union[Dict, int]) -> Union[Dict, int]:\n    <IND>if isinstance(a, Dict) and isinstance(b, Dict):\n        <IND>return combine_dicts(a, b)\n    <DED>elif isinstance(a, int) and isinstance(b, int):\n        <IND>return a + b\n\n    <DED>raise ValueError(f'Invalid input to add_ints_or_combine_dicts. a: {a}, b: {b}')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]