[
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:64:23 Incompatible variable type [9]: since is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " since is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 64,
    "warning_line": "    def __init__(self, since: datetime.datetime = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:84:8 Incompatible variable type [9]: feed is declared to have type `str` but is used as type `None`.",
    "message": " feed is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 84,
    "warning_line": "        feed: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:85:8 Incompatible variable type [9]: group is declared to have type `str` but is used as type `None`.",
    "message": " group is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 85,
    "warning_line": "        group: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:86:8 Incompatible variable type [9]: parameters is declared to have type `GroupDownloadOperationParams` but is used as type `None`.",
    "message": " parameters is declared to have type `GroupDownloadOperationParams` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 86,
    "warning_line": "        parameters: GroupDownloadOperationParams = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:113:23 Incompatible variable type [9]: uuid is declared to have type `str` but is used as type `None`.",
    "message": " uuid is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 113,
    "warning_line": "    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:113:41 Incompatible variable type [9]: groups is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "message": " groups is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 113,
    "warning_line": "    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:113:62 Incompatible variable type [9]: source_uri is declared to have type `str` but is used as type `None`.",
    "message": " source_uri is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 113,
    "warning_line": "    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:161:8 Incompatible variable type [9]: feed is declared to have type `str` but is used as type `None`.",
    "message": " feed is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 161,
    "warning_line": "        feed: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:162:8 Incompatible variable type [9]: group is declared to have type `str` but is used as type `None`.",
    "message": " group is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 162,
    "warning_line": "        group: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:163:8 Incompatible variable type [9]: status is declared to have type `str` but is used as type `None`.",
    "message": " status is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 163,
    "warning_line": "        status: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:164:8 Incompatible variable type [9]: total_records is declared to have type `int` but is used as type `None`.",
    "message": " total_records is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 164,
    "warning_line": "        total_records: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:193:8 Incompatible variable type [9]: status is declared to have type `str` but is used as type `None`.",
    "message": " status is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 193,
    "warning_line": "        status: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:194:8 Incompatible variable type [9]: results is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "message": " results is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 194,
    "warning_line": "        results: list = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:228:8 Incompatible variable type [9]: download_configuration is declared to have type `DownloadOperationConfiguration` but is used as type `None`.",
    "message": " download_configuration is declared to have type `DownloadOperationConfiguration` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 228,
    "warning_line": "        download_configuration: DownloadOperationConfiguration = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:229:8 Incompatible variable type [9]: download_result is declared to have type `DownloadOperationResult` but is used as type `None`.",
    "message": " download_result is declared to have type `DownloadOperationResult` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 229,
    "warning_line": "        download_result: DownloadOperationResult = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "anchore/anchore-engine",
    "commit": "e4e7929c640b889843bbf2d78fbbacbfee7dfc1f",
    "filename": "anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/anchore-anchore-engine/anchore_engine/services/policy_engine/engine/feeds/schemas.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "anchore_engine/services/policy_engine/engine/feeds/schemas.py:230:8 Incompatible variable type [9]: data_write_dir is declared to have type `str` but is used as type `None`.",
    "message": " data_write_dir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 230,
    "warning_line": "        data_write_dir: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    class FeedAPIGroupV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIGroupRecord(**data)\n\n    __schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass FeedAPIRecord(JsonMappedMixin):\n    class FeedAPIV1Schema(JitSchema):\n        name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return FeedAPIRecord(**data)\n\n    __schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\nclass GroupDownloadOperationParams(JsonMappedMixin):\n    class GroupDownloadOperationParamsV1Schema(JitSchema):\n        since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationParams(**data)\n\n    __schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        self.since = since\n\n\nclass GroupDownloadOperationConfiguration(JsonMappedMixin):\n    class GroupDownloadOperationV1Schema(JitSchema):\n        feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadOperationConfiguration(**data)\n\n    __schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\nclass DownloadOperationConfiguration(JsonMappedMixin):\n    \"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationConfiguration(**data)\n\n    __schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    @classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            if not isinstance(g, FeedGroupMetadata):\n                raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        return conf\n\n\nclass GroupDownloadResult(JsonMappedMixin):\n    class GroupDownloadResultV1Schema(JitSchema):\n        started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            return GroupDownloadResult(**data)\n\n    __schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\nclass DownloadOperationResult(JsonMappedMixin):\n    class DownloadOperationResultV1Schema(JitSchema):\n        started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            return DownloadOperationResult(**data)\n\n    __schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        \"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\nclass LocalFeedDataRepoMetadata(JsonMappedMixin):\n    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            return LocalFeedDataRepoMetadata(**data)\n\n    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_len": 6675,
        "target_code": "",
        "target_code_len": 0,
        "diff_format": "@@ -1,234 +0,0 @@\n-\"\"\"\n-JSON schemas for the feed Download and sync processes\n-\n-\"\"\"\n-\n-import datetime\n-import uuid\n-\n-from anchore_engine.apis.serialization import (\n-    JsonMappedMixin,\n-    JitSchema,\n-    fields,\n-    post_load,\n-)\n-from anchore_engine.db import FeedGroupMetadata\n-\n-\n-class FeedAPIGroupRecord(JsonMappedMixin):\n-    class FeedAPIGroupV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIGroupRecord(**data)\n-\n-    __schema__ = FeedAPIGroupV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class FeedAPIRecord(JsonMappedMixin):\n-    class FeedAPIV1Schema(JitSchema):\n-        name = fields.Str()\n-        access_tier = fields.Int()\n-        description = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return FeedAPIRecord(**data)\n-\n-    __schema__ = FeedAPIV1Schema()\n-\n-    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n-        self.name = name\n-        self.access_tier = access_tier\n-        self.description = description\n-\n-\n-class GroupDownloadOperationParams(JsonMappedMixin):\n-    class GroupDownloadOperationParamsV1Schema(JitSchema):\n-        since = fields.DateTime(allow_none=True)\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationParams(**data)\n-\n-    __schema__ = GroupDownloadOperationParamsV1Schema()\n-\n-    def __init__(self, since: datetime.datetime = None):\n-        self.since = since\n-\n-\n-class GroupDownloadOperationConfiguration(JsonMappedMixin):\n-    class GroupDownloadOperationV1Schema(JitSchema):\n-        feed = fields.Str()\n-        group = fields.Str()\n-        parameters = fields.Nested(\n-            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadOperationConfiguration(**data)\n-\n-    __schema__ = GroupDownloadOperationV1Schema()\n-\n-    def __init__(\n-        self,\n-        feed: str = None,\n-        group: str = None,\n-        parameters: GroupDownloadOperationParams = None,\n-    ):\n-        self.feed = feed\n-        self.group = group\n-        self.parameters = parameters\n-\n-\n-class DownloadOperationConfiguration(JsonMappedMixin):\n-    \"\"\"\n-    A configuration for a Download operation\n-    \"\"\"\n-\n-    class DownloadOperationV1Schema(JitSchema):\n-        groups = fields.List(\n-            fields.Nested(\n-                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n-            )\n-        )\n-        source_uri = fields.Str()\n-        uuid = fields.UUID()\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationConfiguration(**data)\n-\n-    __schema__ = DownloadOperationV1Schema()\n-\n-    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n-        self.groups = groups\n-        self.source_uri = source_uri\n-        self.uuid = uuid\n-\n-    @classmethod\n-    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n-        conf = DownloadOperationConfiguration(\n-            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n-        )\n-\n-        for g in db_groups_to_sync:\n-            if not isinstance(g, FeedGroupMetadata):\n-                raise TypeError(\n-                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n-                )\n-\n-            group_download_conf = GroupDownloadOperationConfiguration()\n-            group_download_conf.feed = g.feed_name\n-            group_download_conf.group = g.name\n-            group_since = g.last_sync if not is_full_download else None\n-            group_download_conf.parameters = GroupDownloadOperationParams(\n-                since=group_since\n-            )\n-            conf.groups.append(group_download_conf)\n-\n-        return conf\n-\n-\n-class GroupDownloadResult(JsonMappedMixin):\n-    class GroupDownloadResultV1Schema(JitSchema):\n-        started = fields.DateTime()\n-        ended = fields.DateTime()\n-        feed = fields.Str()\n-        group = fields.Str()\n-        status = fields.Str()\n-        total_records = fields.Int()\n-\n-        @post_load\n-        def make(self, data):\n-            return GroupDownloadResult(**data)\n-\n-    __schema__ = GroupDownloadResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        feed: str = None,\n-        group: str = None,\n-        status: str = None,\n-        total_records: int = None,\n-    ):\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.feed = feed\n-        self.group = group\n-        self.total_records = total_records\n-\n-\n-class DownloadOperationResult(JsonMappedMixin):\n-    class DownloadOperationResultV1Schema(JitSchema):\n-        started = fields.DateTime(allow_none=True)\n-        ended = fields.DateTime(allow_none=True)\n-        status = fields.Str(allow_none=True)\n-        results = fields.List(\n-            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n-        )\n-\n-        @post_load\n-        def make(self, data):\n-            return DownloadOperationResult(**data)\n-\n-    __schema__ = DownloadOperationResultV1Schema()\n-\n-    def __init__(\n-        self,\n-        started: datetime = None,\n-        ended: datetime = None,\n-        status: str = None,\n-        results: list = None,\n-    ):\n-        \"\"\"\n-        Make sure these are UTC dates\n-\n-        :param started:\n-        :param ended:\n-        :param status:\n-        :param results:\n-        \"\"\"\n-        self.started = started\n-        self.ended = ended\n-        self.status = status\n-        self.results = results\n-\n-\n-class LocalFeedDataRepoMetadata(JsonMappedMixin):\n-    class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n-        download_configuration = fields.Nested(\n-            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n-        )\n-        download_result = fields.Nested(\n-            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n-        )\n-        data_write_dir = fields.Str()\n-\n-        @post_load\n-        def make(self, data):\n-            return LocalFeedDataRepoMetadata(**data)\n-\n-    __schema__ = LocalFeedDataRepoMetadataV1Schema()\n-\n-    def __init__(\n-        self,\n-        download_configuration: DownloadOperationConfiguration = None,\n-        download_result: DownloadOperationResult = None,\n-        data_write_dir: str = None,\n-    ):\n-        self.download_configuration = download_configuration\n-        self.download_result = download_result\n-        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent": "\"\"\"\nJSON schemas for the feed Download and sync processes\n\n\"\"\"\n\nimport datetime\nimport uuid\n\nfrom anchore_engine.apis.serialization import (\n    JsonMappedMixin,\n    JitSchema,\n    fields,\n    post_load,\n)\nfrom anchore_engine.db import FeedGroupMetadata\n\n\nclass FeedAPIGroupRecord(JsonMappedMixin):\n    <IND>class FeedAPIGroupV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIGroupRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIGroupV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class FeedAPIRecord(JsonMappedMixin):\n    <IND>class FeedAPIV1Schema(JitSchema):\n        <IND>name = fields.Str()\n        access_tier = fields.Int()\n        description = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return FeedAPIRecord(**data)\n\n    <DED><DED>__schema__ = FeedAPIV1Schema()\n\n    def __init__(self, name=\"\", access_tier=0, description=\"\"):\n        <IND>self.name = name\n        self.access_tier = access_tier\n        self.description = description\n\n\n<DED><DED>class GroupDownloadOperationParams(JsonMappedMixin):\n    <IND>class GroupDownloadOperationParamsV1Schema(JitSchema):\n        <IND>since = fields.DateTime(allow_none=True)\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationParams(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationParamsV1Schema()\n\n    def __init__(self, since: datetime.datetime = None):\n        <IND>self.since = since\n\n\n<DED><DED>class GroupDownloadOperationConfiguration(JsonMappedMixin):\n    <IND>class GroupDownloadOperationV1Schema(JitSchema):\n        <IND>feed = fields.Str()\n        group = fields.Str()\n        parameters = fields.Nested(\n            GroupDownloadOperationParams.GroupDownloadOperationParamsV1Schema\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = GroupDownloadOperationV1Schema()\n\n    def __init__(\n        self,\n        feed: str = None,\n        group: str = None,\n        parameters: GroupDownloadOperationParams = None,\n    ):\n        <IND>self.feed = feed\n        self.group = group\n        self.parameters = parameters\n\n\n<DED><DED>class DownloadOperationConfiguration(JsonMappedMixin):\n    <IND>\"\"\"\n    A configuration for a Download operation\n    \"\"\"\n\n    class DownloadOperationV1Schema(JitSchema):\n        <IND>groups = fields.List(\n            fields.Nested(\n                GroupDownloadOperationConfiguration.GroupDownloadOperationV1Schema\n            )\n        )\n        source_uri = fields.Str()\n        uuid = fields.UUID()\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationConfiguration(**data)\n\n    <DED><DED>__schema__ = DownloadOperationV1Schema()\n\n    def __init__(self, uuid: str = None, groups: list = None, source_uri: str = None):\n        <IND>self.groups = groups\n        self.source_uri = source_uri\n        self.uuid = uuid\n\n    <DED>@classmethod\n    def generate_new(cls, source_uri, db_groups_to_sync, is_full_download=False):\n        <IND>conf = DownloadOperationConfiguration(\n            uuid=uuid.uuid4().hex, source_uri=source_uri, groups=[]\n        )\n\n        for g in db_groups_to_sync:\n            <IND>if not isinstance(g, FeedGroupMetadata):\n                <IND>raise TypeError(\n                    \"db_groups_to_sync must be list of FeedGroupMetadata objects\"\n                )\n\n            <DED>group_download_conf = GroupDownloadOperationConfiguration()\n            group_download_conf.feed = g.feed_name\n            group_download_conf.group = g.name\n            group_since = g.last_sync if not is_full_download else None\n            group_download_conf.parameters = GroupDownloadOperationParams(\n                since=group_since\n            )\n            conf.groups.append(group_download_conf)\n\n        <DED>return conf\n\n\n<DED><DED>class GroupDownloadResult(JsonMappedMixin):\n    <IND>class GroupDownloadResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime()\n        ended = fields.DateTime()\n        feed = fields.Str()\n        group = fields.Str()\n        status = fields.Str()\n        total_records = fields.Int()\n\n        @post_load\n        def make(self, data):\n            <IND>return GroupDownloadResult(**data)\n\n    <DED><DED>__schema__ = GroupDownloadResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        feed: str = None,\n        group: str = None,\n        status: str = None,\n        total_records: int = None,\n    ):\n        <IND>self.started = started\n        self.ended = ended\n        self.status = status\n        self.feed = feed\n        self.group = group\n        self.total_records = total_records\n\n\n<DED><DED>class DownloadOperationResult(JsonMappedMixin):\n    <IND>class DownloadOperationResultV1Schema(JitSchema):\n        <IND>started = fields.DateTime(allow_none=True)\n        ended = fields.DateTime(allow_none=True)\n        status = fields.Str(allow_none=True)\n        results = fields.List(\n            fields.Nested(GroupDownloadResult.GroupDownloadResultV1Schema)\n        )\n\n        @post_load\n        def make(self, data):\n            <IND>return DownloadOperationResult(**data)\n\n    <DED><DED>__schema__ = DownloadOperationResultV1Schema()\n\n    def __init__(\n        self,\n        started: datetime = None,\n        ended: datetime = None,\n        status: str = None,\n        results: list = None,\n    ):\n        <IND>\"\"\"\n        Make sure these are UTC dates\n\n        :param started:\n        :param ended:\n        :param status:\n        :param results:\n        \"\"\"\n        self.started = started\n        self.ended = ended\n        self.status = status\n        self.results = results\n\n\n<DED><DED>class LocalFeedDataRepoMetadata(JsonMappedMixin):\n    <IND>class LocalFeedDataRepoMetadataV1Schema(JitSchema):\n        <IND>download_configuration = fields.Nested(\n            DownloadOperationConfiguration.DownloadOperationV1Schema, allow_none=True\n        )\n        download_result = fields.Nested(\n            DownloadOperationResult.DownloadOperationResultV1Schema, allow_none=True\n        )\n        data_write_dir = fields.Str()\n\n        @post_load\n        def make(self, data):\n            <IND>return LocalFeedDataRepoMetadata(**data)\n\n    <DED><DED>__schema__ = LocalFeedDataRepoMetadataV1Schema()\n\n    def __init__(\n        self,\n        download_configuration: DownloadOperationConfiguration = None,\n        download_result: DownloadOperationResult = None,\n        data_write_dir: str = None,\n    ):\n        <IND>self.download_configuration = download_configuration\n        self.download_result = download_result\n        self.data_write_dir = data_write_dir\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]