[
  {
    "project": "quantumblacklabs/causalnex",
    "commit": "8265f640f633b94a64c9866107ee2166455bfab3",
    "filename": "causalnex/structure/data_generators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-causalnex/causalnex/structure/data_generators/core.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "causalnex/structure/data_generators.py:129:4 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 129,
    "warning_line": "    seed: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return graph\n\n\ndef generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_len": 6988,
        "target_code": "    return graph\n\n",
        "target_code_len": 18,
        "diff_format": "@@ -120,197 +135,2 @@\n     return graph\n-\n-\n-def generate_continuous_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_binary_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_continuous_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        Dataframe with the node names as column names\n-    Raises:\n-        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n-            'exponential', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_binary_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_categorical_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    n_categories: int = 3,\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            \"logit\"/\"gumbel\" (alias). Logit is default.\n-        n_categories: Number of categories per variable/node.\n-        noise_scale: The standard deviation of the noise. The categorical features\n-            are created using a latent variable approach. The noise standard\n-            deviation determines how much weight the \"mean\" estimate has on\n-            the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples, d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"categorical:{}\".format(n_categories),\n-        n_samples=n_samples,\n-        distributions={\"categorical\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n \n",
        "source_code_with_indent": "    return graph\n\n\n<DED>def generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return graph\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumblacklabs/causalnex",
    "commit": "8265f640f633b94a64c9866107ee2166455bfab3",
    "filename": "causalnex/structure/data_generators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-causalnex/causalnex/structure/data_generators/core.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "causalnex/structure/data_generators.py:167:4 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 167,
    "warning_line": "    seed: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return graph\n\n\ndef generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_len": 6988,
        "target_code": "    return graph\n\n",
        "target_code_len": 18,
        "diff_format": "@@ -120,197 +135,2 @@\n     return graph\n-\n-\n-def generate_continuous_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_binary_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_continuous_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        Dataframe with the node names as column names\n-    Raises:\n-        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n-            'exponential', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_binary_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_categorical_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    n_categories: int = 3,\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            \"logit\"/\"gumbel\" (alias). Logit is default.\n-        n_categories: Number of categories per variable/node.\n-        noise_scale: The standard deviation of the noise. The categorical features\n-            are created using a latent variable approach. The noise standard\n-            deviation determines how much weight the \"mean\" estimate has on\n-            the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples, d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"categorical:{}\".format(n_categories),\n-        n_samples=n_samples,\n-        distributions={\"categorical\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n \n",
        "source_code_with_indent": "    return graph\n\n\n<DED>def generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return graph\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumblacklabs/causalnex",
    "commit": "8265f640f633b94a64c9866107ee2166455bfab3",
    "filename": "causalnex/structure/data_generators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-causalnex/causalnex/structure/data_generators/core.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "causalnex/structure/data_generators.py:208:4 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 208,
    "warning_line": "    seed: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return graph\n\n\ndef generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_len": 6988,
        "target_code": "    return graph\n\n",
        "target_code_len": 18,
        "diff_format": "@@ -120,197 +135,2 @@\n     return graph\n-\n-\n-def generate_continuous_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_binary_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_continuous_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        Dataframe with the node names as column names\n-    Raises:\n-        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n-            'exponential', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_binary_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_categorical_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    n_categories: int = 3,\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            \"logit\"/\"gumbel\" (alias). Logit is default.\n-        n_categories: Number of categories per variable/node.\n-        noise_scale: The standard deviation of the noise. The categorical features\n-            are created using a latent variable approach. The noise standard\n-            deviation determines how much weight the \"mean\" estimate has on\n-            the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples, d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"categorical:{}\".format(n_categories),\n-        n_samples=n_samples,\n-        distributions={\"categorical\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n \n",
        "source_code_with_indent": "    return graph\n\n\n<DED>def generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return graph\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumblacklabs/causalnex",
    "commit": "8265f640f633b94a64c9866107ee2166455bfab3",
    "filename": "causalnex/structure/data_generators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-causalnex/causalnex/structure/data_generators/core.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "causalnex/structure/data_generators.py:244:4 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 244,
    "warning_line": "    seed: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return graph\n\n\ndef generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_len": 6988,
        "target_code": "    return graph\n\n",
        "target_code_len": 18,
        "diff_format": "@@ -120,197 +135,2 @@\n     return graph\n-\n-\n-def generate_continuous_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_binary_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_continuous_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        Dataframe with the node names as column names\n-    Raises:\n-        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n-            'exponential', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_binary_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_categorical_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    n_categories: int = 3,\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            \"logit\"/\"gumbel\" (alias). Logit is default.\n-        n_categories: Number of categories per variable/node.\n-        noise_scale: The standard deviation of the noise. The categorical features\n-            are created using a latent variable approach. The noise standard\n-            deviation determines how much weight the \"mean\" estimate has on\n-            the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples, d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"categorical:{}\".format(n_categories),\n-        n_samples=n_samples,\n-        distributions={\"categorical\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n \n",
        "source_code_with_indent": "    return graph\n\n\n<DED>def generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return graph\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumblacklabs/causalnex",
    "commit": "8265f640f633b94a64c9866107ee2166455bfab3",
    "filename": "causalnex/structure/data_generators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-causalnex/causalnex/structure/data_generators/core.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "causalnex/structure/data_generators.py:284:4 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 284,
    "warning_line": "    seed: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return graph\n\n\ndef generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    \"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\ndef generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\ndef generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_len": 6988,
        "target_code": "    return graph\n\n",
        "target_code_len": 18,
        "diff_format": "@@ -120,197 +135,2 @@\n     return graph\n-\n-\n-def generate_continuous_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_binary_data(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> np.ndarray:\n-    \"\"\"\n-    Simulate samples from SEM with specified type of noise.\n-    The order of the columns on the returned array is the one provided by `sm.nodes`\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n-    \"\"\"\n-    df = sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-    return df[list(sm.nodes())].values\n-\n-\n-def generate_continuous_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"gaussian\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n-            'exponential', 'gumbel'.\n-        noise_scale: The standard deviation of the noise.\n-        intercept: Whether to use an intercept for each feature.\n-        seed: Random state\n-    Returns:\n-        Dataframe with the node names as column names\n-    Raises:\n-        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n-            'exponential', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"continuous\",\n-        n_samples=n_samples,\n-        distributions={\"continuous\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_binary_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            'logit' (default).\n-        noise_scale: The standard deviation of the noise. The binary and\n-            categorical features are created using a latent variable approach.\n-            The noise standard deviation determines how much weight the \"mean\"\n-            estimate has on the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples,d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"binary\",\n-        n_samples=n_samples,\n-        distributions={\"binary\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n-\n-\n-def generate_categorical_dataframe(\n-    sm: nx.DiGraph,\n-    n_samples: int,\n-    distribution: str = \"logit\",\n-    n_categories: int = 3,\n-    noise_scale: float = 1.0,\n-    intercept: bool = False,\n-    seed: int = None,\n-) -> pd.DataFrame:\n-    \"\"\"\n-    Generates a dataframe with samples from SEM with specified type of noise.\n-\n-    Args:\n-        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n-        n_samples: The number of rows/observations to sample.\n-        distribution: The type of distribution to use for the noise\n-            of a variable. Options: 'probit'/'normal' (alias),\n-            \"logit\"/\"gumbel\" (alias). Logit is default.\n-        n_categories: Number of categories per variable/node.\n-        noise_scale: The standard deviation of the noise. The categorical features\n-            are created using a latent variable approach. The noise standard\n-            deviation determines how much weight the \"mean\" estimate has on\n-            the feature value.\n-        intercept: Whether to use an intercept for the latent variable of each feature.\n-        seed: Random state\n-    Returns:\n-        x_mat: [n_samples, d_nodes] sample matrix\n-    Raises:\n-        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n-    \"\"\"\n-    return sem_generator(\n-        graph=sm,\n-        default_type=\"categorical:{}\".format(n_categories),\n-        n_samples=n_samples,\n-        distributions={\"categorical\": distribution},\n-        noise_std=noise_scale,\n-        intercept=intercept,\n-        seed=seed,\n-    )\n \n",
        "source_code_with_indent": "    return graph\n\n\n<DED>def generate_continuous_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't gaussian/normal/student-t/exponential/gumbel\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_binary_data(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> np.ndarray:\n    <IND>\"\"\"\n    Simulate samples from SEM with specified type of noise.\n    The order of the columns on the returned array is the one provided by `sm.nodes`\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution isn't 'probit', 'normal', 'logit'\n    \"\"\"\n    df = sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n    return df[list(sm.nodes())].values\n\n\n<DED>def generate_continuous_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"gaussian\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'gaussian'/'normal' (alias), 'student-t',\n            'exponential', 'gumbel'.\n        noise_scale: The standard deviation of the noise.\n        intercept: Whether to use an intercept for each feature.\n        seed: Random state\n    Returns:\n        Dataframe with the node names as column names\n    Raises:\n        ValueError: if distribution is not 'gaussian', 'normal', 'student-t',\n            'exponential', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"continuous\",\n        n_samples=n_samples,\n        distributions={\"continuous\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_binary_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            'logit' (default).\n        noise_scale: The standard deviation of the noise. The binary and\n            categorical features are created using a latent variable approach.\n            The noise standard deviation determines how much weight the \"mean\"\n            estimate has on the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples,d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"binary\",\n        n_samples=n_samples,\n        distributions={\"binary\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n\n<DED>def generate_categorical_dataframe(\n    sm: nx.DiGraph,\n    n_samples: int,\n    distribution: str = \"logit\",\n    n_categories: int = 3,\n    noise_scale: float = 1.0,\n    intercept: bool = False,\n    seed: int = None,\n) -> pd.DataFrame:\n    <IND>\"\"\"\n    Generates a dataframe with samples from SEM with specified type of noise.\n\n    Args:\n        sm: A DAG in form of a networkx or StructureModel. Does not require weights.\n        n_samples: The number of rows/observations to sample.\n        distribution: The type of distribution to use for the noise\n            of a variable. Options: 'probit'/'normal' (alias),\n            \"logit\"/\"gumbel\" (alias). Logit is default.\n        n_categories: Number of categories per variable/node.\n        noise_scale: The standard deviation of the noise. The categorical features\n            are created using a latent variable approach. The noise standard\n            deviation determines how much weight the \"mean\" estimate has on\n            the feature value.\n        intercept: Whether to use an intercept for the latent variable of each feature.\n        seed: Random state\n    Returns:\n        x_mat: [n_samples, d_nodes] sample matrix\n    Raises:\n        ValueError: if distribution is not 'probit', 'normal', 'logit', 'gumbel'\n    \"\"\"\n    return sem_generator(\n        graph=sm,\n        default_type=\"categorical:{}\".format(n_categories),\n        n_samples=n_samples,\n        distributions={\"categorical\": distribution},\n        noise_std=noise_scale,\n        intercept=intercept,\n        seed=seed,\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return graph\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumblacklabs/causalnex",
    "commit": "8265f640f633b94a64c9866107ee2166455bfab3",
    "filename": "causalnex/structure/data_generators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-causalnex/causalnex/structure/data_generators/core.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "causalnex/structure/data_generators.py:324:4 Incompatible variable type [9]: distributions is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " distributions is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 324,
    "warning_line": "    distributions: Dict[str, str] = None,"
  },
  {
    "project": "quantumblacklabs/causalnex",
    "commit": "8265f640f633b94a64c9866107ee2166455bfab3",
    "filename": "causalnex/structure/data_generators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-causalnex/causalnex/structure/data_generators/core.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "causalnex/structure/data_generators.py:326:4 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 326,
    "warning_line": "    seed: int = None,"
  }
]