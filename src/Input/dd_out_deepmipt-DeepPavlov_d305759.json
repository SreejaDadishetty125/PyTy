[
  {
    "project": "deepmipt/DeepPavlov",
    "commit": "d305759b714cddfa66d214f4dceffe26679e2c02",
    "filename": "deeppavlov/models/squad/squad.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/deepmipt-DeepPavlov/deeppavlov/models/squad/squad.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deeppavlov/models/squad/squad.py:278:8 Incompatible variable type [9]: Unable to unpack `List[int]`, expected a tuple.",
    "message": " Unable to unpack `List[int]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 278,
    "warning_line": "        y1s = list(map(lambda x: x[0], y1s))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, weight_decay: float = 1.0, **kwargs):\n\n",
        "source_code_len": 192,
        "target_code": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, noans_token: bool = False, **kwargs) -> None:\n\n",
        "target_code_len": 200,
        "diff_format": "@@ -57,3 +60,3 @@\n                  learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n-                 grad_clip: float = 5.0, weight_decay: float = 1.0, **kwargs):\n+                 grad_clip: float = 5.0, noans_token: bool = False, **kwargs) -> None:\n \n",
        "source_code_with_indent": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, weight_decay: float = 1.0, **kwargs):\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, noans_token: bool = False, **kwargs) -> None:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.grad_clip = grad_clip\n        self.weight_decay = weight_decay\n\n",
        "source_code_len": 77,
        "target_code": "        self.grad_clip = grad_clip\n        self.noans_token = noans_token\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -73,3 +76,3 @@\n         self.grad_clip = grad_clip\n-        self.weight_decay = weight_decay\n+        self.noans_token = noans_token\n \n",
        "source_code_with_indent": "        self.grad_clip = grad_clip\n        self.weight_decay = weight_decay\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.grad_clip = grad_clip\n        self.noans_token = noans_token\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            self.load()\n            if self.weight_decay < 1.0:\n                 self.sess.run(self.assign_vars)\n\n",
        "source_code_len": 114,
        "target_code": "            self.load()\n\n",
        "target_code_len": 25,
        "diff_format": "@@ -100,4 +103,2 @@\n             self.load()\n-            if self.weight_decay < 1.0:\n-                 self.sess.run(self.assign_vars)\n \n",
        "source_code_with_indent": "            <IND>self.load()\n            if self.weight_decay < 1.0:\n                 <IND>self.sess.run(self.assign_vars)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.load()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # select one answer from list of correct answers\n        y1s = list(map(lambda x: x[0], y1s))\n        y2s = list(map(lambda x: x[0], y2s))\n        feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "source_code_len": 237,
        "target_code": "        # select one answer from list of correct answers\n        y1s = np.array([x[0] for x in y1s])\n        y2s = np.array([x[0] for x in y2s])\n        if self.noans_token:\n            noans_mask = ((y1s != -1) * (y2s != -1))\n            y1s = (y1s + 1) * noans_mask\n            y2s = (y2s + 1) * noans_mask\n\n        feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "target_code_len": 400,
        "diff_format": "@@ -277,4 +279,9 @@\n         # select one answer from list of correct answers\n-        y1s = list(map(lambda x: x[0], y1s))\n-        y2s = list(map(lambda x: x[0], y2s))\n+        y1s = np.array([x[0] for x in y1s])\n+        y2s = np.array([x[0] for x in y2s])\n+        if self.noans_token:\n+            noans_mask = ((y1s != -1) * (y2s != -1))\n+            y1s = (y1s + 1) * noans_mask\n+            y2s = (y2s + 1) * noans_mask\n+\n         feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "source_code_with_indent": "        # select one answer from list of correct answers\n        y1s = list(map(lambda x: x[0], y1s))\n        y2s = list(map(lambda x: x[0], y2s))\n        feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # select one answer from list of correct answers\n        y1s = np.array([x[0] for x in y1s])\n        y2s = np.array([x[0] for x in y2s])\n        if self.noans_token:\n            <IND>noans_mask = ((y1s != -1) * (y2s != -1))\n            y1s = (y1s + 1) * noans_mask\n            y2s = (y2s + 1) * noans_mask\n\n        <DED>feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "deepmipt/DeepPavlov",
    "commit": "d305759b714cddfa66d214f4dceffe26679e2c02",
    "filename": "deeppavlov/models/squad/squad.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/deepmipt-DeepPavlov/deeppavlov/models/squad/squad.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deeppavlov/models/squad/squad.py:279:8 Incompatible variable type [9]: Unable to unpack `List[int]`, expected a tuple.",
    "message": " Unable to unpack `List[int]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 279,
    "warning_line": "        y2s = list(map(lambda x: x[0], y2s))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, weight_decay: float = 1.0, **kwargs):\n\n",
        "source_code_len": 192,
        "target_code": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, noans_token: bool = False, **kwargs) -> None:\n\n",
        "target_code_len": 200,
        "diff_format": "@@ -57,3 +60,3 @@\n                  learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n-                 grad_clip: float = 5.0, weight_decay: float = 1.0, **kwargs):\n+                 grad_clip: float = 5.0, noans_token: bool = False, **kwargs) -> None:\n \n",
        "source_code_with_indent": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, weight_decay: float = 1.0, **kwargs):\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 learning_rate: float = 0.5, min_learning_rate: float = 0.001, learning_rate_patience: int = 1,\n                 grad_clip: float = 5.0, noans_token: bool = False, **kwargs) -> None:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.grad_clip = grad_clip\n        self.weight_decay = weight_decay\n\n",
        "source_code_len": 77,
        "target_code": "        self.grad_clip = grad_clip\n        self.noans_token = noans_token\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -73,3 +76,3 @@\n         self.grad_clip = grad_clip\n-        self.weight_decay = weight_decay\n+        self.noans_token = noans_token\n \n",
        "source_code_with_indent": "        self.grad_clip = grad_clip\n        self.weight_decay = weight_decay\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.grad_clip = grad_clip\n        self.noans_token = noans_token\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            self.load()\n            if self.weight_decay < 1.0:\n                 self.sess.run(self.assign_vars)\n\n",
        "source_code_len": 114,
        "target_code": "            self.load()\n\n",
        "target_code_len": 25,
        "diff_format": "@@ -100,4 +103,2 @@\n             self.load()\n-            if self.weight_decay < 1.0:\n-                 self.sess.run(self.assign_vars)\n \n",
        "source_code_with_indent": "            <IND>self.load()\n            if self.weight_decay < 1.0:\n                 <IND>self.sess.run(self.assign_vars)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.load()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # select one answer from list of correct answers\n        y1s = list(map(lambda x: x[0], y1s))\n        y2s = list(map(lambda x: x[0], y2s))\n        feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "source_code_len": 237,
        "target_code": "        # select one answer from list of correct answers\n        y1s = np.array([x[0] for x in y1s])\n        y2s = np.array([x[0] for x in y2s])\n        if self.noans_token:\n            noans_mask = ((y1s != -1) * (y2s != -1))\n            y1s = (y1s + 1) * noans_mask\n            y2s = (y2s + 1) * noans_mask\n\n        feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "target_code_len": 400,
        "diff_format": "@@ -277,4 +279,9 @@\n         # select one answer from list of correct answers\n-        y1s = list(map(lambda x: x[0], y1s))\n-        y2s = list(map(lambda x: x[0], y2s))\n+        y1s = np.array([x[0] for x in y1s])\n+        y2s = np.array([x[0] for x in y2s])\n+        if self.noans_token:\n+            noans_mask = ((y1s != -1) * (y2s != -1))\n+            y1s = (y1s + 1) * noans_mask\n+            y2s = (y2s + 1) * noans_mask\n+\n         feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "source_code_with_indent": "        # select one answer from list of correct answers\n        y1s = list(map(lambda x: x[0], y1s))\n        y2s = list(map(lambda x: x[0], y2s))\n        feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # select one answer from list of correct answers\n        y1s = np.array([x[0] for x in y1s])\n        y2s = np.array([x[0] for x in y2s])\n        if self.noans_token:\n            <IND>noans_mask = ((y1s != -1) * (y2s != -1))\n            y1s = (y1s + 1) * noans_mask\n            y2s = (y2s + 1) * noans_mask\n\n        <DED>feed_dict = self._build_feed_dict(c_tokens, c_chars, q_tokens, q_chars, y1s, y2s)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]