[
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/datasets/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/datasets/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "doctr/datasets/utils.py:63:4 Incompatible return type [7]: Expected `List[str]` but got `List[int]`.",
    "message": " Expected `List[str]` but got `List[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 63,
    "warning_line": "    return list(map(vocab.index, input_string))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    return list(map(vocab.index, input_string))\n\n",
        "source_code_len": 50,
        "target_code": "\n    return list(map(vocab.index, input_string))  # type: ignore[arg-type]\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -62,3 +62,3 @@\n \n-    return list(map(vocab.index, input_string))\n+    return list(map(vocab.index, input_string))  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "\n    return list(map(vocab.index, input_string))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    return list(map(vocab.index, input_string))  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/documents/elements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/documents/elements.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "doctr/documents/elements.py:116:41 Incompatible parameter type [6]: Expected `List[Tuple[float, float, float, float, float]]` for 1st positional only parameter to call `resolve_enclosing_rbbox` but got `List[Tuple[Tuple[float, float], Tuple[float, float]]]`.",
    "message": " Expected `List[Tuple[float, float, float, float, float]]` for 1st positional only parameter to call `resolve_enclosing_rbbox` but got `List[Tuple[Tuple[float, float], Tuple[float, float]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "            geometry = box_resolution_fn([w.geometry for w in words])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])\n\n",
        "source_code_len": 186,
        "target_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -115,3 +115,3 @@\n             box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n-            geometry = box_resolution_fn([w.geometry for w in words])\n+            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n \n",
        "source_code_with_indent": "            <IND>box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/documents/elements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/documents/elements.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/documents/elements.py:119:8 Incompatible attribute type [8]: Attribute `geometry` declared in class `Line` has type `Optional[Tuple[Tuple[float, float], Tuple[float, float]]]` but is used as type `typing.Union[Tuple[Tuple[float, float], Tuple[float, float]], Tuple[float, float, float, float, float]]`.",
    "message": " Attribute `geometry` declared in class `Line` has type `Optional[Tuple[Tuple[float, float], Tuple[float, float]]]` but is used as type `typing.Union[Tuple[Tuple[float, float], Tuple[float, float]], Tuple[float, float, float, float, float]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 119,
    "warning_line": "        self.geometry = geometry",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional\n\n",
        "source_code_len": 85,
        "target_code": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional, Union\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -7,3 +7,3 @@\n import matplotlib.pyplot as plt\n-from typing import Tuple, Dict, List, Any, Optional\n+from typing import Tuple, Dict, List, Any, Optional, Union\n \n",
        "source_code_with_indent": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox\nfrom doctr.utils.repr import NestedObject\n",
        "source_code_len": 144,
        "target_code": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox, RotatedBbox\nfrom doctr.utils.repr import NestedObject\n",
        "target_code_len": 157,
        "diff_format": "@@ -11,3 +11,3 @@\n from doctr.utils.visualization import visualize_page\n-from doctr.utils.common_types import BoundingBox\n+from doctr.utils.common_types import BoundingBox, RotatedBbox\n from doctr.utils.repr import NestedObject\n",
        "source_code_with_indent": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox\nfrom doctr.utils.repr import NestedObject\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox, RotatedBbox\nfrom doctr.utils.repr import NestedObject\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, value: str, confidence: float, geometry: BoundingBox) -> None:\n        super().__init__()\n",
        "source_code_len": 114,
        "target_code": "\n    def __init__(self, value: str, confidence: float, geometry: Union[BoundingBox, RotatedBbox]) -> None:\n        super().__init__()\n",
        "target_code_len": 134,
        "diff_format": "@@ -53,3 +53,3 @@\n \n-    def __init__(self, value: str, confidence: float, geometry: BoundingBox) -> None:\n+    def __init__(self, value: str, confidence: float, geometry: Union[BoundingBox, RotatedBbox]) -> None:\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, value: str, confidence: float, geometry: BoundingBox) -> None:\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, value: str, confidence: float, geometry: Union[BoundingBox, RotatedBbox]) -> None:\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])\n\n",
        "source_code_len": 186,
        "target_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -115,3 +115,3 @@\n             box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n-            geometry = box_resolution_fn([w.geometry for w in words])\n+            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n \n",
        "source_code_with_indent": "            <IND>box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n\n",
        "source_code_len": 186,
        "target_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -151,3 +151,3 @@\n             box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n-            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n+            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n \n",
        "source_code_with_indent": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/documents/elements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/documents/elements.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/documents/elements.py:151:63 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[Tuple[Tuple[float, float], Tuple[float, float]]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[Tuple[Tuple[float, float], Tuple[float, float]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 151,
    "warning_line": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox"
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/documents/elements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/documents/elements.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "doctr/documents/elements.py:152:41 Incompatible parameter type [6]: Expected `List[Tuple[float, float, float, float, float]]` for 1st positional only parameter to call `resolve_enclosing_rbbox` but got `List[Tuple[Tuple[float, float], Tuple[float, float]]]`.",
    "message": " Expected `List[Tuple[float, float, float, float, float]]` for 1st positional only parameter to call `resolve_enclosing_rbbox` but got `List[Tuple[Tuple[float, float], Tuple[float, float]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 152,
    "warning_line": "            geometry = box_resolution_fn(line_boxes + artefact_boxes)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n\n",
        "source_code_len": 186,
        "target_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -151,3 +151,3 @@\n             box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n-            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n+            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n \n",
        "source_code_with_indent": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/documents/elements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/documents/elements.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/documents/elements.py:155:8 Incompatible attribute type [8]: Attribute `geometry` declared in class `Block` has type `Optional[Tuple[Tuple[float, float], Tuple[float, float]]]` but is used as type `typing.Union[Tuple[Tuple[float, float], Tuple[float, float]], Tuple[float, float, float, float, float]]`.",
    "message": " Attribute `geometry` declared in class `Block` has type `Optional[Tuple[Tuple[float, float], Tuple[float, float]]]` but is used as type `typing.Union[Tuple[Tuple[float, float], Tuple[float, float]], Tuple[float, float, float, float, float]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 155,
    "warning_line": "        self.geometry = geometry",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional\n\n",
        "source_code_len": 85,
        "target_code": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional, Union\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -7,3 +7,3 @@\n import matplotlib.pyplot as plt\n-from typing import Tuple, Dict, List, Any, Optional\n+from typing import Tuple, Dict, List, Any, Optional, Union\n \n",
        "source_code_with_indent": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import matplotlib.pyplot as plt\nfrom typing import Tuple, Dict, List, Any, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox\nfrom doctr.utils.repr import NestedObject\n",
        "source_code_len": 144,
        "target_code": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox, RotatedBbox\nfrom doctr.utils.repr import NestedObject\n",
        "target_code_len": 157,
        "diff_format": "@@ -11,3 +11,3 @@\n from doctr.utils.visualization import visualize_page\n-from doctr.utils.common_types import BoundingBox\n+from doctr.utils.common_types import BoundingBox, RotatedBbox\n from doctr.utils.repr import NestedObject\n",
        "source_code_with_indent": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox\nfrom doctr.utils.repr import NestedObject\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from doctr.utils.visualization import visualize_page\nfrom doctr.utils.common_types import BoundingBox, RotatedBbox\nfrom doctr.utils.repr import NestedObject\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, value: str, confidence: float, geometry: BoundingBox) -> None:\n        super().__init__()\n",
        "source_code_len": 114,
        "target_code": "\n    def __init__(self, value: str, confidence: float, geometry: Union[BoundingBox, RotatedBbox]) -> None:\n        super().__init__()\n",
        "target_code_len": 134,
        "diff_format": "@@ -53,3 +53,3 @@\n \n-    def __init__(self, value: str, confidence: float, geometry: BoundingBox) -> None:\n+    def __init__(self, value: str, confidence: float, geometry: Union[BoundingBox, RotatedBbox]) -> None:\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, value: str, confidence: float, geometry: BoundingBox) -> None:\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, value: str, confidence: float, geometry: Union[BoundingBox, RotatedBbox]) -> None:\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])\n\n",
        "source_code_len": 186,
        "target_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -115,3 +115,3 @@\n             box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n-            geometry = box_resolution_fn([w.geometry for w in words])\n+            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n \n",
        "source_code_with_indent": "            <IND>box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>box_resolution_fn = resolve_enclosing_rbbox if len(words[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn([w.geometry for w in words])  # type: ignore[operator]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n\n",
        "source_code_len": 186,
        "target_code": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -151,3 +151,3 @@\n             box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n-            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n+            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n \n",
        "source_code_with_indent": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            box_resolution_fn = resolve_enclosing_rbbox if len(lines[0].geometry) == 5 else resolve_enclosing_bbox\n            geometry = box_resolution_fn(line_boxes + artefact_boxes)  # type: ignore[operator]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/documents/reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/documents/reader.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "doctr/documents/reader.py:192:8 Incompatible return type [7]: Expected `List[Tuple[float, float, float, float]]` but got `List[typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `List[Tuple[float, float, float, float]]` but got `List[typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 192,
    "warning_line": "        return [tuple(self.doc[idx].getImageBbox(artefact)) for artefact in self.doc[idx].get_images(full=True)]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def get_page_artefacts(self, idx) -> List[Tuple[float, float, float, float]]:\n        return [tuple(self.doc[idx].getImageBbox(artefact)) for artefact in self.doc[idx].get_images(full=True)]\n\n",
        "source_code_len": 196,
        "target_code": "    def get_page_artefacts(self, idx) -> List[Tuple[float, float, float, float]]:\n        return [tuple(self.doc[idx].getImageBbox(artefact))  # type: ignore[misc]\n                for artefact in self.doc[idx].get_images(full=True)]\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -191,3 +191,4 @@\n     def get_page_artefacts(self, idx) -> List[Tuple[float, float, float, float]]:\n-        return [tuple(self.doc[idx].getImageBbox(artefact)) for artefact in self.doc[idx].get_images(full=True)]\n+        return [tuple(self.doc[idx].getImageBbox(artefact))  # type: ignore[misc]\n+                for artefact in self.doc[idx].get_images(full=True)]\n \n",
        "source_code_with_indent": "    <DED>def get_page_artefacts(self, idx) -> List[Tuple[float, float, float, float]]:\n        <IND>return [tuple(self.doc[idx].getImageBbox(artefact)) for artefact in self.doc[idx].get_images(full=True)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def get_page_artefacts(self, idx) -> List[Tuple[float, float, float, float]]:\n        <IND>return [tuple(self.doc[idx].getImageBbox(artefact))  # type: ignore[misc]\n                for artefact in self.doc[idx].get_images(full=True)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/core.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/core.py:63:50 Incompatible parameter type [6]: Expected `List[Tuple[int, int]]` for 3rd positional only parameter to call `DocumentBuilder.__call__` but got `List[typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `List[Tuple[int, int]]` for 3rd positional only parameter to call `DocumentBuilder.__call__` but got `List[typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "        out = self.doc_builder(boxes, word_preds, [tuple(page.shape[:2]) for page in pages])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        boxes = [rotate_boxes(boxes_page, angle) for boxes_page, angle in zip(boxes, angles)]\n        out = self.doc_builder(boxes, word_preds, [tuple(page.shape[:2]) for page in pages])\n        return out\n",
        "source_code_len": 206,
        "target_code": "        boxes = [rotate_boxes(boxes_page, angle) for boxes_page, angle in zip(boxes, angles)]\n        out = self.doc_builder(boxes, word_preds, [page.shape[:2] for page in pages])\n        return out\n",
        "target_code_len": 199,
        "diff_format": "@@ -62,3 +62,3 @@\n         boxes = [rotate_boxes(boxes_page, angle) for boxes_page, angle in zip(boxes, angles)]\n-        out = self.doc_builder(boxes, word_preds, [tuple(page.shape[:2]) for page in pages])\n+        out = self.doc_builder(boxes, word_preds, [page.shape[:2] for page in pages])\n         return out\n",
        "source_code_with_indent": "        boxes = [rotate_boxes(boxes_page, angle) for boxes_page, angle in zip(boxes, angles)]\n        out = self.doc_builder(boxes, word_preds, [tuple(page.shape[:2]) for page in pages])\n        return out\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        boxes = [rotate_boxes(boxes_page, angle) for boxes_page, angle in zip(boxes, angles)]\n        out = self.doc_builder(boxes, word_preds, [page.shape[:2] for page in pages])\n        return out\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/core.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/core.py:214:60 Incompatible parameter type [6]: Expected `List[Tuple[float, float, float, float, float]]` for 1st positional only parameter to call `resolve_enclosing_rbbox` but got `typing.Union[List[Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any]], List[Tuple[Tuple[typing.Any, typing.Any], Tuple[typing.Any, typing.Any]]]]`.",
    "message": " Expected `List[Tuple[float, float, float, float, float]]` for 1st positional only parameter to call `resolve_enclosing_rbbox` but got `typing.Union[List[Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any]], List[Tuple[Tuple[typing.Any, typing.Any], Tuple[typing.Any, typing.Any]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 214,
    "warning_line": "            box_lines = np.asarray([resolve_enclosing_rbbox(line) for line in _lines])"
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/core.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/core.py:216:49 Incompatible parameter type [6]: Expected `List[Tuple[Tuple[float, float], Tuple[float, float]]]` for 1st positional only parameter to call `resolve_enclosing_bbox` but got `typing.Union[List[Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any]], List[Tuple[Tuple[typing.Any, typing.Any], Tuple[typing.Any, typing.Any]]]]`.",
    "message": " Expected `List[Tuple[Tuple[float, float], Tuple[float, float]]]` for 1st positional only parameter to call `resolve_enclosing_bbox` but got `typing.Union[List[Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any]], List[Tuple[Tuple[typing.Any, typing.Any], Tuple[typing.Any, typing.Any]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 216,
    "warning_line": "            _box_lines = [resolve_enclosing_bbox(line) for line in _lines]"
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/core.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/core.py:283:29 Incompatible parameter type [6]: Expected `Tuple[Tuple[float, float], Tuple[float, float]]` for 3rd positional only parameter to call `Word.__init__` but got `Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any]`.",
    "message": " Expected `Tuple[Tuple[float, float], Tuple[float, float]]` for 3rd positional only parameter to call `Word.__init__` but got `Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 283,
    "warning_line": "                            (boxes[idx, 0], boxes[idx, 1], boxes[idx, 2], boxes[idx, 3], boxes[idx, 4])"
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/detection/differentiable_binarization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/detection/differentiable_binarization.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/detection/differentiable_binarization.py:99:4 Inconsistent override [15]: `doctr.models.detection.differentiable_binarization.DBPostProcessor.bitmap_to_boxes` overrides method defined in `DetectionPostProcessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `List[List[float]]`.",
    "message": " `doctr.models.detection.differentiable_binarization.DBPostProcessor.bitmap_to_boxes` overrides method defined in `DetectionPostProcessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `List[List[float]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 99,
    "warning_line": "    def bitmap_to_boxes("
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/detection/differentiable_binarization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/detection/differentiable_binarization.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/detection/differentiable_binarization.py:150:69 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `int.__add__` but got `Union[float, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `int.__add__` but got `Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "                xmin, ymin, xmax, ymax = x / width, y / height, (x + w) / width, (y + h) / height",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\n\n",
        "source_code_len": 62,
        "target_code": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\nfrom doctr.utils.common_types import RotatedBbox\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -21,2 +21,3 @@\n from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\n+from doctr.utils.common_types import RotatedBbox\n \n",
        "source_code_with_indent": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\nfrom doctr.utils.common_types import RotatedBbox\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        points: np.ndarray,\n    ) -> Union[Optional[Tuple[int, int, int, int, float]], Optional[Tuple[int, int, int, int, float, float]]]:\n        \"\"\"Expand a polygon (points) by a factor unclip_ratio, and returns a rotated box: x, y, w, h, alpha\n",
        "source_code_len": 247,
        "target_code": "        points: np.ndarray,\n    ) -> Optional[Union[RotatedBbox, Tuple[float, float, float, float]]]:\n        \"\"\"Expand a polygon (points) by a factor unclip_ratio, and returns a rotated box: x, y, w, h, alpha\n",
        "target_code_len": 210,
        "diff_format": "@@ -69,3 +70,3 @@\n         points: np.ndarray,\n-    ) -> Union[Optional[Tuple[int, int, int, int, float]], Optional[Tuple[int, int, int, int, float, float]]]:\n+    ) -> Optional[Union[RotatedBbox, Tuple[float, float, float, float]]]:\n         \"\"\"Expand a polygon (points) by a factor unclip_ratio, and returns a rotated box: x, y, w, h, alpha\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        points: np.ndarray,\n    ) -> Union[Optional[Tuple[int, int, int, int, float]], Optional[Tuple[int, int, int, int, float, float]]]:\n        <IND>",
        "target_code_with_indent": "        points: np.ndarray,\n    ) -> Optional[Union[RotatedBbox, Tuple[float, float, float, float]]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/detection/differentiable_binarization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/detection/differentiable_binarization.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/detection/differentiable_binarization.py:150:86 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `int.__add__` but got `Union[float, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `int.__add__` but got `Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "                xmin, ymin, xmax, ymax = x / width, y / height, (x + w) / width, (y + h) / height",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\n\n",
        "source_code_len": 62,
        "target_code": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\nfrom doctr.utils.common_types import RotatedBbox\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -21,2 +21,3 @@\n from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\n+from doctr.utils.common_types import RotatedBbox\n \n",
        "source_code_with_indent": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from doctr.utils.geometry import fit_rbbox, rbbox_to_polygon\nfrom doctr.utils.common_types import RotatedBbox\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        points: np.ndarray,\n    ) -> Union[Optional[Tuple[int, int, int, int, float]], Optional[Tuple[int, int, int, int, float, float]]]:\n        \"\"\"Expand a polygon (points) by a factor unclip_ratio, and returns a rotated box: x, y, w, h, alpha\n",
        "source_code_len": 247,
        "target_code": "        points: np.ndarray,\n    ) -> Optional[Union[RotatedBbox, Tuple[float, float, float, float]]]:\n        \"\"\"Expand a polygon (points) by a factor unclip_ratio, and returns a rotated box: x, y, w, h, alpha\n",
        "target_code_len": 210,
        "diff_format": "@@ -69,3 +70,3 @@\n         points: np.ndarray,\n-    ) -> Union[Optional[Tuple[int, int, int, int, float]], Optional[Tuple[int, int, int, int, float, float]]]:\n+    ) -> Optional[Union[RotatedBbox, Tuple[float, float, float, float]]]:\n         \"\"\"Expand a polygon (points) by a factor unclip_ratio, and returns a rotated box: x, y, w, h, alpha\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        points: np.ndarray,\n    ) -> Union[Optional[Tuple[int, int, int, int, float]], Optional[Tuple[int, int, int, int, float, float]]]:\n        <IND>",
        "target_code_with_indent": "        points: np.ndarray,\n    ) -> Optional[Union[RotatedBbox, Tuple[float, float, float, float]]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/detection/differentiable_binarization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/detection/differentiable_binarization.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "doctr/models/detection/differentiable_binarization.py:402:51 Incompatible parameter type [6]: Expected `Tuple[float, float, float, float, float]` for 1st positional only parameter to call `rbbox_to_polygon` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[float, float, float, float, float]` for 1st positional only parameter to call `rbbox_to_polygon` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 402,
    "warning_line": "                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)\n            else:\n",
        "source_code_len": 190,
        "target_code": "                boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([\n                    rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes  # type: ignore[arg-type]\n                ], axis=1)\n            else:\n",
        "target_code_len": 254,
        "diff_format": "@@ -401,3 +399,5 @@\n                 boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n-                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)\n+                polys = np.stack([\n+                    rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes  # type: ignore[arg-type]\n+                ], axis=1)\n             else:\n",
        "source_code_with_indent": "                <IND>boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)\n            <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([\n                    rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes  # type: ignore[arg-type]\n                ], axis=1)\n            <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/detection/linknet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/detection/linknet.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/models/detection/linknet.py:58:4 Inconsistent override [15]: `doctr.models.detection.linknet.LinkNetPostProcessor.bitmap_to_boxes` overrides method defined in `DetectionPostProcessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `List[List[float]]`.",
    "message": " `doctr.models.detection.linknet.LinkNetPostProcessor.bitmap_to_boxes` overrides method defined in `DetectionPostProcessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `List[List[float]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 58,
    "warning_line": "    def bitmap_to_boxes("
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/models/detection/linknet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/models/detection/linknet.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "doctr/models/detection/linknet.py:247:51 Incompatible parameter type [6]: Expected `Tuple[float, float, float, float, float]` for 1st positional only parameter to call `rbbox_to_polygon` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[float, float, float, float, float]` for 1st positional only parameter to call `rbbox_to_polygon` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 247,
    "warning_line": "                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)\n            else:\n",
        "source_code_len": 190,
        "target_code": "                boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([\n                    rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes  # type: ignore[arg-type]\n                ], axis=1)\n            else:\n",
        "target_code_len": 254,
        "diff_format": "@@ -246,3 +246,5 @@\n                 boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n-                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)\n+                polys = np.stack([\n+                    rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes  # type: ignore[arg-type]\n+                ], axis=1)\n             else:\n",
        "source_code_with_indent": "                <IND>boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes], axis=1)\n            <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>boxes_size = np.minimum(abs_boxes[:, 2], abs_boxes[:, 3])\n                polys = np.stack([\n                    rbbox_to_polygon(tuple(rbbox)) for rbbox in abs_boxes  # type: ignore[arg-type]\n                ], axis=1)\n            <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/transforms/modules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/transforms/modules.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/transforms/modules.py:39:16 Call error [29]: `NestedObject` is not a function.",
    "message": " `NestedObject` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 39,
    "warning_line": "            x = t(x)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, transforms: List[NestedObject]) -> None:\n        self.transforms = transforms\n",
        "source_code_len": 102,
        "target_code": "\n    def __init__(self, transforms: List[Callable[[Any], Any]]) -> None:\n        self.transforms = transforms\n",
        "target_code_len": 110,
        "diff_format": "@@ -33,3 +33,3 @@\n \n-    def __init__(self, transforms: List[NestedObject]) -> None:\n+    def __init__(self, transforms: List[Callable[[Any], Any]]) -> None:\n         self.transforms = transforms\n",
        "source_code_with_indent": "\n    def __init__(self, transforms: List[NestedObject]) -> None:\n        <IND>self.transforms = transforms\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, transforms: List[Callable[[Any], Any]]) -> None:\n        <IND>self.transforms = transforms\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/transforms/modules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/transforms/modules.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/transforms/modules.py:349:15 Call error [29]: `NestedObject` is not a function.",
    "message": " `NestedObject` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 349,
    "warning_line": "        return transfo(img)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, transforms: List[NestedObject]) -> None:\n        self.transforms = transforms\n",
        "source_code_len": 102,
        "target_code": "\n    def __init__(self, transforms: List[Callable[[Any], Any]]) -> None:\n        self.transforms = transforms\n",
        "target_code_len": 110,
        "diff_format": "@@ -341,3 +341,3 @@\n \n-    def __init__(self, transforms: List[NestedObject]) -> None:\n+    def __init__(self, transforms: List[Callable[[Any], Any]]) -> None:\n         self.transforms = transforms\n",
        "source_code_with_indent": "\n    def __init__(self, transforms: List[NestedObject]) -> None:\n        <IND>self.transforms = transforms\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, transforms: List[Callable[[Any], Any]]) -> None:\n        <IND>self.transforms = transforms\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/transforms/modules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/transforms/modules.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doctr/transforms/modules.py:374:19 Call error [29]: `NestedObject` is not a function.",
    "message": " `NestedObject` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 374,
    "warning_line": "            return self.transform(img)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    def __init__(self, transform: NestedObject, p: float = .5) -> None:\n        self.transform = transform\n",
        "source_code_len": 115,
        "target_code": "    \"\"\"\n    def __init__(self, transform: Callable[[Any], Any], p: float = .5) -> None:\n        self.transform = transform\n",
        "target_code_len": 123,
        "diff_format": "@@ -364,3 +364,3 @@\n     \"\"\"\n-    def __init__(self, transform: NestedObject, p: float = .5) -> None:\n+    def __init__(self, transform: Callable[[Any], Any], p: float = .5) -> None:\n         self.transform = transform\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, transform: NestedObject, p: float = .5) -> None:\n        <IND>self.transform = transform\n",
        "target_code_with_indent": "\n    def __init__(self, transform: Callable[[Any], Any], p: float = .5) -> None:\n        <IND>self.transform = transform\n"
      }
    ]
  },
  {
    "project": "mindee/doctr",
    "commit": "04dd012112a5c356de26c0b30ac3565600b72959",
    "filename": "doctr/utils/visualization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mindee-doctr/doctr/utils/visualization.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "doctr/utils/visualization.py:159:96 Incompatible parameter type [6]: Expected `Tuple[int, int, int]` for 4th positional only parameter to call `create_rect_patch` but got `Tuple[float, float, float]`.",
    "message": " Expected `Tuple[int, int, int]` for 4th positional only parameter to call `create_rect_patch` but got `Tuple[float, float, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "                rect = create_rect_patch(artefact['geometry'], 'artefact', page['dimensions'], (0.5, 0.5, 0.5),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            for artefact in block['artefacts']:\n                rect = create_rect_patch(artefact['geometry'], 'artefact', page['dimensions'], (0.5, 0.5, 0.5),\n                                         linewidth=1, **kwargs)\n                ax.add_patch(rect)\n",
        "source_code_len": 259,
        "target_code": "            for artefact in block['artefacts']:\n                rect = create_rect_patch(\n                    artefact['geometry'],\n                    'artefact',\n                    page['dimensions'],\n                    (0.5, 0.5, 0.5),  # type: ignore[arg-type]\n                    linewidth=1,\n                    **kwargs\n                )\n                ax.add_patch(rect)\n",
        "target_code_len": 382,
        "diff_format": "@@ -158,4 +157,10 @@\n             for artefact in block['artefacts']:\n-                rect = create_rect_patch(artefact['geometry'], 'artefact', page['dimensions'], (0.5, 0.5, 0.5),\n-                                         linewidth=1, **kwargs)\n+                rect = create_rect_patch(\n+                    artefact['geometry'],\n+                    'artefact',\n+                    page['dimensions'],\n+                    (0.5, 0.5, 0.5),  # type: ignore[arg-type]\n+                    linewidth=1,\n+                    **kwargs\n+                )\n                 ax.add_patch(rect)\n",
        "source_code_with_indent": "            <IND>for artefact in block['artefacts']:\n                <IND>rect = create_rect_patch(artefact['geometry'], 'artefact', page['dimensions'], (0.5, 0.5, 0.5),\n                                         linewidth=1, **kwargs)\n                ax.add_patch(rect)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>for artefact in block['artefacts']:\n                <IND>rect = create_rect_patch(\n                    artefact['geometry'],\n                    'artefact',\n                    page['dimensions'],\n                    (0.5, 0.5, 0.5),  # type: ignore[arg-type]\n                    linewidth=1,\n                    **kwargs\n                )\n                ax.add_patch(rect)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]