[
  {
    "project": "poljar/matrix-nio",
    "commit": "8a2c0d51c5e4b92e0334a39c6492cc523c438cfa",
    "filename": "nio/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/client.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/client.py:260:31 Incompatible parameter type [6]: Expected `LoginResponse` for 1st positional only parameter to call `Client._handle_login` but got `Union[LoginResponse, nio.responses.ErrorResponse]`.",
    "message": " Expected `LoginResponse` for 1st positional only parameter to call `Client._handle_login` but got `Union[LoginResponse, nio.responses.ErrorResponse]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 260,
    "warning_line": "            self._handle_login(response)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    KeysUploadResponse,\n)\n\nfrom .events import RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "source_code_len": 128,
        "target_code": "    KeysUploadResponse,\n    ErrorResponse\n)\n\nfrom .events import Event, BadEventType, RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "target_code_len": 167,
        "diff_format": "@@ -58,5 +58,6 @@\n     KeysUploadResponse,\n+    ErrorResponse\n )\n \n-from .events import RoomEncryptedEvent, MegolmEvent\n+from .events import Event, BadEventType, RoomEncryptedEvent, MegolmEvent\n from .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "source_code_with_indent": "    KeysUploadResponse,\n)\n\nfrom .events import RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    KeysUploadResponse,\n    ErrorResponse\n)\n\nfrom .events import Event, BadEventType, RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _handle_login(self, response):\n        # type: (LoginResponse) -> None\n        self.access_token = response.access_token\n",
        "source_code_len": 129,
        "target_code": "    def _handle_login(self, response):\n        # type: (Union[LoginResponse, ErrorResponse]) -> None\n        if isinstance(response, ErrorResponse):\n            return\n\n        self.access_token = response.access_token\n",
        "target_code_len": 219,
        "diff_format": "@@ -138,3 +139,6 @@\n     def _handle_login(self, response):\n-        # type: (LoginResponse) -> None\n+        # type: (Union[LoginResponse, ErrorResponse]) -> None\n+        if isinstance(response, ErrorResponse):\n+            return\n+\n         self.access_token = response.access_token\n",
        "source_code_with_indent": "    <DED>def _handle_login(self, response):\n        # type: (LoginResponse) -> None\n        <IND>self.access_token = response.access_token\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _handle_login(self, response):\n        # type: (Union[LoginResponse, ErrorResponse]) -> None\n        <IND>if isinstance(response, ErrorResponse):\n            <IND>return\n\n        <DED>self.access_token = response.access_token\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _handle_sync(self, response):\n        # type: (SyncRepsponse) -> None\n        if self.next_batch == response.next_batch:\n",
        "source_code_len": 129,
        "target_code": "    def _handle_sync(self, response):\n        # type: (Union[SyncRepsponse, ErrorResponse]) -> None\n        if isinstance(response, ErrorResponse):\n            return\n\n        if self.next_batch == response.next_batch:\n",
        "target_code_len": 219,
        "diff_format": "@@ -147,3 +151,6 @@\n     def _handle_sync(self, response):\n-        # type: (SyncRepsponse) -> None\n+        # type: (Union[SyncRepsponse, ErrorResponse]) -> None\n+        if isinstance(response, ErrorResponse):\n+            return\n+\n         if self.next_batch == response.next_batch:\n",
        "source_code_with_indent": "    <DED><DED>def _handle_sync(self, response):\n        # type: (SyncRepsponse) -> None\n        <IND>if self.next_batch == response.next_batch:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _handle_sync(self, response):\n        # type: (Union[SyncRepsponse, ErrorResponse]) -> None\n        <IND>if isinstance(response, ErrorResponse):\n            <IND>return\n\n        <DED>if self.next_batch == response.next_batch:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "8a2c0d51c5e4b92e0334a39c6492cc523c438cfa",
    "filename": "nio/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/client.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/client.py:263:30 Incompatible parameter type [6]: Expected `SyncRepsponse` for 1st positional only parameter to call `Client._handle_sync` but got `Union[SyncRepsponse, nio.responses.ErrorResponse]`.",
    "message": " Expected `SyncRepsponse` for 1st positional only parameter to call `Client._handle_sync` but got `Union[SyncRepsponse, nio.responses.ErrorResponse]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 263,
    "warning_line": "            self._handle_sync(response)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    KeysUploadResponse,\n)\n\nfrom .events import RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "source_code_len": 128,
        "target_code": "    KeysUploadResponse,\n    ErrorResponse\n)\n\nfrom .events import Event, BadEventType, RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "target_code_len": 167,
        "diff_format": "@@ -58,5 +58,6 @@\n     KeysUploadResponse,\n+    ErrorResponse\n )\n \n-from .events import RoomEncryptedEvent, MegolmEvent\n+from .events import Event, BadEventType, RoomEncryptedEvent, MegolmEvent\n from .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "source_code_with_indent": "    KeysUploadResponse,\n)\n\nfrom .events import RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    KeysUploadResponse,\n    ErrorResponse\n)\n\nfrom .events import Event, BadEventType, RoomEncryptedEvent, MegolmEvent\nfrom .rooms import MatrixInvitedRoom, MatrixRoom\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _handle_login(self, response):\n        # type: (LoginResponse) -> None\n        self.access_token = response.access_token\n",
        "source_code_len": 129,
        "target_code": "    def _handle_login(self, response):\n        # type: (Union[LoginResponse, ErrorResponse]) -> None\n        if isinstance(response, ErrorResponse):\n            return\n\n        self.access_token = response.access_token\n",
        "target_code_len": 219,
        "diff_format": "@@ -138,3 +139,6 @@\n     def _handle_login(self, response):\n-        # type: (LoginResponse) -> None\n+        # type: (Union[LoginResponse, ErrorResponse]) -> None\n+        if isinstance(response, ErrorResponse):\n+            return\n+\n         self.access_token = response.access_token\n",
        "source_code_with_indent": "    <DED>def _handle_login(self, response):\n        # type: (LoginResponse) -> None\n        <IND>self.access_token = response.access_token\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _handle_login(self, response):\n        # type: (Union[LoginResponse, ErrorResponse]) -> None\n        <IND>if isinstance(response, ErrorResponse):\n            <IND>return\n\n        <DED>self.access_token = response.access_token\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _handle_sync(self, response):\n        # type: (SyncRepsponse) -> None\n        if self.next_batch == response.next_batch:\n",
        "source_code_len": 129,
        "target_code": "    def _handle_sync(self, response):\n        # type: (Union[SyncRepsponse, ErrorResponse]) -> None\n        if isinstance(response, ErrorResponse):\n            return\n\n        if self.next_batch == response.next_batch:\n",
        "target_code_len": 219,
        "diff_format": "@@ -147,3 +151,6 @@\n     def _handle_sync(self, response):\n-        # type: (SyncRepsponse) -> None\n+        # type: (Union[SyncRepsponse, ErrorResponse]) -> None\n+        if isinstance(response, ErrorResponse):\n+            return\n+\n         if self.next_batch == response.next_batch:\n",
        "source_code_with_indent": "    <DED><DED>def _handle_sync(self, response):\n        # type: (SyncRepsponse) -> None\n        <IND>if self.next_batch == response.next_batch:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _handle_sync(self, response):\n        # type: (Union[SyncRepsponse, ErrorResponse]) -> None\n        <IND>if isinstance(response, ErrorResponse):\n            <IND>return\n\n        <DED>if self.next_batch == response.next_batch:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "8a2c0d51c5e4b92e0334a39c6492cc523c438cfa",
    "filename": "nio/encryption.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/encryption.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/encryption.py:856:16 Incompatible return type [7]: Expected `Optional[Event]` but got `Union[nio.events.BadEvent, nio.events.UnknownBadEvent]`.",
    "message": " Expected `Optional[Event]` but got `Union[nio.events.BadEvent, nio.events.UnknownBadEvent]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 856,
    "warning_line": "                return bad",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    RoomEncryptedEvent,\n    validate_or_badevent\n",
        "source_code_len": 49,
        "target_code": "    RoomEncryptedEvent,\n    BadEventType,\n    UnknownBadEvent,\n    validate_or_badevent\n",
        "target_code_len": 88,
        "diff_format": "@@ -69,2 +69,4 @@\n     RoomEncryptedEvent,\n+    BadEventType,\n+    UnknownBadEvent,\n     validate_or_badevent\n",
        "source_code_with_indent": "    RoomEncryptedEvent,\n    validate_or_badevent\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    RoomEncryptedEvent,\n    BadEventType,\n    UnknownBadEvent,\n    validate_or_badevent\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def decrypt_event(self, event):\n        # type: (RoomEncryptedEvent) -> Optional[Event]\n        logger.debug(\"Decrypting event of type {}\".format(\n",
        "source_code_len": 151,
        "target_code": "    def decrypt_event(self, event):\n        # type: (RoomEncryptedEvent) -> Optional[Union[Event, BadEventType]]\n        logger.debug(\"Decrypting event of type {}\".format(\n",
        "target_code_len": 172,
        "diff_format": "@@ -810,3 +812,3 @@\n     def decrypt_event(self, event):\n-        # type: (RoomEncryptedEvent) -> Optional[Event]\n+        # type: (RoomEncryptedEvent) -> Optional[Union[Event, BadEventType]]\n         logger.debug(\"Decrypting event of type {}\".format(\n",
        "source_code_with_indent": "    <DED>def decrypt_event(self, event):\n        # type: (RoomEncryptedEvent) -> Optional[Event]\n        <IND>logger.debug(\"Decrypting event of type {}\".format(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def decrypt_event(self, event):\n        # type: (RoomEncryptedEvent) -> Optional[Union[Event, BadEventType]]\n        <IND>logger.debug(\"Decrypting event of type {}\".format(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]