[
  {
    "project": "laughingman7743/PyAthena",
    "commit": "bfc6bb4479746e0d21eb99ff91f096c24f347300",
    "filename": "pyathena/result_set.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/laughingman7743-PyAthena/pyathena/result_set.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyathena/result_set.py:300:26 Incompatible parameter type [6]: Expected `typing.Iterable[Tuple[typing.Any]]` for 1st positional only parameter to call `collections.deque.extend` but got `List[typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `typing.Iterable[Tuple[typing.Any]]` for 1st positional only parameter to call `collections.deque.extend` but got `List[typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 300,
    "warning_line": "        self._rows.extend(processed_rows)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._meta_data: Optional[Tuple[Any, ...]] = None\n        self._rows: Deque[Tuple[Optional[Any]]] = collections.deque()\n        self._next_token: Optional[str] = None\n",
        "source_code_len": 175,
        "target_code": "        self._meta_data: Optional[Tuple[Any, ...]] = None\n        self._rows: Deque[Tuple[Optional[Any], ...]] = collections.deque()\n        self._next_token: Optional[str] = None\n",
        "target_code_len": 180,
        "diff_format": "@@ -38,3 +38,3 @@\n         self._meta_data: Optional[Tuple[Any, ...]] = None\n-        self._rows: Deque[Tuple[Optional[Any]]] = collections.deque()\n+        self._rows: Deque[Tuple[Optional[Any], ...]] = collections.deque()\n         self._next_token: Optional[str] = None\n",
        "source_code_with_indent": "        self._meta_data: Optional[Tuple[Any, ...]] = None\n        self._rows: Deque[Tuple[Optional[Any]]] = collections.deque()\n        self._next_token: Optional[str] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._meta_data: Optional[Tuple[Any, ...]] = None\n        self._rows: Deque[Tuple[Optional[Any], ...]] = collections.deque()\n        self._next_token: Optional[str] = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]