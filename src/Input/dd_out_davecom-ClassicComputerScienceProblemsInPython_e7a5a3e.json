[
  {
    "project": "davecom/ClassicComputerScienceProblemsInPython",
    "commit": "e7a5a3e023205dd0d6a87aa88df7d0e17da4c98b",
    "filename": "Chapter1/fib6.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/davecom-ClassicComputerScienceProblemsInPython/Chapter1/fib6.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Chapter1/fib6.py:17:4 Incompatible return type [7]: Expected `int` but got `typing.Generator[int, None, None]`.",
    "message": " Expected `int` but got `typing.Generator[int, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 17,
    "warning_line": "    yield 0  # special case",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# limitations under the License.\ndef fib6(n: int) -> int:\n    yield 0  # special case\n",
        "source_code_len": 86,
        "target_code": "# limitations under the License.\nfrom typing import Generator\n\n\ndef fib6(n: int) -> Generator[int, None, None]:\n    yield 0  # special case\n",
        "target_code_len": 140,
        "diff_format": "@@ -15,3 +15,6 @@\n # limitations under the License.\n-def fib6(n: int) -> int:\n+from typing import Generator\n+\n+\n+def fib6(n: int) -> Generator[int, None, None]:\n     yield 0  # special case\n",
        "source_code_with_indent": "# limitations under the License.\ndef fib6(n: int) -> int:\n    <IND>yield 0  # special case\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# limitations under the License.\nfrom typing import Generator\n\n\ndef fib6(n: int) -> Generator[int, None, None]:\n    <IND>yield 0  # special case\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "davecom/ClassicComputerScienceProblemsInPython",
    "commit": "e7a5a3e023205dd0d6a87aa88df7d0e17da4c98b",
    "filename": "Chapter1/fib6.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/davecom-ClassicComputerScienceProblemsInPython/Chapter1/fib6.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Chapter1/fib6.py:18:14 Incompatible return type [7]: Expected `int` but got `typing.Generator[int, None, None]`.",
    "message": " Expected `int` but got `typing.Generator[int, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 18,
    "warning_line": "    if n > 0: yield 1  # special case",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# limitations under the License.\ndef fib6(n: int) -> int:\n    yield 0  # special case\n",
        "source_code_len": 86,
        "target_code": "# limitations under the License.\nfrom typing import Generator\n\n\ndef fib6(n: int) -> Generator[int, None, None]:\n    yield 0  # special case\n",
        "target_code_len": 140,
        "diff_format": "@@ -15,3 +15,6 @@\n # limitations under the License.\n-def fib6(n: int) -> int:\n+from typing import Generator\n+\n+\n+def fib6(n: int) -> Generator[int, None, None]:\n     yield 0  # special case\n",
        "source_code_with_indent": "# limitations under the License.\ndef fib6(n: int) -> int:\n    <IND>yield 0  # special case\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# limitations under the License.\nfrom typing import Generator\n\n\ndef fib6(n: int) -> Generator[int, None, None]:\n    <IND>yield 0  # special case\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "davecom/ClassicComputerScienceProblemsInPython",
    "commit": "e7a5a3e023205dd0d6a87aa88df7d0e17da4c98b",
    "filename": "Chapter1/fib6.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/davecom-ClassicComputerScienceProblemsInPython/Chapter1/fib6.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Chapter1/fib6.py:23:8 Incompatible return type [7]: Expected `int` but got `typing.Generator[int, None, None]`.",
    "message": " Expected `int` but got `typing.Generator[int, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 23,
    "warning_line": "        yield next  # main generation step",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# limitations under the License.\ndef fib6(n: int) -> int:\n    yield 0  # special case\n",
        "source_code_len": 86,
        "target_code": "# limitations under the License.\nfrom typing import Generator\n\n\ndef fib6(n: int) -> Generator[int, None, None]:\n    yield 0  # special case\n",
        "target_code_len": 140,
        "diff_format": "@@ -15,3 +15,6 @@\n # limitations under the License.\n-def fib6(n: int) -> int:\n+from typing import Generator\n+\n+\n+def fib6(n: int) -> Generator[int, None, None]:\n     yield 0  # special case\n",
        "source_code_with_indent": "# limitations under the License.\ndef fib6(n: int) -> int:\n    <IND>yield 0  # special case\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# limitations under the License.\nfrom typing import Generator\n\n\ndef fib6(n: int) -> Generator[int, None, None]:\n    <IND>yield 0  # special case\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "davecom/ClassicComputerScienceProblemsInPython",
    "commit": "e7a5a3e023205dd0d6a87aa88df7d0e17da4c98b",
    "filename": "Chapter1/unbreakable_encryption.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/davecom-ClassicComputerScienceProblemsInPython/Chapter1/unbreakable_encryption.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Chapter1/unbreakable_encryption.py:26:31 Invalid type [31]: Expression `(int, int)` is not a valid type.",
    "message": " Expression `(int, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 26,
    "warning_line": "def encrypt(original: str) -> (int, int):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from secrets import token_bytes\n\n",
        "source_code_len": 33,
        "target_code": "from secrets import token_bytes\nfrom typing import Tuple\n\n",
        "target_code_len": 58,
        "diff_format": "@@ -16,2 +16,3 @@\n from secrets import token_bytes\n+from typing import Tuple\n \n",
        "source_code_with_indent": "from secrets import token_bytes\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from secrets import token_bytes\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef encrypt(original: str) -> (int, int):\n    original_bytes: bytes = original.encode()\n",
        "source_code_len": 89,
        "target_code": "\ndef encrypt(original: str) -> Tuple[int, int]:\n    original_bytes: bytes = original.encode()\n",
        "target_code_len": 94,
        "diff_format": "@@ -25,3 +26,3 @@\n \n-def encrypt(original: str) -> (int, int):\n+def encrypt(original: str) -> Tuple[int, int]:\n     original_bytes: bytes = original.encode()\n",
        "source_code_with_indent": "\n<DED>def encrypt(original: str) -> (int, int):\n    <IND>original_bytes: bytes = original.encode()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def encrypt(original: str) -> Tuple[int, int]:\n    <IND>original_bytes: bytes = original.encode()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]