[
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "examples/wiki_parser/wiki_dump_parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/examples/wiki_parser/wiki_dump_parse.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/wiki_parser/wiki_dump_parse.py:55:38 Unsupported operand [58]: `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 55,
    "warning_line": "        input('writing next pack: ' + input_pack.meta.doc_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        input('writing next pack: ' + input_pack.meta.doc_id)\n\n        super(WikiArticleWriter, self).process(input_pack)\n",
        "source_code_len": 134,
        "target_code": "        \"\"\"\n        super(WikiArticleWriter, self).process(input_pack)\n",
        "target_code_len": 71,
        "diff_format": "@@ -54,4 +54,2 @@\n         \"\"\"\n-        input('writing next pack: ' + input_pack.meta.doc_id)\n-\n         super(WikiArticleWriter, self).process(input_pack)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        input('writing next pack: ' + input_pack.meta.doc_id)\n\n        super(WikiArticleWriter, self).process(input_pack)\n",
        "target_code_with_indent": "\n        super(WikiArticleWriter, self).process(input_pack)\n"
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/batchers.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/batchers.py:203:4 Inconsistent override [14]: `forte.data.batchers.TxtgenMultiPackProcessingBatcher._get_data_batch_by_need` overrides method defined in `NumInstancesDataPackBatcher` inconsistently. Parameter of type `forte.data.multi_pack.MultiPack` is not a supertype of the overridden parameter `forte.data.data_pack.DataPack`.",
    "message": " `forte.data.batchers.TxtgenMultiPackProcessingBatcher._get_data_batch_by_need` overrides method defined in `NumInstancesDataPackBatcher` inconsistently. Parameter of type `forte.data.multi_pack.MultiPack` is not a supertype of the overridden parameter `forte.data.data_pack.DataPack`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 203,
    "warning_line": "    def _get_data_batch_by_need("
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/batchers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/batchers.py:220:37 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 220,
    "warning_line": "        input_pack = data_pack.packs[self.input_pack_name]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, input_pack_name: str, batch_size: int,\n                 hard_batch: bool = False):\n        super().__init__(batch_size)\n        super(batch_size, hard_batch)\n        self.input_pack_name = input_pack_name\n\n    def _get_data_batch_by_need(\n",
        "source_code_len": 263,
        "target_code": "\n    def __init__(self, config: HParams):\n        super().__init__(config)\n        self.input_pack_name = config.input_pack_name\n\n    # TODO: Principled way of get data from multi pack?\n    def _get_data_batch_by_need(\n",
        "target_code_len": 219,
        "diff_format": "@@ -196,8 +203,7 @@\n \n-    def __init__(self, input_pack_name: str, batch_size: int,\n-                 hard_batch: bool = False):\n-        super().__init__(batch_size)\n-        super(batch_size, hard_batch)\n-        self.input_pack_name = input_pack_name\n-\n+    def __init__(self, config: HParams):\n+        super().__init__(config)\n+        self.input_pack_name = config.input_pack_name\n+\n+    # TODO: Principled way of get data from multi pack?\n     def _get_data_batch_by_need(\n",
        "source_code_with_indent": "\n    def __init__(self, input_pack_name: str, batch_size: int,\n                 hard_batch: bool = False):\n        <IND>super().__init__(batch_size)\n        super(batch_size, hard_batch)\n        self.input_pack_name = input_pack_name\n\n    <DED>def _get_data_batch_by_need(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, config: HParams):\n        <IND>super().__init__(config)\n        self.input_pack_name = config.input_pack_name\n\n    # TODO: Principled way of get data from multi pack?\n    <DED>def _get_data_batch_by_need(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:200:12 Incompatible variable type [9]: pack is declared to have type `Variable[PackType (bound to forte.data.base_pack.BasePack)]` but is used as type `None`.",
    "message": " pack is declared to have type `Variable[PackType (bound to forte.data.base_pack.BasePack)]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 200,
    "warning_line": "            pack: PackType = None,"
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:233:8 Incompatible attribute type [8]: Attribute `_parent` declared in class `BaseLink` has type `Optional[str]` but is used as type `Hashable`.",
    "message": " Attribute `_parent` declared in class `BaseLink` has type `Optional[str]` but is used as type `Hashable`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 233,
    "warning_line": "        self._parent = parent.index_key",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                f\"instance of {self.ParentType}, but get {type(parent)}\")\n        self._parent = parent.index_key\n\n",
        "source_code_len": 115,
        "target_code": "                f\"instance of {self.ParentType}, but get {type(parent)}\")\n        self._parent = parent.tid\n\n",
        "target_code_len": 109,
        "diff_format": "@@ -232,3 +302,3 @@\n                 f\"instance of {self.ParentType}, but get {type(parent)}\")\n-        self._parent = parent.index_key\n+        self._parent = parent.tid\n \n",
        "source_code_with_indent": "                f\"instance of {self.ParentType}, but get {type(parent)}\")\n        <DED>self._parent = parent.index_key\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                f\"instance of {self.ParentType}, but get {type(parent)}\")\n        <DED>self._parent = parent.tid\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:254:8 Incompatible attribute type [8]: Attribute `_child` declared in class `BaseLink` has type `Optional[str]` but is used as type `Hashable`.",
    "message": " Attribute `_child` declared in class `BaseLink` has type `Optional[str]` but is used as type `Hashable`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 254,
    "warning_line": "        self._child = child.index_key",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                f\"instance of {self.ParentType}, but get {type(child)}\")\n        self._child = child.index_key\n\n",
        "source_code_len": 112,
        "target_code": "                f\"instance of {self.ParentType}, but get {type(child)}\")\n        self._child = child.tid\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -253,3 +326,3 @@\n                 f\"instance of {self.ParentType}, but get {type(child)}\")\n-        self._child = child.index_key\n+        self._child = child.tid\n \n",
        "source_code_with_indent": "                f\"instance of {self.ParentType}, but get {type(child)}\")\n        <DED>self._child = child.index_key\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                f\"instance of {self.ParentType}, but get {type(child)}\")\n        <DED>self._child = child.tid\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:283:0 Invalid type [31]: Expression `Variable[LinkType (bound to forte.data.ontology.top.BaseLink[Variable[forte.data.ontology.top.EntryType (bound to forte.data.ontology.top.Entry[Variable[forte.data.base_pack.PackType (bound to forte.data.base_pack.BasePack)]])]])]` is not a valid type. Type variables cannot contain other type variables in their constraints.",
    "message": " Expression `Variable[LinkType (bound to forte.data.ontology.top.BaseLink[Variable[forte.data.ontology.top.EntryType (bound to forte.data.ontology.top.Entry[Variable[forte.data.base_pack.PackType (bound to forte.data.base_pack.BasePack)]])]])]` is not a valid type. Type variables cannot contain other type variables in their constraints.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 283,
    "warning_line": "LinkType = TypeVar('LinkType', bound=BaseLink[EntryType[PackType]])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    @abstractmethod\n    def get_parent(self) -> EntryType:\n        \"\"\"\n        Get the parent entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_child(self) -> EntryType:\n        \"\"\"\n        Get the child entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n\nLinkType = TypeVar('LinkType', bound=BaseLink[EntryType[PackType]])\n\n\nclass Link(BaseLink):\n    \"\"\"\n    Link type entries, such as \"predicate link\". Each link has a parent node\n    and a child node.\n    \"\"\"\n\n    def __init__(\n            self,\n            pack: DataPack = None,\n            parent: Optional[Entry] = None,\n            child: Optional[Entry] = None\n    ):\n        super().__init__(pack)\n        self._parent: Optional[str] = None\n        self._child: Optional[str] = None\n        if parent is not None:\n            self.set_parent(parent)\n        if child is not None:\n            self.set_child(child)\n\n    def hash(self):\n        return hash((type(self), self.parent, self.child))\n\n    def eq(self, other):\n        return (type(self), self.parent, self.child) == \\\n               (type(other), other.parent, other.child)\n\n    @property\n",
        "source_code_len": 1430,
        "target_code": "\n    @property\n",
        "target_code_len": 15,
        "diff_format": "@@ -259,55 +332,2 @@\n \n-    @abstractmethod\n-    def get_parent(self) -> EntryType:\n-        \"\"\"\n-        Get the parent entry of the link.\n-\n-        Returns:\n-             An instance of :class:`Entry` that is the child of the link\n-             from the given DataPack\n-        \"\"\"\n-        raise NotImplementedError\n-\n-    @abstractmethod\n-    def get_child(self) -> EntryType:\n-        \"\"\"\n-        Get the child entry of the link.\n-\n-        Returns:\n-             An instance of :class:`Entry` that is the child of the link\n-             from the given DataPack\n-        \"\"\"\n-        raise NotImplementedError\n-\n-\n-LinkType = TypeVar('LinkType', bound=BaseLink[EntryType[PackType]])\n-\n-\n-class Link(BaseLink):\n-    \"\"\"\n-    Link type entries, such as \"predicate link\". Each link has a parent node\n-    and a child node.\n-    \"\"\"\n-\n-    def __init__(\n-            self,\n-            pack: DataPack = None,\n-            parent: Optional[Entry] = None,\n-            child: Optional[Entry] = None\n-    ):\n-        super().__init__(pack)\n-        self._parent: Optional[str] = None\n-        self._child: Optional[str] = None\n-        if parent is not None:\n-            self.set_parent(parent)\n-        if child is not None:\n-            self.set_child(child)\n-\n-    def hash(self):\n-        return hash((type(self), self.parent, self.child))\n-\n-    def eq(self, other):\n-        return (type(self), self.parent, self.child) == \\\n-               (type(other), other.parent, other.child)\n-\n     @property\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "\n    <DED><DED>@property\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "\n    <DED><DED>@abstractmethod\n    def get_parent(self) -> EntryType:\n        <IND>\"\"\"\n        Get the parent entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n    <DED>@abstractmethod\n    def get_child(self) -> EntryType:\n        <IND>\"\"\"\n        Get the child entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n\n<DED><DED>LinkType = TypeVar('LinkType', bound=BaseLink[EntryType[PackType]])\n\n\nclass Link(BaseLink):\n    <IND>\"\"\"\n    Link type entries, such as \"predicate link\". Each link has a parent node\n    and a child node.\n    \"\"\"\n\n    def __init__(\n            self,\n            pack: DataPack = None,\n            parent: Optional[Entry] = None,\n            child: Optional[Entry] = None\n    ):\n        <IND>super().__init__(pack)\n        self._parent: Optional[str] = None\n        self._child: Optional[str] = None\n        if parent is not None:\n            <IND>self.set_parent(parent)\n        <DED>if child is not None:\n            <IND>self.set_child(child)\n\n    <DED><DED>def hash(self):\n        <IND>return hash((type(self), self.parent, self.child))\n\n    <DED>def eq(self, other):\n        <IND>return (type(self), self.parent, self.child) ==               (type(other), other.parent, other.child)\n\n    <DED>@property\n"
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:294:12 Incompatible variable type [9]: pack is declared to have type `DataPack` but is used as type `None`.",
    "message": " pack is declared to have type `DataPack` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 294,
    "warning_line": "            pack: DataPack = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    @abstractmethod\n    def get_parent(self) -> EntryType:\n        \"\"\"\n        Get the parent entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_child(self) -> EntryType:\n        \"\"\"\n        Get the child entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n\nLinkType = TypeVar('LinkType', bound=BaseLink[EntryType[PackType]])\n\n\nclass Link(BaseLink):\n    \"\"\"\n    Link type entries, such as \"predicate link\". Each link has a parent node\n    and a child node.\n    \"\"\"\n\n    def __init__(\n            self,\n            pack: DataPack = None,\n            parent: Optional[Entry] = None,\n            child: Optional[Entry] = None\n    ):\n        super().__init__(pack)\n        self._parent: Optional[str] = None\n        self._child: Optional[str] = None\n        if parent is not None:\n            self.set_parent(parent)\n        if child is not None:\n            self.set_child(child)\n\n    def hash(self):\n        return hash((type(self), self.parent, self.child))\n\n    def eq(self, other):\n        return (type(self), self.parent, self.child) == \\\n               (type(other), other.parent, other.child)\n\n    @property\n",
        "source_code_len": 1430,
        "target_code": "\n    @property\n",
        "target_code_len": 15,
        "diff_format": "@@ -259,55 +332,2 @@\n \n-    @abstractmethod\n-    def get_parent(self) -> EntryType:\n-        \"\"\"\n-        Get the parent entry of the link.\n-\n-        Returns:\n-             An instance of :class:`Entry` that is the child of the link\n-             from the given DataPack\n-        \"\"\"\n-        raise NotImplementedError\n-\n-    @abstractmethod\n-    def get_child(self) -> EntryType:\n-        \"\"\"\n-        Get the child entry of the link.\n-\n-        Returns:\n-             An instance of :class:`Entry` that is the child of the link\n-             from the given DataPack\n-        \"\"\"\n-        raise NotImplementedError\n-\n-\n-LinkType = TypeVar('LinkType', bound=BaseLink[EntryType[PackType]])\n-\n-\n-class Link(BaseLink):\n-    \"\"\"\n-    Link type entries, such as \"predicate link\". Each link has a parent node\n-    and a child node.\n-    \"\"\"\n-\n-    def __init__(\n-            self,\n-            pack: DataPack = None,\n-            parent: Optional[Entry] = None,\n-            child: Optional[Entry] = None\n-    ):\n-        super().__init__(pack)\n-        self._parent: Optional[str] = None\n-        self._child: Optional[str] = None\n-        if parent is not None:\n-            self.set_parent(parent)\n-        if child is not None:\n-            self.set_child(child)\n-\n-    def hash(self):\n-        return hash((type(self), self.parent, self.child))\n-\n-    def eq(self, other):\n-        return (type(self), self.parent, self.child) == \\\n-               (type(other), other.parent, other.child)\n-\n     @property\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "\n    <DED><DED>@property\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "\n    <DED><DED>@abstractmethod\n    def get_parent(self) -> EntryType:\n        <IND>\"\"\"\n        Get the parent entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n    <DED>@abstractmethod\n    def get_child(self) -> EntryType:\n        <IND>\"\"\"\n        Get the child entry of the link.\n\n        Returns:\n             An instance of :class:`Entry` that is the child of the link\n             from the given DataPack\n        \"\"\"\n        raise NotImplementedError\n\n\n<DED><DED>LinkType = TypeVar('LinkType', bound=BaseLink[EntryType[PackType]])\n\n\nclass Link(BaseLink):\n    <IND>\"\"\"\n    Link type entries, such as \"predicate link\". Each link has a parent node\n    and a child node.\n    \"\"\"\n\n    def __init__(\n            self,\n            pack: DataPack = None,\n            parent: Optional[Entry] = None,\n            child: Optional[Entry] = None\n    ):\n        <IND>super().__init__(pack)\n        self._parent: Optional[str] = None\n        self._child: Optional[str] = None\n        if parent is not None:\n            <IND>self.set_parent(parent)\n        <DED>if child is not None:\n            <IND>self.set_child(child)\n\n    <DED><DED>def hash(self):\n        <IND>return hash((type(self), self.parent, self.child))\n\n    <DED>def eq(self, other):\n        <IND>return (type(self), self.parent, self.child) ==               (type(other), other.parent, other.child)\n\n    <DED>@property\n"
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:370:12 Incompatible variable type [9]: pack is declared to have type `Variable[PackType (bound to forte.data.base_pack.BasePack)]` but is used as type `None`.",
    "message": " pack is declared to have type `Variable[PackType (bound to forte.data.base_pack.BasePack)]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 370,
    "warning_line": "            pack: PackType = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self,\n            pack: PackType = None,\n            members: Optional[Set[Entry]] = None,\n    ):\n",
        "source_code_len": 110,
        "target_code": "            self,\n            pack: PackType,\n            members: Optional[Set[EntryType]] = None,\n    ):\n",
        "target_code_len": 107,
        "diff_format": "@@ -369,4 +386,4 @@\n             self,\n-            pack: PackType = None,\n-            members: Optional[Set[Entry]] = None,\n+            pack: PackType,\n+            members: Optional[Set[EntryType]] = None,\n     ):\n",
        "source_code_with_indent": "            self,\n            pack: PackType = None,\n            members: Optional[Set[Entry]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self,\n            pack: PackType,\n            members: Optional[Set[EntryType]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:453:0 Invalid type [31]: Expression `Variable[GroupType (bound to forte.data.ontology.top.BaseGroup[Variable[forte.data.ontology.top.EntryType (bound to forte.data.ontology.top.Entry[Variable[forte.data.base_pack.PackType (bound to forte.data.base_pack.BasePack)]])]])]` is not a valid type. Type variables cannot contain other type variables in their constraints.",
    "message": " Expression `Variable[GroupType (bound to forte.data.ontology.top.BaseGroup[Variable[forte.data.ontology.top.EntryType (bound to forte.data.ontology.top.Entry[Variable[forte.data.base_pack.PackType (bound to forte.data.base_pack.BasePack)]])]])]` is not a valid type. Type variables cannot contain other type variables in their constraints.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 453,
    "warning_line": "GroupType = TypeVar(\"GroupType\", bound=BaseGroup[EntryType[PackType]])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nGroupType = TypeVar(\"GroupType\", bound=BaseGroup[EntryType[PackType]])\n\n",
        "source_code_len": 73,
        "target_code": "\nGroupType = TypeVar(\"GroupType\", bound=BaseGroup)\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -452,3 +468,3 @@\n \n-GroupType = TypeVar(\"GroupType\", bound=BaseGroup[EntryType[PackType]])\n+GroupType = TypeVar(\"GroupType\", bound=BaseGroup)\n \n",
        "source_code_with_indent": "\n<DED><DED>GroupType = TypeVar(\"GroupType\", bound=BaseGroup[EntryType[PackType]])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>GroupType = TypeVar(\"GroupType\", bound=BaseGroup)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:654:8 Incompatible attribute type [8]: Attribute `_parent` declared in class `MultiPackLink` has type `Optional[Tuple[int, str]]` but is used as type `BoundMethod[typing.Callable(SubEntry.index_key)[[Named(self, SubEntry)], Tuple[int, str]], SubEntry]`.",
    "message": " Attribute `_parent` declared in class `MultiPackLink` has type `Optional[Tuple[int, str]]` but is used as type `BoundMethod[typing.Callable(SubEntry.index_key)[[Named(self, SubEntry)], Tuple[int, str]], SubEntry]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 654,
    "warning_line": "        self._parent = parent.index_key",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __hash__(self):\n        return hash((type(self), self._pack_index, self._entry.hash()))\n\n    def index_key(self) -> Tuple[int, str]:\n",
        "source_code_len": 141,
        "target_code": "    def __hash__(self):\n        return hash((type(self), self._pack_index, self._entry))\n\n    def __eq__(self, other):\n        if other is None:\n            return False\n        return (type(self), self.pack_index, self.entry\n                ) == (type(other), other.pack_index, other.entry)\n\n    @property\n    def index_key(self) -> Tuple[int, str]:\n",
        "target_code_len": 351,
        "diff_format": "@@ -579,4 +518,11 @@\n     def __hash__(self):\n-        return hash((type(self), self._pack_index, self._entry.hash()))\n-\n+        return hash((type(self), self._pack_index, self._entry))\n+\n+    def __eq__(self, other):\n+        if other is None:\n+            return False\n+        return (type(self), self.pack_index, self.entry\n+                ) == (type(other), other.pack_index, other.entry)\n+\n+    @property\n     def index_key(self) -> Tuple[int, str]:\n",
        "source_code_with_indent": "    <DED>def __hash__(self):\n        <IND>return hash((type(self), self._pack_index, self._entry.hash()))\n\n    <DED>def index_key(self) -> Tuple[int, str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __hash__(self):\n        <IND>return hash((type(self), self._pack_index, self._entry))\n\n    <DED>def __eq__(self, other):\n        <IND>if other is None:\n            <IND>return False\n        <DED>return (type(self), self.pack_index, self.entry\n                ) == (type(other), other.pack_index, other.entry)\n\n    <DED>@property\n    def index_key(self) -> Tuple[int, str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/top.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/top.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/top.py:703:4 Inconsistent override [14]: `forte.data.ontology.top.MultiPackGroup.add_members` overrides method defined in `BaseGroup` inconsistently. Parameter of type `Iterable[Tuple[str, Entry[typing.Any]]]` is not a supertype of the overridden parameter `Iterable[Entry[typing.Any]]`.",
    "message": " `forte.data.ontology.top.MultiPackGroup.add_members` overrides method defined in `BaseGroup` inconsistently. Parameter of type `Iterable[Tuple[str, Entry[typing.Any]]]` is not a supertype of the overridden parameter `Iterable[Entry[typing.Any]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 703,
    "warning_line": "    def add_members(self, members: Iterable[Tuple[str, Entry]]):"
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/ontology/wiki_ontology.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/wiki_ontology.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/ontology/wiki_ontology.py:33:25 Incompatible parameter type [6]: Expected `forte.data.multi_pack.MultiPack` for 1st positional only parameter to call `MultiPackLink.__init__` but got `MultiPackLink`.",
    "message": " Expected `forte.data.multi_pack.MultiPack` for 1st positional only parameter to call `MultiPackLink.__init__` but got `MultiPackLink`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "        super().__init__(pack, anchor, page)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import forte.data.ontology.base_ontology as ontology\nfrom forte.data.data_pack import DataPack\n",
        "source_code_len": 95,
        "target_code": "import forte.data.ontology.base_ontology as ontology\nfrom forte.data import MultiPack\nfrom forte.data.data_pack import DataPack\n",
        "target_code_len": 128,
        "diff_format": "@@ -3,2 +3,3 @@\n import forte.data.ontology.base_ontology as ontology\n+from forte.data import MultiPack\n from forte.data.data_pack import DataPack\n",
        "source_code_with_indent": "import forte.data.ontology.base_ontology as ontology\nfrom forte.data.data_pack import DataPack\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import forte.data.ontology.base_ontology as ontology\nfrom forte.data import MultiPack\nfrom forte.data.data_pack import DataPack\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class WikiAnchorLink(MultiPackLink):\n    def __init__(self, pack: MultiPackLink, anchor: WikiAnchor, page: WikiPage):\n        super().__init__(pack, anchor, page)\n",
        "source_code_len": 163,
        "target_code": "class WikiAnchorLink(MultiPackLink):\n    def __init__(self, pack: MultiPack, anchor: WikiAnchor, page: WikiPage):\n        super().__init__(pack, anchor, page)\n",
        "target_code_len": 159,
        "diff_format": "@@ -31,3 +32,3 @@\n class WikiAnchorLink(MultiPackLink):\n-    def __init__(self, pack: MultiPackLink, anchor: WikiAnchor, page: WikiPage):\n+    def __init__(self, pack: MultiPack, anchor: WikiAnchor, page: WikiPage):\n         super().__init__(pack, anchor, page)\n",
        "source_code_with_indent": "<DED><DED>class WikiAnchorLink(MultiPackLink):\n    <IND>def __init__(self, pack: MultiPackLink, anchor: WikiAnchor, page: WikiPage):\n        <IND>super().__init__(pack, anchor, page)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>class WikiAnchorLink(MultiPackLink):\n    <IND>def __init__(self, pack: MultiPack, anchor: WikiAnchor, page: WikiPage):\n        <IND>super().__init__(pack, anchor, page)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/readers/file_reader.py",
    "min_patch_found": false,
    "full_warning_msg": "forte/data/readers/file_reader.py:28:4 Inconsistent override [14]: `forte.data.readers.file_reader.MonoFileReader._cache_key_function` overrides method defined in `forte.data.readers.base_reader.BaseReader` inconsistently. Could not find parameter `collection` in overriding signature.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/readers/file_reader.py'",
    "dd_fail": true
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/readers/file_reader.py",
    "min_patch_found": false,
    "full_warning_msg": "forte/data/readers/file_reader.py:41:4 Inconsistent override [14]: `forte.data.readers.file_reader.MonoFileReader.parse_pack` overrides method defined in `forte.data.readers.base_reader.BaseReader` inconsistently. Could not find parameter `collection` in overriding signature.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/readers/file_reader.py'",
    "dd_fail": true
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/readers/file_reader.py",
    "min_patch_found": false,
    "full_warning_msg": "forte/data/readers/file_reader.py:41:4 Inconsistent override [15]: `forte.data.readers.file_reader.MonoFileReader.parse_pack` overrides method defined in `forte.data.readers.base_reader.BaseReader` inconsistently. Returned type `Variable[PackType (bound to forte.data.base_pack.BasePack)]` is not a subtype of the overridden return `DataPack`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/readers/file_reader.py'",
    "dd_fail": true
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/readers/wikipedia/dump_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/readers/wikipedia/dump_reader.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/readers/wikipedia/dump_reader.py:35:23 Incompatible variable type [9]: links_to_ignore is declared to have type `Set[str]` but is used as type `None`.",
    "message": " links_to_ignore is declared to have type `Set[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "    def __init__(self, links_to_ignore: Set[str] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_len": 77,
        "target_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -13,3 +13,3 @@\n import logging\n-from typing import Any, Iterator, Dict, Iterable, Tuple, Set\n+from typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class WikiDumpReader(PackReader):\n    def __init__(self, links_to_ignore: Set[str] = None):\n        super().__init__()\n",
        "source_code_len": 119,
        "target_code": "class WikiDumpReader(PackReader):\n    def __init__(self, links_to_ignore: Optional[Set[str]] = None):\n        super().__init__()\n",
        "target_code_len": 129,
        "diff_format": "@@ -34,3 +34,3 @@\n class WikiDumpReader(PackReader):\n-    def __init__(self, links_to_ignore: Set[str] = None):\n+    def __init__(self, links_to_ignore: Optional[Set[str]] = None):\n         super().__init__()\n",
        "source_code_with_indent": "class WikiDumpReader(PackReader):\n    <IND>def __init__(self, links_to_ignore: Set[str] = None):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class WikiDumpReader(PackReader):\n    <IND>def __init__(self, links_to_ignore: Optional[Set[str]] = None):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/readers/wikipedia/dump_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/readers/wikipedia/dump_reader.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/readers/wikipedia/dump_reader.py:63:4 Inconsistent override [14]: `forte.data.readers.wikipedia.dump_reader.WikiDumpReader._collect` overrides method defined in `forte.data.readers.base_reader.BaseReader` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "message": " `forte.data.readers.wikipedia.dump_reader.WikiDumpReader._collect` overrides method defined in `forte.data.readers.base_reader.BaseReader` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 63,
    "warning_line": "    def _collect(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_len": 77,
        "target_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -13,3 +13,3 @@\n import logging\n-from typing import Any, Iterator, Dict, Iterable, Tuple, Set\n+from typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _collect(\n            self,\n            wiki_dump_file: str,\n            redirects: Dict[str, str] = None,\n    ) -> Iterator[Tuple]:\n",
        "source_code_len": 142,
        "target_code": "\n    def _collect(  # type: ignore\n            self,\n            wiki_dump_file: str,\n            redirects: Optional[Dict[str, str]] = None,\n    ) -> Iterator[Tuple]:\n",
        "target_code_len": 168,
        "diff_format": "@@ -62,6 +62,6 @@\n \n-    def _collect(\n+    def _collect(  # type: ignore\n             self,\n             wiki_dump_file: str,\n-            redirects: Dict[str, str] = None,\n+            redirects: Optional[Dict[str, str]] = None,\n     ) -> Iterator[Tuple]:\n",
        "source_code_with_indent": "\n    <DED>def _collect(\n            self,\n            wiki_dump_file: str,\n            redirects: Dict[str, str] = None,\n    ) -> Iterator[Tuple]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _collect(  # type: ignore\n            self,\n            wiki_dump_file: str,\n            redirects: Optional[Dict[str, str]] = None,\n    ) -> Iterator[Tuple]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/readers/wikipedia/dump_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/readers/wikipedia/dump_reader.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/readers/wikipedia/dump_reader.py:63:4 Inconsistent override [14]: `forte.data.readers.wikipedia.dump_reader.WikiDumpReader._collect` overrides method defined in `forte.data.readers.base_reader.BaseReader` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "message": " `forte.data.readers.wikipedia.dump_reader.WikiDumpReader._collect` overrides method defined in `forte.data.readers.base_reader.BaseReader` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 63,
    "warning_line": "    def _collect(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_len": 77,
        "target_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -13,3 +13,3 @@\n import logging\n-from typing import Any, Iterator, Dict, Iterable, Tuple, Set\n+from typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _collect(\n            self,\n            wiki_dump_file: str,\n            redirects: Dict[str, str] = None,\n    ) -> Iterator[Tuple]:\n",
        "source_code_len": 142,
        "target_code": "\n    def _collect(  # type: ignore\n            self,\n            wiki_dump_file: str,\n            redirects: Optional[Dict[str, str]] = None,\n    ) -> Iterator[Tuple]:\n",
        "target_code_len": 168,
        "diff_format": "@@ -62,6 +62,6 @@\n \n-    def _collect(\n+    def _collect(  # type: ignore\n             self,\n             wiki_dump_file: str,\n-            redirects: Dict[str, str] = None,\n+            redirects: Optional[Dict[str, str]] = None,\n     ) -> Iterator[Tuple]:\n",
        "source_code_with_indent": "\n    <DED>def _collect(\n            self,\n            wiki_dump_file: str,\n            redirects: Dict[str, str] = None,\n    ) -> Iterator[Tuple]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _collect(  # type: ignore\n            self,\n            wiki_dump_file: str,\n            redirects: Optional[Dict[str, str]] = None,\n    ) -> Iterator[Tuple]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/readers/wikipedia/dump_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/readers/wikipedia/dump_reader.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/readers/wikipedia/dump_reader.py:66:12 Incompatible variable type [9]: redirects is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " redirects is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "            redirects: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_len": 77,
        "target_code": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -13,3 +13,3 @@\n import logging\n-from typing import Any, Iterator, Dict, Iterable, Tuple, Set\n+from typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Iterator, Dict, Iterable, Tuple, Set, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _collect(\n            self,\n            wiki_dump_file: str,\n            redirects: Dict[str, str] = None,\n    ) -> Iterator[Tuple]:\n",
        "source_code_len": 142,
        "target_code": "\n    def _collect(  # type: ignore\n            self,\n            wiki_dump_file: str,\n            redirects: Optional[Dict[str, str]] = None,\n    ) -> Iterator[Tuple]:\n",
        "target_code_len": 168,
        "diff_format": "@@ -62,6 +62,6 @@\n \n-    def _collect(\n+    def _collect(  # type: ignore\n             self,\n             wiki_dump_file: str,\n-            redirects: Dict[str, str] = None,\n+            redirects: Optional[Dict[str, str]] = None,\n     ) -> Iterator[Tuple]:\n",
        "source_code_with_indent": "\n    <DED>def _collect(\n            self,\n            wiki_dump_file: str,\n            redirects: Dict[str, str] = None,\n    ) -> Iterator[Tuple]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _collect(  # type: ignore\n            self,\n            wiki_dump_file: str,\n            redirects: Optional[Dict[str, str]] = None,\n    ) -> Iterator[Tuple]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/selector.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/selector.py:43:31 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `forte.data.data_pack.DataPack`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `forte.data.data_pack.DataPack`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 43,
    "warning_line": "        return data_pack.packs[self.select_name]"
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/selector.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/selector.py:62:35 Incompatible parameter type [6]: Expected `typing.Dict[str, forte.data.data_pack.DataPack]` for 1st positional only parameter to call `forte.data.multi_pack.MultiPack.update_pack` but got `forte.data.data_pack.DataPack`.",
    "message": " Expected `typing.Dict[str, forte.data.data_pack.DataPack]` for 1st positional only parameter to call `forte.data.multi_pack.MultiPack.update_pack` but got `forte.data.data_pack.DataPack`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 62,
    "warning_line": "            ret_pack.update_pack(**{name: data_pack.packs[name]})"
  },
  {
    "project": "asyml/forte",
    "commit": "ef9fc940ffbad25a84ab370be5a93e806a3ef836",
    "filename": "forte/data/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/selector.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/selector.py:62:58 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 62,
    "warning_line": "            ret_pack.update_pack(**{name: data_pack.packs[name]})"
  }
]