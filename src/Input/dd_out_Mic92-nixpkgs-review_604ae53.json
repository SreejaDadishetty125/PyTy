[
  {
    "project": "Mic92/nixpkgs-review",
    "commit": "604ae535347f66702615bd7c8b23bd419b33aec3",
    "filename": "nix_review/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Mic92-nixpkgs-review/nix_review/app.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nix_review/app.py:74:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 74,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Generator\n\n",
        "source_code_len": 74,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Generator, Optional\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -6,3 +6,3 @@\n from contextlib import contextmanager\n-from typing import List, Generator\n+from typing import List, Generator, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Generator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Generator, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef find_nixpkgs_root() -> str:\n    prefix = [\".\"]\n",
        "source_code_len": 52,
        "target_code": "\ndef find_nixpkgs_root() -> Optional[str]:\n    prefix = [\".\"]\n",
        "target_code_len": 62,
        "diff_format": "@@ -64,3 +64,3 @@\n \n-def find_nixpkgs_root() -> str:\n+def find_nixpkgs_root() -> Optional[str]:\n     prefix = [\".\"]\n",
        "source_code_with_indent": "\n<DED>def find_nixpkgs_root() -> str:\n    <IND>prefix = [\".\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def find_nixpkgs_root() -> Optional[str]:\n    <IND>prefix = [\".\"]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        die(\"Has to be execute from nixpkgs repository\")\n\n    os.chdir(root)\n\n",
        "source_code_len": 78,
        "target_code": "        die(\"Has to be execute from nixpkgs repository\")\n    else:\n        os.chdir(root)\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -98,4 +98,4 @@\n         die(\"Has to be execute from nixpkgs repository\")\n-\n-    os.chdir(root)\n+    else:\n+        os.chdir(root)\n \n",
        "source_code_with_indent": "        <IND>die(\"Has to be execute from nixpkgs repository\")\n\n    <DED>os.chdir(root)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>die(\"Has to be execute from nixpkgs repository\")\n    <DED>else:\n        <IND>os.chdir(root)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Mic92/nixpkgs-review",
    "commit": "604ae535347f66702615bd7c8b23bd419b33aec3",
    "filename": "nix_review/review.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Mic92-nixpkgs-review/nix_review/review.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nix_review/review.py:101:8 Incompatible return type [7]: Expected `Dict[str, typing.Any]` but got `None`.",
    "message": " Expected `Dict[str, typing.Any]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 101,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import shlex\nfrom typing import List, Dict, Tuple, Any, DefaultDict, Set\n\n",
        "source_code_len": 74,
        "target_code": "import shlex\nfrom typing import List, Dict, Tuple, Any, DefaultDict, Set, Optional\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -11,3 +11,3 @@\n import shlex\n-from typing import List, Dict, Tuple, Any, DefaultDict, Set\n+from typing import List, Dict, Tuple, Any, DefaultDict, Set, Optional\n \n",
        "source_code_with_indent": "import shlex\nfrom typing import List, Dict, Tuple, Any, DefaultDict, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import shlex\nfrom typing import List, Dict, Tuple, Any, DefaultDict, Set, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_borg_eval_gist(self, pr: Dict[str, Any]) -> Dict[str, Any]:\n        packages_per_system: DefaultDict[str, list] = defaultdict(list)\n",
        "source_code_len": 145,
        "target_code": "\n    def get_borg_eval_gist(self, pr: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n        packages_per_system: DefaultDict[str, list] = defaultdict(list)\n",
        "target_code_len": 155,
        "diff_format": "@@ -84,3 +84,3 @@\n \n-    def get_borg_eval_gist(self, pr: Dict[str, Any]) -> Dict[str, Any]:\n+    def get_borg_eval_gist(self, pr: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n         packages_per_system: DefaultDict[str, list] = defaultdict(list)\n",
        "source_code_with_indent": "\n    <DED><DED>def get_borg_eval_gist(self, pr: Dict[str, Any]) -> Dict[str, Any]:\n        <IND>packages_per_system: DefaultDict[str, list] = defaultdict(list)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def get_borg_eval_gist(self, pr: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n        <IND>packages_per_system: DefaultDict[str, list] = defaultdict(list)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]