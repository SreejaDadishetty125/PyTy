[
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/cmd.py",
    "min_patch_found": false,
    "full_warning_msg": "pytermgui/cmd.py:66:12 Incompatible variable type [9]: window is declared to have type `pytermgui.window_manager.Window` but is used as type `pytermgui.widgets.base.Container`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/widgets/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/widgets/base.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/widgets/base.py:956:59 Incompatible parameter type [6]: Expected `MouseTarget` for 1st positional only parameter to call `list.index` but got `Optional[MouseTarget]`.",
    "message": " Expected `MouseTarget` for 1st positional only parameter to call `list.index` but got `Optional[MouseTarget]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 956,
    "warning_line": "                self.select(i + widget.mouse_targets.index(target))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if widget.handle_mouse(event, target):\n                self.select(i + widget.mouse_targets.index(target))\n",
        "source_code_len": 119,
        "target_code": "            if widget.handle_mouse(event, target):\n                assert isinstance(target, MouseTarget)\n                self.select(i + widget.mouse_targets.index(target))\n",
        "target_code_len": 174,
        "diff_format": "@@ -955,2 +955,3 @@\n             if widget.handle_mouse(event, target):\n+                assert isinstance(target, MouseTarget)\n                 self.select(i + widget.mouse_targets.index(target))\n",
        "source_code_with_indent": "            if widget.handle_mouse(event, target):\n                <IND>self.select(i + widget.mouse_targets.index(target))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if widget.handle_mouse(event, target):\n                <IND>assert isinstance(target, MouseTarget)\n                self.select(i + widget.mouse_targets.index(target))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:145:25 Incompatible parameter type [6]: Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `Container.__init__` but got `str`.",
    "message": " Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `Container.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "        root = Container(self.debug(), width=10)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        root = Container(self.debug(), width=10)\n        root.forced_width = self.right - self.left\n",
        "source_code_len": 101,
        "target_code": "\n        root = Container(width=10)\n        root += self.debug()\n        root.forced_width = self.right - self.left\n",
        "target_code_len": 116,
        "diff_format": "@@ -144,3 +144,4 @@\n \n-        root = Container(self.debug(), width=10)\n+        root = Container(width=10)\n+        root += self.debug()\n         root.forced_width = self.right - self.left\n",
        "source_code_with_indent": "\n        root = Container(self.debug(), width=10)\n        root.forced_width = self.right - self.left\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        root = Container(width=10)\n        root += self.debug()\n        root.forced_width = self.right - self.left\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:466:25 Incompatible parameter type [6]: Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `pytermgui.widgets.base.MouseTarget.click` but got `Optional[pytermgui.widgets.base.Widget]`.",
    "message": " Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `pytermgui.widgets.base.MouseTarget.click` but got `Optional[pytermgui.widgets.base.Widget]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 466,
    "warning_line": "            target.click(window.selected)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            window.select(window.mouse_targets.index(target))\n            target.click(window.selected)\n",
        "source_code_len": 104,
        "target_code": "            window.select(window.mouse_targets.index(target))\n            assert isinstance(window.selected, Widget)\n            target.click(window.selected)\n",
        "target_code_len": 159,
        "diff_format": "@@ -465,2 +481,3 @@\n             window.select(window.mouse_targets.index(target))\n+            assert isinstance(window.selected, Widget)\n             target.click(window.selected)\n",
        "source_code_with_indent": "            <IND>window.select(window.mouse_targets.index(target))\n            target.click(window.selected)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>window.select(window.mouse_targets.index(target))\n            assert isinstance(window.selected, Widget)\n            target.click(window.selected)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:533:35 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 533,
    "warning_line": "            del self._window_cache[id(window)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._window_cache: dict[str, list[str]] = {}\n\n",
        "source_code_len": 56,
        "target_code": "\n        self._window_cache: dict[int, list[str]] = {}\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -257,3 +273,3 @@\n \n-        self._window_cache: dict[str, list[str]] = {}\n+        self._window_cache: dict[int, list[str]] = {}\n \n",
        "source_code_with_indent": "\n        self._window_cache: dict[str, list[str]] = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._window_cache: dict[int, list[str]] = {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:560:12 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 560,
    "warning_line": "            self._handle_mouse(key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def process_input(self) -> bool:\n        \"\"\"Process incoming input, set should_print\"\"\"\n",
        "source_code_len": 93,
        "target_code": "\n    def process_input(self) -> None:\n        \"\"\"Process incoming input, set should_print\"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -549,3 +568,3 @@\n \n-    def process_input(self) -> bool:\n+    def process_input(self) -> None:\n         \"\"\"Process incoming input, set should_print\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def process_input(self) -> bool:\n        <IND>\"\"\"Process incoming input, set should_print\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def process_input(self) -> None:\n        <IND>\"\"\"Process incoming input, set should_print\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:602:42 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 602,
    "warning_line": "                return self._window_cache[id(window)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._window_cache: dict[str, list[str]] = {}\n\n",
        "source_code_len": 56,
        "target_code": "\n        self._window_cache: dict[int, list[str]] = {}\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -257,3 +273,3 @@\n \n-        self._window_cache: dict[str, list[str]] = {}\n+        self._window_cache: dict[int, list[str]] = {}\n \n",
        "source_code_with_indent": "\n        self._window_cache: dict[str, list[str]] = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._window_cache: dict[int, list[str]] = {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:610:31 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 610,
    "warning_line": "            self._window_cache[id(window)] = lines",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._window_cache: dict[str, list[str]] = {}\n\n",
        "source_code_len": 56,
        "target_code": "\n        self._window_cache: dict[int, list[str]] = {}\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -257,3 +273,3 @@\n \n-        self._window_cache: dict[str, list[str]] = {}\n+        self._window_cache: dict[int, list[str]] = {}\n \n",
        "source_code_with_indent": "\n        self._window_cache: dict[str, list[str]] = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._window_cache: dict[int, list[str]] = {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:630:4 Inconsistent override [14]: `pytermgui.window_manager.WindowManager.show_targets` overrides method defined in `Container` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `Optional[int]`.",
    "message": " `pytermgui.window_manager.WindowManager.show_targets` overrides method defined in `Container` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `Optional[int]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 630,
    "warning_line": "    def show_targets(self, color: int = 210) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def show_targets(self, color: int = 210) -> None:\n        \"\"\"Show all windows' targets\"\"\"\n",
        "source_code_len": 95,
        "target_code": "\n    def show_targets(self, color: int | None = None) -> None:\n        \"\"\"Show all windows' targets\"\"\"\n",
        "target_code_len": 103,
        "diff_format": "@@ -629,3 +648,3 @@\n \n-    def show_targets(self, color: int = 210) -> None:\n+    def show_targets(self, color: int | None = None) -> None:\n         \"\"\"Show all windows' targets\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def show_targets(self, color: int = 210) -> None:\n        <IND>\"\"\"Show all windows' targets\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def show_targets(self, color: int | None = None) -> None:\n        <IND>\"\"\"Show all windows' targets\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:653:17 Incompatible parameter type [6]: Expected `Window` for 1st positional only parameter to call `WindowManager.add` but got `Container`.",
    "message": " Expected `Window` for 1st positional only parameter to call `WindowManager.add` but got `Container`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 653,
    "warning_line": "        self.add(window.center())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "source_code_len": 83,
        "target_code": "\n    def __iadd__(self, other: object) -> Window:\n        \"\"\"Call self._add_widget(other) and return self\"\"\"\n\n        self._add_widget(other)\n        return self\n\n    def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "target_code_len": 245,
        "diff_format": "@@ -202,2 +203,8 @@\n \n+    def __iadd__(self, other: object) -> Window:\n+        \"\"\"Call self._add_widget(other) and return self\"\"\"\n+\n+        self._add_widget(other)\n+        return self\n+\n     def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "source_code_with_indent": "\n    <DED>def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __iadd__(self, other: object) -> Window:\n        <IND>\"\"\"Call self._add_widget(other) and return self\"\"\"\n\n        self._add_widget(other)\n        return self\n\n    <DED>def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close(self) -> None:\n",
        "source_code_len": 30,
        "target_code": "\n    def center(\n        self, where: Optional[int] = Container.CENTER_BOTH, store: bool = True\n    ) -> Window:\n        \"\"\"Center window\"\"\"\n\n        super().center(where, store)\n        return self\n\n    def close(self) -> None:\n",
        "target_code_len": 229,
        "diff_format": "@@ -223,2 +230,10 @@\n \n+    def center(\n+        self, where: Optional[int] = Container.CENTER_BOTH, store: bool = True\n+    ) -> Window:\n+        \"\"\"Center window\"\"\"\n+\n+        super().center(where, store)\n+        return self\n+\n     def close(self) -> None:\n",
        "source_code_with_indent": "\n    <DED>def close(self) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def center(\n        self, where: Optional[int] = Container.CENTER_BOTH, store: bool = True\n    ) -> Window:\n        <IND>\"\"\"Center window\"\"\"\n\n        super().center(where, store)\n        return self\n\n    <DED>def close(self) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "591f99dcc2b7c2d07dde9a3c6fb3a574354a2a37",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:654:19 Incompatible parameter type [6]: Expected `Window` for 1st positional only parameter to call `WindowManager.focus` but got `Container`.",
    "message": " Expected `Window` for 1st positional only parameter to call `WindowManager.focus` but got `Container`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 654,
    "warning_line": "        self.focus(window)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "source_code_len": 83,
        "target_code": "\n    def __iadd__(self, other: object) -> Window:\n        \"\"\"Call self._add_widget(other) and return self\"\"\"\n\n        self._add_widget(other)\n        return self\n\n    def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "target_code_len": 245,
        "diff_format": "@@ -202,2 +203,8 @@\n \n+    def __iadd__(self, other: object) -> Window:\n+        \"\"\"Call self._add_widget(other) and return self\"\"\"\n+\n+        self._add_widget(other)\n+        return self\n+\n     def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "source_code_with_indent": "\n    <DED>def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __iadd__(self, other: object) -> Window:\n        <IND>\"\"\"Call self._add_widget(other) and return self\"\"\"\n\n        self._add_widget(other)\n        return self\n\n    <DED>def set_title(self, title: str, position: int = 0, pad: bool = True) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]