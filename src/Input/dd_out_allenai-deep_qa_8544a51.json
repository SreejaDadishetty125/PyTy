[
  {
    "project": "allenai/deep_qa",
    "commit": "8544a51acb79aa12d90131408c7a98855bcf84c7",
    "filename": "deep_qa/training/trainer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-deep_qa/deep_qa/training/trainer.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deep_qa/training/trainer.py:113:67 Incompatible parameter type [6]: Expected `List[typing.Any]` for 3rd positional only parameter to call `get_choice` but got `typing.KeysView[typing.Any]`.",
    "message": " Expected `List[typing.Any]` for 3rd positional only parameter to call `get_choice` but got `typing.KeysView[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 113,
    "warning_line": "            pretrainer_type = get_choice(pretrainer_param, \"type\", concrete_pretrainers.keys())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n        pretrainer_params = params.pop('pretrainers', [])\n        self.pretrainers = []\n        for pretrainer_param in pretrainer_params:\n            pretrainer_type = get_choice(pretrainer_param, \"type\", concrete_pretrainers.keys())\n            pretrainer = concrete_pretrainers[pretrainer_type](self, pretrainer_param)\n            self.pretrainers.append(pretrainer)\n\n        # We've now processed all of the parameters, and we're the base class, so there should not\n",
        "source_code_len": 471,
        "target_code": "\n        # We've now processed all of the parameters, and we're the base class, so there should not\n",
        "target_code_len": 100,
        "diff_format": "@@ -109,9 +116,2 @@\n \n-        pretrainer_params = params.pop('pretrainers', [])\n-        self.pretrainers = []\n-        for pretrainer_param in pretrainer_params:\n-            pretrainer_type = get_choice(pretrainer_param, \"type\", concrete_pretrainers.keys())\n-            pretrainer = concrete_pretrainers[pretrainer_type](self, pretrainer_param)\n-            self.pretrainers.append(pretrainer)\n-\n         # We've now processed all of the parameters, and we're the base class, so there should not\n",
        "source_code_with_indent": "\n        pretrainer_params = params.pop('pretrainers', [])\n        self.pretrainers = []\n        for pretrainer_param in pretrainer_params:\n            <IND>pretrainer_type = get_choice(pretrainer_param, \"type\", concrete_pretrainers.keys())\n            pretrainer = concrete_pretrainers[pretrainer_type](self, pretrainer_param)\n            self.pretrainers.append(pretrainer)\n\n        # We've now processed all of the parameters, and we're the base class, so there should not\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        # We've now processed all of the parameters, and we're the base class, so there should not\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]