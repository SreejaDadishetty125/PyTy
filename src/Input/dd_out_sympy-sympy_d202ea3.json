[
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/array_expressions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/array_expressions.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/array_expressions.py:1379:16 Incompatible variable type [9]: expr is declared to have type `sympy.core.expr.Expr` but is used as type `ArrayTensorProduct`.",
    "message": " expr is declared to have type `sympy.core.expr.Expr` but is used as type `ArrayTensorProduct`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1379,
    "warning_line": "                expr = base_array.expr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import accumulate\nfrom typing import Optional, List, Dict\n\n",
        "source_code_len": 74,
        "target_code": "from itertools import accumulate\nfrom typing import Optional, List, Dict, Tuple as tTuple\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -5,3 +5,3 @@\n from itertools import accumulate\n-from typing import Optional, List, Dict\n+from typing import Optional, List, Dict, Tuple as tTuple\n \n",
        "source_code_with_indent": "from itertools import accumulate\nfrom typing import Optional, List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import accumulate\nfrom typing import Optional, List, Dict, Tuple as tTuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        expr: Expr\n        diagonalized: List[int]\n        contraction_indices: List[Tuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "source_code_len": 151,
        "target_code": "\n        expr: Basic\n        diagonalized: tTuple[tTuple[int, ...], ...]\n        contraction_indices: List[tTuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "target_code_len": 173,
        "diff_format": "@@ -1361,5 +1363,5 @@\n \n-        expr: Expr\n-        diagonalized: List[int]\n-        contraction_indices: List[Tuple[int]]\n+        expr: Basic\n+        diagonalized: tTuple[tTuple[int, ...], ...]\n+        contraction_indices: List[tTuple[int]]\n         if isinstance(base_array, ArrayContraction):\n",
        "source_code_with_indent": "\n        <IND>expr: Expr\n        diagonalized: List[int]\n        contraction_indices: List[Tuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <IND>expr: Basic\n        diagonalized: tTuple[tTuple[int, ...], ...]\n        contraction_indices: List[tTuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            contraction_indices = base_array.contraction_indices\n            diagonalized = []\n        elif isinstance(base_array, ArrayDiagonal):\n",
        "source_code_len": 147,
        "target_code": "            contraction_indices = base_array.contraction_indices\n            diagonalized = ()\n        elif isinstance(base_array, ArrayDiagonal):\n",
        "target_code_len": 147,
        "diff_format": "@@ -1368,3 +1370,3 @@\n             contraction_indices = base_array.contraction_indices\n-            diagonalized = []\n+            diagonalized = ()\n         elif isinstance(base_array, ArrayDiagonal):\n",
        "source_code_with_indent": "            contraction_indices = base_array.contraction_indices\n            diagonalized = []\n        <DED>elif isinstance(base_array, ArrayDiagonal):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            contraction_indices = base_array.contraction_indices\n            diagonalized = ()\n        <DED>elif isinstance(base_array, ArrayDiagonal):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            contraction_indices = []\n            diagonalized = []\n        else:\n",
        "source_code_len": 81,
        "target_code": "            contraction_indices = []\n            diagonalized = ()\n        else:\n",
        "target_code_len": 81,
        "diff_format": "@@ -1390,3 +1392,3 @@\n             contraction_indices = []\n-            diagonalized = []\n+            diagonalized = ()\n         else:\n",
        "source_code_with_indent": "            contraction_indices = []\n            diagonalized = []\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            contraction_indices = []\n            diagonalized = ()\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/array_expressions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/array_expressions.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/array_expressions.py:1389:12 Incompatible variable type [9]: expr is declared to have type `sympy.core.expr.Expr` but is used as type `ArrayTensorProduct`.",
    "message": " expr is declared to have type `sympy.core.expr.Expr` but is used as type `ArrayTensorProduct`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1389,
    "warning_line": "            expr = base_array",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import accumulate\nfrom typing import Optional, List, Dict\n\n",
        "source_code_len": 74,
        "target_code": "from itertools import accumulate\nfrom typing import Optional, List, Dict, Tuple as tTuple\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -5,3 +5,3 @@\n from itertools import accumulate\n-from typing import Optional, List, Dict\n+from typing import Optional, List, Dict, Tuple as tTuple\n \n",
        "source_code_with_indent": "from itertools import accumulate\nfrom typing import Optional, List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import accumulate\nfrom typing import Optional, List, Dict, Tuple as tTuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        expr: Expr\n        diagonalized: List[int]\n        contraction_indices: List[Tuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "source_code_len": 151,
        "target_code": "\n        expr: Basic\n        diagonalized: tTuple[tTuple[int, ...], ...]\n        contraction_indices: List[tTuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "target_code_len": 173,
        "diff_format": "@@ -1361,5 +1363,5 @@\n \n-        expr: Expr\n-        diagonalized: List[int]\n-        contraction_indices: List[Tuple[int]]\n+        expr: Basic\n+        diagonalized: tTuple[tTuple[int, ...], ...]\n+        contraction_indices: List[tTuple[int]]\n         if isinstance(base_array, ArrayContraction):\n",
        "source_code_with_indent": "\n        <IND>expr: Expr\n        diagonalized: List[int]\n        contraction_indices: List[Tuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <IND>expr: Basic\n        diagonalized: tTuple[tTuple[int, ...], ...]\n        contraction_indices: List[tTuple[int]]\n        if isinstance(base_array, ArrayContraction):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            contraction_indices = base_array.contraction_indices\n            diagonalized = []\n        elif isinstance(base_array, ArrayDiagonal):\n",
        "source_code_len": 147,
        "target_code": "            contraction_indices = base_array.contraction_indices\n            diagonalized = ()\n        elif isinstance(base_array, ArrayDiagonal):\n",
        "target_code_len": 147,
        "diff_format": "@@ -1368,3 +1370,3 @@\n             contraction_indices = base_array.contraction_indices\n-            diagonalized = []\n+            diagonalized = ()\n         elif isinstance(base_array, ArrayDiagonal):\n",
        "source_code_with_indent": "            contraction_indices = base_array.contraction_indices\n            diagonalized = []\n        <DED>elif isinstance(base_array, ArrayDiagonal):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            contraction_indices = base_array.contraction_indices\n            diagonalized = ()\n        <DED>elif isinstance(base_array, ArrayDiagonal):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            contraction_indices = []\n            diagonalized = []\n        else:\n",
        "source_code_len": 81,
        "target_code": "            contraction_indices = []\n            diagonalized = ()\n        else:\n",
        "target_code_len": 81,
        "diff_format": "@@ -1390,3 +1392,3 @@\n             contraction_indices = []\n-            diagonalized = []\n+            diagonalized = ()\n         else:\n",
        "source_code_with_indent": "            contraction_indices = []\n            diagonalized = []\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            contraction_indices = []\n            diagonalized = ()\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_array_to_matrix.py:41:20 Incompatible variable type [9]: candidate_index is declared to have type `int` but is used as type `Optional[int]`.",
    "message": " candidate_index is declared to have type `int` but is used as type `Optional[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 41,
    "warning_line": "                    candidate_index = index",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    scan_indices = [i for i in scan_indices if i is not None]\n    if len(scan_indices) == 0:\n        return None, False, -1\n",
        "source_code_len": 125,
        "target_code": "\n    scan_indices_int: List[int] = [i for i in scan_indices if i is not None]\n    if len(scan_indices_int) == 0:\n        return None, False, -1\n",
        "target_code_len": 144,
        "diff_format": "@@ -18,4 +18,4 @@\n \n-    scan_indices = [i for i in scan_indices if i is not None]\n-    if len(scan_indices) == 0:\n+    scan_indices_int: List[int] = [i for i in scan_indices if i is not None]\n+    if len(scan_indices_int) == 0:\n         return None, False, -1\n",
        "source_code_with_indent": "\n    <IND>scan_indices = [i for i in scan_indices if i is not None]\n    if len(scan_indices) == 0:\n        <IND>return None, False, -1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>scan_indices_int: List[int] = [i for i in scan_indices if i is not None]\n    if len(scan_indices_int) == 0:\n        <IND>return None, False, -1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            continue\n        for index in scan_indices:\n            if candidate_index != -1 and candidate_index != index:\n",
        "source_code_len": 123,
        "target_code": "            continue\n        for index in scan_indices_int:\n            if candidate_index != -1 and candidate_index != index:\n",
        "target_code_len": 127,
        "diff_format": "@@ -28,3 +28,3 @@\n             continue\n-        for index in scan_indices:\n+        for index in scan_indices_int:\n             if candidate_index != -1 and candidate_index != index:\n",
        "source_code_with_indent": "            <IND>continue\n        <DED>for index in scan_indices:\n            <IND>if candidate_index != -1 and candidate_index != index:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>continue\n        <DED>for index in scan_indices_int:\n            <IND>if candidate_index != -1 and candidate_index != index:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_array_to_matrix.py:55:8 Incompatible variable type [9]: other_index is declared to have type `int` but is used as type `Optional[int]`.",
    "message": " other_index is declared to have type `int` but is used as type `Optional[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 55,
    "warning_line": "        other_index = candidate.indices[0]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    other = candidate.element\n    other_index: int\n    if transpose2:\n",
        "source_code_len": 70,
        "target_code": "    other = candidate.element\n    other_index: Optional[int]\n    if transpose2:\n",
        "target_code_len": 80,
        "diff_format": "@@ -51,3 +51,3 @@\n     other = candidate.element\n-    other_index: int\n+    other_index: Optional[int]\n     if transpose2:\n",
        "source_code_with_indent": "    <IND>other = candidate.element\n    other_index: int\n    if transpose2:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>other = candidate.element\n    other_index: Optional[int]\n    if transpose2:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_array_to_matrix.py:57:8 Incompatible variable type [9]: other_index is declared to have type `int` but is used as type `Optional[int]`.",
    "message": " other_index is declared to have type `int` but is used as type `Optional[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 57,
    "warning_line": "        other_index = candidate.indices[1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    other = candidate.element\n    other_index: int\n    if transpose2:\n",
        "source_code_len": 70,
        "target_code": "    other = candidate.element\n    other_index: Optional[int]\n    if transpose2:\n",
        "target_code_len": 80,
        "diff_format": "@@ -51,3 +51,3 @@\n     other = candidate.element\n-    other_index: int\n+    other_index: Optional[int]\n     if transpose2:\n",
        "source_code_with_indent": "    <IND>other = candidate.element\n    other_index: int\n    if transpose2:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>other = candidate.element\n    other_index: Optional[int]\n    if transpose2:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_array_to_matrix.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_array_to_matrix.py:882:4 Incompatible attribute type [8]: Attribute `_track_permutation` declared in class `_EditArrayContraction` has type `Optional[List[int]]` but is used as type `List[List[int]]`.",
    "message": " Attribute `_track_permutation` declared in class `_EditArrayContraction` has type `Optional[List[int]]` but is used as type `List[List[int]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 882,
    "warning_line": "    editor._track_permutation = [[remap[j] for j in i] for i in editor._track_permutation]"
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_matrix_to_array.py:16:59 Incompatible parameter type [6]: Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "message": " Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 16,
    "warning_line": "                args_nonmat.append(convert_matrix_to_array(arg))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "source_code_len": 90,
        "target_code": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "target_code_len": 85,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n+def convert_matrix_to_array(expr: Basic) -> Basic:\n     if isinstance(expr, MatMul):\n",
        "source_code_with_indent": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    elif isinstance(expr, Trace):\n        inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_len": 165,
        "target_code": "    elif isinstance(expr, Trace):\n        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_len": 192,
        "diff_format": "@@ -38,3 +38,3 @@\n     elif isinstance(expr, Trace):\n-        inner_expr = convert_matrix_to_array(expr.arg)\n+        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n         return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_matrix_to_array.py:32:42 Incompatible parameter type [6]: Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "message": " Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 32,
    "warning_line": "                *[convert_matrix_to_array(arg) for arg in expr.args]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "source_code_len": 90,
        "target_code": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "target_code_len": 85,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n+def convert_matrix_to_array(expr: Basic) -> Basic:\n     if isinstance(expr, MatMul):\n",
        "source_code_with_indent": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    elif isinstance(expr, Trace):\n        inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_len": 165,
        "target_code": "    elif isinstance(expr, Trace):\n        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_len": 192,
        "diff_format": "@@ -38,3 +38,3 @@\n     elif isinstance(expr, Trace):\n-        inner_expr = convert_matrix_to_array(expr.arg)\n+        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n         return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_matrix_to_array.py:36:40 Incompatible parameter type [6]: Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "message": " Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "                convert_matrix_to_array(expr.args[0]), [1, 0]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "source_code_len": 90,
        "target_code": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "target_code_len": 85,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n+def convert_matrix_to_array(expr: Basic) -> Basic:\n     if isinstance(expr, MatMul):\n",
        "source_code_with_indent": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    elif isinstance(expr, Trace):\n        inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_len": 165,
        "target_code": "    elif isinstance(expr, Trace):\n        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_len": 192,
        "diff_format": "@@ -38,3 +38,3 @@\n     elif isinstance(expr, Trace):\n-        inner_expr = convert_matrix_to_array(expr.arg)\n+        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n         return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_matrix_to_array.py:53:93 Incompatible parameter type [6]: Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "message": " Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "            return ArrayElementwiseApplyFunc(Lambda(b, b**expr.exp), convert_matrix_to_array(base))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "source_code_len": 90,
        "target_code": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "target_code_len": 85,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n+def convert_matrix_to_array(expr: Basic) -> Basic:\n     if isinstance(expr, MatMul):\n",
        "source_code_with_indent": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    elif isinstance(expr, Trace):\n        inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_len": 165,
        "target_code": "    elif isinstance(expr, Trace):\n        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_len": 192,
        "diff_format": "@@ -38,3 +38,3 @@\n     elif isinstance(expr, Trace):\n-        inner_expr = convert_matrix_to_array(expr.arg)\n+        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n         return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_matrix_to_array.py:59:66 Incompatible parameter type [6]: Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "message": " Expected `MatrixExpr` for 1st positional only parameter to call `convert_matrix_to_array` but got `sympy.core.basic.Basic`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 59,
    "warning_line": "        tp = ArrayTensorProduct.fromiter([convert_matrix_to_array(arg) for arg in expr.args])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "source_code_len": 90,
        "target_code": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    if isinstance(expr, MatMul):\n",
        "target_code_len": 85,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n+def convert_matrix_to_array(expr: Basic) -> Basic:\n     if isinstance(expr, MatMul):\n",
        "source_code_with_indent": "\ndef convert_matrix_to_array(expr: MatrixExpr) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef convert_matrix_to_array(expr: Basic) -> Basic:\n    <IND>if isinstance(expr, MatMul):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    elif isinstance(expr, Trace):\n        inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_len": 165,
        "target_code": "    elif isinstance(expr, Trace):\n        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_len": 192,
        "diff_format": "@@ -38,3 +38,3 @@\n     elif isinstance(expr, Trace):\n-        inner_expr = convert_matrix_to_array(expr.arg)\n+        inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n         return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr = convert_matrix_to_array(expr.arg)\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif isinstance(expr, Trace):\n        <IND>inner_expr: MatrixExpr = convert_matrix_to_array(expr.arg) # type: ignore\n        return ArrayContraction(inner_expr, (0, len(inner_expr.shape) - 1))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_matrix_to_array.py:64:30 Unsupported operand [58]: `>` is not supported for operand types `sympy.core.basic.Basic` and `int`.",
    "message": " `>` is not supported for operand types `sympy.core.basic.Basic` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 64,
    "warning_line": "        if exp.is_Integer and exp > 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from sympy import Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "source_code_len": 141,
        "target_code": "from sympy import Integer, Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "target_code_len": 150,
        "diff_format": "@@ -1,2 +1,2 @@\n-from sympy import Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n+from sympy import Integer, Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n     MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "from sympy import Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow,    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "target_code_with_indent": "from sympy import Integer, Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow,    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        base, exp = expr.args\n        if exp.is_Integer and exp > 0:\n            return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "source_code_len": 164,
        "target_code": "        base, exp = expr.args\n        if isinstance(exp, Integer) and exp > 0:\n            return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "target_code_len": 174,
        "diff_format": "@@ -63,3 +63,3 @@\n         base, exp = expr.args\n-        if exp.is_Integer and exp > 0:\n+        if isinstance(exp, Integer) and exp > 0:\n             return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "source_code_with_indent": "        <IND>base, exp = expr.args\n        if exp.is_Integer and exp > 0:\n            <IND>return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>base, exp = expr.args\n        if isinstance(exp, Integer) and exp > 0:\n            <IND>return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/array/expressions/conv_matrix_to_array.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/array/expressions/conv_matrix_to_array.py:65:88 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `sympy.core.basic.Basic`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `sympy.core.basic.Basic`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 65,
    "warning_line": "            return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from sympy import Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "source_code_len": 141,
        "target_code": "from sympy import Integer, Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "target_code_len": 150,
        "diff_format": "@@ -1,2 +1,2 @@\n-from sympy import Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n+from sympy import Integer, Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow, \\\n     MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "from sympy import Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow,    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n",
        "target_code_with_indent": "from sympy import Integer, Mul, Basic, MatMul, MatAdd, Transpose, Trace, Pow,    MatPow, symbols, Dummy, Lambda, HadamardProduct, HadamardPower, S\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        base, exp = expr.args\n        if exp.is_Integer and exp > 0:\n            return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "source_code_len": 164,
        "target_code": "        base, exp = expr.args\n        if isinstance(exp, Integer) and exp > 0:\n            return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "target_code_len": 174,
        "diff_format": "@@ -63,3 +63,3 @@\n         base, exp = expr.args\n-        if exp.is_Integer and exp > 0:\n+        if isinstance(exp, Integer) and exp > 0:\n             return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "source_code_with_indent": "        <IND>base, exp = expr.args\n        if exp.is_Integer and exp > 0:\n            <IND>return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>base, exp = expr.args\n        if isinstance(exp, Integer) and exp > 0:\n            <IND>return convert_matrix_to_array(HadamardProduct.fromiter(base for i in range(exp)))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "sympy/sympy",
    "commit": "d202ea327e7a005d49af3eb68b47dd283c570086",
    "filename": "sympy/tensor/tensor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sympy-sympy/sympy/tensor/tensor.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sympy/tensor/tensor.py:2874:20 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `sympy.core.basic.Basic`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `sympy.core.basic.Basic`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 2874,
    "warning_line": "        return list(self.args[1])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, Dict as tDict, List, Set\nfrom functools import reduce\n",
        "source_code_len": 79,
        "target_code": "\nfrom typing import Any, Dict as tDict, List, Set, Tuple as tTuple\nfrom functools import reduce\n",
        "target_code_len": 96,
        "diff_format": "@@ -31,3 +31,3 @@\n \n-from typing import Any, Dict as tDict, List, Set\n+from typing import Any, Dict as tDict, List, Set, Tuple as tTuple\n from functools import reduce\n",
        "source_code_with_indent": "\nfrom typing import Any, Dict as tDict, List, Set\nfrom functools import reduce\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Dict as tDict, List, Set, Tuple as tTuple\nfrom functools import reduce\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    _index_structure = None  # type: _IndexStructure\n\n",
        "source_code_len": 54,
        "target_code": "    _index_structure = None  # type: _IndexStructure\n    args: tTuple[TensorHead, Tuple]\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -2700,2 +2700,3 @@\n     _index_structure = None  # type: _IndexStructure\n+    args: tTuple[TensorHead, Tuple]\n \n",
        "source_code_with_indent": "    _index_structure = None  # type: _IndexStructure\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    _index_structure = None  # type: _IndexStructure\n    args: tTuple[TensorHead, Tuple]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]