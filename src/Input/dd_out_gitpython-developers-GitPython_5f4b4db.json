[
  {
    "project": "gitpython-developers/GitPython",
    "commit": "5f4b4dbff46fae4c899f5573aea5a7266a41eeeb",
    "filename": "git/refs/remote.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/refs/remote.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "git/refs/remote.py:41:4 Inconsistent override [14]: `git.refs.remote.RemoteReference.delete` overrides method defined in `Head` inconsistently. Parameter of type `RemoteReference` is not a supertype of the overridden parameter `Head`.",
    "message": " `git.refs.remote.RemoteReference.delete` overrides method defined in `Head` inconsistently. Parameter of type `RemoteReference` is not a supertype of the overridden parameter `Head`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 41,
    "warning_line": "    def delete(cls, repo: 'Repo', *refs: 'RemoteReference', **kwargs: Any) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    @ classmethod\n    def delete(cls, repo: 'Repo', *refs: 'RemoteReference', **kwargs: Any) -> None:\n        \"\"\"Delete the given remote references\n",
        "source_code_len": 149,
        "target_code": "\n    # The Head implementation of delete also accepts strs, but this\n    # implementation does not.  mypy doesn't have a way of representing\n    # tightening the types of arguments in subclasses and recommends Any or\n    # \"type: ignore\".  (See https://github.com/python/typing/issues/241)\n    @ classmethod\n    def delete(cls, repo: 'Repo', *refs: 'RemoteReference',  # type: ignore\n               **kwargs: Any) -> None:\n        \"\"\"Delete the given remote references\n",
        "target_code_len": 469,
        "diff_format": "@@ -39,4 +39,9 @@\n \n+    # The Head implementation of delete also accepts strs, but this\n+    # implementation does not.  mypy doesn't have a way of representing\n+    # tightening the types of arguments in subclasses and recommends Any or\n+    # \"type: ignore\".  (See https://github.com/python/typing/issues/241)\n     @ classmethod\n-    def delete(cls, repo: 'Repo', *refs: 'RemoteReference', **kwargs: Any) -> None:\n+    def delete(cls, repo: 'Repo', *refs: 'RemoteReference',  # type: ignore\n+               **kwargs: Any) -> None:\n         \"\"\"Delete the given remote references\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>@ classmethod\n    def delete(cls, repo: 'Repo', *refs: 'RemoteReference', **kwargs: Any) -> None:\n        <IND>",
        "target_code_with_indent": "\n    # The Head implementation of delete also accepts strs, but this\n    # implementation does not.  mypy doesn't have a way of representing\n    # tightening the types of arguments in subclasses and recommends Any or\n    # \"type: ignore\".  (See https://github.com/python/typing/issues/241)\n    <DED>@ classmethod\n    def delete(cls, repo: 'Repo', *refs: 'RemoteReference',  # type: ignore\n               **kwargs: Any) -> None:\n        <IND>"
      }
    ]
  }
]