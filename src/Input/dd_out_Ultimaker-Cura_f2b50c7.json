[
  {
    "project": "Ultimaker/Cura",
    "commit": "f2b50c748c1aea35e61de119fb3a08a28afdb295",
    "filename": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerJob.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerJob.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerJob.py:27:53 Incompatible variable type [9]: lookups is declared to have type `FirmwareUpdateCheckerLookup` but is used as type `None`.",
    "message": " lookups is declared to have type `FirmwareUpdateCheckerLookup` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "    def __init__(self, container=None, silent=False, lookups:FirmwareUpdateCheckerLookup=None, callback=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, container=None, silent=False, lookups:FirmwareUpdateCheckerLookup=None, callback=None):\n        super().__init__()\n",
        "source_code_len": 139,
        "target_code": "\n    def __init__(self, container, silent, lookups: FirmwareUpdateCheckerLookup, callback) -> None:\n        super().__init__()\n",
        "target_code_len": 127,
        "diff_format": "@@ -26,3 +27,3 @@\n \n-    def __init__(self, container=None, silent=False, lookups:FirmwareUpdateCheckerLookup=None, callback=None):\n+    def __init__(self, container, silent, lookups: FirmwareUpdateCheckerLookup, callback) -> None:\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, container=None, silent=False, lookups:FirmwareUpdateCheckerLookup=None, callback=None):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, container, silent, lookups: FirmwareUpdateCheckerLookup, callback) -> None:\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Cura",
    "commit": "f2b50c748c1aea35e61de119fb3a08a28afdb295",
    "filename": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerJob.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerJob.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerJob.py:56:26 Call error [29]: `str` is not a function.",
    "message": " `str` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 56,
    "warning_line": "                version = parse_function(self.getUrlResponse(url))"
  },
  {
    "project": "Ultimaker/Cura",
    "commit": "f2b50c748c1aea35e61de119fb3a08a28afdb295",
    "filename": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerLookup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerLookup.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerLookup.py:59:31 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 59,
    "warning_line": "    def getMachineIds(self) -> [int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport json, os\n\n",
        "source_code_len": 18,
        "target_code": "\nimport json\n\nfrom typing import Callable, Dict, List, Optional\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -3,3 +3,5 @@\n \n-import json, os\n+import json\n+\n+from typing import Callable, Dict, List, Optional\n \n",
        "source_code_with_indent": "\nimport json, os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport json\n\nfrom typing import Callable, Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        except:\n            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file.\")\n\n    def getMachineIds(self) -> [int]:\n        return self._machine_ids\n\n    def getMachineByName(self, machine_name: str) -> int:\n        return self._machine_per_name.get(machine_name)\n\n    def getParseVersionUrlFor(self, machine_id: int) -> str:\n        return self._parse_version_url_per_machine.get(machine_id)\n\n    def getCheckUrlsFor(self, machine_id: int) -> [str]:\n        return self._check_urls_per_machine.get(machine_id)\n\n    def getRedirectUserFor(self, machine_id: int) -> str:\n        return self._redirect_user_per_machine.get(machine_id)\n",
        "source_code_len": 757,
        "target_code": "                self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        except Exception as ex:\n            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file because {0}.\".format(ex))\n\n    def getMachineIds(self) -> List[int]:\n        return self._machine_ids\n\n    def getMachineByName(self, machine_name: str) -> Optional[int]:\n        return self._machine_per_name.get(machine_name)\n\n    def getParseVersionUrlFor(self, machine_id: int) -> Optional[Callable]:\n        return self._parse_version_url_per_machine.get(machine_id)\n\n    def getCheckUrlsFor(self, machine_id: int) -> Optional[List[str]]:\n        return self._check_urls_per_machine.get(machine_id)\n\n    def getRedirectUserFor(self, machine_id: int) -> Optional[str]:\n        return self._redirect_user_per_machine.get(machine_id)\n",
        "target_code_len": 849,
        "diff_format": "@@ -55,18 +57,18 @@\n                 self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n-        except:\n-            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file.\")\n+        except Exception as ex:\n+            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file because {0}.\".format(ex))\n \n-    def getMachineIds(self) -> [int]:\n+    def getMachineIds(self) -> List[int]:\n         return self._machine_ids\n \n-    def getMachineByName(self, machine_name: str) -> int:\n+    def getMachineByName(self, machine_name: str) -> Optional[int]:\n         return self._machine_per_name.get(machine_name)\n \n-    def getParseVersionUrlFor(self, machine_id: int) -> str:\n+    def getParseVersionUrlFor(self, machine_id: int) -> Optional[Callable]:\n         return self._parse_version_url_per_machine.get(machine_id)\n \n-    def getCheckUrlsFor(self, machine_id: int) -> [str]:\n+    def getCheckUrlsFor(self, machine_id: int) -> Optional[List[str]]:\n         return self._check_urls_per_machine.get(machine_id)\n \n-    def getRedirectUserFor(self, machine_id: int) -> str:\n+    def getRedirectUserFor(self, machine_id: int) -> Optional[str]:\n         return self._redirect_user_per_machine.get(machine_id)\n",
        "source_code_with_indent": "                <DED>self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        <DED><DED>except:\n            <IND>Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file.\")\n\n    <DED><DED>def getMachineIds(self) -> [int]:\n        <IND>return self._machine_ids\n\n    <DED>def getMachineByName(self, machine_name: str) -> int:\n        <IND>return self._machine_per_name.get(machine_name)\n\n    <DED>def getParseVersionUrlFor(self, machine_id: int) -> str:\n        <IND>return self._parse_version_url_per_machine.get(machine_id)\n\n    <DED>def getCheckUrlsFor(self, machine_id: int) -> [str]:\n        <IND>return self._check_urls_per_machine.get(machine_id)\n\n    <DED>def getRedirectUserFor(self, machine_id: int) -> str:\n        <IND>return self._redirect_user_per_machine.get(machine_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <DED>self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        <DED><DED>except Exception as ex:\n            <IND>Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file because {0}.\".format(ex))\n\n    <DED><DED>def getMachineIds(self) -> List[int]:\n        <IND>return self._machine_ids\n\n    <DED>def getMachineByName(self, machine_name: str) -> Optional[int]:\n        <IND>return self._machine_per_name.get(machine_name)\n\n    <DED>def getParseVersionUrlFor(self, machine_id: int) -> Optional[Callable]:\n        <IND>return self._parse_version_url_per_machine.get(machine_id)\n\n    <DED>def getCheckUrlsFor(self, machine_id: int) -> Optional[List[str]]:\n        <IND>return self._check_urls_per_machine.get(machine_id)\n\n    <DED>def getRedirectUserFor(self, machine_id: int) -> Optional[str]:\n        <IND>return self._redirect_user_per_machine.get(machine_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Cura",
    "commit": "f2b50c748c1aea35e61de119fb3a08a28afdb295",
    "filename": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerLookup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerLookup.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/FirmwareUpdateChecker/FirmwareUpdateCheckerLookup.py:68:50 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 68,
    "warning_line": "    def getCheckUrlsFor(self, machine_id: int) -> [str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport json, os\n\n",
        "source_code_len": 18,
        "target_code": "\nimport json\n\nfrom typing import Callable, Dict, List, Optional\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -3,3 +3,5 @@\n \n-import json, os\n+import json\n+\n+from typing import Callable, Dict, List, Optional\n \n",
        "source_code_with_indent": "\nimport json, os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport json\n\nfrom typing import Callable, Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        except:\n            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file.\")\n\n    def getMachineIds(self) -> [int]:\n        return self._machine_ids\n\n    def getMachineByName(self, machine_name: str) -> int:\n        return self._machine_per_name.get(machine_name)\n\n    def getParseVersionUrlFor(self, machine_id: int) -> str:\n        return self._parse_version_url_per_machine.get(machine_id)\n\n    def getCheckUrlsFor(self, machine_id: int) -> [str]:\n        return self._check_urls_per_machine.get(machine_id)\n\n    def getRedirectUserFor(self, machine_id: int) -> str:\n        return self._redirect_user_per_machine.get(machine_id)\n",
        "source_code_len": 757,
        "target_code": "                self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        except Exception as ex:\n            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file because {0}.\".format(ex))\n\n    def getMachineIds(self) -> List[int]:\n        return self._machine_ids\n\n    def getMachineByName(self, machine_name: str) -> Optional[int]:\n        return self._machine_per_name.get(machine_name)\n\n    def getParseVersionUrlFor(self, machine_id: int) -> Optional[Callable]:\n        return self._parse_version_url_per_machine.get(machine_id)\n\n    def getCheckUrlsFor(self, machine_id: int) -> Optional[List[str]]:\n        return self._check_urls_per_machine.get(machine_id)\n\n    def getRedirectUserFor(self, machine_id: int) -> Optional[str]:\n        return self._redirect_user_per_machine.get(machine_id)\n",
        "target_code_len": 849,
        "diff_format": "@@ -55,18 +57,18 @@\n                 self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n-        except:\n-            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file.\")\n+        except Exception as ex:\n+            Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file because {0}.\".format(ex))\n \n-    def getMachineIds(self) -> [int]:\n+    def getMachineIds(self) -> List[int]:\n         return self._machine_ids\n \n-    def getMachineByName(self, machine_name: str) -> int:\n+    def getMachineByName(self, machine_name: str) -> Optional[int]:\n         return self._machine_per_name.get(machine_name)\n \n-    def getParseVersionUrlFor(self, machine_id: int) -> str:\n+    def getParseVersionUrlFor(self, machine_id: int) -> Optional[Callable]:\n         return self._parse_version_url_per_machine.get(machine_id)\n \n-    def getCheckUrlsFor(self, machine_id: int) -> [str]:\n+    def getCheckUrlsFor(self, machine_id: int) -> Optional[List[str]]:\n         return self._check_urls_per_machine.get(machine_id)\n \n-    def getRedirectUserFor(self, machine_id: int) -> str:\n+    def getRedirectUserFor(self, machine_id: int) -> Optional[str]:\n         return self._redirect_user_per_machine.get(machine_id)\n",
        "source_code_with_indent": "                <DED>self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        <DED><DED>except:\n            <IND>Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file.\")\n\n    <DED><DED>def getMachineIds(self) -> [int]:\n        <IND>return self._machine_ids\n\n    <DED>def getMachineByName(self, machine_name: str) -> int:\n        <IND>return self._machine_per_name.get(machine_name)\n\n    <DED>def getParseVersionUrlFor(self, machine_id: int) -> str:\n        <IND>return self._parse_version_url_per_machine.get(machine_id)\n\n    <DED>def getCheckUrlsFor(self, machine_id: int) -> [str]:\n        <IND>return self._check_urls_per_machine.get(machine_id)\n\n    <DED>def getRedirectUserFor(self, machine_id: int) -> str:\n        <IND>return self._redirect_user_per_machine.get(machine_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <DED>self._redirect_user_per_machine[machine_id] = machine_json.get(\"update_url\")\n        <DED><DED>except Exception as ex:\n            <IND>Logger.log('e', \"Couldn't parse firmware-update-check loopup-lists from file because {0}.\".format(ex))\n\n    <DED><DED>def getMachineIds(self) -> List[int]:\n        <IND>return self._machine_ids\n\n    <DED>def getMachineByName(self, machine_name: str) -> Optional[int]:\n        <IND>return self._machine_per_name.get(machine_name)\n\n    <DED>def getParseVersionUrlFor(self, machine_id: int) -> Optional[Callable]:\n        <IND>return self._parse_version_url_per_machine.get(machine_id)\n\n    <DED>def getCheckUrlsFor(self, machine_id: int) -> Optional[List[str]]:\n        <IND>return self._check_urls_per_machine.get(machine_id)\n\n    <DED>def getRedirectUserFor(self, machine_id: int) -> Optional[str]:\n        <IND>return self._redirect_user_per_machine.get(machine_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]