[
  {
    "project": "mirumee/ariadne",
    "commit": "97c58190755ff014856a5c1df3efb2bf8a9ab4ac",
    "filename": "ariadne/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mirumee-ariadne/ariadne/wsgi.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ariadne/wsgi.py:113:8 Incompatible return type [7]: Expected `List[str]` but got `List[bytes]`.",
    "message": " Expected `List[str]` but got `List[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 113,
    "warning_line": "        return [PLAYGROUND_MINIMAL.encode(\"utf-8\")]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serve_playground(self, start_response) -> List[str]:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "source_code_len": 128,
        "target_code": "\n    def serve_playground(self, start_response) -> List[bytes]:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "target_code_len": 130,
        "diff_format": "@@ -110,3 +110,3 @@\n \n-    def serve_playground(self, start_response) -> List[str]:\n+    def serve_playground(self, start_response) -> List[bytes]:\n         start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "source_code_with_indent": "\n    <DED>def serve_playground(self, start_response) -> List[str]:\n        <IND>start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def serve_playground(self, start_response) -> List[bytes]:\n        <IND>start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mirumee/ariadne",
    "commit": "97c58190755ff014856a5c1df3efb2bf8a9ab4ac",
    "filename": "ariadne/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mirumee-ariadne/ariadne/wsgi.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ariadne/wsgi.py:176:8 Incompatible return type [7]: Expected `List[str]` but got `List[bytes]`.",
    "message": " Expected `List[str]` but got `List[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 176,
    "warning_line": "        return [json.dumps(response).encode(\"utf-8\")]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def return_response_from_result(self, start_response, result) -> List[str]:\n        status = \"200 OK\"\n",
        "source_code_len": 107,
        "target_code": "\n    def return_response_from_result(self, start_response, result) -> List[bytes]:\n        status = \"200 OK\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -164,3 +164,3 @@\n \n-    def return_response_from_result(self, start_response, result) -> List[str]:\n+    def return_response_from_result(self, start_response, result) -> List[bytes]:\n         status = \"200 OK\"\n",
        "source_code_with_indent": "\n    <DED>def return_response_from_result(self, start_response, result) -> List[str]:\n        <IND>status = \"200 OK\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def return_response_from_result(self, start_response, result) -> List[bytes]:\n        <IND>status = \"200 OK\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mirumee/ariadne",
    "commit": "97c58190755ff014856a5c1df3efb2bf8a9ab4ac",
    "filename": "ariadne/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mirumee-ariadne/ariadne/wsgi.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ariadne/wsgi.py:183:46 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Dict[str, typing.Any], _typeshed.wsgi.StartResponse], typing.Iterable[bytes]]` for 3rd positional only parameter to call `make_server` but got `GraphQLMiddleware`.",
    "message": " Expected `typing.Callable[[typing.Dict[str, typing.Any], _typeshed.wsgi.StartResponse], typing.Iterable[bytes]]` for 3rd positional only parameter to call `make_server` but got `GraphQLMiddleware`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "        return make_server(\"127.0.0.1\", port, wsgi_app)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __call__(self, environ, start_response) -> List[str]:\n        if not environ[\"PATH_INFO\"].startswith(self.path):\n",
        "source_code_len": 122,
        "target_code": "\n    def __call__(self, environ, start_response) -> List[bytes]:\n        if not environ[\"PATH_INFO\"].startswith(self.path):\n",
        "target_code_len": 124,
        "diff_format": "@@ -88,3 +88,3 @@\n \n-    def __call__(self, environ, start_response) -> List[str]:\n+    def __call__(self, environ, start_response) -> List[bytes]:\n         if not environ[\"PATH_INFO\"].startswith(self.path):\n",
        "source_code_with_indent": "\n    <DED>def __call__(self, environ, start_response) -> List[str]:\n        <IND>if not environ[\"PATH_INFO\"].startswith(self.path):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __call__(self, environ, start_response) -> List[bytes]:\n        <IND>if not environ[\"PATH_INFO\"].startswith(self.path):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serve_request(self, environ, start_response) -> List[str]:\n        if environ[\"REQUEST_METHOD\"] == \"GET\":\n",
        "source_code_len": 115,
        "target_code": "\n    def serve_request(self, environ, start_response) -> List[bytes]:\n        if environ[\"REQUEST_METHOD\"] == \"GET\":\n",
        "target_code_len": 117,
        "diff_format": "@@ -97,3 +97,3 @@\n \n-    def serve_request(self, environ, start_response) -> List[str]:\n+    def serve_request(self, environ, start_response) -> List[bytes]:\n         if environ[\"REQUEST_METHOD\"] == \"GET\":\n",
        "source_code_with_indent": "\n    <DED><DED>def serve_request(self, environ, start_response) -> List[str]:\n        <IND>if environ[\"REQUEST_METHOD\"] == \"GET\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def serve_request(self, environ, start_response) -> List[bytes]:\n        <IND>if environ[\"REQUEST_METHOD\"] == \"GET\":\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def error_response(self, start_response, status, message=None) -> List[str]:\n        start_response(status, [(\"Content-Type\", \"text/plain\")])\n",
        "source_code_len": 147,
        "target_code": "\n    def error_response(self, start_response, status, message=None) -> List[bytes]:\n        start_response(status, [(\"Content-Type\", \"text/plain\")])\n",
        "target_code_len": 149,
        "diff_format": "@@ -105,3 +105,3 @@\n \n-    def error_response(self, start_response, status, message=None) -> List[str]:\n+    def error_response(self, start_response, status, message=None) -> List[bytes]:\n         start_response(status, [(\"Content-Type\", \"text/plain\")])\n",
        "source_code_with_indent": "\n    <DED>def error_response(self, start_response, status, message=None) -> List[str]:\n        <IND>start_response(status, [(\"Content-Type\", \"text/plain\")])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def error_response(self, start_response, status, message=None) -> List[bytes]:\n        <IND>start_response(status, [(\"Content-Type\", \"text/plain\")])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serve_playground(self, start_response) -> List[str]:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "source_code_len": 128,
        "target_code": "\n    def serve_playground(self, start_response) -> List[bytes]:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "target_code_len": 130,
        "diff_format": "@@ -110,3 +110,3 @@\n \n-    def serve_playground(self, start_response) -> List[str]:\n+    def serve_playground(self, start_response) -> List[bytes]:\n         start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "source_code_with_indent": "\n    <DED>def serve_playground(self, start_response) -> List[str]:\n        <IND>start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def serve_playground(self, start_response) -> List[bytes]:\n        <IND>start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serve_query(self, environ, start_response) -> List[str]:\n        data = self.get_request_data(environ)\n",
        "source_code_len": 112,
        "target_code": "\n    def serve_query(self, environ, start_response) -> List[bytes]:\n        data = self.get_request_data(environ)\n",
        "target_code_len": 114,
        "diff_format": "@@ -114,3 +114,3 @@\n \n-    def serve_query(self, environ, start_response) -> List[str]:\n+    def serve_query(self, environ, start_response) -> List[bytes]:\n         data = self.get_request_data(environ)\n",
        "source_code_with_indent": "\n    <DED>def serve_query(self, environ, start_response) -> List[str]:\n        <IND>data = self.get_request_data(environ)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def serve_query(self, environ, start_response) -> List[bytes]:\n        <IND>data = self.get_request_data(environ)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def return_response_from_result(self, start_response, result) -> List[str]:\n        status = \"200 OK\"\n",
        "source_code_len": 107,
        "target_code": "\n    def return_response_from_result(self, start_response, result) -> List[bytes]:\n        status = \"200 OK\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -164,3 +164,3 @@\n \n-    def return_response_from_result(self, start_response, result) -> List[str]:\n+    def return_response_from_result(self, start_response, result) -> List[bytes]:\n         status = \"200 OK\"\n",
        "source_code_with_indent": "\n    <DED>def return_response_from_result(self, start_response, result) -> List[str]:\n        <IND>status = \"200 OK\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def return_response_from_result(self, start_response, result) -> List[bytes]:\n        <IND>status = \"200 OK\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]