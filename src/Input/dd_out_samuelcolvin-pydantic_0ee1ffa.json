[
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:58:4 Incompatible attribute type [8]: Attribute `strip_whitespace` declared in class `ConstrainedStr` has type `bool` but is used as type `None`.",
    "message": " Attribute `strip_whitespace` declared in class `ConstrainedStr` has type `bool` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 58,
    "warning_line": "    strip_whitespace: bool = None"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:59:4 Incompatible attribute type [8]: Attribute `min_length` declared in class `ConstrainedStr` has type `int` but is used as type `None`.",
    "message": " Attribute `min_length` declared in class `ConstrainedStr` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 59,
    "warning_line": "    min_length: int = None"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:60:4 Incompatible attribute type [8]: Attribute `max_length` declared in class `ConstrainedStr` has type `int` but is used as type `None`.",
    "message": " Attribute `max_length` declared in class `ConstrainedStr` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 60,
    "warning_line": "    max_length: int = None"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:61:4 Incompatible attribute type [8]: Attribute `curtail_length` declared in class `ConstrainedStr` has type `int` but is used as type `None`.",
    "message": " Attribute `curtail_length` declared in class `ConstrainedStr` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 61,
    "warning_line": "    curtail_length: int = None"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:182:4 Incompatible attribute type [8]: Attribute `gt` declared in class `ConstrainedInt` has type `int` but is used as type `None`.",
    "message": " Attribute `gt` declared in class `ConstrainedInt` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 182,
    "warning_line": "    gt: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ConstrainedInt(int):\n    gt: int = None\n    lt: int = None\n\n",
        "source_code_len": 66,
        "target_code": "class ConstrainedInt(int):\n    gt: Optional[int] = None\n    lt: Optional[int] = None\n\n",
        "target_code_len": 86,
        "diff_format": "@@ -181,4 +173,4 @@\n class ConstrainedInt(int):\n-    gt: int = None\n-    lt: int = None\n+    gt: Optional[int] = None\n+    lt: Optional[int] = None\n \n",
        "source_code_with_indent": "<DED><DED>class ConstrainedInt(int):\n    <IND>gt: int = None\n    lt: int = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>class ConstrainedInt(int):\n    <IND>gt: Optional[int] = None\n    lt: Optional[int] = None\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        yield int\n        yield cls.validate\n\n    @classmethod\n    def validate(cls, value: int) -> int:\n        if cls.gt is not None and value <= cls.gt:\n            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        elif cls.lt is not None and value >= cls.lt:\n            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        return value\n\n",
        "source_code_len": 382,
        "target_code": "        yield int\n        yield number_size_validator\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -187,11 +179,3 @@\n         yield int\n-        yield cls.validate\n-\n-    @classmethod\n-    def validate(cls, value: int) -> int:\n-        if cls.gt is not None and value <= cls.gt:\n-            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n-        elif cls.lt is not None and value >= cls.lt:\n-            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n-        return value\n+        yield number_size_validator\n \n",
        "source_code_with_indent": "        <IND>yield int\n        yield cls.validate\n\n    <DED>@classmethod\n    def validate(cls, value: int) -> int:\n        <IND>if cls.gt is not None and value <= cls.gt:\n            <IND>raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        <DED>elif cls.lt is not None and value >= cls.lt:\n            <IND>raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        <DED>return value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>yield int\n        yield number_size_validator\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:183:4 Incompatible attribute type [8]: Attribute `lt` declared in class `ConstrainedInt` has type `int` but is used as type `None`.",
    "message": " Attribute `lt` declared in class `ConstrainedInt` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 183,
    "warning_line": "    lt: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ConstrainedInt(int):\n    gt: int = None\n    lt: int = None\n\n",
        "source_code_len": 66,
        "target_code": "class ConstrainedInt(int):\n    gt: Optional[int] = None\n    lt: Optional[int] = None\n\n",
        "target_code_len": 86,
        "diff_format": "@@ -181,4 +173,4 @@\n class ConstrainedInt(int):\n-    gt: int = None\n-    lt: int = None\n+    gt: Optional[int] = None\n+    lt: Optional[int] = None\n \n",
        "source_code_with_indent": "<DED><DED>class ConstrainedInt(int):\n    <IND>gt: int = None\n    lt: int = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>class ConstrainedInt(int):\n    <IND>gt: Optional[int] = None\n    lt: Optional[int] = None\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        yield int\n        yield cls.validate\n\n    @classmethod\n    def validate(cls, value: int) -> int:\n        if cls.gt is not None and value <= cls.gt:\n            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        elif cls.lt is not None and value >= cls.lt:\n            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        return value\n\n",
        "source_code_len": 382,
        "target_code": "        yield int\n        yield number_size_validator\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -187,11 +179,3 @@\n         yield int\n-        yield cls.validate\n-\n-    @classmethod\n-    def validate(cls, value: int) -> int:\n-        if cls.gt is not None and value <= cls.gt:\n-            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n-        elif cls.lt is not None and value >= cls.lt:\n-            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n-        return value\n+        yield number_size_validator\n \n",
        "source_code_with_indent": "        <IND>yield int\n        yield cls.validate\n\n    <DED>@classmethod\n    def validate(cls, value: int) -> int:\n        <IND>if cls.gt is not None and value <= cls.gt:\n            <IND>raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        <DED>elif cls.lt is not None and value >= cls.lt:\n            <IND>raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        <DED>return value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>yield int\n        yield number_size_validator\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:214:4 Incompatible attribute type [8]: Attribute `gt` declared in class `ConstrainedFloat` has type `Union[float, int]` but is used as type `None`.",
    "message": " Attribute `gt` declared in class `ConstrainedFloat` has type `Union[float, int]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 214,
    "warning_line": "    gt: Union[int, float] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ConstrainedFloat(float):\n    gt: Union[int, float] = None\n    lt: Union[int, float] = None\n\n",
        "source_code_len": 98,
        "target_code": "class ConstrainedFloat(float):\n    gt: Union[None, int, float] = None\n    lt: Union[None, int, float] = None\n\n",
        "target_code_len": 110,
        "diff_format": "@@ -213,4 +197,4 @@\n class ConstrainedFloat(float):\n-    gt: Union[int, float] = None\n-    lt: Union[int, float] = None\n+    gt: Union[None, int, float] = None\n+    lt: Union[None, int, float] = None\n \n",
        "source_code_with_indent": "<DED>class ConstrainedFloat(float):\n    <IND>gt: Union[int, float] = None\n    lt: Union[int, float] = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class ConstrainedFloat(float):\n    <IND>gt: Union[None, int, float] = None\n    lt: Union[None, int, float] = None\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        yield float\n        yield cls.validate\n\n    @classmethod\n    def validate(cls, value: float) -> float:\n        if cls.gt is not None and value <= cls.gt:\n            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        elif cls.lt is not None and value >= cls.lt:\n            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        return value\n\n",
        "source_code_len": 388,
        "target_code": "        yield float\n        yield number_size_validator\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -219,11 +203,3 @@\n         yield float\n-        yield cls.validate\n-\n-    @classmethod\n-    def validate(cls, value: float) -> float:\n-        if cls.gt is not None and value <= cls.gt:\n-            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n-        elif cls.lt is not None and value >= cls.lt:\n-            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n-        return value\n+        yield number_size_validator\n \n",
        "source_code_with_indent": "        <IND>yield float\n        yield cls.validate\n\n    <DED>@classmethod\n    def validate(cls, value: float) -> float:\n        <IND>if cls.gt is not None and value <= cls.gt:\n            <IND>raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        <DED>elif cls.lt is not None and value >= cls.lt:\n            <IND>raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        <DED>return value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>yield float\n        yield number_size_validator\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "0ee1ffa52a4bed14e54afa14a9dc8d54f55651c3",
    "filename": "pydantic/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/types.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/types.py:215:4 Incompatible attribute type [8]: Attribute `lt` declared in class `ConstrainedFloat` has type `Union[float, int]` but is used as type `None`.",
    "message": " Attribute `lt` declared in class `ConstrainedFloat` has type `Union[float, int]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 215,
    "warning_line": "    lt: Union[int, float] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ConstrainedFloat(float):\n    gt: Union[int, float] = None\n    lt: Union[int, float] = None\n\n",
        "source_code_len": 98,
        "target_code": "class ConstrainedFloat(float):\n    gt: Union[None, int, float] = None\n    lt: Union[None, int, float] = None\n\n",
        "target_code_len": 110,
        "diff_format": "@@ -213,4 +197,4 @@\n class ConstrainedFloat(float):\n-    gt: Union[int, float] = None\n-    lt: Union[int, float] = None\n+    gt: Union[None, int, float] = None\n+    lt: Union[None, int, float] = None\n \n",
        "source_code_with_indent": "<DED>class ConstrainedFloat(float):\n    <IND>gt: Union[int, float] = None\n    lt: Union[int, float] = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class ConstrainedFloat(float):\n    <IND>gt: Union[None, int, float] = None\n    lt: Union[None, int, float] = None\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        yield float\n        yield cls.validate\n\n    @classmethod\n    def validate(cls, value: float) -> float:\n        if cls.gt is not None and value <= cls.gt:\n            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        elif cls.lt is not None and value >= cls.lt:\n            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        return value\n\n",
        "source_code_len": 388,
        "target_code": "        yield float\n        yield number_size_validator\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -219,11 +203,3 @@\n         yield float\n-        yield cls.validate\n-\n-    @classmethod\n-    def validate(cls, value: float) -> float:\n-        if cls.gt is not None and value <= cls.gt:\n-            raise ValueError(f'size less than minimum allowed: {cls.gt}')\n-        elif cls.lt is not None and value >= cls.lt:\n-            raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n-        return value\n+        yield number_size_validator\n \n",
        "source_code_with_indent": "        <IND>yield float\n        yield cls.validate\n\n    <DED>@classmethod\n    def validate(cls, value: float) -> float:\n        <IND>if cls.gt is not None and value <= cls.gt:\n            <IND>raise ValueError(f'size less than minimum allowed: {cls.gt}')\n        <DED>elif cls.lt is not None and value >= cls.lt:\n            <IND>raise ValueError(f'size greater than maximum allowed: {cls.lt}')\n        <DED>return value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>yield float\n        yield number_size_validator\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]