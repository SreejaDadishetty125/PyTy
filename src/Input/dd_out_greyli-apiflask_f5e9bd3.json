[
  {
    "project": "greyli/apiflask",
    "commit": "f5e9bd30db5c5d133f51dad79f658d5c4995ed0b",
    "filename": "src/apiflask/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/greyli-apiflask/src/apiflask/app.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/apiflask/app.py:344:16 Incompatible variable type [9]: error is declared to have type `WerkzeugHTTPException` but is used as type `HTTPError`.",
    "message": " error is declared to have type `WerkzeugHTTPException` but is used as type `HTTPError`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 344,
    "warning_line": "                error = HTTPError(error.code, error.name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            ) -> ResponseType:\n                error = HTTPError(error.code, error.name)\n                return self.error_callback(error)\n",
        "source_code_len": 139,
        "target_code": "            ) -> ResponseType:\n                error = HTTPError(error.code, error.name)  # type: ignore\n                return self.error_callback(error)\n",
        "target_code_len": 155,
        "diff_format": "@@ -343,3 +343,3 @@\n             ) -> ResponseType:\n-                error = HTTPError(error.code, error.name)\n+                error = HTTPError(error.code, error.name)  # type: ignore\n                 return self.error_callback(error)\n",
        "source_code_with_indent": "            ) -> ResponseType:\n                <IND>error = HTTPError(error.code, error.name)\n                return self.error_callback(error)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ) -> ResponseType:\n                <IND>error = HTTPError(error.code, error.name)  # type: ignore\n                return self.error_callback(error)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "greyli/apiflask",
    "commit": "f5e9bd30db5c5d133f51dad79f658d5c4995ed0b",
    "filename": "src/apiflask/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/greyli-apiflask/src/apiflask/app.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/apiflask/app.py:344:34 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `HTTPError.__init__` but got `t.Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `HTTPError.__init__` but got `t.Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 344,
    "warning_line": "                error = HTTPError(error.code, error.name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            ) -> ResponseType:\n                error = HTTPError(error.code, error.name)\n                return self.error_callback(error)\n",
        "source_code_len": 139,
        "target_code": "            ) -> ResponseType:\n                error = HTTPError(error.code, error.name)  # type: ignore\n                return self.error_callback(error)\n",
        "target_code_len": 155,
        "diff_format": "@@ -343,3 +343,3 @@\n             ) -> ResponseType:\n-                error = HTTPError(error.code, error.name)\n+                error = HTTPError(error.code, error.name)  # type: ignore\n                 return self.error_callback(error)\n",
        "source_code_with_indent": "            ) -> ResponseType:\n                <IND>error = HTTPError(error.code, error.name)\n                return self.error_callback(error)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ) -> ResponseType:\n                <IND>error = HTTPError(error.code, error.name)  # type: ignore\n                return self.error_callback(error)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]