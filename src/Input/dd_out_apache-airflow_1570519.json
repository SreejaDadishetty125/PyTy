[
  {
    "project": "apache/airflow",
    "commit": "1570519a976dfb9de1aba9c2c0bee169e7ab5ee1",
    "filename": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py:111:8 Incompatible variable type [9]: params is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " params is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 111,
    "warning_line": "        params: Dict[str, Any] = None,"
  },
  {
    "project": "apache/airflow",
    "commit": "1570519a976dfb9de1aba9c2c0bee169e7ab5ee1",
    "filename": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py:112:8 Incompatible variable type [9]: parameters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " parameters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 112,
    "warning_line": "        parameters: Dict[str, Any] = None,"
  },
  {
    "project": "apache/airflow",
    "commit": "1570519a976dfb9de1aba9c2c0bee169e7ab5ee1",
    "filename": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py:205:16 Incompatible parameter type [6]: Expected `List[typing.Any]` for 1st parameter `converted_rows` to call `FacebookAdsReportToGcsOperator._flush_rows` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `List[typing.Any]` for 1st parameter `converted_rows` to call `FacebookAdsReportToGcsOperator._flush_rows` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 205,
    "warning_line": "                converted_rows=converted_rows_with_action.get(FlushAction.EXPORT_ONCE),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        total_data_count = 0\n        if FlushAction.EXPORT_ONCE in converted_rows_with_action:\n            self._flush_rows(\n                converted_rows=converted_rows_with_action.get(FlushAction.EXPORT_ONCE),\n                object_name=self.object_name,\n            )\n            total_data_count += len(converted_rows_with_action.get(FlushAction.EXPORT_ONCE))\n        elif FlushAction.EXPORT_EVERY_ACCOUNT in converted_rows_with_action:\n            for converted_rows in converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT):\n                self._flush_rows(\n                    converted_rows=converted_rows.get(\"converted_rows\"),\n                    object_name=self._transform_object_name_with_account_id(\n                        account_id=converted_rows.get(\"account_id\")\n                    ),\n                )\n                total_data_count += len(converted_rows.get(\"converted_rows\"))\n        else:\n            message = (\n                \"FlushAction not found in the data. Please check the FlushAction in the operator. Converted \"\n                \"Rows with Action: \" + str(converted_rows_with_action)\n            )\n            raise AirflowException(message)\n        return total_data_count\n\n    def _flush_rows(self, converted_rows: list, object_name: str):\n        if converted_rows:\n",
        "source_code_len": 1318,
        "target_code": "        total_data_count = 0\n        once_action = converted_rows_with_action.get(FlushAction.EXPORT_ONCE)\n        if once_action is not None:\n            self._flush_rows(\n                converted_rows=once_action,\n                object_name=self.object_name,\n            )\n            total_data_count += len(once_action)\n        else:\n            every_account_action = converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT)\n            if every_account_action:\n                for converted_rows in every_account_action:\n                    self._flush_rows(\n                        converted_rows=converted_rows.get(\"converted_rows\"),\n                        object_name=self._transform_object_name_with_account_id(\n                            account_id=converted_rows.get(\"account_id\")\n                        ),\n                    )\n                    total_data_count += len(converted_rows.get(\"converted_rows\"))\n            else:\n                message = (\n                    \"FlushAction not found in the data. Please check the FlushAction in \"\n                    \"the operator. Converted Rows with Action: \" + str(converted_rows_with_action)\n                )\n                raise AirflowException(message)\n        return total_data_count\n\n    def _flush_rows(self, converted_rows: Optional[List[Any]], object_name: str):\n        if converted_rows:\n",
        "target_code_len": 1379,
        "diff_format": "@@ -202,26 +202,29 @@\n         total_data_count = 0\n-        if FlushAction.EXPORT_ONCE in converted_rows_with_action:\n+        once_action = converted_rows_with_action.get(FlushAction.EXPORT_ONCE)\n+        if once_action is not None:\n             self._flush_rows(\n-                converted_rows=converted_rows_with_action.get(FlushAction.EXPORT_ONCE),\n+                converted_rows=once_action,\n                 object_name=self.object_name,\n             )\n-            total_data_count += len(converted_rows_with_action.get(FlushAction.EXPORT_ONCE))\n-        elif FlushAction.EXPORT_EVERY_ACCOUNT in converted_rows_with_action:\n-            for converted_rows in converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT):\n-                self._flush_rows(\n-                    converted_rows=converted_rows.get(\"converted_rows\"),\n-                    object_name=self._transform_object_name_with_account_id(\n-                        account_id=converted_rows.get(\"account_id\")\n-                    ),\n+            total_data_count += len(once_action)\n+        else:\n+            every_account_action = converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT)\n+            if every_account_action:\n+                for converted_rows in every_account_action:\n+                    self._flush_rows(\n+                        converted_rows=converted_rows.get(\"converted_rows\"),\n+                        object_name=self._transform_object_name_with_account_id(\n+                            account_id=converted_rows.get(\"account_id\")\n+                        ),\n+                    )\n+                    total_data_count += len(converted_rows.get(\"converted_rows\"))\n+            else:\n+                message = (\n+                    \"FlushAction not found in the data. Please check the FlushAction in \"\n+                    \"the operator. Converted Rows with Action: \" + str(converted_rows_with_action)\n                 )\n-                total_data_count += len(converted_rows.get(\"converted_rows\"))\n-        else:\n-            message = (\n-                \"FlushAction not found in the data. Please check the FlushAction in the operator. Converted \"\n-                \"Rows with Action: \" + str(converted_rows_with_action)\n-            )\n-            raise AirflowException(message)\n+                raise AirflowException(message)\n         return total_data_count\n \n-    def _flush_rows(self, converted_rows: list, object_name: str):\n+    def _flush_rows(self, converted_rows: Optional[List[Any]], object_name: str):\n         if converted_rows:\n",
        "source_code_with_indent": "        <IND>total_data_count = 0\n        if FlushAction.EXPORT_ONCE in converted_rows_with_action:\n            <IND>self._flush_rows(\n                converted_rows=converted_rows_with_action.get(FlushAction.EXPORT_ONCE),\n                object_name=self.object_name,\n            )\n            total_data_count += len(converted_rows_with_action.get(FlushAction.EXPORT_ONCE))\n        <DED>elif FlushAction.EXPORT_EVERY_ACCOUNT in converted_rows_with_action:\n            <IND>for converted_rows in converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT):\n                <IND>self._flush_rows(\n                    converted_rows=converted_rows.get(\"converted_rows\"),\n                    object_name=self._transform_object_name_with_account_id(\n                        account_id=converted_rows.get(\"account_id\")\n                    ),\n                )\n                total_data_count += len(converted_rows.get(\"converted_rows\"))\n        <DED><DED>else:\n            <IND>message = (\n                \"FlushAction not found in the data. Please check the FlushAction in the operator. Converted \"\n                \"Rows with Action: \" + str(converted_rows_with_action)\n            )\n            raise AirflowException(message)\n        <DED>return total_data_count\n\n    <DED>def _flush_rows(self, converted_rows: list, object_name: str):\n        <IND>if converted_rows:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>total_data_count = 0\n        once_action = converted_rows_with_action.get(FlushAction.EXPORT_ONCE)\n        if once_action is not None:\n            <IND>self._flush_rows(\n                converted_rows=once_action,\n                object_name=self.object_name,\n            )\n            total_data_count += len(once_action)\n        <DED>else:\n            <IND>every_account_action = converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT)\n            if every_account_action:\n                <IND>for converted_rows in every_account_action:\n                    <IND>self._flush_rows(\n                        converted_rows=converted_rows.get(\"converted_rows\"),\n                        object_name=self._transform_object_name_with_account_id(\n                            account_id=converted_rows.get(\"account_id\")\n                        ),\n                    )\n                    total_data_count += len(converted_rows.get(\"converted_rows\"))\n            <DED><DED>else:\n                <IND>message = (\n                    \"FlushAction not found in the data. Please check the FlushAction in \"\n                    \"the operator. Converted Rows with Action: \" + str(converted_rows_with_action)\n                )\n                raise AirflowException(message)\n        <DED><DED>return total_data_count\n\n    <DED>def _flush_rows(self, converted_rows: Optional[List[Any]], object_name: str):\n        <IND>if converted_rows:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "1570519a976dfb9de1aba9c2c0bee169e7ab5ee1",
    "filename": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/transfers/facebook_ads_to_gcs.py:208:36 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 208,
    "warning_line": "            total_data_count += len(converted_rows_with_action.get(FlushAction.EXPORT_ONCE))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        total_data_count = 0\n        if FlushAction.EXPORT_ONCE in converted_rows_with_action:\n            self._flush_rows(\n                converted_rows=converted_rows_with_action.get(FlushAction.EXPORT_ONCE),\n                object_name=self.object_name,\n            )\n            total_data_count += len(converted_rows_with_action.get(FlushAction.EXPORT_ONCE))\n        elif FlushAction.EXPORT_EVERY_ACCOUNT in converted_rows_with_action:\n            for converted_rows in converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT):\n                self._flush_rows(\n                    converted_rows=converted_rows.get(\"converted_rows\"),\n                    object_name=self._transform_object_name_with_account_id(\n                        account_id=converted_rows.get(\"account_id\")\n                    ),\n                )\n                total_data_count += len(converted_rows.get(\"converted_rows\"))\n        else:\n            message = (\n                \"FlushAction not found in the data. Please check the FlushAction in the operator. Converted \"\n                \"Rows with Action: \" + str(converted_rows_with_action)\n            )\n            raise AirflowException(message)\n        return total_data_count\n\n    def _flush_rows(self, converted_rows: list, object_name: str):\n        if converted_rows:\n",
        "source_code_len": 1318,
        "target_code": "        total_data_count = 0\n        once_action = converted_rows_with_action.get(FlushAction.EXPORT_ONCE)\n        if once_action is not None:\n            self._flush_rows(\n                converted_rows=once_action,\n                object_name=self.object_name,\n            )\n            total_data_count += len(once_action)\n        else:\n            every_account_action = converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT)\n            if every_account_action:\n                for converted_rows in every_account_action:\n                    self._flush_rows(\n                        converted_rows=converted_rows.get(\"converted_rows\"),\n                        object_name=self._transform_object_name_with_account_id(\n                            account_id=converted_rows.get(\"account_id\")\n                        ),\n                    )\n                    total_data_count += len(converted_rows.get(\"converted_rows\"))\n            else:\n                message = (\n                    \"FlushAction not found in the data. Please check the FlushAction in \"\n                    \"the operator. Converted Rows with Action: \" + str(converted_rows_with_action)\n                )\n                raise AirflowException(message)\n        return total_data_count\n\n    def _flush_rows(self, converted_rows: Optional[List[Any]], object_name: str):\n        if converted_rows:\n",
        "target_code_len": 1379,
        "diff_format": "@@ -202,26 +202,29 @@\n         total_data_count = 0\n-        if FlushAction.EXPORT_ONCE in converted_rows_with_action:\n+        once_action = converted_rows_with_action.get(FlushAction.EXPORT_ONCE)\n+        if once_action is not None:\n             self._flush_rows(\n-                converted_rows=converted_rows_with_action.get(FlushAction.EXPORT_ONCE),\n+                converted_rows=once_action,\n                 object_name=self.object_name,\n             )\n-            total_data_count += len(converted_rows_with_action.get(FlushAction.EXPORT_ONCE))\n-        elif FlushAction.EXPORT_EVERY_ACCOUNT in converted_rows_with_action:\n-            for converted_rows in converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT):\n-                self._flush_rows(\n-                    converted_rows=converted_rows.get(\"converted_rows\"),\n-                    object_name=self._transform_object_name_with_account_id(\n-                        account_id=converted_rows.get(\"account_id\")\n-                    ),\n+            total_data_count += len(once_action)\n+        else:\n+            every_account_action = converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT)\n+            if every_account_action:\n+                for converted_rows in every_account_action:\n+                    self._flush_rows(\n+                        converted_rows=converted_rows.get(\"converted_rows\"),\n+                        object_name=self._transform_object_name_with_account_id(\n+                            account_id=converted_rows.get(\"account_id\")\n+                        ),\n+                    )\n+                    total_data_count += len(converted_rows.get(\"converted_rows\"))\n+            else:\n+                message = (\n+                    \"FlushAction not found in the data. Please check the FlushAction in \"\n+                    \"the operator. Converted Rows with Action: \" + str(converted_rows_with_action)\n                 )\n-                total_data_count += len(converted_rows.get(\"converted_rows\"))\n-        else:\n-            message = (\n-                \"FlushAction not found in the data. Please check the FlushAction in the operator. Converted \"\n-                \"Rows with Action: \" + str(converted_rows_with_action)\n-            )\n-            raise AirflowException(message)\n+                raise AirflowException(message)\n         return total_data_count\n \n-    def _flush_rows(self, converted_rows: list, object_name: str):\n+    def _flush_rows(self, converted_rows: Optional[List[Any]], object_name: str):\n         if converted_rows:\n",
        "source_code_with_indent": "        <IND>total_data_count = 0\n        if FlushAction.EXPORT_ONCE in converted_rows_with_action:\n            <IND>self._flush_rows(\n                converted_rows=converted_rows_with_action.get(FlushAction.EXPORT_ONCE),\n                object_name=self.object_name,\n            )\n            total_data_count += len(converted_rows_with_action.get(FlushAction.EXPORT_ONCE))\n        <DED>elif FlushAction.EXPORT_EVERY_ACCOUNT in converted_rows_with_action:\n            <IND>for converted_rows in converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT):\n                <IND>self._flush_rows(\n                    converted_rows=converted_rows.get(\"converted_rows\"),\n                    object_name=self._transform_object_name_with_account_id(\n                        account_id=converted_rows.get(\"account_id\")\n                    ),\n                )\n                total_data_count += len(converted_rows.get(\"converted_rows\"))\n        <DED><DED>else:\n            <IND>message = (\n                \"FlushAction not found in the data. Please check the FlushAction in the operator. Converted \"\n                \"Rows with Action: \" + str(converted_rows_with_action)\n            )\n            raise AirflowException(message)\n        <DED>return total_data_count\n\n    <DED>def _flush_rows(self, converted_rows: list, object_name: str):\n        <IND>if converted_rows:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>total_data_count = 0\n        once_action = converted_rows_with_action.get(FlushAction.EXPORT_ONCE)\n        if once_action is not None:\n            <IND>self._flush_rows(\n                converted_rows=once_action,\n                object_name=self.object_name,\n            )\n            total_data_count += len(once_action)\n        <DED>else:\n            <IND>every_account_action = converted_rows_with_action.get(FlushAction.EXPORT_EVERY_ACCOUNT)\n            if every_account_action:\n                <IND>for converted_rows in every_account_action:\n                    <IND>self._flush_rows(\n                        converted_rows=converted_rows.get(\"converted_rows\"),\n                        object_name=self._transform_object_name_with_account_id(\n                            account_id=converted_rows.get(\"account_id\")\n                        ),\n                    )\n                    total_data_count += len(converted_rows.get(\"converted_rows\"))\n            <DED><DED>else:\n                <IND>message = (\n                    \"FlushAction not found in the data. Please check the FlushAction in \"\n                    \"the operator. Converted Rows with Action: \" + str(converted_rows_with_action)\n                )\n                raise AirflowException(message)\n        <DED><DED>return total_data_count\n\n    <DED>def _flush_rows(self, converted_rows: Optional[List[Any]], object_name: str):\n        <IND>if converted_rows:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]