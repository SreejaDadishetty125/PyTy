[
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:455:8 Incompatible return type [7]: Expected `List[Order]` but got `List[Optional[Order]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:460:8 Incompatible return type [7]: Expected `List[Order]` but got `List[Optional[Order]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:643:26 Incompatible parameter type [6]: Expected `Optional[Contract]` for 2nd positional only parameter to call `Trade.__init__` but got `Order`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:643:33 Incompatible parameter type [6]: Expected `Optional[Order]` for 3rd positional only parameter to call `Trade.__init__` but got `OrderStatus`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:643:46 Incompatible parameter type [6]: Expected `Optional[OrderStatus]` for 4th positional only parameter to call `Trade.__init__` but got `List[Variable[_T]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:1121:12 Incompatible variable type [9]: mktDataOptions is declared to have type `List[TagValue]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:1498:12 Incompatible variable type [9]: newsArticleOptions is declared to have type `List[TagValue]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:1520:12 Incompatible variable type [9]: historicalNewsOptions is declared to have type `List[TagValue]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/ib.py",
    "min_patch_found": false,
    "full_warning_msg": "ib_insync/ib.py:1934:12 Incompatible variable type [9]: historicalNewsOptions is declared to have type `List[TagValue]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:141:26 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 141,
    "warning_line": "        self.ticker2ReqId[tickType][ticker] = reqId",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[str, Dict[Ticker, int]] = defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n",
        "source_code_len": 146,
        "target_code": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[Union[int, str], Dict[Ticker, int]] = \\\n            defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n",
        "target_code_len": 172,
        "diff_format": "@@ -60,3 +64,4 @@\n         #    reqId -> Ticker\n-        self.ticker2ReqId: Dict[str, Dict[Ticker, int]] = defaultdict(dict)\n+        self.ticker2ReqId: Dict[Union[int, str], Dict[Ticker, int]] = \\\n+            defaultdict(dict)\n         #    tickType -> Ticker -> reqId\n",
        "source_code_with_indent": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[str, Dict[Ticker, int]] = defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[Union[int, str], Dict[Ticker, int]] =            defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n"
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:145:34 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "        reqId = self.ticker2ReqId[tickType].pop(ticker, 0)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[str, Dict[Ticker, int]] = defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n",
        "source_code_len": 146,
        "target_code": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[Union[int, str], Dict[Ticker, int]] = \\\n            defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n",
        "target_code_len": 172,
        "diff_format": "@@ -60,3 +64,4 @@\n         #    reqId -> Ticker\n-        self.ticker2ReqId: Dict[str, Dict[Ticker, int]] = defaultdict(dict)\n+        self.ticker2ReqId: Dict[Union[int, str], Dict[Ticker, int]] = \\\n+            defaultdict(dict)\n         #    tickType -> Ticker -> reqId\n",
        "source_code_with_indent": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[str, Dict[Ticker, int]] = defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "        #    reqId -> Ticker\n        self.ticker2ReqId: Dict[Union[int, str], Dict[Ticker, int]] =            defaultdict(dict)\n        #    tickType -> Ticker -> reqId\n"
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:324:40 Incompatible parameter type [6]: Expected `typing.Optional[Contract]` for 2nd positional only parameter to call `Trade.__init__` but got `Order`.",
    "message": " Expected `typing.Optional[Contract]` for 2nd positional only parameter to call `Trade.__init__` but got `Order`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 324,
    "warning_line": "                trade = Trade(contract, order, orderStatus, [], [])"
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:324:47 Incompatible parameter type [6]: Expected `typing.Optional[Order]` for 3rd positional only parameter to call `Trade.__init__` but got `OrderStatus`.",
    "message": " Expected `typing.Optional[Order]` for 3rd positional only parameter to call `Trade.__init__` but got `OrderStatus`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 324,
    "warning_line": "                trade = Trade(contract, order, orderStatus, [], [])"
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:324:60 Incompatible parameter type [6]: Expected `typing.Optional[OrderStatus]` for 4th positional only parameter to call `Trade.__init__` but got `List[Variable[_T]]`.",
    "message": " Expected `typing.Optional[OrderStatus]` for 4th positional only parameter to call `Trade.__init__` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 324,
    "warning_line": "                trade = Trade(contract, order, orderStatus, [], [])"
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:343:32 Incompatible parameter type [6]: Expected `typing.Optional[Contract]` for 2nd positional only parameter to call `Trade.__init__` but got `Order`.",
    "message": " Expected `typing.Optional[Contract]` for 2nd positional only parameter to call `Trade.__init__` but got `Order`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 343,
    "warning_line": "        trade = Trade(contract, order, orderStatus, [], [])"
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:343:39 Incompatible parameter type [6]: Expected `typing.Optional[Order]` for 3rd positional only parameter to call `Trade.__init__` but got `OrderStatus`.",
    "message": " Expected `typing.Optional[Order]` for 3rd positional only parameter to call `Trade.__init__` but got `OrderStatus`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 343,
    "warning_line": "        trade = Trade(contract, order, orderStatus, [], [])"
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:343:52 Incompatible parameter type [6]: Expected `typing.Optional[OrderStatus]` for 4th positional only parameter to call `Trade.__init__` but got `List[Variable[_T]]`.",
    "message": " Expected `typing.Optional[OrderStatus]` for 4th positional only parameter to call `Trade.__init__` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 343,
    "warning_line": "        trade = Trade(contract, order, orderStatus, [], [])"
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:358:8 Incompatible variable type [9]: trade is declared to have type `Trade` but is used as type `typing.Optional[Trade]`.",
    "message": " trade is declared to have type `Trade` but is used as type `typing.Optional[Trade]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 358,
    "warning_line": "        trade: Trade = self.trades.get(key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        #    account -> conId -> Position\n        self.trades: Dict[Any, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "source_code_len": 135,
        "target_code": "        #    account -> conId -> Position\n        self.trades: Dict[OrderKeyType, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "target_code_len": 144,
        "diff_format": "@@ -46,3 +50,3 @@\n         #    account -> conId -> Position\n-        self.trades: Dict[Any, Trade] = {}\n+        self.trades: Dict[OrderKeyType, Trade] = {}\n         #    (client, orderId) or permId -> Trade\n",
        "source_code_with_indent": "        #    account -> conId -> Position\n        self.trades: Dict[Any, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        #    account -> conId -> Position\n        self.trades: Dict[OrderKeyType, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:409:12 Incompatible variable type [9]: contract is declared to have type `Contract` but is used as type `typing.Optional[Contract]`.",
    "message": " contract is declared to have type `Contract` but is used as type `typing.Optional[Contract]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 409,
    "warning_line": "            contract = trade.contract",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        #    account -> conId -> Position\n        self.trades: Dict[Any, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "source_code_len": 135,
        "target_code": "        #    account -> conId -> Position\n        self.trades: Dict[OrderKeyType, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "target_code_len": 144,
        "diff_format": "@@ -46,3 +50,3 @@\n         #    account -> conId -> Position\n-        self.trades: Dict[Any, Trade] = {}\n+        self.trades: Dict[OrderKeyType, Trade] = {}\n         #    (client, orderId) or permId -> Trade\n",
        "source_code_with_indent": "        #    account -> conId -> Position\n        self.trades: Dict[Any, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        #    account -> conId -> Position\n        self.trades: Dict[OrderKeyType, Trade] = {}\n        #    (client, orderId) or permId -> Trade\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:420:23 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 420,
    "warning_line": "            self.fills[execId] = fill",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        #    permId -> Trade\n        self.fills: Dict[int, Fill] = {}\n        #    execId -> Fill\n",
        "source_code_len": 98,
        "target_code": "        #    permId -> Trade\n        self.fills: Dict[str, Fill] = {}\n        #    execId -> Fill\n",
        "target_code_len": 98,
        "diff_format": "@@ -50,3 +54,3 @@\n         #    permId -> Trade\n-        self.fills: Dict[int, Fill] = {}\n+        self.fills: Dict[str, Fill] = {}\n         #    execId -> Fill\n",
        "source_code_with_indent": "        #    permId -> Trade\n        self.fills: Dict[int, Fill] = {}\n        #    execId -> Fill\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        #    permId -> Trade\n        self.fills: Dict[str, Fill] = {}\n        #    execId -> Fill\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:443:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `typing.Mapping.get` but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to call `typing.Mapping.get` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 443,
    "warning_line": "        fill = self.fills.get(commissionReport.execId)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        #    permId -> Trade\n        self.fills: Dict[int, Fill] = {}\n        #    execId -> Fill\n",
        "source_code_len": 98,
        "target_code": "        #    permId -> Trade\n        self.fills: Dict[str, Fill] = {}\n        #    execId -> Fill\n",
        "target_code_len": 98,
        "diff_format": "@@ -50,3 +54,3 @@\n         #    permId -> Trade\n-        self.fills: Dict[int, Fill] = {}\n+        self.fills: Dict[str, Fill] = {}\n         #    execId -> Fill\n",
        "source_code_with_indent": "        #    permId -> Trade\n        self.fills: Dict[int, Fill] = {}\n        #    execId -> Fill\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        #    permId -> Trade\n        self.fills: Dict[str, Fill] = {}\n        #    execId -> Fill\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:482:26 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `RealTimeBar.__init__` but got `datetime`.",
    "message": " Expected `int` for 1st positional only parameter to call `RealTimeBar.__init__` but got `datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 482,
    "warning_line": "        bar = RealTimeBar(dt, -1, open_, high, low, close, volume, wap, count)"
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:522:39 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `datetime.fromtimestamp` but got `datetime`.",
    "message": " Expected `float` for 1st positional only parameter to call `datetime.fromtimestamp` but got `datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 522,
    "warning_line": "                datetime.fromtimestamp(t.time, timezone.utc),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, reqId: int, ticks: List[HistoricalTick], done: bool):\n        self._results[reqId] += [\n            HistoricalTick(\n                datetime.fromtimestamp(t.time, timezone.utc),\n                t.price, t.size)\n            for t in ticks]\n        if done:\n",
        "source_code_len": 274,
        "target_code": "            self, reqId: int, ticks: List[HistoricalTick], done: bool):\n        self._results[reqId] += ticks\n        if done:\n",
        "target_code_len": 127,
        "diff_format": "@@ -519,7 +525,3 @@\n             self, reqId: int, ticks: List[HistoricalTick], done: bool):\n-        self._results[reqId] += [\n-            HistoricalTick(\n-                datetime.fromtimestamp(t.time, timezone.utc),\n-                t.price, t.size)\n-            for t in ticks]\n+        self._results[reqId] += ticks\n         if done:\n",
        "source_code_with_indent": "            self, reqId: int, ticks: List[HistoricalTick], done: bool):\n        <IND>self._results[reqId] += [\n            HistoricalTick(\n                datetime.fromtimestamp(t.time, timezone.utc),\n                t.price, t.size)\n            for t in ticks]\n        if done:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, reqId: int, ticks: List[HistoricalTick], done: bool):\n        <IND>self._results[reqId] += ticks\n        if done:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:532:39 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `datetime.fromtimestamp` but got `datetime`.",
    "message": " Expected `float` for 1st positional only parameter to call `datetime.fromtimestamp` but got `datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 532,
    "warning_line": "                datetime.fromtimestamp(t.time, timezone.utc),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, reqId: int, ticks: List[HistoricalTickBidAsk], done: bool):\n        self._results[reqId] += [\n            HistoricalTickBidAsk(\n                datetime.fromtimestamp(t.time, timezone.utc),\n                t.tickAttribBidAsk,\n                t.priceBid, t.priceAsk, t.sizeBid, t.sizeAsk)\n            for t in ticks]\n        if done:\n",
        "source_code_len": 351,
        "target_code": "            self, reqId: int, ticks: List[HistoricalTickBidAsk], done: bool):\n        self._results[reqId] += ticks\n        if done:\n",
        "target_code_len": 133,
        "diff_format": "@@ -529,8 +531,3 @@\n             self, reqId: int, ticks: List[HistoricalTickBidAsk], done: bool):\n-        self._results[reqId] += [\n-            HistoricalTickBidAsk(\n-                datetime.fromtimestamp(t.time, timezone.utc),\n-                t.tickAttribBidAsk,\n-                t.priceBid, t.priceAsk, t.sizeBid, t.sizeAsk)\n-            for t in ticks]\n+        self._results[reqId] += ticks\n         if done:\n",
        "source_code_with_indent": "            self, reqId: int, ticks: List[HistoricalTickBidAsk], done: bool):\n        <IND>self._results[reqId] += [\n            HistoricalTickBidAsk(\n                datetime.fromtimestamp(t.time, timezone.utc),\n                t.tickAttribBidAsk,\n                t.priceBid, t.priceAsk, t.sizeBid, t.sizeAsk)\n            for t in ticks]\n        if done:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, reqId: int, ticks: List[HistoricalTickBidAsk], done: bool):\n        <IND>self._results[reqId] += ticks\n        if done:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:543:39 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `datetime.fromtimestamp` but got `datetime`.",
    "message": " Expected `float` for 1st positional only parameter to call `datetime.fromtimestamp` but got `datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 543,
    "warning_line": "                datetime.fromtimestamp(t.time, timezone.utc),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, reqId: int, ticks: List[HistoricalTickLast], done: bool):\n        self._results[reqId] += [\n            HistoricalTickLast(\n                datetime.fromtimestamp(t.time, timezone.utc),\n                t.tickAttribLast,\n                t.price, t.size, t.exchange, t.specialConditions)\n            for t in ticks if t.size]\n        if done:\n",
        "source_code_len": 359,
        "target_code": "            self, reqId: int, ticks: List[HistoricalTickLast], done: bool):\n        self._results[reqId] += ticks\n        if done:\n",
        "target_code_len": 131,
        "diff_format": "@@ -540,8 +537,3 @@\n             self, reqId: int, ticks: List[HistoricalTickLast], done: bool):\n-        self._results[reqId] += [\n-            HistoricalTickLast(\n-                datetime.fromtimestamp(t.time, timezone.utc),\n-                t.tickAttribLast,\n-                t.price, t.size, t.exchange, t.specialConditions)\n-            for t in ticks if t.size]\n+        self._results[reqId] += ticks\n         if done:\n",
        "source_code_with_indent": "            self, reqId: int, ticks: List[HistoricalTickLast], done: bool):\n        <IND>self._results[reqId] += [\n            HistoricalTickLast(\n                datetime.fromtimestamp(t.time, timezone.utc),\n                t.tickAttribLast,\n                t.price, t.size, t.exchange, t.specialConditions)\n            for t in ticks if t.size]\n        if done:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, reqId: int, ticks: List[HistoricalTickLast], done: bool):\n        <IND>self._results[reqId] += ticks\n        if done:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ib_insync/wrapper.py:735:25 Incompatible parameter type [6]: Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[List[str], None, None]`.",
    "message": " Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[List[str], None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 735,
    "warning_line": "                d = dict(t.split('=') for t in value.split(';') if t)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                # https://interactivebrokers.github.io/tws-api/fundamental_ratios_tags.html\n                d = dict(t.split('=') for t in value.split(';') if t)\n                for k, v in d.items():\n",
        "source_code_len": 201,
        "target_code": "                # https://interactivebrokers.github.io/tws-api/fundamental_ratios_tags.html\n                d = dict(t.split('=')                     # type: ignore\n                         for t in value.split(';') if t)  # type: ignore\n                for k, v in d.items():\n",
        "target_code_len": 277,
        "diff_format": "@@ -734,3 +726,4 @@\n                 # https://interactivebrokers.github.io/tws-api/fundamental_ratios_tags.html\n-                d = dict(t.split('=') for t in value.split(';') if t)\n+                d = dict(t.split('=')                     # type: ignore\n+                         for t in value.split(';') if t)  # type: ignore\n                 for k, v in d.items():\n",
        "source_code_with_indent": "                # https://interactivebrokers.github.io/tws-api/fundamental_ratios_tags.html\n                <IND>d = dict(t.split('=') for t in value.split(';') if t)\n                for k, v in d.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # https://interactivebrokers.github.io/tws-api/fundamental_ratios_tags.html\n                <IND>d = dict(t.split('=')                     # type: ignore\n                         for t in value.split(';') if t)  # type: ignore\n                for k, v in d.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:767:68 Incompatible parameter type [6]: Expected `int` for 4th positional only parameter to call `TickData.__init__` but got `float`.",
    "message": " Expected `int` for 4th positional only parameter to call `TickData.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 767,
    "warning_line": "                    tick = TickData(self.lastTime, tickType, price, size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                price, size, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "source_code_len": 159,
        "target_code": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                priceStr, sizeStr, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "target_code_len": 165,
        "diff_format": "@@ -747,3 +740,3 @@\n                 # 701.28;1;1348075471534;67854;701.46918464;true\n-                price, size, _, volume, vwap, _ = value.split(';')\n+                priceStr, sizeStr, _, volume, vwap, _ = value.split(';')\n                 if volume:\n",
        "source_code_with_indent": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                <IND>price, size, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                <IND>priceStr, sizeStr, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    ticker.vwap = float(vwap)\n                if price == '':\n                    return\n                price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_len": 212,
        "target_code": "                    ticker.vwap = float(vwap)\n                if priceStr == '':\n                    return\n                price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_len": 219,
        "diff_format": "@@ -755,6 +748,6 @@\n                     ticker.vwap = float(vwap)\n-                if price == '':\n+                if priceStr == '':\n                     return\n-                price = float(price)\n-                size = float(size)\n+                price = float(priceStr)\n+                size = int(sizeStr)\n                 if price and size:\n",
        "source_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if price == '':\n                    <IND>return\n                <DED>price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if priceStr == '':\n                    <IND>return\n                <DED>price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                price, size, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "source_code_len": 188,
        "target_code": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                priceStr, sizeStr, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "target_code_len": 194,
        "diff_format": "@@ -783,3 +776,3 @@\n                 # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n-                price, size, _, rtTradeVolume, vwap, _ = value.split(';')\n+                priceStr, sizeStr, _, rtTradeVolume, vwap, _ = value.split(';')\n                 if rtTradeVolume:\n",
        "source_code_with_indent": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                <IND>price, size, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                <IND>priceStr, sizeStr, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    ticker.vwap = float(vwap)\n                if price == '':\n                    return\n                price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_len": 212,
        "target_code": "                    ticker.vwap = float(vwap)\n                if priceStr == '':\n                    return\n                price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_len": 219,
        "diff_format": "@@ -788,6 +781,6 @@\n                     ticker.vwap = float(vwap)\n-                if price == '':\n+                if priceStr == '':\n                     return\n-                price = float(price)\n-                size = float(size)\n+                price = float(priceStr)\n+                size = int(sizeStr)\n                 if price and size:\n",
        "source_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if price == '':\n                    <IND>return\n                <DED>price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if priceStr == '':\n                    <IND>return\n                <DED>price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:800:68 Incompatible parameter type [6]: Expected `int` for 4th positional only parameter to call `TickData.__init__` but got `float`.",
    "message": " Expected `int` for 4th positional only parameter to call `TickData.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 800,
    "warning_line": "                    tick = TickData(self.lastTime, tickType, price, size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                price, size, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "source_code_len": 159,
        "target_code": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                priceStr, sizeStr, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "target_code_len": 165,
        "diff_format": "@@ -747,3 +740,3 @@\n                 # 701.28;1;1348075471534;67854;701.46918464;true\n-                price, size, _, volume, vwap, _ = value.split(';')\n+                priceStr, sizeStr, _, volume, vwap, _ = value.split(';')\n                 if volume:\n",
        "source_code_with_indent": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                <IND>price, size, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # 701.28;1;1348075471534;67854;701.46918464;true\n                <IND>priceStr, sizeStr, _, volume, vwap, _ = value.split(';')\n                if volume:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    ticker.vwap = float(vwap)\n                if price == '':\n                    return\n                price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_len": 212,
        "target_code": "                    ticker.vwap = float(vwap)\n                if priceStr == '':\n                    return\n                price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_len": 219,
        "diff_format": "@@ -755,6 +748,6 @@\n                     ticker.vwap = float(vwap)\n-                if price == '':\n+                if priceStr == '':\n                     return\n-                price = float(price)\n-                size = float(size)\n+                price = float(priceStr)\n+                size = int(sizeStr)\n                 if price and size:\n",
        "source_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if price == '':\n                    <IND>return\n                <DED>price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if priceStr == '':\n                    <IND>return\n                <DED>price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                price, size, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "source_code_len": 188,
        "target_code": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                priceStr, sizeStr, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "target_code_len": 194,
        "diff_format": "@@ -783,3 +776,3 @@\n                 # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n-                price, size, _, rtTradeVolume, vwap, _ = value.split(';')\n+                priceStr, sizeStr, _, rtTradeVolume, vwap, _ = value.split(';')\n                 if rtTradeVolume:\n",
        "source_code_with_indent": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                <IND>price, size, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # example value: '90.31;1;1568407233444;19015;90.07778509;true'\n                <IND>priceStr, sizeStr, _, rtTradeVolume, vwap, _ = value.split(';')\n                if rtTradeVolume:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    ticker.vwap = float(vwap)\n                if price == '':\n                    return\n                price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_len": 212,
        "target_code": "                    ticker.vwap = float(vwap)\n                if priceStr == '':\n                    return\n                price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_len": 219,
        "diff_format": "@@ -788,6 +781,6 @@\n                     ticker.vwap = float(vwap)\n-                if price == '':\n+                if priceStr == '':\n                     return\n-                price = float(price)\n-                size = float(size)\n+                price = float(priceStr)\n+                size = int(sizeStr)\n                 if price and size:\n",
        "source_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if price == '':\n                    <IND>return\n                <DED>price = float(price)\n                size = float(size)\n                if price and size:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>ticker.vwap = float(vwap)\n                <DED>if priceStr == '':\n                    <IND>return\n                <DED>price = float(priceStr)\n                size = int(sizeStr)\n                if price and size:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:969:33 Incompatible parameter type [6]: Expected `datetime` for 1st positional only parameter to call `HistoricalNews.__init__` but got `str`.",
    "message": " Expected `datetime` for 1st positional only parameter to call `HistoricalNews.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 969,
    "warning_line": "        article = HistoricalNews(time, providerCode, articleId, headline)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            articleId: str, headline: str):\n        article = HistoricalNews(time, providerCode, articleId, headline)\n        self._results[reqId].append(article)\n",
        "source_code_len": 163,
        "target_code": "            articleId: str, headline: str):\n        dt = parseIBDatetime(time)\n        article = HistoricalNews(dt, providerCode, articleId, headline)\n        self._results[reqId].append(article)\n",
        "target_code_len": 196,
        "diff_format": "@@ -968,3 +961,4 @@\n             articleId: str, headline: str):\n-        article = HistoricalNews(time, providerCode, articleId, headline)\n+        dt = parseIBDatetime(time)\n+        article = HistoricalNews(dt, providerCode, articleId, headline)\n         self._results[reqId].append(article)\n",
        "source_code_with_indent": "            articleId: str, headline: str):\n        <IND>article = HistoricalNews(time, providerCode, articleId, headline)\n        self._results[reqId].append(article)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            articleId: str, headline: str):\n        <IND>dt = parseIBDatetime(time)\n        article = HistoricalNews(dt, providerCode, articleId, headline)\n        self._results[reqId].append(article)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:1030:42 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.pop` but got `DOMLevel`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.pop` but got `DOMLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1030,
    "warning_line": "                            level = l.pop(position)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if ticker:\n                    for side, l in ((0, ticker.domAsks), (1, ticker.domBids)):\n                        for position in reversed(l):\n                            level = l.pop(position)\n                            tick = MktDepthData(\n                                self.lastTime, position, '', 2,\n                                side, level.price, 0)\n                            ticker.domTicks.append(tick)\n\n",
        "source_code_len": 436,
        "target_code": "                if ticker:\n                    # clear all DOM levels\n                    ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 0, level.price, 0)\n                        for level in ticker.domAsks]\n                    ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 1, level.price, 0)\n                        for level in ticker.domBids]\n                    ticker.domAsks.clear()\n                    ticker.domBids.clear()\n                    self.pendingTickers.add(ticker)\n\n",
        "target_code_len": 559,
        "diff_format": "@@ -1027,9 +1021,12 @@\n                 if ticker:\n-                    for side, l in ((0, ticker.domAsks), (1, ticker.domBids)):\n-                        for position in reversed(l):\n-                            level = l.pop(position)\n-                            tick = MktDepthData(\n-                                self.lastTime, position, '', 2,\n-                                side, level.price, 0)\n-                            ticker.domTicks.append(tick)\n+                    # clear all DOM levels\n+                    ticker.domTicks += [MktDepthData(\n+                        self.lastTime, 0, '', 2, 0, level.price, 0)\n+                        for level in ticker.domAsks]\n+                    ticker.domTicks += [MktDepthData(\n+                        self.lastTime, 0, '', 2, 1, level.price, 0)\n+                        for level in ticker.domBids]\n+                    ticker.domAsks.clear()\n+                    ticker.domBids.clear()\n+                    self.pendingTickers.add(ticker)\n \n",
        "source_code_with_indent": "                if ticker:\n                    <IND>for side, l in ((0, ticker.domAsks), (1, ticker.domBids)):\n                        <IND>for position in reversed(l):\n                            <IND>level = l.pop(position)\n                            tick = MktDepthData(\n                                self.lastTime, position, '', 2,\n                                side, level.price, 0)\n                            ticker.domTicks.append(tick)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if ticker:\n                    # clear all DOM levels\n                    <IND>ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 0, level.price, 0)\n                        for level in ticker.domAsks]\n                    ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 1, level.price, 0)\n                        for level in ticker.domBids]\n                    ticker.domAsks.clear()\n                    ticker.domBids.clear()\n                    self.pendingTickers.add(ticker)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "erdewit/ib_insync",
    "commit": "c34a57e9ef928ad966a5fd9e9517cbc1196cb27f",
    "filename": "ib_insync/wrapper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/erdewit-ib_insync/ib_insync/wrapper.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ib_insync/wrapper.py:1032:47 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `MktDepthData.__init__` but got `DOMLevel`.",
    "message": " Expected `int` for 2nd positional only parameter to call `MktDepthData.__init__` but got `DOMLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1032,
    "warning_line": "                                self.lastTime, position, '', 2,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if ticker:\n                    for side, l in ((0, ticker.domAsks), (1, ticker.domBids)):\n                        for position in reversed(l):\n                            level = l.pop(position)\n                            tick = MktDepthData(\n                                self.lastTime, position, '', 2,\n                                side, level.price, 0)\n                            ticker.domTicks.append(tick)\n\n",
        "source_code_len": 436,
        "target_code": "                if ticker:\n                    # clear all DOM levels\n                    ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 0, level.price, 0)\n                        for level in ticker.domAsks]\n                    ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 1, level.price, 0)\n                        for level in ticker.domBids]\n                    ticker.domAsks.clear()\n                    ticker.domBids.clear()\n                    self.pendingTickers.add(ticker)\n\n",
        "target_code_len": 559,
        "diff_format": "@@ -1027,9 +1021,12 @@\n                 if ticker:\n-                    for side, l in ((0, ticker.domAsks), (1, ticker.domBids)):\n-                        for position in reversed(l):\n-                            level = l.pop(position)\n-                            tick = MktDepthData(\n-                                self.lastTime, position, '', 2,\n-                                side, level.price, 0)\n-                            ticker.domTicks.append(tick)\n+                    # clear all DOM levels\n+                    ticker.domTicks += [MktDepthData(\n+                        self.lastTime, 0, '', 2, 0, level.price, 0)\n+                        for level in ticker.domAsks]\n+                    ticker.domTicks += [MktDepthData(\n+                        self.lastTime, 0, '', 2, 1, level.price, 0)\n+                        for level in ticker.domBids]\n+                    ticker.domAsks.clear()\n+                    ticker.domBids.clear()\n+                    self.pendingTickers.add(ticker)\n \n",
        "source_code_with_indent": "                if ticker:\n                    <IND>for side, l in ((0, ticker.domAsks), (1, ticker.domBids)):\n                        <IND>for position in reversed(l):\n                            <IND>level = l.pop(position)\n                            tick = MktDepthData(\n                                self.lastTime, position, '', 2,\n                                side, level.price, 0)\n                            ticker.domTicks.append(tick)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if ticker:\n                    # clear all DOM levels\n                    <IND>ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 0, level.price, 0)\n                        for level in ticker.domAsks]\n                    ticker.domTicks += [MktDepthData(\n                        self.lastTime, 0, '', 2, 1, level.price, 0)\n                        for level in ticker.domBids]\n                    ticker.domAsks.clear()\n                    ticker.domBids.clear()\n                    self.pendingTickers.add(ticker)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]