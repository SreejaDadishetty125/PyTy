[
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/cli/text_renderer.py",
    "min_patch_found": false,
    "full_warning_msg": "volatility/cli/text_renderer.py:162:56 Incompatible parameter type [6]: Expected `Variable[interfaces.renderers._Type (bound to typing.Type[typing.Any])]` for 3rd parameter `initial_accumulator` to call `interfaces.renderers.TreeGrid.visit` but got `typing.TextIO`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/cli/text_renderer.py",
    "min_patch_found": false,
    "full_warning_msg": "volatility/cli/text_renderer.py:212:56 Incompatible parameter type [6]: Expected `Variable[interfaces.renderers._Type (bound to typing.Type[typing.Any])]` for 3rd parameter `initial_accumulator` to call `interfaces.renderers.TreeGrid.visit` but got `typing.TextIO`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/cli/text_renderer.py",
    "min_patch_found": false,
    "full_warning_msg": "volatility/cli/text_renderer.py:264:56 Incompatible parameter type [6]: Expected `Variable[interfaces.renderers._Type (bound to typing.Type[typing.Any])]` for 3rd parameter `initial_accumulator` to call `interfaces.renderers.TreeGrid.visit` but got `List[Tuple[int, Dict[interfaces.renderers.Column, bytes]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/framework/plugins/windows/poolscanner.py",
    "min_patch_found": false,
    "full_warning_msg": "volatility/framework/plugins/windows/poolscanner.py:70:49 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `dict.__getitem__` but got `typing.Union[bytes, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/framework/plugins/windows/virtmap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/virtmap.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/virtmap.py:64:92 Incompatible parameter type [6]: Expected `interfaces.context.ContextInterface` for 3rd positional only parameter to call `VirtMap._enumerate_system_va_type` but got `interfaces.context.ModuleInterface`.",
    "message": " Expected `interfaces.context.ContextInterface` for 3rd positional only parameter to call `VirtMap._enumerate_system_va_type` but got `interfaces.context.ModuleInterface`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "                result = cls._enumerate_system_va_type(large_page_size, system_range_start, module,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ContextInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "source_code_len": 284,
        "target_code": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ModuleInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "target_code_len": 283,
        "diff_format": "@@ -85,3 +85,3 @@\n     def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n-                                  module: interfaces.context.ContextInterface,\n+                                  module: interfaces.context.ModuleInterface,\n                                   type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "source_code_with_indent": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ContextInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ModuleInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/framework/plugins/windows/virtmap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/virtmap.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/virtmap.py:78:88 Incompatible parameter type [6]: Expected `interfaces.context.ContextInterface` for 3rd positional only parameter to call `VirtMap._enumerate_system_va_type` but got `interfaces.context.ModuleInterface`.",
    "message": " Expected `interfaces.context.ContextInterface` for 3rd positional only parameter to call `VirtMap._enumerate_system_va_type` but got `interfaces.context.ModuleInterface`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "            result = cls._enumerate_system_va_type(large_page_size, system_range_start, module, type_array)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ContextInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "source_code_len": 284,
        "target_code": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ModuleInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "target_code_len": 283,
        "diff_format": "@@ -85,3 +85,3 @@\n     def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n-                                  module: interfaces.context.ContextInterface,\n+                                  module: interfaces.context.ModuleInterface,\n                                   type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "source_code_with_indent": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ContextInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _enumerate_system_va_type(cls, large_page_size: int, system_range_start: int,\n                                  module: interfaces.context.ModuleInterface,\n                                  type_array: interfaces.objects.ObjectInterface) -> Dict[str, List[Tuple[int, int]]]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/framework/symbols/intermed.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/symbols/intermed.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/symbols/intermed.py:428:68 Unsupported operand [58]: `+` is not supported for operand types `Optional[str]` and `str`.",
    "message": " `+` is not supported for operand types `Optional[str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 428,
    "warning_line": "                \"Symbol for a different table requested: {}\".format(table_name + constants.BANG + type_name))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if constants.BANG in type_name:\n            table_name = None\n            index = type_name.find(constants.BANG)\n            if index > 0:\n                table_name, type_name = type_name[:index], type_name[index + 1:]\n            raise exceptions.SymbolError(\n",
        "source_code_len": 270,
        "target_code": "        if constants.BANG in type_name:\n            index = type_name.find(constants.BANG)\n            table_name, type_name = type_name[:index], type_name[index + 1:]\n            raise exceptions.SymbolError(\n",
        "target_code_len": 210,
        "diff_format": "@@ -421,6 +421,4 @@\n         if constants.BANG in type_name:\n-            table_name = None\n             index = type_name.find(constants.BANG)\n-            if index > 0:\n-                table_name, type_name = type_name[:index], type_name[index + 1:]\n+            table_name, type_name = type_name[:index], type_name[index + 1:]\n             raise exceptions.SymbolError(\n",
        "source_code_with_indent": "        if constants.BANG in type_name:\n            <IND>table_name = None\n            index = type_name.find(constants.BANG)\n            if index > 0:\n                <IND>table_name, type_name = type_name[:index], type_name[index + 1:]\n            <DED>raise exceptions.SymbolError(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if constants.BANG in type_name:\n            <IND>index = type_name.find(constants.BANG)\n            table_name, type_name = type_name[:index], type_name[index + 1:]\n            raise exceptions.SymbolError(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/framework/symbols/intermed.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/symbols/intermed.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/symbols/intermed.py:480:68 Unsupported operand [58]: `+` is not supported for operand types `Optional[str]` and `str`.",
    "message": " `+` is not supported for operand types `Optional[str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 480,
    "warning_line": "                \"Symbol for a different table requested: {}\".format(table_name + constants.BANG + type_name))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if constants.BANG in type_name:\n            table_name = None\n            index = type_name.find(constants.BANG)\n            if index > 0:\n                table_name, type_name = type_name[:index], type_name[index + 1:]\n            raise exceptions.SymbolError(\n",
        "source_code_len": 270,
        "target_code": "        if constants.BANG in type_name:\n            index = type_name.find(constants.BANG)\n            table_name, type_name = type_name[:index], type_name[index + 1:]\n            raise exceptions.SymbolError(\n",
        "target_code_len": 210,
        "diff_format": "@@ -473,6 +471,4 @@\n         if constants.BANG in type_name:\n-            table_name = None\n             index = type_name.find(constants.BANG)\n-            if index > 0:\n-                table_name, type_name = type_name[:index], type_name[index + 1:]\n+            table_name, type_name = type_name[:index], type_name[index + 1:]\n             raise exceptions.SymbolError(\n",
        "source_code_with_indent": "        if constants.BANG in type_name:\n            <IND>table_name = None\n            index = type_name.find(constants.BANG)\n            if index > 0:\n                <IND>table_name, type_name = type_name[:index], type_name[index + 1:]\n            <DED>raise exceptions.SymbolError(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if constants.BANG in type_name:\n            <IND>index = type_name.find(constants.BANG)\n            table_name, type_name = type_name[:index], type_name[index + 1:]\n            raise exceptions.SymbolError(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b0b868d79cd51b92451956125abfce029046674e",
    "filename": "volatility/framework/symbols/windows/extensions/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/symbols/windows/extensions/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/symbols/windows/extensions/__init__.py:119:70 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "                        padding_length -= lengths_of_optional_headers[padding_available]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    padding_length = 0\n                    if padding_present:\n                        # Read the four bytes from just before the next optional_headers_length minus the padding_info size\n",
        "source_code_len": 203,
        "target_code": "                    padding_length = 0\n                    if padding_present and padding_available is not None:\n                        # Read the four bytes from just before the next optional_headers_length minus the padding_info size\n",
        "target_code_len": 237,
        "diff_format": "@@ -101,3 +101,3 @@\n                     padding_length = 0\n-                    if padding_present:\n+                    if padding_present and padding_available is not None:\n                         # Read the four bytes from just before the next optional_headers_length minus the padding_info size\n",
        "source_code_with_indent": "                    <DED><DED><DED>padding_length = 0\n                    if padding_present:\n                        # Read the four bytes from just before the next optional_headers_length minus the padding_info size\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <DED><DED><DED>padding_length = 0\n                    if padding_present and padding_available is not None:\n                        # Read the four bytes from just before the next optional_headers_length minus the padding_info size\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]