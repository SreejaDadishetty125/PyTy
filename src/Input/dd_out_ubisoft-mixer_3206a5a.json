[
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "mixer/codec.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/codec.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/codec.py:73:11 Call error [29]: `Message` is not a function.",
    "message": " `Message` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 73,
    "warning_line": "    return message_class(*args)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import importlib\nfrom typing import List, Mapping, Optional\n\n",
        "source_code_len": 61,
        "target_code": "import importlib\nfrom typing import Dict\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -22,3 +22,3 @@\n import importlib\n-from typing import List, Mapping, Optional\n+from typing import Dict\n \n",
        "source_code_with_indent": "import importlib\nfrom typing import List, Mapping, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import importlib\nfrom typing import Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nMessageTypes = Mapping[common.MessageType, Message]\n\n",
        "source_code_len": 54,
        "target_code": "\nMessageTypes = Dict[common.MessageType, type]\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -40,3 +40,3 @@\n \n-MessageTypes = Mapping[common.MessageType, Message]\n+MessageTypes = Dict[common.MessageType, type]\n \n",
        "source_code_with_indent": "\n<DED>MessageTypes = Mapping[common.MessageType, Message]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>MessageTypes = Dict[common.MessageType, type]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef decode_as(message_type: common.MessageType, buffer: bytes) -> Optional[Message]:\n    \"\"\"\n",
        "source_code_len": 94,
        "target_code": "\ndef decode_as(message_type: common.MessageType, buffer: bytes) -> Message:\n    \"\"\"\n",
        "target_code_len": 84,
        "diff_format": "@@ -56,3 +56,3 @@\n \n-def decode_as(message_type: common.MessageType, buffer: bytes) -> Optional[Message]:\n+def decode_as(message_type: common.MessageType, buffer: bytes) -> Message:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef decode_as(message_type: common.MessageType, buffer: bytes) -> Optional[Message]:\n    <IND>",
        "target_code_with_indent": "\ndef decode_as(message_type: common.MessageType, buffer: bytes) -> Message:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef decode(command: common.Command) -> Optional[Message]:\n    return decode_as(command.type, command.data)\n",
        "source_code_len": 108,
        "target_code": "\ndef decode(command: common.Command) -> Message:\n    return decode_as(command.type, command.data)\n",
        "target_code_len": 98,
        "diff_format": "@@ -75,3 +75,3 @@\n \n-def decode(command: common.Command) -> Optional[Message]:\n+def decode(command: common.Command) -> Message:\n     return decode_as(command.type, command.data)\n",
        "source_code_with_indent": "\n<DED>def decode(command: common.Command) -> Optional[Message]:\n    <IND>return decode_as(command.type, command.data)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def decode(command: common.Command) -> Message:\n    <IND>return decode_as(command.type, command.data)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef unregister_message_types(command_types: List[common.Command]):\n    for t in command_types:\n        if t in registered_message_types:\n",
        "source_code_len": 138,
        "target_code": "\ndef unregister_message_types(types_dict: MessageTypes):\n    for t in types_dict:\n        if t in registered_message_types:\n",
        "target_code_len": 124,
        "diff_format": "@@ -106,4 +106,4 @@\n \n-def unregister_message_types(command_types: List[common.Command]):\n-    for t in command_types:\n+def unregister_message_types(types_dict: MessageTypes):\n+    for t in types_dict:\n         if t in registered_message_types:\n",
        "source_code_with_indent": "\n<DED>def unregister_message_types(command_types: List[common.Command]):\n    <IND>for t in command_types:\n        <IND>if t in registered_message_types:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def unregister_message_types(types_dict: MessageTypes):\n    <IND>for t in types_dict:\n        <IND>if t in registered_message_types:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "mixer/codec.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/codec.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/codec.py:110:41 Incompatible parameter type [6]: Expected `common.MessageType` for 1st positional only parameter to call `Mapping.__getitem__` but got `common.Command`.",
    "message": " Expected `common.MessageType` for 1st positional only parameter to call `Mapping.__getitem__` but got `common.Command`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "            del registered_message_types[t]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef unregister_message_types(command_types: List[common.Command]):\n    for t in command_types:\n        if t in registered_message_types:\n",
        "source_code_len": 138,
        "target_code": "\ndef unregister_message_types(types_dict: MessageTypes):\n    for t in types_dict:\n        if t in registered_message_types:\n",
        "target_code_len": 124,
        "diff_format": "@@ -106,4 +106,4 @@\n \n-def unregister_message_types(command_types: List[common.Command]):\n-    for t in command_types:\n+def unregister_message_types(types_dict: MessageTypes):\n+    for t in types_dict:\n         if t in registered_message_types:\n",
        "source_code_with_indent": "\n<DED>def unregister_message_types(command_types: List[common.Command]):\n    <IND>for t in command_types:\n        <IND>if t in registered_message_types:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def unregister_message_types(types_dict: MessageTypes):\n    <IND>for t in types_dict:\n        <IND>if t in registered_message_types:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:95:42 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[BlenderDesc]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[BlenderDesc]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "            window_width = int(1920 / len(blenderdescs))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Iterable, List, Optional\nimport unittest\n",
        "source_code_len": 77,
        "target_code": "import time\nfrom typing import Any, Iterable, List, Optional, Tuple\nimport unittest\n",
        "target_code_len": 84,
        "diff_format": "@@ -8,3 +8,3 @@\n import time\n-from typing import Any, Iterable, List, Optional\n+from typing import Any, Iterable, List, Optional, Tuple\n import unittest\n",
        "source_code_with_indent": "import time\nfrom typing import Any, Iterable, List, Optional\nimport unittest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Iterable, List, Optional, Tuple\nimport unittest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        blenderdescs: Iterable[BlenderDesc] = (BlenderDesc(), BlenderDesc()),\n        server_args: Optional[List[str]] = None,\n",
        "source_code_len": 141,
        "target_code": "        self,\n        blenderdescs: Tuple[BlenderDesc, BlenderDesc] = (BlenderDesc(), BlenderDesc()),\n        server_args: Optional[List[str]] = None,\n",
        "target_code_len": 151,
        "diff_format": "@@ -75,3 +76,3 @@\n         self,\n-        blenderdescs: Iterable[BlenderDesc] = (BlenderDesc(), BlenderDesc()),\n+        blenderdescs: Tuple[BlenderDesc, BlenderDesc] = (BlenderDesc(), BlenderDesc()),\n         server_args: Optional[List[str]] = None,\n",
        "source_code_with_indent": "        self,\n        blenderdescs: Iterable[BlenderDesc] = (BlenderDesc(), BlenderDesc()),\n        server_args: Optional[List[str]] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        blenderdescs: Tuple[BlenderDesc, BlenderDesc] = (BlenderDesc(), BlenderDesc()),\n        server_args: Optional[List[str]] = None,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: List[str] = ()\n    ):\n",
        "source_code_len": 143,
        "target_code": "    def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: Iterable[str] = ()\n    ):\n",
        "target_code_len": 147,
        "diff_format": "@@ -245,3 +246,3 @@\n     def assert_stream_equals(\n-        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: List[str] = ()\n+        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: Iterable[str] = ()\n     ):\n",
        "source_code_with_indent": "    <DED><DED><DED><DED>def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: List[str] = ()\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED><DED><DED>def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: Iterable[str] = ()\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:206:40 Incompatible parameter type [6]: Expected `List[str]` for 3rd parameter `ignore` to call `MixerTestCase.assert_stream_equals` but got `Iterable[str]`.",
    "message": " Expected `List[str]` for 3rd parameter `ignore` to call `MixerTestCase.assert_stream_equals` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 206,
    "warning_line": "        self.assert_stream_equals(s, r, ignore=ignore)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: List[str] = ()\n    ):\n",
        "source_code_len": 143,
        "target_code": "    def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: Iterable[str] = ()\n    ):\n",
        "target_code_len": 147,
        "diff_format": "@@ -245,3 +246,3 @@\n     def assert_stream_equals(\n-        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: List[str] = ()\n+        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: Iterable[str] = ()\n     ):\n",
        "source_code_with_indent": "    <DED><DED><DED><DED>def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: List[str] = ()\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED><DED><DED>def assert_stream_equals(\n        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: Iterable[str] = ()\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:246:83 Incompatible variable type [9]: ignore is declared to have type `List[str]` but is used as type `typing.Tuple[]`.",
    "message": " ignore is declared to have type `List[str]` but is used as type `typing.Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 246,
    "warning_line": "        self, streams_a: CommandStream, streams_b: CommandStream, msg: str = None, ignore: List[str] = ()"
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:251:41 Incompatible parameter type [6]: Expected `Command` for 1st positional only parameter to call `mixer.codec.decode` but got `mixer.codec.Message`.",
    "message": " Expected `Command` for 1st positional only parameter to call `mixer.codec.decode` but got `mixer.codec.Message`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 251,
    "warning_line": "            stream = [mixer.codec.decode(c) for c in commands]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n            stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_len": 168,
        "target_code": "\n        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n            stream = [mixer.codec.decode(c) for c in commands]\n",
        "target_code_len": 156,
        "diff_format": "@@ -249,3 +250,3 @@\n \n-        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n+        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n             stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_with_indent": "\n        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n            <IND>stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n            <IND>stream = [mixer.codec.decode(c) for c in commands]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:253:12 Incompatible return type [7]: Expected `List[mixer.codec.Message]` but got `List[Optional[mixer.codec.Message]]`.",
    "message": " Expected `List[mixer.codec.Message]` but got `List[Optional[mixer.codec.Message]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 253,
    "warning_line": "            return stream"
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:275:60 Incompatible parameter type [6]: Expected `List[mixer.codec.Message]` for 1st positional only parameter to anonymous call but got `List[Command]`.",
    "message": " Expected `List[mixer.codec.Message]` for 1st positional only parameter to anonymous call but got `List[Command]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 275,
    "warning_line": "                decoded_stream_a = decode_and_sort_messages(commands_a)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n            stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_len": 168,
        "target_code": "\n        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n            stream = [mixer.codec.decode(c) for c in commands]\n",
        "target_code_len": 156,
        "diff_format": "@@ -249,3 +250,3 @@\n \n-        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n+        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n             stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_with_indent": "\n        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n            <IND>stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n            <IND>stream = [mixer.codec.decode(c) for c in commands]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:276:60 Incompatible parameter type [6]: Expected `List[mixer.codec.Message]` for 1st positional only parameter to anonymous call but got `List[Command]`.",
    "message": " Expected `List[mixer.codec.Message]` for 1st positional only parameter to anonymous call but got `List[Command]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 276,
    "warning_line": "                decoded_stream_b = decode_and_sort_messages(commands_b)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n            stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_len": 168,
        "target_code": "\n        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n            stream = [mixer.codec.decode(c) for c in commands]\n",
        "target_code_len": 156,
        "diff_format": "@@ -249,3 +250,3 @@\n \n-        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n+        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n             stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_with_indent": "\n        def decode_and_sort_messages(commands: List[mixer.codec.Message]) -> List[mixer.codec.Message]:\n            <IND>stream = [mixer.codec.decode(c) for c in commands]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        def decode_and_sort_messages(commands: List[Command]) -> List[mixer.codec.Message]:\n            <IND>stream = [mixer.codec.decode(c) for c in commands]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/mixer_testcase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/tests/mixer_testcase.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mixer_testcase.py:392:27 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 392,
    "warning_line": "            self._blenders[to].send_string(s, sleep)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def send_string(self, s: str, to: Optional[int] = 0, sleep: float = 0.5):\n        try:\n",
        "source_code_len": 92,
        "target_code": "\n    def send_string(self, s: str, to: int = 0, sleep: float = 0.5):\n        try:\n",
        "target_code_len": 82,
        "diff_format": "@@ -389,3 +390,3 @@\n \n-    def send_string(self, s: str, to: Optional[int] = 0, sleep: float = 0.5):\n+    def send_string(self, s: str, to: int = 0, sleep: float = 0.5):\n         try:\n",
        "source_code_with_indent": "\n    <DED><DED>def send_string(self, s: str, to: Optional[int] = 0, sleep: float = 0.5):\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def send_string(self, s: str, to: int = 0, sleep: float = 0.5):\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def send_strings(self, strings: List[str], to: Optional[int] = 0, sleep: float = 0.5):\n        self.send_string(\"\\n\".join(strings), to, sleep)\n",
        "source_code_len": 148,
        "target_code": "\n    def send_strings(self, strings: List[str], to: int = 0, sleep: float = 0.5):\n        self.send_string(\"\\n\".join(strings), to, sleep)\n",
        "target_code_len": 138,
        "diff_format": "@@ -397,3 +398,3 @@\n \n-    def send_strings(self, strings: List[str], to: Optional[int] = 0, sleep: float = 0.5):\n+    def send_strings(self, strings: List[str], to: int = 0, sleep: float = 0.5):\n         self.send_string(\"\\n\".join(strings), to, sleep)\n",
        "source_code_with_indent": "\n    <DED><DED>def send_strings(self, strings: List[str], to: Optional[int] = 0, sleep: float = 0.5):\n        <IND>self.send_string(\"\\n\".join(strings), to, sleep)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def send_strings(self, strings: List[str], to: int = 0, sleep: float = 0.5):\n        <IND>self.send_string(\"\\n\".join(strings), to, sleep)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "3206a5a5c9e1bebd72f30eee96d96a65d5929898",
    "filename": "tests/vrtist/test_conflicts.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/vrtist/test_conflicts.py:127:4 Inconsistent override [14]: `tests.vrtist.test_conflicts.TestCollectionInMasterRename.send_string` overrides method defined in `tests.mixer_testcase.MixerTestCase` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `typing.Optional[int]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]