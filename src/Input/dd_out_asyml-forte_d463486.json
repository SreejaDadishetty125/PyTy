[
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "examples/chatbot/download_models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/examples/chatbot/download_models.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/chatbot/download_models.py:54:23 Incompatible parameter type [6]: Expected `typing.Optional[typing.List[str]]` for 3rd parameter `filenames` to call `maybe_download` but got `typing.List[Path]`.",
    "message": " Expected `typing.Optional[typing.List[str]]` for 3rd parameter `filenames` to call `maybe_download` but got `typing.List[Path]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 54,
    "warning_line": "                       filenames=list(urls_to_file_names.values()))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nimport os\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -16,2 +16,3 @@\n from pathlib import Path\n+import os\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nimport os\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": embedding_path / \"char_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": embedding_path / \"glove.840B.300d.05.filtered\",\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": embedding_path / \"glove_50_300_2.filtered\",\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": embedding_path / \"word_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": pretrained_path / \"model.pt\"\n        })\n",
        "source_code_len": 783,
        "target_code": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"char_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove.840B.300d.05.filtered\"),\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove_50_300_2.filtered\"),\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"word_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": os.path.join(str(pretrained_path), \"model.pt\")\n        })\n",
        "target_code_len": 1053,
        "diff_format": "@@ -41,11 +42,15 @@\n             \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n-            \"view?usp=sharing\": embedding_path / \"char_vocab.english.txt\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"char_vocab.english.txt\"),\n             \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n-            \"view?usp=sharing\": embedding_path / \"glove.840B.300d.05.filtered\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"glove.840B.300d.05.filtered\"),\n             \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n-            \"view?usp=sharing\": embedding_path / \"glove_50_300_2.filtered\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"glove_50_300_2.filtered\"),\n             \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n-            \"view?usp=sharing\": embedding_path / \"word_vocab.english.txt\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"word_vocab.english.txt\"),\n             \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n-            \"view?usp=sharing\": pretrained_path / \"model.pt\"\n+            \"view?usp=sharing\": os.path.join(str(pretrained_path), \"model.pt\")\n         })\n",
        "source_code_with_indent": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": embedding_path / \"char_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": embedding_path / \"glove.840B.300d.05.filtered\",\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": embedding_path / \"glove_50_300_2.filtered\",\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": embedding_path / \"word_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": pretrained_path / \"model.pt\"\n        })\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"char_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove.840B.300d.05.filtered\"),\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove_50_300_2.filtered\"),\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"word_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": os.path.join(str(pretrained_path), \"model.pt\")\n        })\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "examples/pipelines/download_models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/examples/pipelines/download_models.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/pipelines/download_models.py:53:23 Incompatible parameter type [6]: Expected `typing.Optional[typing.List[str]]` for 3rd parameter `filenames` to call `maybe_download` but got `typing.List[Path]`.",
    "message": " Expected `typing.Optional[typing.List[str]]` for 3rd parameter `filenames` to call `maybe_download` but got `typing.List[Path]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "                       filenames=list(urls_to_file_names.values()))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nimport os\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -16,2 +16,3 @@\n from pathlib import Path\n+import os\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nimport os\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": embedding_path / \"char_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": embedding_path / \"glove.840B.300d.05.filtered\",\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": embedding_path / \"glove_50_300_2.filtered\",\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": embedding_path / \"word_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": pretrained_path / \"model.pt\"\n        })\n",
        "source_code_len": 783,
        "target_code": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"char_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove.840B.300d.05.filtered\"),\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove_50_300_2.filtered\"),\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"word_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": os.path.join(str(pretrained_path), \"model.pt\")\n        })\n",
        "target_code_len": 1053,
        "diff_format": "@@ -41,11 +42,15 @@\n             \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n-            \"view?usp=sharing\": embedding_path / \"char_vocab.english.txt\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"char_vocab.english.txt\"),\n             \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n-            \"view?usp=sharing\": embedding_path / \"glove.840B.300d.05.filtered\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"glove.840B.300d.05.filtered\"),\n             \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n-            \"view?usp=sharing\": embedding_path / \"glove_50_300_2.filtered\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"glove_50_300_2.filtered\"),\n             \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n-            \"view?usp=sharing\": embedding_path / \"word_vocab.english.txt\",\n+            \"view?usp=sharing\": os.path.join(str(embedding_path),\n+                                             \"word_vocab.english.txt\"),\n             \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n-            \"view?usp=sharing\": pretrained_path / \"model.pt\"\n+            \"view?usp=sharing\": os.path.join(str(pretrained_path), \"model.pt\")\n         })\n",
        "source_code_with_indent": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": embedding_path / \"char_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": embedding_path / \"glove.840B.300d.05.filtered\",\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": embedding_path / \"glove_50_300_2.filtered\",\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": embedding_path / \"word_vocab.english.txt\",\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": pretrained_path / \"model.pt\"\n        })\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            \"https://drive.google.com/file/d/102YRcdXqDFLOjToR7L-3XYcU-yqcKAO8/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"char_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1hgwmUBk8Mb3iZYiHi1UpCpPFOCfOQLLB/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove.840B.300d.05.filtered\"),\n            \"https://drive.google.com/file/d/1H4PZhJhGoFBqrSMRPufjJ-9zwROw8hAK/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"glove_50_300_2.filtered\"),\n            \"https://drive.google.com/file/d/1uoA5EnZMWl5m5DMevGcI7UjiXxQRlD9W/\"\n            \"view?usp=sharing\": os.path.join(str(embedding_path),\n                                             \"word_vocab.english.txt\"),\n            \"https://drive.google.com/file/d/1UZc8x-mhdXg7Rtt6FSBDlEoJb_nHxDAQ/\"\n            \"view?usp=sharing\": os.path.join(str(pretrained_path), \"model.pt\")\n        })\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:350:30 Incompatible parameter type [6]: Expected `Generics` for 1st positional only parameter to call `list.append` but got `Variable[EntryType (bound to Entry[typing.Any])]`.",
    "message": " Expected `Generics` for 1st positional only parameter to call `list.append` but got `Variable[EntryType (bound to Entry[typing.Any])]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 350,
    "warning_line": "                target.append(entry)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target = self.groups\n        else:\n            target = self.generics\n            # raise ValueError(\n            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n            #     f\"should be an instance of Annotation, Link, or Group.\"\n            # )\n\n",
        "source_code_len": 275,
        "target_code": "            target = self.groups\n        elif isinstance(entry, Generics):\n            target = self.generics\n        else:\n            raise ValueError(\n                f\"Invalid entry type {type(entry)}. A valid entry \"\n                f\"should be an instance of Annotation, Link, Group of Generics.\"\n            )\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -336,8 +338,9 @@\n             target = self.groups\n+        elif isinstance(entry, Generics):\n+            target = self.generics\n         else:\n-            target = self.generics\n-            # raise ValueError(\n-            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n-            #     f\"should be an instance of Annotation, Link, or Group.\"\n-            # )\n+            raise ValueError(\n+                f\"Invalid entry type {type(entry)}. A valid entry \"\n+                f\"should be an instance of Annotation, Link, Group of Generics.\"\n+            )\n \n",
        "source_code_with_indent": "            <IND>target = self.groups\n        <DED>else:\n            <IND>target = self.generics\n            # raise ValueError(\n            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n            #     f\"should be an instance of Annotation, Link, or Group.\"\n            # )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>target = self.groups\n        <DED>elif isinstance(entry, Generics):\n            <IND>target = self.generics\n        <DED>else:\n            <IND>raise ValueError(\n                f\"Invalid entry type {type(entry)}. A valid entry \"\n                f\"should be an instance of Annotation, Link, Group of Generics.\"\n            )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:364:12 Incompatible return type [7]: Expected `Variable[EntryType (bound to Entry[typing.Any])]` but got `Generics`.",
    "message": " Expected `Variable[EntryType (bound to Entry[typing.Any])]` but got `Generics`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 364,
    "warning_line": "            return target[target.index(entry)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target = self.groups\n        else:\n            target = self.generics\n            # raise ValueError(\n            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n            #     f\"should be an instance of Annotation, Link, or Group.\"\n            # )\n\n",
        "source_code_len": 275,
        "target_code": "            target = self.groups\n        elif isinstance(entry, Generics):\n            target = self.generics\n        else:\n            raise ValueError(\n                f\"Invalid entry type {type(entry)}. A valid entry \"\n                f\"should be an instance of Annotation, Link, Group of Generics.\"\n            )\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -336,8 +338,9 @@\n             target = self.groups\n+        elif isinstance(entry, Generics):\n+            target = self.generics\n         else:\n-            target = self.generics\n-            # raise ValueError(\n-            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n-            #     f\"should be an instance of Annotation, Link, or Group.\"\n-            # )\n+            raise ValueError(\n+                f\"Invalid entry type {type(entry)}. A valid entry \"\n+                f\"should be an instance of Annotation, Link, Group of Generics.\"\n+            )\n \n",
        "source_code_with_indent": "            <IND>target = self.groups\n        <DED>else:\n            <IND>target = self.generics\n            # raise ValueError(\n            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n            #     f\"should be an instance of Annotation, Link, or Group.\"\n            # )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>target = self.groups\n        <DED>elif isinstance(entry, Generics):\n            <IND>target = self.generics\n        <DED>else:\n            <IND>raise ValueError(\n                f\"Invalid entry type {type(entry)}. A valid entry \"\n                f\"should be an instance of Annotation, Link, Group of Generics.\"\n            )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:364:39 Incompatible parameter type [6]: Expected `Generics` for 1st positional only parameter to call `list.index` but got `Variable[EntryType (bound to Entry[typing.Any])]`.",
    "message": " Expected `Generics` for 1st positional only parameter to call `list.index` but got `Variable[EntryType (bound to Entry[typing.Any])]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 364,
    "warning_line": "            return target[target.index(entry)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target = self.groups\n        else:\n            target = self.generics\n            # raise ValueError(\n            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n            #     f\"should be an instance of Annotation, Link, or Group.\"\n            # )\n\n",
        "source_code_len": 275,
        "target_code": "            target = self.groups\n        elif isinstance(entry, Generics):\n            target = self.generics\n        else:\n            raise ValueError(\n                f\"Invalid entry type {type(entry)}. A valid entry \"\n                f\"should be an instance of Annotation, Link, Group of Generics.\"\n            )\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -336,8 +338,9 @@\n             target = self.groups\n+        elif isinstance(entry, Generics):\n+            target = self.generics\n         else:\n-            target = self.generics\n-            # raise ValueError(\n-            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n-            #     f\"should be an instance of Annotation, Link, or Group.\"\n-            # )\n+            raise ValueError(\n+                f\"Invalid entry type {type(entry)}. A valid entry \"\n+                f\"should be an instance of Annotation, Link, Group of Generics.\"\n+            )\n \n",
        "source_code_with_indent": "            <IND>target = self.groups\n        <DED>else:\n            <IND>target = self.generics\n            # raise ValueError(\n            #     f\"Invalid entry type {type(entry)}. A valid entry \"\n            #     f\"should be an instance of Annotation, Link, or Group.\"\n            # )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>target = self.groups\n        <DED>elif isinstance(entry, Generics):\n            <IND>target = self.generics\n        <DED>else:\n            <IND>raise ValueError(\n                f\"Invalid entry type {type(entry)}. A valid entry \"\n                f\"should be an instance of Annotation, Link, Group of Generics.\"\n            )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:887:8 Incompatible variable type [9]: entry1_ is declared to have type `Annotation` but is used as type `Union[Annotation, int, Variable[forte.data.ontology.core.EntryType (bound to Entry[typing.Any])]]`.",
    "message": " entry1_ is declared to have type `Annotation` but is used as type `Union[Annotation, int, Variable[forte.data.ontology.core.EntryType (bound to Entry[typing.Any])]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 887,
    "warning_line": "        entry1_: Annotation = self._entry_index["
  },
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:889:8 Incompatible variable type [9]: entry2_ is declared to have type `Annotation` but is used as type `Union[Annotation, int, Variable[forte.data.ontology.core.EntryType (bound to Entry[typing.Any])]]`.",
    "message": " entry2_ is declared to have type `Annotation` but is used as type `Union[Annotation, int, Variable[forte.data.ontology.core.EntryType (bound to Entry[typing.Any])]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 889,
    "warning_line": "        entry2_: Annotation = self._entry_index["
  },
  {
    "project": "asyml/forte",
    "commit": "d4634864c3be61c7ae4de4564d5349192a3b6fad",
    "filename": "forte/processors/ner_predictor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/processors/ner_predictor.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/processors/ner_predictor.py:357:4 Inconsistent override [14]: `forte.processors.ner_predictor.CoNLLNEREvaluator.consume_next` overrides method defined in `Evaluator` inconsistently. Could not find parameter `ref_pack` in overriding signature.",
    "message": " `forte.processors.ner_predictor.CoNLLNEREvaluator.consume_next` overrides method defined in `Evaluator` inconsistently. Could not find parameter `ref_pack` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 357,
    "warning_line": "    def consume_next(self, pred_pack: DataPack, refer_pack: DataPack):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        }\n\n\nclass CoNLLNEREvaluator(Evaluator):\n    def __init__(self, config: Optional[HParams] = None):\n        super().__init__(config)\n        self.test_component = CoNLLNERPredictor().component_name\n        self.output_file = \"tmp_eval.txt\"\n        self.score_file = \"tmp_eval.score\"\n        self.scores: Dict[str, float] = {}\n\n    def consume_next(self, pred_pack: DataPack, refer_pack: DataPack):\n        pred_getdata_args = {\n            \"context_type\": Sentence,\n            \"request\": {\n                Token: {\n                    \"fields\": [\"ner\"],\n                },\n                Sentence: [],  # span by default\n            },\n        }\n\n        refer_getdata_args = {\n            \"context_type\": Sentence,\n            \"request\": {\n                Token: {\n                    \"fields\": [\"chunk\", \"pos\", \"ner\"]},\n                Sentence: [],  # span by default\n            }\n        }\n\n        conll_utils.write_tokens_to_file(pred_pack=pred_pack,\n                                         pred_request=pred_getdata_args,\n                                         refer_pack=refer_pack,\n                                         refer_request=refer_getdata_args,\n                                         output_filename=self.output_file)\n        eval_script = \\\n            Path(os.path.abspath(__file__)).parents[1] / \\\n            \"utils/eval_scripts/conll03eval.v2\"\n        os.system(f\"perl {eval_script} < {self.output_file} > \"\n                  f\"{self.score_file}\")\n        with open(self.score_file, \"r\") as fin:\n            fin.readline()\n            line = fin.readline()\n            fields = line.split(\";\")\n            acc = float(fields[0].split(\":\")[1].strip()[:-1])\n            precision = float(fields[1].split(\":\")[1].strip()[:-1])\n            recall = float(fields[2].split(\":\")[1].strip()[:-1])\n            f1 = float(fields[3].split(\":\")[1].strip())\n\n        self.scores = {\n            \"accuracy\": acc,\n            \"precision\": precision,\n            \"recall\": recall,\n            \"f1\": f1,\n        }\n\n    def get_result(self):\n        return self.scores\n",
        "source_code_len": 2091,
        "target_code": "        }\n",
        "target_code_len": 10,
        "diff_format": "@@ -346,59 +343,1 @@\n         }\n-\n-\n-class CoNLLNEREvaluator(Evaluator):\n-    def __init__(self, config: Optional[HParams] = None):\n-        super().__init__(config)\n-        self.test_component = CoNLLNERPredictor().component_name\n-        self.output_file = \"tmp_eval.txt\"\n-        self.score_file = \"tmp_eval.score\"\n-        self.scores: Dict[str, float] = {}\n-\n-    def consume_next(self, pred_pack: DataPack, refer_pack: DataPack):\n-        pred_getdata_args = {\n-            \"context_type\": Sentence,\n-            \"request\": {\n-                Token: {\n-                    \"fields\": [\"ner\"],\n-                },\n-                Sentence: [],  # span by default\n-            },\n-        }\n-\n-        refer_getdata_args = {\n-            \"context_type\": Sentence,\n-            \"request\": {\n-                Token: {\n-                    \"fields\": [\"chunk\", \"pos\", \"ner\"]},\n-                Sentence: [],  # span by default\n-            }\n-        }\n-\n-        conll_utils.write_tokens_to_file(pred_pack=pred_pack,\n-                                         pred_request=pred_getdata_args,\n-                                         refer_pack=refer_pack,\n-                                         refer_request=refer_getdata_args,\n-                                         output_filename=self.output_file)\n-        eval_script = \\\n-            Path(os.path.abspath(__file__)).parents[1] / \\\n-            \"utils/eval_scripts/conll03eval.v2\"\n-        os.system(f\"perl {eval_script} < {self.output_file} > \"\n-                  f\"{self.score_file}\")\n-        with open(self.score_file, \"r\") as fin:\n-            fin.readline()\n-            line = fin.readline()\n-            fields = line.split(\";\")\n-            acc = float(fields[0].split(\":\")[1].strip()[:-1])\n-            precision = float(fields[1].split(\":\")[1].strip()[:-1])\n-            recall = float(fields[2].split(\":\")[1].strip()[:-1])\n-            f1 = float(fields[3].split(\":\")[1].strip())\n-\n-        self.scores = {\n-            \"accuracy\": acc,\n-            \"precision\": precision,\n-            \"recall\": recall,\n-            \"f1\": f1,\n-        }\n-\n-    def get_result(self):\n-        return self.scores\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "        }\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "        }\n\n\n<DED><DED>class CoNLLNEREvaluator(Evaluator):\n    <IND>def __init__(self, config: Optional[HParams] = None):\n        <IND>super().__init__(config)\n        self.test_component = CoNLLNERPredictor().component_name\n        self.output_file = \"tmp_eval.txt\"\n        self.score_file = \"tmp_eval.score\"\n        self.scores: Dict[str, float] = {}\n\n    <DED>def consume_next(self, pred_pack: DataPack, refer_pack: DataPack):\n        <IND>pred_getdata_args = {\n            \"context_type\": Sentence,\n            \"request\": {\n                Token: {\n                    \"fields\": [\"ner\"],\n                },\n                Sentence: [],  # span by default\n            },\n        }\n\n        refer_getdata_args = {\n            \"context_type\": Sentence,\n            \"request\": {\n                Token: {\n                    \"fields\": [\"chunk\", \"pos\", \"ner\"]},\n                Sentence: [],  # span by default\n            }\n        }\n\n        conll_utils.write_tokens_to_file(pred_pack=pred_pack,\n                                         pred_request=pred_getdata_args,\n                                         refer_pack=refer_pack,\n                                         refer_request=refer_getdata_args,\n                                         output_filename=self.output_file)\n        eval_script =            Path(os.path.abspath(__file__)).parents[1] /            \"utils/eval_scripts/conll03eval.v2\"\n        os.system(f\"perl {eval_script} < {self.output_file} > \"\n                  f\"{self.score_file}\")\n        with open(self.score_file, \"r\") as fin:\n            <IND>fin.readline()\n            line = fin.readline()\n            fields = line.split(\";\")\n            acc = float(fields[0].split(\":\")[1].strip()[:-1])\n            precision = float(fields[1].split(\":\")[1].strip()[:-1])\n            recall = float(fields[2].split(\":\")[1].strip()[:-1])\n            f1 = float(fields[3].split(\":\")[1].strip())\n\n        <DED>self.scores = {\n            \"accuracy\": acc,\n            \"precision\": precision,\n            \"recall\": recall,\n            \"f1\": f1,\n        }\n\n    <DED>def get_result(self):\n        <IND>return self.scores\n"
      }
    ]
  }
]