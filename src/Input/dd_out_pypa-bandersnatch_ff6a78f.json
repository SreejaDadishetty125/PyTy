[
  {
    "project": "pypa/bandersnatch",
    "commit": "ff6a78f38c84f004d9fd25741698e82517859f42",
    "filename": "src/bandersnatch_storage_plugins/s3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pypa-bandersnatch/src/bandersnatch_storage_plugins/s3.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/bandersnatch_storage_plugins/s3.py:215:12 Incompatible return type [7]: Expected `IO[typing.Any]` but got `typing.Generator[tempfile._TemporaryFileWrapper[str], None, None]`.",
    "message": " Expected `IO[typing.Any]` but got `typing.Generator[tempfile._TemporaryFileWrapper[str], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 215,
    "warning_line": "            yield tf",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from fnmatch import fnmatch\nfrom typing import IO, Any, Iterator, TextIO\n\n",
        "source_code_len": 74,
        "target_code": "from fnmatch import fnmatch\nfrom typing import IO, Any, Generator, Iterator\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -12,3 +11,3 @@\n from fnmatch import fnmatch\n-from typing import IO, Any, Iterator, TextIO\n+from typing import IO, Any, Generator, Iterator\n \n",
        "source_code_with_indent": "from fnmatch import fnmatch\nfrom typing import IO, Any, Iterator, TextIO\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from fnmatch import fnmatch\nfrom typing import IO, Any, Generator, Iterator\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            filepath = self.PATH_BACKEND(filepath)\n        return filepath.open(mode=mode, **kw)\n\n    @contextlib.contextmanager\n    def update_safe(self, filename: PATH_TYPES, **kw: Any) -> IO:\n        \"\"\"Rewrite a file atomically.\n",
        "source_code_len": 233,
        "target_code": "            filepath = self.PATH_BACKEND(filepath)\n        return filepath.open(mode=mode, **kw)  # type: ignore\n\n    @contextlib.contextmanager\n    def update_safe(self, filename: PATH_TYPES, **kw: Any) -> Generator[IO, None, None]:\n        \"\"\"Rewrite a file atomically.\n",
        "target_code_len": 272,
        "diff_format": "@@ -199,6 +206,6 @@\n             filepath = self.PATH_BACKEND(filepath)\n-        return filepath.open(mode=mode, **kw)\n+        return filepath.open(mode=mode, **kw)  # type: ignore\n \n     @contextlib.contextmanager\n-    def update_safe(self, filename: PATH_TYPES, **kw: Any) -> IO:\n+    def update_safe(self, filename: PATH_TYPES, **kw: Any) -> Generator[IO, None, None]:\n         \"\"\"Rewrite a file atomically.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            <IND>filepath = self.PATH_BACKEND(filepath)\n        <DED>return filepath.open(mode=mode, **kw)\n\n    <DED>@contextlib.contextmanager\n    def update_safe(self, filename: PATH_TYPES, **kw: Any) -> IO:\n        <IND>",
        "target_code_with_indent": "            <IND>filepath = self.PATH_BACKEND(filepath)\n        <DED>return filepath.open(mode=mode, **kw)  # type: ignore\n\n    <DED>@contextlib.contextmanager\n    def update_safe(self, filename: PATH_TYPES, **kw: Any) -> Generator[IO, None, None]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def open_file(\n        self, path: PATH_TYPES, text: bool = True, encoding: str = \"utf-8\"\n    ) -> TextIO:\n        if not isinstance(path, self.PATH_BACKEND):\n",
        "source_code_len": 164,
        "target_code": "\n    # @contextlib.contextmanager\n    # TODO: Make a Generator\n    def open_file(  # type: ignore\n        self,\n        path: PATH_TYPES,\n        text: bool = True,\n        encoding: str = \"utf-8\"\n        # ) -> Generator[IO, None, None]:\n    ) -> IO:\n        if not isinstance(path, self.PATH_BACKEND):\n",
        "target_code_len": 304,
        "diff_format": "@@ -269,5 +277,11 @@\n \n-    def open_file(\n-        self, path: PATH_TYPES, text: bool = True, encoding: str = \"utf-8\"\n-    ) -> TextIO:\n+    # @contextlib.contextmanager\n+    # TODO: Make a Generator\n+    def open_file(  # type: ignore\n+        self,\n+        path: PATH_TYPES,\n+        text: bool = True,\n+        encoding: str = \"utf-8\"\n+        # ) -> Generator[IO, None, None]:\n+    ) -> IO:\n         if not isinstance(path, self.PATH_BACKEND):\n",
        "source_code_with_indent": "\n    <DED>def open_file(\n        self, path: PATH_TYPES, text: bool = True, encoding: str = \"utf-8\"\n    ) -> TextIO:\n        <IND>if not isinstance(path, self.PATH_BACKEND):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # @contextlib.contextmanager\n    # TODO: Make a Generator\n    <DED>def open_file(  # type: ignore\n        self,\n        path: PATH_TYPES,\n        text: bool = True,\n        encoding: str = \"utf-8\"\n        # ) -> Generator[IO, None, None]:\n    ) -> IO:\n        <IND>if not isinstance(path, self.PATH_BACKEND):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        dry_run: bool = False,\n    ) -> None:\n        \"\"\"\n",
        "source_code_len": 58,
        "target_code": "        dry_run: bool = False,\n    ) -> int:\n        \"\"\"\n",
        "target_code_len": 57,
        "diff_format": "@@ -338,3 +352,3 @@\n         dry_run: bool = False,\n-    ) -> None:\n+    ) -> int:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        dry_run: bool = False,\n    ) -> None:\n        <IND>",
        "target_code_with_indent": "        dry_run: bool = False,\n    ) -> int:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            path.rmdir()\n        return\n\n",
        "source_code_len": 41,
        "target_code": "            path.rmdir()\n        return 0\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -350,3 +364,3 @@\n             path.rmdir()\n-        return\n+        return 0\n \n",
        "source_code_with_indent": "            <IND>path.rmdir()\n        <DED>return\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>path.rmdir()\n        <DED>return 0\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]