[
  {
    "project": "PrefectHQ/prefect",
    "commit": "6cb8dcf257d9bdf4eb6b2d06f3cb98fe95640f00",
    "filename": "src/prefect/environments/execution/cloud/environment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/environments/execution/cloud/environment.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/prefect/environments/execution/cloud/environment.py:84:13 Unbound name [10]: Name `client` is used but not defined in the current scope.",
    "message": " Name `client` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 84,
    "warning_line": "        v1 = client.CoreV1Api()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def _create_namespaced_secret(self) -> None:\n        docker_creds = Secret(\"DOCKER_REGISTRY_CREDENTIALS\").get()\n        v1 = client.CoreV1Api()\n        data = {\n            k: base64.b64encode(v.encode()).decode() for k, v in docker_creds.items()\n        }\n",
        "source_code_len": 261,
        "target_code": "    def _create_namespaced_secret(self) -> None:\n        from kubernetes import client\n\n        docker_creds = Secret(\"DOCKER_REGISTRY_CREDENTIALS\").get()\n        v1 = client.CoreV1Api()\n        data = {  # type: ignore\n            k: base64.b64encode(v.encode()).decode()\n            for k, v in docker_creds.items()  # type: ignore\n        }\n",
        "target_code_len": 344,
        "diff_format": "@@ -82,6 +82,9 @@\n     def _create_namespaced_secret(self) -> None:\n+        from kubernetes import client\n+\n         docker_creds = Secret(\"DOCKER_REGISTRY_CREDENTIALS\").get()\n         v1 = client.CoreV1Api()\n-        data = {\n-            k: base64.b64encode(v.encode()).decode() for k, v in docker_creds.items()\n+        data = {  # type: ignore\n+            k: base64.b64encode(v.encode()).decode()\n+            for k, v in docker_creds.items()  # type: ignore\n         }\n",
        "source_code_with_indent": "    <DED>def _create_namespaced_secret(self) -> None:\n        <IND>docker_creds = Secret(\"DOCKER_REGISTRY_CREDENTIALS\").get()\n        v1 = client.CoreV1Api()\n        data = {\n            k: base64.b64encode(v.encode()).decode() for k, v in docker_creds.items()\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _create_namespaced_secret(self) -> None:\n        <IND>from kubernetes import client\n\n        docker_creds = Secret(\"DOCKER_REGISTRY_CREDENTIALS\").get()\n        v1 = client.CoreV1Api()\n        data = {  # type: ignore\n            k: base64.b64encode(v.encode()).decode()\n            for k, v in docker_creds.items()  # type: ignore\n        }\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]