[
  {
    "project": "python-poetry/poetry",
    "commit": "bf12e427aea2eb5d7f11f0480c57508ae4f7326b",
    "filename": "poetry/console/commands/init.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/console/commands/init.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/console/commands/init.py:223:36 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 223,
    "warning_line": "                    requires.append(constraint)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_len": 139,
        "target_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_len": 152,
        "diff_format": "@@ -205,3 +205,3 @@\n     def _determine_requirements(\n-        self, requires, allow_prereleases=False\n+        self, requires, allow_prereleases=False, source=None\n     ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "bf12e427aea2eb5d7f11f0480c57508ae4f7326b",
    "filename": "poetry/console/commands/init.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/console/commands/init.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/console/commands/init.py:287:36 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 287,
    "warning_line": "                    requires.append(constraint)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_len": 139,
        "target_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_len": 152,
        "diff_format": "@@ -205,3 +205,3 @@\n     def _determine_requirements(\n-        self, requires, allow_prereleases=False\n+        self, requires, allow_prereleases=False, source=None\n     ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "bf12e427aea2eb5d7f11f0480c57508ae4f7326b",
    "filename": "poetry/console/commands/init.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/console/commands/init.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/console/commands/init.py:291:12 Incompatible return type [7]: Expected `List[Dict[str, str]]` but got `List[str]`.",
    "message": " Expected `List[Dict[str, str]]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 291,
    "warning_line": "            return requires",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_len": 139,
        "target_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_len": 152,
        "diff_format": "@@ -205,3 +205,3 @@\n     def _determine_requirements(\n-        self, requires, allow_prereleases=False\n+        self, requires, allow_prereleases=False, source=None\n     ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "bf12e427aea2eb5d7f11f0480c57508ae4f7326b",
    "filename": "poetry/console/commands/init.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/console/commands/init.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/console/commands/init.py:293:8 Incompatible variable type [9]: requires is declared to have type `List[str]` but is used as type `List[Dict[str, str]]`.",
    "message": " requires is declared to have type `List[str]` but is used as type `List[Dict[str, str]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 293,
    "warning_line": "        requires = self._parse_requirements(requires)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_len": 139,
        "target_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_len": 152,
        "diff_format": "@@ -205,3 +205,3 @@\n     def _determine_requirements(\n-        self, requires, allow_prereleases=False\n+        self, requires, allow_prereleases=False, source=None\n     ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "bf12e427aea2eb5d7f11f0480c57508ae4f7326b",
    "filename": "poetry/console/commands/init.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/console/commands/init.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/console/commands/init.py:302:32 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 302,
    "warning_line": "                    requirement[\"name\"], allow_prereleases=allow_prereleases",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_len": 139,
        "target_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_len": 152,
        "diff_format": "@@ -205,3 +205,3 @@\n     def _determine_requirements(\n-        self, requires, allow_prereleases=False\n+        self, requires, allow_prereleases=False, source=None\n     ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "bf12e427aea2eb5d7f11f0480c57508ae4f7326b",
    "filename": "poetry/console/commands/init.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/console/commands/init.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/console/commands/init.py:314:32 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 314,
    "warning_line": "                    requirement[\"name\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_len": 139,
        "target_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_len": 152,
        "diff_format": "@@ -205,3 +205,3 @@\n     def _determine_requirements(\n-        self, requires, allow_prereleases=False\n+        self, requires, allow_prereleases=False, source=None\n     ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "bf12e427aea2eb5d7f11f0480c57508ae4f7326b",
    "filename": "poetry/console/commands/init.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/console/commands/init.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/console/commands/init.py:315:32 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 315,
    "warning_line": "                    requirement[\"version\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_len": 139,
        "target_code": "    def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_len": 152,
        "diff_format": "@@ -205,3 +205,3 @@\n     def _determine_requirements(\n-        self, requires, allow_prereleases=False\n+        self, requires, allow_prereleases=False, source=None\n     ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def _determine_requirements(\n        self, requires, allow_prereleases=False, source=None\n    ):  # type: (List[str], bool) -> List[Dict[str, str]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]