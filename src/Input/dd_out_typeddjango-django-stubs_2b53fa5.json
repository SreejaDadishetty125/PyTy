[
  {
    "project": "typeddjango/django-stubs",
    "commit": "2b53fa5a1a9db689d0492ccf2de2638a49443571",
    "filename": "scripts/typecheck_tests.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/typeddjango-django-stubs/scripts/typecheck_tests.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/typecheck_tests.py:73:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `shlex.quote` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `shlex.quote` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 73,
    "warning_line": "            cmd = \" \".join(shlex.quote(s) for s in mypy_argv)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n        rc = completed.returncode\n        stdout = completed.stdout.decode()\n        stderr = completed.stderr.decode()\n        if rc not in (0, 1) or stderr:\n            import shlex\n\n            cmd = \" \".join(shlex.quote(s) for s in mypy_argv)\n            print(\"Failed to run {} (exitcode {})!\".format(cmd, rc), file=sys.stderr)\n            if stderr:\n                print(\"=== Output on stderr: ===\\n{}\".format(stderr.rstrip(\"\\n\")))\n            if stdout:\n                print(\"=== Output on stdout: ===\\n{}\".format(stdout.rstrip(\"\\n\")))\n            sys.exit(rc or 1)\n\n        sorted_lines = sorted(stdout.splitlines())\n        for line in sorted_lines:\n            try:\n                module_name = line.split('/')[0]\n            except IndexError:\n                module_name = 'unknown'\n\n            if not is_ignored(line, module_name):\n                if line.startswith(module_name):\n                    print(replace_with_clickable_location(line, abs_test_folder=tests_root))\n                else:\n                    print(line)\n\n",
        "source_code_len": 1128,
        "target_code": "            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n        )\n        output = completed.stdout.decode()\n\n        sorted_lines = sorted(output.splitlines())\n        for line in sorted_lines:\n            try:\n                path_to_error = line.split(':')[0]\n                test_folder_name = path_to_error.split('/')[2]\n            except IndexError:\n                test_folder_name = 'unknown'\n\n            if not is_ignored(line, test_folder_name):\n                global_rc = 1\n                print(line)\n\n",
        "target_code_len": 535,
        "diff_format": "@@ -64,30 +69,17 @@\n             stdout=subprocess.PIPE,\n-            stderr=subprocess.PIPE,\n+            stderr=subprocess.STDOUT,\n         )\n-        rc = completed.returncode\n-        stdout = completed.stdout.decode()\n-        stderr = completed.stderr.decode()\n-        if rc not in (0, 1) or stderr:\n-            import shlex\n+        output = completed.stdout.decode()\n \n-            cmd = \" \".join(shlex.quote(s) for s in mypy_argv)\n-            print(\"Failed to run {} (exitcode {})!\".format(cmd, rc), file=sys.stderr)\n-            if stderr:\n-                print(\"=== Output on stderr: ===\\n{}\".format(stderr.rstrip(\"\\n\")))\n-            if stdout:\n-                print(\"=== Output on stdout: ===\\n{}\".format(stdout.rstrip(\"\\n\")))\n-            sys.exit(rc or 1)\n-\n-        sorted_lines = sorted(stdout.splitlines())\n+        sorted_lines = sorted(output.splitlines())\n         for line in sorted_lines:\n             try:\n-                module_name = line.split('/')[0]\n+                path_to_error = line.split(':')[0]\n+                test_folder_name = path_to_error.split('/')[2]\n             except IndexError:\n-                module_name = 'unknown'\n+                test_folder_name = 'unknown'\n \n-            if not is_ignored(line, module_name):\n-                if line.startswith(module_name):\n-                    print(replace_with_clickable_location(line, abs_test_folder=tests_root))\n-                else:\n-                    print(line)\n+            if not is_ignored(line, test_folder_name):\n+                global_rc = 1\n+                print(line)\n \n",
        "source_code_with_indent": "            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n        rc = completed.returncode\n        stdout = completed.stdout.decode()\n        stderr = completed.stderr.decode()\n        if rc not in (0, 1) or stderr:\n            <IND>import shlex\n\n            cmd = \" \".join(shlex.quote(s) for s in mypy_argv)\n            print(\"Failed to run {} (exitcode {})!\".format(cmd, rc), file=sys.stderr)\n            if stderr:\n                <IND>print(\"=== Output on stderr: ===\\n{}\".format(stderr.rstrip(\"\\n\")))\n            <DED>if stdout:\n                <IND>print(\"=== Output on stdout: ===\\n{}\".format(stdout.rstrip(\"\\n\")))\n            <DED>sys.exit(rc or 1)\n\n        <DED>sorted_lines = sorted(stdout.splitlines())\n        for line in sorted_lines:\n            <IND>try:\n                <IND>module_name = line.split('/')[0]\n            <DED>except IndexError:\n                <IND>module_name = 'unknown'\n\n            <DED>if not is_ignored(line, module_name):\n                <IND>if line.startswith(module_name):\n                    <IND>print(replace_with_clickable_location(line, abs_test_folder=tests_root))\n                <DED>else:\n                    <IND>print(line)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n        )\n        output = completed.stdout.decode()\n\n        sorted_lines = sorted(output.splitlines())\n        for line in sorted_lines:\n            <IND>try:\n                <IND>path_to_error = line.split(':')[0]\n                test_folder_name = path_to_error.split('/')[2]\n            <DED>except IndexError:\n                <IND>test_folder_name = 'unknown'\n\n            <DED>if not is_ignored(line, test_folder_name):\n                <IND>global_rc = 1\n                print(line)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]