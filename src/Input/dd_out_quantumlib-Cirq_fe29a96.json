[
  {
    "project": "quantumlib/Cirq",
    "commit": "fe29a960e6fe81490d05698698a3b456cf9f5f4e",
    "filename": "dev_tools/shell_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/dev_tools/shell_tools.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dev_tools/shell_tools.py:128:12 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `_async_wait_for_process` but got `typing.Coroutine[typing.Any, typing.Any, asyncio.subprocess.Process]`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `_async_wait_for_process` but got `typing.Coroutine[typing.Any, typing.Any, asyncio.subprocess.Process]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 128,
    "warning_line": "            asyncio.create_subprocess_exec(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import Optional, Tuple, Union, IO\n\n",
        "source_code_len": 58,
        "target_code": "import sys\nfrom typing import Optional, Tuple, Union, IO, Any\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -17,3 +17,3 @@\n import sys\n-from typing import Optional, Tuple, Union, IO\n+from typing import Optional, Tuple, Union, IO, Any\n \n",
        "source_code_with_indent": "import sys\nfrom typing import Optional, Tuple, Union, IO\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Optional, Tuple, Union, IO, Any\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "async def _async_wait_for_process(\n        future_process: asyncio.Future,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "source_code_len": 139,
        "target_code": "async def _async_wait_for_process(\n        future_process: Any,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "target_code_len": 128,
        "diff_format": "@@ -61,3 +61,3 @@\n async def _async_wait_for_process(\n-        future_process: asyncio.Future,\n+        future_process: Any,\n         out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "source_code_with_indent": "<DED>async def _async_wait_for_process(\n        future_process: asyncio.Future,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>async def _async_wait_for_process(\n        future_process: Any,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "fe29a960e6fe81490d05698698a3b456cf9f5f4e",
    "filename": "dev_tools/shell_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/dev_tools/shell_tools.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dev_tools/shell_tools.py:183:12 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `_async_wait_for_process` but got `typing.Coroutine[typing.Any, typing.Any, asyncio.subprocess.Process]`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `_async_wait_for_process` but got `typing.Coroutine[typing.Any, typing.Any, asyncio.subprocess.Process]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "            asyncio.create_subprocess_shell(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import Optional, Tuple, Union, IO\n\n",
        "source_code_len": 58,
        "target_code": "import sys\nfrom typing import Optional, Tuple, Union, IO, Any\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -17,3 +17,3 @@\n import sys\n-from typing import Optional, Tuple, Union, IO\n+from typing import Optional, Tuple, Union, IO, Any\n \n",
        "source_code_with_indent": "import sys\nfrom typing import Optional, Tuple, Union, IO\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Optional, Tuple, Union, IO, Any\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "async def _async_wait_for_process(\n        future_process: asyncio.Future,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "source_code_len": 139,
        "target_code": "async def _async_wait_for_process(\n        future_process: Any,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "target_code_len": 128,
        "diff_format": "@@ -61,3 +61,3 @@\n async def _async_wait_for_process(\n-        future_process: asyncio.Future,\n+        future_process: Any,\n         out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "source_code_with_indent": "<DED>async def _async_wait_for_process(\n        future_process: asyncio.Future,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>async def _async_wait_for_process(\n        future_process: Any,\n        out: Optional[Union[TeeCapture, IO[str]]] = sys.stdout,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "fe29a960e6fe81490d05698698a3b456cf9f5f4e",
    "filename": "setup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/setup.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "setup.py:26:12 Unbound name [10]: Name `__version__` is used but not defined in the current scope.",
    "message": " Name `__version__` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 26,
    "warning_line": "    version=__version__,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# This reads the __version__ variable from cirq/_version.py\nexec(open('cirq/_version.py').read())\n",
        "source_code_len": 98,
        "target_code": "# This reads the __version__ variable from cirq/_version.py\n__version__ = None\nexec(open('cirq/_version.py').read())\n",
        "target_code_len": 117,
        "diff_format": "@@ -17,2 +17,3 @@\n # This reads the __version__ variable from cirq/_version.py\n+__version__ = None\n exec(open('cirq/_version.py').read())\n",
        "source_code_with_indent": "# This reads the __version__ variable from cirq/_version.py\nexec(open('cirq/_version.py').read())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# This reads the __version__ variable from cirq/_version.py\n__version__ = None\nexec(open('cirq/_version.py').read())\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]