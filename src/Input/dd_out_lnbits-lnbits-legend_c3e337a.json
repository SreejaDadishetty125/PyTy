[
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "lnbits/__init__.py:18:0 Incompatible attribute type [8]: Attribute `wsgi_app` declared in class `flask.app.Flask` has type `BoundMethod[typing.Callable(flask.app.Flask.wsgi_app)[[Named(self, flask.app.Flask), Named(environ, typing.Any), Named(start_response, typing.Any)], typing.Any], flask.app.Flask]` but is used as type `ProxyFix`.",
    "message": " Attribute `wsgi_app` declared in class `flask.app.Flask` has type `BoundMethod[typing.Callable(flask.app.Flask.wsgi_app)[[Named(self, flask.app.Flask), Named(environ, typing.Any), Named(start_response, typing.Any)], typing.Any], flask.app.Flask]` but is used as type `ProxyFix`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 18,
    "warning_line": "app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "app = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\nvalid_extensions = [ext for ext in ExtensionManager(disabled=disabled_extensions).extensions if ext.is_valid]\n",
        "source_code_len": 191,
        "target_code": "app = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1) # type: ignore\nvalid_extensions = [ext for ext in ExtensionManager(disabled=disabled_extensions).extensions if ext.is_valid]\n",
        "target_code_len": 206,
        "diff_format": "@@ -17,3 +17,3 @@\n app = Flask(__name__)\n-app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n+app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1) # type: ignore\n valid_extensions = [ext for ext in ExtensionManager(disabled=disabled_extensions).extensions if ext.is_valid]\n",
        "source_code_with_indent": "app = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\nvalid_extensions = [ext for ext in ExtensionManager(disabled=disabled_extensions).extensions if ext.is_valid]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "app = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1) # type: ignore\nvalid_extensions = [ext for ext in ExtensionManager(disabled=disabled_extensions).extensions if ext.is_valid]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/crud.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/crud.py:19:4 Incompatible return type [7]: Expected `User` but got `Optional[User]`.",
    "message": " Expected `User` but got `Optional[User]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 19,
    "warning_line": "    return get_account(user_id=user_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    return get_account(user_id=user_id)\n\n",
        "source_code_len": 42,
        "target_code": "\n    new_account = get_account(user_id=user_id)\n    assert new_account, \"Newly created account couldn't be retrieved\"\n\n    return new_account\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -18,3 +18,6 @@\n \n-    return get_account(user_id=user_id)\n+    new_account = get_account(user_id=user_id)\n+    assert new_account, \"Newly created account couldn't be retrieved\"\n+\n+    return new_account\n \n",
        "source_code_with_indent": "\n    <DED>return get_account(user_id=user_id)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>new_account = get_account(user_id=user_id)\n    assert new_account, \"Newly created account couldn't be retrieved\"\n\n    return new_account\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/crud.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/crud.py:77:4 Incompatible return type [7]: Expected `Wallet` but got `Optional[Wallet]`.",
    "message": " Expected `Wallet` but got `Optional[Wallet]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 77,
    "warning_line": "    return get_wallet(wallet_id=wallet_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    return get_wallet(wallet_id=wallet_id)\n\n",
        "source_code_len": 45,
        "target_code": "\n    new_wallet = get_wallet(wallet_id=wallet_id)\n    assert new_wallet, \"Newly created wallet couldn't be retrieved\"\n\n    return new_wallet\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -76,3 +79,6 @@\n \n-    return get_wallet(wallet_id=wallet_id)\n+    new_wallet = get_wallet(wallet_id=wallet_id)\n+    assert new_wallet, \"Newly created wallet couldn't be retrieved\"\n+\n+    return new_wallet\n \n",
        "source_code_with_indent": "\n    <DED>return get_wallet(wallet_id=wallet_id)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>new_wallet = get_wallet(wallet_id=wallet_id)\n    assert new_wallet, \"Newly created wallet couldn't be retrieved\"\n\n    return new_wallet\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/crud.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/crud.py:189:4 Incompatible return type [7]: Expected `Payment` but got `Optional[Payment]`.",
    "message": " Expected `Payment` but got `Optional[Payment]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 189,
    "warning_line": "    return get_wallet_payment(wallet_id, checking_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    return get_wallet_payment(wallet_id, checking_id)\n\n",
        "source_code_len": 56,
        "target_code": "\n    new_payment = get_wallet_payment(wallet_id, checking_id)\n    assert new_payment, \"Newly created payment couldn't be retrieved\"\n\n    return new_payment\n\n",
        "target_code_len": 157,
        "diff_format": "@@ -188,3 +194,6 @@\n \n-    return get_wallet_payment(wallet_id, checking_id)\n+    new_payment = get_wallet_payment(wallet_id, checking_id)\n+    assert new_payment, \"Newly created payment couldn't be retrieved\"\n+\n+    return new_payment\n \n",
        "source_code_with_indent": "\n    <DED>return get_wallet_payment(wallet_id, checking_id)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>new_payment = get_wallet_payment(wallet_id, checking_id)\n    assert new_payment, \"Newly created payment couldn't be retrieved\"\n\n    return new_payment\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/models.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/models.py:35:8 Incompatible return type [7]: Expected `Payment` but got `Optional[Payment]`.",
    "message": " Expected `Payment` but got `Optional[Payment]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 35,
    "warning_line": "        return get_wallet_payment(self.id, checking_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def balance(self) -> int:\n        return int(self.balance / 1000)\n\n    def get_payment(self, checking_id: str) -> \"Payment\":\n        from .crud import get_wallet_payment\n",
        "source_code_len": 174,
        "target_code": "    def balance(self) -> int:\n        return self.balance // 1000\n\n    def get_payment(self, checking_id: str) -> Optional[\"Payment\"]:\n        from .crud import get_wallet_payment\n",
        "target_code_len": 180,
        "diff_format": "@@ -29,5 +29,5 @@\n     def balance(self) -> int:\n-        return int(self.balance / 1000)\n+        return self.balance // 1000\n \n-    def get_payment(self, checking_id: str) -> \"Payment\":\n+    def get_payment(self, checking_id: str) -> Optional[\"Payment\"]:\n         from .crud import get_wallet_payment\n",
        "source_code_with_indent": "    def balance(self) -> int:\n        <IND>return int(self.balance / 1000)\n\n    <DED>def get_payment(self, checking_id: str) -> \"Payment\":\n        <IND>from .crud import get_wallet_payment\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def balance(self) -> int:\n        <IND>return self.balance // 1000\n\n    <DED>def get_payment(self, checking_id: str) -> Optional[\"Payment\"]:\n        <IND>from .crud import get_wallet_payment\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/models.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/models.py:62:8 Incompatible return type [7]: Expected `int` but got `float`.",
    "message": " Expected `int` but got `float`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 62,
    "warning_line": "        return self.amount / 1000",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def sat(self) -> int:\n        return self.amount / 1000\n\n",
        "source_code_len": 61,
        "target_code": "    def sat(self) -> int:\n        return self.amount // 1000\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -61,3 +61,3 @@\n     def sat(self) -> int:\n-        return self.amount / 1000\n+        return self.amount // 1000\n \n",
        "source_code_with_indent": "    def sat(self) -> int:\n        <IND>return self.amount / 1000\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def sat(self) -> int:\n        <IND>return self.amount // 1000\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/services.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/services.py:20:65 Incompatible parameter type [6]: Expected `str` for 3rd parameter `amount` to call `create_payment` but got `int`.",
    "message": " Expected `str` for 3rd parameter `amount` to call `create_payment` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 20,
    "warning_line": "    create_payment(wallet_id=wallet_id, checking_id=checking_id, amount=amount_msat, memo=memo)"
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/services.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/services.py:41:12 Incompatible parameter type [6]: Expected `str` for 3rd parameter `amount` to call `create_payment` but got `int`.",
    "message": " Expected `str` for 3rd parameter `amount` to call `create_payment` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 41,
    "warning_line": "            amount=-invoice.amount_msat,"
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/services.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/services.py:42:12 Incompatible parameter type [6]: Expected `int` for 4th parameter `fee` to call `create_payment` but got `float`.",
    "message": " Expected `int` for 4th parameter `fee` to call `create_payment` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "            fee=-fee_reserve,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        fee_reserve = max(1000, invoice.amount_msat * 0.01)\n        create_payment(\n",
        "source_code_len": 85,
        "target_code": "\n        fee_reserve = max(1000, int(invoice.amount_msat * 0.01))\n        create_payment(\n",
        "target_code_len": 90,
        "diff_format": "@@ -36,3 +35,3 @@\n \n-        fee_reserve = max(1000, invoice.amount_msat * 0.01)\n+        fee_reserve = max(1000, int(invoice.amount_msat * 0.01))\n         create_payment(\n",
        "source_code_with_indent": "\n        <DED>fee_reserve = max(1000, invoice.amount_msat * 0.01)\n        create_payment(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>fee_reserve = max(1000, int(invoice.amount_msat * 0.01))\n        create_payment(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/core/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/core/services.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/core/services.py:55:16 Incompatible parameter type [6]: Expected `str` for 3rd parameter `amount` to call `create_payment` but got `int`.",
    "message": " Expected `str` for 3rd parameter `amount` to call `create_payment` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 55,
    "warning_line": "                amount=-invoice.amount_msat,"
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/clightning.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/wallets/clightning.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/wallets/clightning.py:21:48 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `PaymentResponse.__init__` but got `None`.",
    "message": " Expected `int` for 3rd positional only parameter to call `PaymentResponse.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 21,
    "warning_line": "        return PaymentResponse(ok, checking_id, fee_msat, error_message)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        r = self.l1.pay(bolt11)\n        ok, checking_id, fee_msat, error_message = True, None, None, None\n        return PaymentResponse(ok, checking_id, fee_msat, error_message)\n",
        "source_code_len": 179,
        "target_code": "        r = self.l1.pay(bolt11)\n        ok, checking_id, fee_msat, error_message = True, None, 0, None\n        return PaymentResponse(ok, checking_id, fee_msat, error_message)\n",
        "target_code_len": 176,
        "diff_format": "@@ -19,3 +18,3 @@\n         r = self.l1.pay(bolt11)\n-        ok, checking_id, fee_msat, error_message = True, None, None, None\n+        ok, checking_id, fee_msat, error_message = True, None, 0, None\n         return PaymentResponse(ok, checking_id, fee_msat, error_message)\n",
        "source_code_with_indent": "        <IND>r = self.l1.pay(bolt11)\n        ok, checking_id, fee_msat, error_message = True, None, None, None\n        return PaymentResponse(ok, checking_id, fee_msat, error_message)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>r = self.l1.pay(bolt11)\n        ok, checking_id, fee_msat, error_message = True, None, 0, None\n        return PaymentResponse(ok, checking_id, fee_msat, error_message)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/clightning.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/wallets/clightning.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/wallets/clightning.py:33:76 Unbound name [10]: Name `payment_hash` is used but not defined in the current scope.",
    "message": " Name `payment_hash` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 33,
    "warning_line": "        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
        "source_code_len": 205,
        "target_code": "        if not r.ok:\n            return PaymentStatus(None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
        "target_code_len": 201,
        "diff_format": "@@ -31,4 +30,4 @@\n         if not r.ok:\n-            return PaymentStatus(r, None)\n-        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n+            return PaymentStatus(None)\n+        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n         payment = payments[0] if payments else None\n",
        "source_code_with_indent": "        if not r.ok:\n            <IND>return PaymentStatus(r, None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if not r.ok:\n            <IND>return PaymentStatus(None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/lndgrpc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/wallets/lndgrpc.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/wallets/lndgrpc.py:93:24 Unbound name [10]: Name `threading` is used but not defined in the current scope.",
    "message": " Name `threading` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 93,
    "warning_line": "        invoiceThread = threading.Thread(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            if _response.state == 1:\n            \n                return PaymentStatus(True)\n\n        invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        return PaymentStatus(True)\n",
        "source_code_len": 461,
        "target_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            if _response.state == 1:\n                return PaymentStatus(True)\n\n        return PaymentStatus(None)\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        return PaymentStatus(True)\n",
        "target_code_len": 291,
        "diff_format": "@@ -87,16 +74,9 @@\n         for _response in lnd_rpc.subscribe_single_invoice(check_id):\n-\n             if _response.state == 1:\n-            \n                 return PaymentStatus(True)\n \n-        invoiceThread = threading.Thread(\n-            target=detectPayment,\n-            args=[lndResponse.check_id, ],\n-            daemon=True\n-        )\n-        invoiceThread.start()\n+        return PaymentStatus(None)\n \n     def get_payment_status(self, checking_id: str) -> PaymentStatus:\n-        \n+\n         return PaymentStatus(True)\n",
        "source_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            <IND>if _response.state == 1:\n            \n                <IND>return PaymentStatus(True)\n\n        <DED><DED>invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        <IND>return PaymentStatus(True)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            <IND>if _response.state == 1:\n                <IND>return PaymentStatus(True)\n\n        <DED><DED>return PaymentStatus(None)\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        <IND>return PaymentStatus(True)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/lndgrpc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/wallets/lndgrpc.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/wallets/lndgrpc.py:94:19 Unbound name [10]: Name `detectPayment` is used but not defined in the current scope.",
    "message": " Name `detectPayment` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 94,
    "warning_line": "            target=detectPayment,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            if _response.state == 1:\n            \n                return PaymentStatus(True)\n\n        invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        return PaymentStatus(True)\n",
        "source_code_len": 461,
        "target_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            if _response.state == 1:\n                return PaymentStatus(True)\n\n        return PaymentStatus(None)\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        return PaymentStatus(True)\n",
        "target_code_len": 291,
        "diff_format": "@@ -87,16 +74,9 @@\n         for _response in lnd_rpc.subscribe_single_invoice(check_id):\n-\n             if _response.state == 1:\n-            \n                 return PaymentStatus(True)\n \n-        invoiceThread = threading.Thread(\n-            target=detectPayment,\n-            args=[lndResponse.check_id, ],\n-            daemon=True\n-        )\n-        invoiceThread.start()\n+        return PaymentStatus(None)\n \n     def get_payment_status(self, checking_id: str) -> PaymentStatus:\n-        \n+\n         return PaymentStatus(True)\n",
        "source_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            <IND>if _response.state == 1:\n            \n                <IND>return PaymentStatus(True)\n\n        <DED><DED>invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        <IND>return PaymentStatus(True)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            <IND>if _response.state == 1:\n                <IND>return PaymentStatus(True)\n\n        <DED><DED>return PaymentStatus(None)\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        <IND>return PaymentStatus(True)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/lndgrpc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/wallets/lndgrpc.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/wallets/lndgrpc.py:95:18 Unbound name [10]: Name `lndResponse` is used but not defined in the current scope.",
    "message": " Name `lndResponse` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 95,
    "warning_line": "            args=[lndResponse.check_id, ],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            if _response.state == 1:\n            \n                return PaymentStatus(True)\n\n        invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        return PaymentStatus(True)\n",
        "source_code_len": 461,
        "target_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            if _response.state == 1:\n                return PaymentStatus(True)\n\n        return PaymentStatus(None)\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        return PaymentStatus(True)\n",
        "target_code_len": 291,
        "diff_format": "@@ -87,16 +74,9 @@\n         for _response in lnd_rpc.subscribe_single_invoice(check_id):\n-\n             if _response.state == 1:\n-            \n                 return PaymentStatus(True)\n \n-        invoiceThread = threading.Thread(\n-            target=detectPayment,\n-            args=[lndResponse.check_id, ],\n-            daemon=True\n-        )\n-        invoiceThread.start()\n+        return PaymentStatus(None)\n \n     def get_payment_status(self, checking_id: str) -> PaymentStatus:\n-        \n+\n         return PaymentStatus(True)\n",
        "source_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            <IND>if _response.state == 1:\n            \n                <IND>return PaymentStatus(True)\n\n        <DED><DED>invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        <IND>return PaymentStatus(True)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            <IND>if _response.state == 1:\n                <IND>return PaymentStatus(True)\n\n        <DED><DED>return PaymentStatus(None)\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        <IND>return PaymentStatus(True)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/lndgrpc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/wallets/lndgrpc.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/wallets/lndgrpc.py:98:8 Incompatible return type [7]: Expected `PaymentStatus` but got implicit return value of `None`.",
    "message": " Expected `PaymentStatus` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 98,
    "warning_line": "        invoiceThread.start()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            if _response.state == 1:\n            \n                return PaymentStatus(True)\n\n        invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        return PaymentStatus(True)\n",
        "source_code_len": 461,
        "target_code": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            if _response.state == 1:\n                return PaymentStatus(True)\n\n        return PaymentStatus(None)\n\n    def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        return PaymentStatus(True)\n",
        "target_code_len": 291,
        "diff_format": "@@ -87,16 +74,9 @@\n         for _response in lnd_rpc.subscribe_single_invoice(check_id):\n-\n             if _response.state == 1:\n-            \n                 return PaymentStatus(True)\n \n-        invoiceThread = threading.Thread(\n-            target=detectPayment,\n-            args=[lndResponse.check_id, ],\n-            daemon=True\n-        )\n-        invoiceThread.start()\n+        return PaymentStatus(None)\n \n     def get_payment_status(self, checking_id: str) -> PaymentStatus:\n-        \n+\n         return PaymentStatus(True)\n",
        "source_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n\n            <IND>if _response.state == 1:\n            \n                <IND>return PaymentStatus(True)\n\n        <DED><DED>invoiceThread = threading.Thread(\n            target=detectPayment,\n            args=[lndResponse.check_id, ],\n            daemon=True\n        )\n        invoiceThread.start()\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n        \n        <IND>return PaymentStatus(True)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for _response in lnd_rpc.subscribe_single_invoice(check_id):\n            <IND>if _response.state == 1:\n                <IND>return PaymentStatus(True)\n\n        <DED><DED>return PaymentStatus(None)\n\n    <DED>def get_payment_status(self, checking_id: str) -> PaymentStatus:\n\n        <IND>return PaymentStatus(True)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]