[
  {
    "project": "ConsenSys/mythril",
    "commit": "cbd344b8e877c67f9bf7a09333632ac81f52f669",
    "filename": "mythril/laser/ethereum/state/calldata.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/state/calldata.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/state/calldata.py:189:23 Incompatible parameter type [6]: Expected `mythril.laser.smt.bool.Bool` for 1st positional only parameter to call `mythril.laser.smt.bitvec.If` but got `bool`.",
    "message": " Expected `mythril.laser.smt.bool.Bool` for 1st positional only parameter to call `mythril.laser.smt.bitvec.If` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 189,
    "warning_line": "            value = If(item == i, self._calldata[i], value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    BitVec,\n    Concat,\n",
        "source_code_len": 24,
        "target_code": "    BitVec,\n    Bool,\n    Concat,\n",
        "target_code_len": 34,
        "diff_format": "@@ -14,2 +14,3 @@\n     BitVec,\n+    Bool,\n     Concat,\n",
        "source_code_with_indent": "    BitVec,\n    Concat,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    BitVec,\n    Bool,\n    Concat,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for i in range(self.size):\n            value = If(item == i, self._calldata[i], value)\n        return value\n",
        "source_code_len": 116,
        "target_code": "        for i in range(self.size):\n            value = If(cast(Union[BitVec, Bool], item) == i, self._calldata[i], value)\n        return value\n",
        "target_code_len": 143,
        "diff_format": "@@ -188,3 +189,3 @@\n         for i in range(self.size):\n-            value = If(item == i, self._calldata[i], value)\n+            value = If(cast(Union[BitVec, Bool], item) == i, self._calldata[i], value)\n         return value\n",
        "source_code_with_indent": "        for i in range(self.size):\n            <IND>value = If(item == i, self._calldata[i], value)\n        <DED>return value\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for i in range(self.size):\n            <IND>value = If(cast(Union[BitVec, Bool], item) == i, self._calldata[i], value)\n        <DED>return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "cbd344b8e877c67f9bf7a09333632ac81f52f669",
    "filename": "mythril/laser/ethereum/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/util.py:80:12 Incompatible parameter type [6]: Expected `mythril.laser.smt.bool.Bool` for 1st positional only parameter to call `mythril.laser.smt.bitvec.If` but got `mythril.laser.smt.expression.Expression`.",
    "message": " Expected `mythril.laser.smt.bool.Bool` for 1st positional only parameter to call `mythril.laser.smt.bitvec.If` but got `mythril.laser.smt.expression.Expression`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 80,
    "warning_line": "            item, symbol_factory.BitVecVal(1, 256), symbol_factory.BitVecVal(0, 256)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING\n\n",
        "source_code_len": 63,
        "target_code": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING, cast\n\n",
        "target_code_len": 69,
        "diff_format": "@@ -3,3 +3,3 @@\n import re\n-from typing import Dict, List, Union, TYPE_CHECKING\n+from typing import Dict, List, Union, TYPE_CHECKING, cast\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return If(\n            item, symbol_factory.BitVecVal(1, 256), symbol_factory.BitVecVal(0, 256)\n        )\n    elif type(item) == bool:\n        if item:\n            return symbol_factory.BitVecVal(1, 256)\n        else:\n            return symbol_factory.BitVecVal(0, 256)\n    elif type(item) == int:\n        return symbol_factory.BitVecVal(item, 256)\n    else:\n",
        "source_code_len": 367,
        "target_code": "        return If(\n            cast(Bool, item),\n            symbol_factory.BitVecVal(1, 256),\n            symbol_factory.BitVecVal(0, 256),\n        )\n    else:\n",
        "target_code_len": 161,
        "diff_format": "@@ -79,11 +79,6 @@\n         return If(\n-            item, symbol_factory.BitVecVal(1, 256), symbol_factory.BitVecVal(0, 256)\n+            cast(Bool, item),\n+            symbol_factory.BitVecVal(1, 256),\n+            symbol_factory.BitVecVal(0, 256),\n         )\n-    elif type(item) == bool:\n-        if item:\n-            return symbol_factory.BitVecVal(1, 256)\n-        else:\n-            return symbol_factory.BitVecVal(0, 256)\n-    elif type(item) == int:\n-        return symbol_factory.BitVecVal(item, 256)\n     else:\n",
        "source_code_with_indent": "        <IND>return If(\n            item, symbol_factory.BitVecVal(1, 256), symbol_factory.BitVecVal(0, 256)\n        )\n    <DED>elif type(item) == bool:\n        <IND>if item:\n            <IND>return symbol_factory.BitVecVal(1, 256)\n        <DED>else:\n            <IND>return symbol_factory.BitVecVal(0, 256)\n    <DED><DED>elif type(item) == int:\n        <IND>return symbol_factory.BitVecVal(item, 256)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return If(\n            cast(Bool, item),\n            symbol_factory.BitVecVal(1, 256),\n            symbol_factory.BitVecVal(0, 256),\n        )\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "cbd344b8e877c67f9bf7a09333632ac81f52f669",
    "filename": "mythril/laser/ethereum/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/util.py:88:40 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `mythril.laser.smt._SmtSymbolFactory.BitVecVal` but got `mythril.laser.smt.expression.Expression`.",
    "message": " Expected `int` for 1st positional only parameter to call `mythril.laser.smt._SmtSymbolFactory.BitVecVal` but got `mythril.laser.smt.expression.Expression`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        return symbol_factory.BitVecVal(item, 256)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING\n\n",
        "source_code_len": 63,
        "target_code": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING, cast\n\n",
        "target_code_len": 69,
        "diff_format": "@@ -3,3 +3,3 @@\n import re\n-from typing import Dict, List, Union, TYPE_CHECKING\n+from typing import Dict, List, Union, TYPE_CHECKING, cast\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Union, TYPE_CHECKING, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return If(\n            item, symbol_factory.BitVecVal(1, 256), symbol_factory.BitVecVal(0, 256)\n        )\n    elif type(item) == bool:\n        if item:\n            return symbol_factory.BitVecVal(1, 256)\n        else:\n            return symbol_factory.BitVecVal(0, 256)\n    elif type(item) == int:\n        return symbol_factory.BitVecVal(item, 256)\n    else:\n",
        "source_code_len": 367,
        "target_code": "        return If(\n            cast(Bool, item),\n            symbol_factory.BitVecVal(1, 256),\n            symbol_factory.BitVecVal(0, 256),\n        )\n    else:\n",
        "target_code_len": 161,
        "diff_format": "@@ -79,11 +79,6 @@\n         return If(\n-            item, symbol_factory.BitVecVal(1, 256), symbol_factory.BitVecVal(0, 256)\n+            cast(Bool, item),\n+            symbol_factory.BitVecVal(1, 256),\n+            symbol_factory.BitVecVal(0, 256),\n         )\n-    elif type(item) == bool:\n-        if item:\n-            return symbol_factory.BitVecVal(1, 256)\n-        else:\n-            return symbol_factory.BitVecVal(0, 256)\n-    elif type(item) == int:\n-        return symbol_factory.BitVecVal(item, 256)\n     else:\n",
        "source_code_with_indent": "        <IND>return If(\n            item, symbol_factory.BitVecVal(1, 256), symbol_factory.BitVecVal(0, 256)\n        )\n    <DED>elif type(item) == bool:\n        <IND>if item:\n            <IND>return symbol_factory.BitVecVal(1, 256)\n        <DED>else:\n            <IND>return symbol_factory.BitVecVal(0, 256)\n    <DED><DED>elif type(item) == int:\n        <IND>return symbol_factory.BitVecVal(item, 256)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return If(\n            cast(Bool, item),\n            symbol_factory.BitVecVal(1, 256),\n            symbol_factory.BitVecVal(0, 256),\n        )\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]