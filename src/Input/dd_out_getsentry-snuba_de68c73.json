[
  {
    "project": "getsentry/snuba",
    "commit": "de68c737996d23da10112d77f4f7e4cf39817105",
    "filename": "tests/datasets/test_events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_events.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_events.py:49:18 Incompatible parameter type [6]: Expected `typing.Optional[snuba.query.data_source.simple.Entity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " Expected `typing.Optional[snuba.query.data_source.simple.Entity]` for 1st positional only parameter to call `Query.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "    query = Query({}, storage.get_schema().get_data_source())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import EventsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "source_code_len": 195,
        "target_code": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import ErrorsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "target_code_len": 195,
        "diff_format": "@@ -2,3 +2,3 @@\n from snuba.clusters.cluster import ClickhouseClientSettings\n-from snuba.datasets.entities.events import EventsQueryStorageSelector, event_translator\n+from snuba.datasets.entities.events import ErrorsQueryStorageSelector, event_translator\n from snuba.datasets.storages import StorageKey\n",
        "source_code_with_indent": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import EventsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import ErrorsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from tests.helpers import write_unprocessed_events\n\n",
        "source_code_len": 52,
        "target_code": "from tests.helpers import write_unprocessed_events\n\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.clickhouse.columns import ColumnSet\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -9,2 +9,6 @@\n from tests.helpers import write_unprocessed_events\n+\n+from snuba.datasets.entities import EntityKey\n+from snuba.query.data_source.simple import Entity\n+from snuba.clickhouse.columns import ColumnSet\n \n",
        "source_code_with_indent": "from tests.helpers import write_unprocessed_events\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from tests.helpers import write_unprocessed_events\n\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.clickhouse.columns import ColumnSet\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    storage = get_storage(StorageKey.EVENTS)\n    storage_ro = get_storage(StorageKey.EVENTS_RO)\n\n    query = Query({}, storage.get_schema().get_data_source())\n\n    storage_selector = EventsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "source_code_len": 250,
        "target_code": "\n    storage = get_storage(StorageKey.ERRORS)\n    storage_ro = get_storage(StorageKey.ERRORS_RO)\n\n    query = Query(Entity(EntityKey.EVENTS, ColumnSet([])), selected_columns=[])\n\n    storage_selector = ErrorsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "target_code_len": 268,
        "diff_format": "@@ -45,8 +49,8 @@\n \n-    storage = get_storage(StorageKey.EVENTS)\n-    storage_ro = get_storage(StorageKey.EVENTS_RO)\n+    storage = get_storage(StorageKey.ERRORS)\n+    storage_ro = get_storage(StorageKey.ERRORS_RO)\n \n-    query = Query({}, storage.get_schema().get_data_source())\n+    query = Query(Entity(EntityKey.EVENTS, ColumnSet([])), selected_columns=[])\n \n-    storage_selector = EventsQueryStorageSelector(mappers=event_translator)\n+    storage_selector = ErrorsQueryStorageSelector(mappers=event_translator)\n     assert (\n",
        "source_code_with_indent": "\n    storage = get_storage(StorageKey.EVENTS)\n    storage_ro = get_storage(StorageKey.EVENTS_RO)\n\n    query = Query({}, storage.get_schema().get_data_source())\n\n    storage_selector = EventsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    storage = get_storage(StorageKey.ERRORS)\n    storage_ro = get_storage(StorageKey.ERRORS_RO)\n\n    query = Query(Entity(EntityKey.EVENTS, ColumnSet([])), selected_columns=[])\n\n    storage_selector = ErrorsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "de68c737996d23da10112d77f4f7e4cf39817105",
    "filename": "tests/datasets/test_events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_events.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_events.py:49:22 Incompatible parameter type [6]: Expected `typing.Optional[typing.Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `snuba.datasets.schemas.RelationalSource`.",
    "message": " Expected `typing.Optional[typing.Sequence[snuba.query.SelectedExpression]]` for 2nd positional only parameter to call `Query.__init__` but got `snuba.datasets.schemas.RelationalSource`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "    query = Query({}, storage.get_schema().get_data_source())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import EventsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "source_code_len": 195,
        "target_code": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import ErrorsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "target_code_len": 195,
        "diff_format": "@@ -2,3 +2,3 @@\n from snuba.clusters.cluster import ClickhouseClientSettings\n-from snuba.datasets.entities.events import EventsQueryStorageSelector, event_translator\n+from snuba.datasets.entities.events import ErrorsQueryStorageSelector, event_translator\n from snuba.datasets.storages import StorageKey\n",
        "source_code_with_indent": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import EventsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from snuba.clusters.cluster import ClickhouseClientSettings\nfrom snuba.datasets.entities.events import ErrorsQueryStorageSelector, event_translator\nfrom snuba.datasets.storages import StorageKey\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from tests.helpers import write_unprocessed_events\n\n",
        "source_code_len": 52,
        "target_code": "from tests.helpers import write_unprocessed_events\n\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.clickhouse.columns import ColumnSet\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -9,2 +9,6 @@\n from tests.helpers import write_unprocessed_events\n+\n+from snuba.datasets.entities import EntityKey\n+from snuba.query.data_source.simple import Entity\n+from snuba.clickhouse.columns import ColumnSet\n \n",
        "source_code_with_indent": "from tests.helpers import write_unprocessed_events\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from tests.helpers import write_unprocessed_events\n\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.clickhouse.columns import ColumnSet\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    storage = get_storage(StorageKey.EVENTS)\n    storage_ro = get_storage(StorageKey.EVENTS_RO)\n\n    query = Query({}, storage.get_schema().get_data_source())\n\n    storage_selector = EventsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "source_code_len": 250,
        "target_code": "\n    storage = get_storage(StorageKey.ERRORS)\n    storage_ro = get_storage(StorageKey.ERRORS_RO)\n\n    query = Query(Entity(EntityKey.EVENTS, ColumnSet([])), selected_columns=[])\n\n    storage_selector = ErrorsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "target_code_len": 268,
        "diff_format": "@@ -45,8 +49,8 @@\n \n-    storage = get_storage(StorageKey.EVENTS)\n-    storage_ro = get_storage(StorageKey.EVENTS_RO)\n+    storage = get_storage(StorageKey.ERRORS)\n+    storage_ro = get_storage(StorageKey.ERRORS_RO)\n \n-    query = Query({}, storage.get_schema().get_data_source())\n+    query = Query(Entity(EntityKey.EVENTS, ColumnSet([])), selected_columns=[])\n \n-    storage_selector = EventsQueryStorageSelector(mappers=event_translator)\n+    storage_selector = ErrorsQueryStorageSelector(mappers=event_translator)\n     assert (\n",
        "source_code_with_indent": "\n    storage = get_storage(StorageKey.EVENTS)\n    storage_ro = get_storage(StorageKey.EVENTS_RO)\n\n    query = Query({}, storage.get_schema().get_data_source())\n\n    storage_selector = EventsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    storage = get_storage(StorageKey.ERRORS)\n    storage_ro = get_storage(StorageKey.ERRORS_RO)\n\n    query = Query(Entity(EntityKey.EVENTS, ColumnSet([])), selected_columns=[])\n\n    storage_selector = ErrorsQueryStorageSelector(mappers=event_translator)\n    assert (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]