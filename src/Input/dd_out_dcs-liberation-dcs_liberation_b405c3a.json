[
  {
    "project": "dcs-liberation/dcs_liberation",
    "commit": "b405c3ab328fbc1a8d7d5e0d863e49b32f333768",
    "filename": "game/factions/faction.py",
    "min_patch_found": false,
    "full_warning_msg": "game/factions/faction.py:64:18 Invalid type [31]: Expression `{ str:str }` is not a valid type.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "dcs-liberation/dcs_liberation",
    "commit": "b405c3ab328fbc1a8d7d5e0d863e49b32f333768",
    "filename": "game/factions/faction_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dcs-liberation-dcs_liberation/game/factions/faction_loader.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "game/factions/faction_loader.py:15:51 Invalid type [31]: Expression `set(str, game.factions.faction.Faction)` is not a valid type.",
    "message": " Expression `set(str, game.factions.faction.Faction)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 15,
    "warning_line": "    def load_factions(cls: Type[FactionLoader]) -> {str, Faction}:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Type\n\n",
        "source_code_len": 50,
        "target_code": "from pathlib import Path\nfrom typing import Dict, Type\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -4,3 +4,3 @@\n from pathlib import Path\n-from typing import Type\n+from typing import Dict, Type\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Dict, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nFACTION_DIRECTORY = \"./resources/factions/\"\n\n",
        "source_code_len": 46,
        "target_code": "\nFACTION_DIRECTORY = Path(\"./resources/factions/\")\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -8,3 +8,3 @@\n \n-FACTION_DIRECTORY = \"./resources/factions/\"\n+FACTION_DIRECTORY = Path(\"./resources/factions/\")\n \n",
        "source_code_with_indent": "\nFACTION_DIRECTORY = \"./resources/factions/\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nFACTION_DIRECTORY = Path(\"./resources/factions/\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def load_factions(cls: Type[FactionLoader]) -> {str, Faction}:\n\n        path = Path(FACTION_DIRECTORY)\n        files = [f for f in path.glob(\"*.json\") if f.is_file()]\n        factions = {}\n",
        "source_code_len": 210,
        "target_code": "    @classmethod\n    def load_factions(cls: Type[FactionLoader]) -> Dict[str, Faction]:\n        files = [f for f in FACTION_DIRECTORY.glob(\"*.json\") if f.is_file()]\n        factions = {}\n",
        "target_code_len": 187,
        "diff_format": "@@ -14,6 +14,4 @@\n     @classmethod\n-    def load_factions(cls: Type[FactionLoader]) -> {str, Faction}:\n-\n-        path = Path(FACTION_DIRECTORY)\n-        files = [f for f in path.glob(\"*.json\") if f.is_file()]\n+    def load_factions(cls: Type[FactionLoader]) -> Dict[str, Faction]:\n+        files = [f for f in FACTION_DIRECTORY.glob(\"*.json\") if f.is_file()]\n         factions = {}\n",
        "source_code_with_indent": "    <IND>@classmethod\n    def load_factions(cls: Type[FactionLoader]) -> {str, Faction}:\n\n        <IND>path = Path(FACTION_DIRECTORY)\n        files = [f for f in path.glob(\"*.json\") if f.is_file()]\n        factions = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>@classmethod\n    def load_factions(cls: Type[FactionLoader]) -> Dict[str, Faction]:\n        <IND>files = [f for f in FACTION_DIRECTORY.glob(\"*.json\") if f.is_file()]\n        factions = {}\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    logging.info(\"Loaded faction : \" + str(f))\n            except Exception as e:\n                logging.error(\"Unable to load faction : \" + path, e)\n\n",
        "source_code_len": 168,
        "target_code": "                    logging.info(\"Loaded faction : \" + str(f))\n            except Exception:\n                logging.exception(f\"Unable to load faction : {f}\")\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -27,4 +24,4 @@\n                     logging.info(\"Loaded faction : \" + str(f))\n-            except Exception as e:\n-                logging.error(\"Unable to load faction : \" + path, e)\n+            except Exception:\n+                logging.exception(f\"Unable to load faction : {f}\")\n \n",
        "source_code_with_indent": "                    logging.info(\"Loaded faction : \" + str(f))\n            <DED><DED>except Exception as e:\n                <IND>logging.error(\"Unable to load faction : \" + path, e)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    logging.info(\"Loaded faction : \" + str(f))\n            <DED><DED>except Exception:\n                <IND>logging.exception(f\"Unable to load faction : {f}\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dcs-liberation/dcs_liberation",
    "commit": "b405c3ab328fbc1a8d7d5e0d863e49b32f333768",
    "filename": "game/factions/faction_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dcs-liberation-dcs_liberation/game/factions/faction_loader.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "game/factions/faction_loader.py:29:60 Unsupported operand [58]: `+` is not supported for operand types `str` and `Path`.",
    "message": " `+` is not supported for operand types `str` and `Path`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 29,
    "warning_line": "                logging.error(\"Unable to load faction : \" + path, e)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    logging.info(\"Loaded faction : \" + str(f))\n            except Exception as e:\n                logging.error(\"Unable to load faction : \" + path, e)\n\n",
        "source_code_len": 168,
        "target_code": "                    logging.info(\"Loaded faction : \" + str(f))\n            except Exception:\n                logging.exception(f\"Unable to load faction : {f}\")\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -27,4 +24,4 @@\n                     logging.info(\"Loaded faction : \" + str(f))\n-            except Exception as e:\n-                logging.error(\"Unable to load faction : \" + path, e)\n+            except Exception:\n+                logging.exception(f\"Unable to load faction : {f}\")\n \n",
        "source_code_with_indent": "                    logging.info(\"Loaded faction : \" + str(f))\n            <DED><DED>except Exception as e:\n                <IND>logging.error(\"Unable to load faction : \" + path, e)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    logging.info(\"Loaded faction : \" + str(f))\n            <DED><DED>except Exception:\n                <IND>logging.exception(f\"Unable to load faction : {f}\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]