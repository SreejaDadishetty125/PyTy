[
  {
    "project": "optuna/optuna",
    "commit": "549e85f227a6c0cfcbdd57a16fe6d77eaea85bea",
    "filename": "optuna/multi_objective/samplers/_motpe.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_motpe.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/samplers/_motpe.py:146:12 Incompatible variable type [9]: gamma is declared to have type `typing.Callable[[int], int]` but is used as type `typing.Callable(default_gamma)[[Named(x, int), Named(_, int)], int]`.",
    "message": " gamma is declared to have type `typing.Callable[[int], int]` but is used as type `typing.Callable(default_gamma)[[Named(x, int), Named(_, int)], int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 146,
    "warning_line": "            gamma: Callable[[int], int] = default_gamma,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n            self,\n            consider_prior: bool = True,\n            prior_weight: float = 1.0,\n            consider_magic_clip: bool = True,\n            consider_endpoints: bool = False,\n            n_startup_trials: int = 10,\n            n_ehvi_candidates: int = 24,\n            gamma: Callable[[int], int] = default_gamma,\n            weights: Callable[[int], np.ndarray] = default_weights,\n            hssp_reference_point: Callable[[np.ndarray, np.ndarray], np.ndarray] = \\\n                default_hssp_reference_point,\n            seed: Optional[int] = None\n        ) -> None:\n        self._parzen_estimator_parameters = _ParzenEstimatorParameters(\n",
        "source_code_len": 675,
        "target_code": "    def __init__(\n        self,\n        consider_prior: bool = True,\n        prior_weight: float = 1.0,\n        consider_magic_clip: bool = True,\n        consider_endpoints: bool = False,\n        n_startup_trials: int = 10,\n        n_ehvi_candidates: int = 24,\n        gamma: Callable[[int, int], int] = default_gamma,\n        weights: Callable[[int], np.ndarray] = default_weights,\n        hssp_reference_point: Callable[\n            [np.ndarray, np.ndarray], np.ndarray\n        ] = default_hssp_reference_point,\n        seed: Optional[int] = None,\n    ) -> None:\n        self._parzen_estimator_parameters = _ParzenEstimatorParameters(\n",
        "target_code_len": 637,
        "diff_format": "@@ -138,15 +135,16 @@\n     def __init__(\n-            self,\n-            consider_prior: bool = True,\n-            prior_weight: float = 1.0,\n-            consider_magic_clip: bool = True,\n-            consider_endpoints: bool = False,\n-            n_startup_trials: int = 10,\n-            n_ehvi_candidates: int = 24,\n-            gamma: Callable[[int], int] = default_gamma,\n-            weights: Callable[[int], np.ndarray] = default_weights,\n-            hssp_reference_point: Callable[[np.ndarray, np.ndarray], np.ndarray] = \\\n-                default_hssp_reference_point,\n-            seed: Optional[int] = None\n-        ) -> None:\n+        self,\n+        consider_prior: bool = True,\n+        prior_weight: float = 1.0,\n+        consider_magic_clip: bool = True,\n+        consider_endpoints: bool = False,\n+        n_startup_trials: int = 10,\n+        n_ehvi_candidates: int = 24,\n+        gamma: Callable[[int, int], int] = default_gamma,\n+        weights: Callable[[int], np.ndarray] = default_weights,\n+        hssp_reference_point: Callable[\n+            [np.ndarray, np.ndarray], np.ndarray\n+        ] = default_hssp_reference_point,\n+        seed: Optional[int] = None,\n+    ) -> None:\n         self._parzen_estimator_parameters = _ParzenEstimatorParameters(\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "    def __init__(\n        self,\n        consider_prior: bool = True,\n        prior_weight: float = 1.0,\n        consider_magic_clip: bool = True,\n        consider_endpoints: bool = False,\n        n_startup_trials: int = 10,\n        n_ehvi_candidates: int = 24,\n        gamma: Callable[[int, int], int] = default_gamma,\n        weights: Callable[[int], np.ndarray] = default_weights,\n        hssp_reference_point: Callable[\n            [np.ndarray, np.ndarray], np.ndarray\n        ] = default_hssp_reference_point,\n        seed: Optional[int] = None,\n    ) -> None:\n        <IND>self._parzen_estimator_parameters = _ParzenEstimatorParameters(\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "    def __init__(\n            self,\n            consider_prior: bool = True,\n            prior_weight: float = 1.0,\n            consider_magic_clip: bool = True,\n            consider_endpoints: bool = False,\n            n_startup_trials: int = 10,\n            n_ehvi_candidates: int = 24,\n            gamma: Callable[[int], int] = default_gamma,\n            weights: Callable[[int], np.ndarray] = default_weights,\n            hssp_reference_point: Callable[[np.ndarray, np.ndarray], np.ndarray] =                default_hssp_reference_point,\n            seed: Optional[int] = None\n        ) -> None:\n        <IND>self._parzen_estimator_parameters = _ParzenEstimatorParameters(\n"
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "549e85f227a6c0cfcbdd57a16fe6d77eaea85bea",
    "filename": "optuna/multi_objective/samplers/_motpe.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_motpe.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/samplers/_motpe.py:191:16 Incompatible parameter type [6]: Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers._random.RandomSampler.sample_independent` but got `multi_objective.study.MultiObjectiveStudy`.",
    "message": " Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers._random.RandomSampler.sample_independent` but got `multi_objective.study.MultiObjectiveStudy`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 191,
    "warning_line": "                study, trial, param_name, param_distribution",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.samplers import RandomSampler\nfrom optuna.study import StudyDirection\n",
        "source_code_len": 296,
        "target_code": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.multi_objective.samplers import RandomMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.study import StudyDirection\n",
        "target_code_len": 326,
        "diff_format": "@@ -21,5 +21,5 @@\n from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\n+from optuna.multi_objective.samplers import RandomMultiObjectiveSampler\n from optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\n from optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\n-from optuna.samplers import RandomSampler\n from optuna.study import StudyDirection\n",
        "source_code_with_indent": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.samplers import RandomSampler\nfrom optuna.study import StudyDirection\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.multi_objective.samplers import RandomMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.study import StudyDirection\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomSampler(seed=seed)\n\n    def infer_relative_search_space(\n            self,\n            study: \"multi_objective.study.MultiObjectiveStudy\",\n            trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\"\n        ) -> Dict[str, BaseDistribution]:\n        return {}\n",
        "source_code_len": 353,
        "target_code": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomMultiObjectiveSampler(seed=seed)\n\n    def infer_relative_search_space(\n        self,\n        study: \"multi_objective.study.MultiObjectiveStudy\",\n        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        return {}\n",
        "target_code_len": 352,
        "diff_format": "@@ -162,9 +160,9 @@\n         self._rng = np.random.RandomState(seed)\n-        self._random_sampler = RandomSampler(seed=seed)\n+        self._random_sampler = RandomMultiObjectiveSampler(seed=seed)\n \n     def infer_relative_search_space(\n-            self,\n-            study: \"multi_objective.study.MultiObjectiveStudy\",\n-            trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\"\n-        ) -> Dict[str, BaseDistribution]:\n+        self,\n+        study: \"multi_objective.study.MultiObjectiveStudy\",\n+        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n+    ) -> Dict[str, BaseDistribution]:\n         return {}\n",
        "source_code_with_indent": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomSampler(seed=seed)\n\n    <DED>def infer_relative_search_space(\n            self,\n            study: \"multi_objective.study.MultiObjectiveStudy\",\n            trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\"\n        ) -> Dict[str, BaseDistribution]:\n        <IND>return {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomMultiObjectiveSampler(seed=seed)\n\n    <DED>def infer_relative_search_space(\n        self,\n        study: \"multi_objective.study.MultiObjectiveStudy\",\n        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        <IND>return {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "549e85f227a6c0cfcbdd57a16fe6d77eaea85bea",
    "filename": "optuna/multi_objective/samplers/_motpe.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_motpe.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/samplers/_motpe.py:191:23 Incompatible parameter type [6]: Expected `optuna.trial._frozen.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers._random.RandomSampler.sample_independent` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "message": " Expected `optuna.trial._frozen.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers._random.RandomSampler.sample_independent` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 191,
    "warning_line": "                study, trial, param_name, param_distribution",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.samplers import RandomSampler\nfrom optuna.study import StudyDirection\n",
        "source_code_len": 296,
        "target_code": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.multi_objective.samplers import RandomMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.study import StudyDirection\n",
        "target_code_len": 326,
        "diff_format": "@@ -21,5 +21,5 @@\n from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\n+from optuna.multi_objective.samplers import RandomMultiObjectiveSampler\n from optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\n from optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\n-from optuna.samplers import RandomSampler\n from optuna.study import StudyDirection\n",
        "source_code_with_indent": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.samplers import RandomSampler\nfrom optuna.study import StudyDirection\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from optuna.multi_objective.samplers import BaseMultiObjectiveSampler\nfrom optuna.multi_objective.samplers import RandomMultiObjectiveSampler\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimator\nfrom optuna.samplers._tpe.parzen_estimator import _ParzenEstimatorParameters\nfrom optuna.study import StudyDirection\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomSampler(seed=seed)\n\n    def infer_relative_search_space(\n            self,\n            study: \"multi_objective.study.MultiObjectiveStudy\",\n            trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\"\n        ) -> Dict[str, BaseDistribution]:\n        return {}\n",
        "source_code_len": 353,
        "target_code": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomMultiObjectiveSampler(seed=seed)\n\n    def infer_relative_search_space(\n        self,\n        study: \"multi_objective.study.MultiObjectiveStudy\",\n        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        return {}\n",
        "target_code_len": 352,
        "diff_format": "@@ -162,9 +160,9 @@\n         self._rng = np.random.RandomState(seed)\n-        self._random_sampler = RandomSampler(seed=seed)\n+        self._random_sampler = RandomMultiObjectiveSampler(seed=seed)\n \n     def infer_relative_search_space(\n-            self,\n-            study: \"multi_objective.study.MultiObjectiveStudy\",\n-            trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\"\n-        ) -> Dict[str, BaseDistribution]:\n+        self,\n+        study: \"multi_objective.study.MultiObjectiveStudy\",\n+        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n+    ) -> Dict[str, BaseDistribution]:\n         return {}\n",
        "source_code_with_indent": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomSampler(seed=seed)\n\n    <DED>def infer_relative_search_space(\n            self,\n            study: \"multi_objective.study.MultiObjectiveStudy\",\n            trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\"\n        ) -> Dict[str, BaseDistribution]:\n        <IND>return {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._rng = np.random.RandomState(seed)\n        self._random_sampler = RandomMultiObjectiveSampler(seed=seed)\n\n    <DED>def infer_relative_search_space(\n        self,\n        study: \"multi_objective.study.MultiObjectiveStudy\",\n        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        <IND>return {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]