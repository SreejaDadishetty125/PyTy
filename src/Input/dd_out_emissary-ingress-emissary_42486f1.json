[
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:474:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 474,
    "warning_line": "            if self.is_decodable(tls_crt):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:475:38 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 475,
    "warning_line": "                tls_crt = self.decode(tls_crt)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if self.is_decodable(tls_crt):\n                tls_crt = self.decode(tls_crt)\n",
        "source_code_len": 90,
        "target_code": "            if self.is_decodable(tls_crt):\n                assert tls_crt\n                tls_crt = self.decode(tls_crt)\n",
        "target_code_len": 121,
        "diff_format": "@@ -474,2 +474,3 @@\n             if self.is_decodable(tls_crt):\n+                assert tls_crt\n                 tls_crt = self.decode(tls_crt)\n",
        "source_code_with_indent": "            <IND>if self.is_decodable(tls_crt):\n                <IND>tls_crt = self.decode(tls_crt)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>if self.is_decodable(tls_crt):\n                <IND>assert tls_crt\n                tls_crt = self.decode(tls_crt)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:477:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 477,
    "warning_line": "            if self.is_decodable(tls_key):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:478:38 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 478,
    "warning_line": "                tls_key = self.decode(tls_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if self.is_decodable(tls_key):\n                tls_key = self.decode(tls_key)\n",
        "source_code_len": 90,
        "target_code": "            if self.is_decodable(tls_key):\n                assert tls_key\n                tls_key = self.decode(tls_key)\n",
        "target_code_len": 121,
        "diff_format": "@@ -477,2 +478,3 @@\n             if self.is_decodable(tls_key):\n+                assert tls_key\n                 tls_key = self.decode(tls_key)\n",
        "source_code_with_indent": "            <DED>if self.is_decodable(tls_key):\n                <IND>tls_key = self.decode(tls_key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>if self.is_decodable(tls_key):\n                <IND>assert tls_key\n                tls_key = self.decode(tls_key)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:480:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 480,
    "warning_line": "            if self.is_decodable(user_key):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:481:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 481,
    "warning_line": "                user_key = self.decode(user_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if self.is_decodable(user_key):\n                user_key = self.decode(user_key)\n",
        "source_code_len": 93,
        "target_code": "            if self.is_decodable(user_key):\n                assert user_key\n                user_key = self.decode(user_key)\n",
        "target_code_len": 125,
        "diff_format": "@@ -480,2 +482,3 @@\n             if self.is_decodable(user_key):\n+                assert user_key\n                 user_key = self.decode(user_key)\n",
        "source_code_with_indent": "            <DED>if self.is_decodable(user_key):\n                <IND>user_key = self.decode(user_key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>if self.is_decodable(user_key):\n                <IND>assert user_key\n                user_key = self.decode(user_key)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:483:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.is_decodable` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 483,
    "warning_line": "            if self.is_decodable(root_crt):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:484:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SecretInfo.decode` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 484,
    "warning_line": "                root_crt = self.decode(root_crt)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if self.is_decodable(root_crt):\n                root_crt = self.decode(root_crt)\n",
        "source_code_len": 93,
        "target_code": "            if self.is_decodable(root_crt):\n                assert root_crt\n                root_crt = self.decode(root_crt)\n",
        "target_code_len": 125,
        "diff_format": "@@ -483,2 +486,3 @@\n             if self.is_decodable(root_crt):\n+                assert root_crt\n                 root_crt = self.decode(root_crt)\n",
        "source_code_with_indent": "            <DED>if self.is_decodable(root_crt):\n                <IND>root_crt = self.decode(root_crt)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>if self.is_decodable(root_crt):\n                <IND>assert root_crt\n                root_crt = self.decode(root_crt)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "42486f1fec3ff85f68da5541bc9d9e847da1794b",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:493:8 Incompatible return type [7]: Expected `bool` but got `typing.Union[bool, str]`.",
    "message": " Expected `bool` but got `typing.Union[bool, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 493,
    "warning_line": "        return (b64_pem ",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        if not b64_pem:\n            return False\n\n        return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_len": 234,
        "diff_format": "@@ -491,7 +495,8 @@\n     @staticmethod\n-    def is_decodable(b64_pem: str) -> bool:\n-        return (b64_pem \n-                and (not b64_pem.startswith('-----BEGIN'))\n-                and (not b64_pem.startswith('-sanitized-'))\n-               )\n+    def is_decodable(b64_pem: Optional[str]) -> bool:\n+        if not b64_pem:\n+            return False\n+\n+        return not (b64_pem.startswith('-----BEGIN') or\n+                    b64_pem.startswith('-sanitized-'))\n \n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: str) -> bool:\n        <IND>return (b64_pem \n                and (not b64_pem.startswith('-----BEGIN'))\n                and (not b64_pem.startswith('-sanitized-'))\n               )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_decodable(b64_pem: Optional[str]) -> bool:\n        <IND>if not b64_pem:\n            <IND>return False\n\n        <DED>return not (b64_pem.startswith('-----BEGIN') or\n                    b64_pem.startswith('-sanitized-'))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]