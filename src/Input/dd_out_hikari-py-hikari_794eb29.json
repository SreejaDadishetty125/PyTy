[
  {
    "project": "hikari-py/hikari",
    "commit": "794eb295d0a41dd1a4d3e2b4ea69ba424d4697ef",
    "filename": "hikari/api/gateway/dispatcher.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/api/gateway/dispatcher.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/api/gateway/dispatcher.py:255:14 Incompatible variable type [9]: event_type is declared to have type `typing.Union[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE], typing.Type[Variable[EventT (bound to base.Event)](contravariant)]]` but is used as type `typing.Final[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE]]`.",
    "message": " event_type is declared to have type `typing.Union[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE], typing.Type[Variable[EventT (bound to base.Event)](contravariant)]]` but is used as type `typing.Final[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 255,
    "warning_line": "        self, event_type: typing.Union[undefined.UndefinedType, typing.Type[EventT]] = undefined.UNDEFINED,"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "794eb295d0a41dd1a4d3e2b4ea69ba424d4697ef",
    "filename": "hikari/impl/bot.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/bot.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/bot.py:380:8 Incompatible variable type [9]: event_type is declared to have type `typing.Union[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE], typing.Type[Variable[event_dispatcher_.EventT (bound to base_events.Event)](contravariant)]]` but is used as type `typing.Final[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE]]`.",
    "message": " event_type is declared to have type `typing.Union[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE], typing.Type[Variable[event_dispatcher_.EventT (bound to base_events.Event)](contravariant)]]` but is used as type `typing.Final[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 380,
    "warning_line": "        event_type: typing.Union[undefined.UndefinedType, typing.Type[event_dispatcher_.EventT]] = undefined.UNDEFINED,"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "794eb295d0a41dd1a4d3e2b4ea69ba424d4697ef",
    "filename": "hikari/impl/gateway/manager_core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/impl/gateway/manager_core.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/impl/gateway/manager_core.py:180:14 Incompatible variable type [9]: event_type is declared to have type `typing.Union[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE], typing.Type[Variable[dispatcher.EventT (bound to base_events.Event)](contravariant)]]` but is used as type `typing.Final[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE]]`.",
    "message": " event_type is declared to have type `typing.Union[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE], typing.Type[Variable[dispatcher.EventT (bound to base_events.Event)](contravariant)]]` but is used as type `typing.Final[typing_extensions.Literal[undefined._UndefinedTypeWrapper.UNDEFINED_VALUE]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 180,
    "warning_line": "        self, event_type: typing.Union[undefined.UndefinedType, typing.Type[dispatcher.EventT]] = undefined.UNDEFINED,"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "794eb295d0a41dd1a4d3e2b4ea69ba424d4697ef",
    "filename": "hikari/models/channels.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/channels.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/channels.py:440:20 Unsupported operand [58]: `>>` is not supported for operand types `typing.Optional[snowflake.Snowflake]` and `int`.",
    "message": " `>>` is not supported for operand types `typing.Optional[snowflake.Snowflake]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 440,
    "warning_line": "            return (self.guild_id >> 22) % getattr(self.app, \"shard_count\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            return (self.guild_id >> 22) % getattr(self.app, \"shard_count\")\n        except (TypeError, AttributeError, NameError):\n            return None\n\n",
        "source_code_len": 169,
        "target_code": "        try:\n            # This is only sensible if there is a shard.\n            if self.guild_id is not None:\n                return (self.guild_id >> 22) % typing.cast(int, getattr(self.app, \"shard_count\"))\n        except (TypeError, AttributeError, NameError):\n            pass\n\n        return None\n\n",
        "target_code_len": 304,
        "diff_format": "@@ -439,5 +439,9 @@\n         try:\n-            return (self.guild_id >> 22) % getattr(self.app, \"shard_count\")\n+            # This is only sensible if there is a shard.\n+            if self.guild_id is not None:\n+                return (self.guild_id >> 22) % typing.cast(int, getattr(self.app, \"shard_count\"))\n         except (TypeError, AttributeError, NameError):\n-            return None\n+            pass\n+\n+        return None\n \n",
        "source_code_with_indent": "        try:\n            <IND>return (self.guild_id >> 22) % getattr(self.app, \"shard_count\")\n        <DED>except (TypeError, AttributeError, NameError):\n            <IND>return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            # This is only sensible if there is a shard.\n            <IND>if self.guild_id is not None:\n                <IND>return (self.guild_id >> 22) % typing.cast(int, getattr(self.app, \"shard_count\"))\n        <DED><DED>except (TypeError, AttributeError, NameError):\n            <IND>pass\n\n        <DED>return None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]