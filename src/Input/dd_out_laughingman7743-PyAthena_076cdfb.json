[
  {
    "project": "laughingman7743/PyAthena",
    "commit": "076cdfb8aa869d6b8a1d229c571f7a2547341d88",
    "filename": "pyathena/result_set.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/laughingman7743-PyAthena/pyathena/result_set.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyathena/result_set.py:275:8 Incompatible attribute type [8]: Attribute `_connection` declared in class `AthenaResultSet` has type `Connection` but is used as type `None`.",
    "message": " Attribute `_connection` declared in class `AthenaResultSet` has type `Connection` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 275,
    "warning_line": "        self._connection = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection = connection\n        self._converter = converter\n        self._query_execution = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "source_code_len": 276,
        "target_code": "        super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection: Optional[\"Connection\"] = connection\n        self._converter = converter\n        self._query_execution: Optional[AthenaQueryExecution] = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "target_code_len": 332,
        "diff_format": "@@ -31,5 +31,5 @@\n         super(AthenaResultSet, self).__init__(arraysize=arraysize)\n-        self._connection = connection\n+        self._connection: Optional[\"Connection\"] = connection\n         self._converter = converter\n-        self._query_execution = query_execution\n+        self._query_execution: Optional[AthenaQueryExecution] = query_execution\n         assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "source_code_with_indent": "        <IND>super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection = connection\n        self._converter = converter\n        self._query_execution = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection: Optional[\"Connection\"] = connection\n        self._converter = converter\n        self._query_execution: Optional[AthenaQueryExecution] = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def database(self) -> Optional[str]:\n        return self._query_execution.database\n",
        "source_code_len": 87,
        "target_code": "    def database(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.database\n",
        "target_code_len": 149,
        "diff_format": "@@ -47,2 +47,4 @@\n     def database(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.database\n",
        "source_code_with_indent": "    def database(self) -> Optional[str]:\n        <IND>return self._query_execution.database\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def database(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.database\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query_id(self) -> Optional[str]:\n        return self._query_execution.query_id\n",
        "source_code_len": 87,
        "target_code": "    def query_id(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query_id\n",
        "target_code_len": 149,
        "diff_format": "@@ -51,2 +53,4 @@\n     def query_id(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query_id\n",
        "source_code_with_indent": "    def query_id(self) -> Optional[str]:\n        <IND>return self._query_execution.query_id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query_id(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query_id\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query(self) -> Optional[str]:\n        return self._query_execution.query\n",
        "source_code_len": 81,
        "target_code": "    def query(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query\n",
        "target_code_len": 143,
        "diff_format": "@@ -55,2 +59,4 @@\n     def query(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query\n",
        "source_code_with_indent": "    def query(self) -> Optional[str]:\n        <IND>return self._query_execution.query\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def statement_type(self) -> Optional[str]:\n        return self._query_execution.statement_type\n",
        "source_code_len": 99,
        "target_code": "    def statement_type(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.statement_type\n",
        "target_code_len": 161,
        "diff_format": "@@ -59,2 +65,4 @@\n     def statement_type(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.statement_type\n",
        "source_code_with_indent": "    def statement_type(self) -> Optional[str]:\n        <IND>return self._query_execution.statement_type\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def statement_type(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.statement_type\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def state(self) -> Optional[str]:\n        return self._query_execution.state\n",
        "source_code_len": 81,
        "target_code": "    def state(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.state\n",
        "target_code_len": 143,
        "diff_format": "@@ -63,2 +71,4 @@\n     def state(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.state\n",
        "source_code_with_indent": "    def state(self) -> Optional[str]:\n        <IND>return self._query_execution.state\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def state(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.state\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def state_change_reason(self) -> Optional[str]:\n        return self._query_execution.state_change_reason\n",
        "source_code_len": 109,
        "target_code": "    def state_change_reason(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.state_change_reason\n",
        "target_code_len": 171,
        "diff_format": "@@ -67,2 +77,4 @@\n     def state_change_reason(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.state_change_reason\n",
        "source_code_with_indent": "    def state_change_reason(self) -> Optional[str]:\n        <IND>return self._query_execution.state_change_reason\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def state_change_reason(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.state_change_reason\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def completion_date_time(self) -> Optional[datetime]:\n        return self._query_execution.completion_date_time\n",
        "source_code_len": 116,
        "target_code": "    def completion_date_time(self) -> Optional[datetime]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.completion_date_time\n",
        "target_code_len": 178,
        "diff_format": "@@ -71,2 +83,4 @@\n     def completion_date_time(self) -> Optional[datetime]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.completion_date_time\n",
        "source_code_with_indent": "    def completion_date_time(self) -> Optional[datetime]:\n        <IND>return self._query_execution.completion_date_time\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def completion_date_time(self) -> Optional[datetime]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.completion_date_time\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def submission_date_time(self) -> Optional[datetime]:\n        return self._query_execution.submission_date_time\n",
        "source_code_len": 116,
        "target_code": "    def submission_date_time(self) -> Optional[datetime]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.submission_date_time\n",
        "target_code_len": 178,
        "diff_format": "@@ -75,2 +89,4 @@\n     def submission_date_time(self) -> Optional[datetime]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.submission_date_time\n",
        "source_code_with_indent": "    def submission_date_time(self) -> Optional[datetime]:\n        <IND>return self._query_execution.submission_date_time\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def submission_date_time(self) -> Optional[datetime]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.submission_date_time\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        return self._query_execution.data_scanned_in_bytes\n",
        "source_code_len": 113,
        "target_code": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.data_scanned_in_bytes\n",
        "target_code_len": 175,
        "diff_format": "@@ -79,2 +95,4 @@\n     def data_scanned_in_bytes(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.data_scanned_in_bytes\n",
        "source_code_with_indent": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        <IND>return self._query_execution.data_scanned_in_bytes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.data_scanned_in_bytes\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.engine_execution_time_in_millis\n",
        "source_code_len": 133,
        "target_code": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.engine_execution_time_in_millis\n",
        "target_code_len": 195,
        "diff_format": "@@ -83,2 +101,4 @@\n     def engine_execution_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.engine_execution_time_in_millis\n",
        "source_code_with_indent": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.engine_execution_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.engine_execution_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.query_queue_time_in_millis\n",
        "source_code_len": 123,
        "target_code": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query_queue_time_in_millis\n",
        "target_code_len": 185,
        "diff_format": "@@ -87,2 +107,4 @@\n     def query_queue_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query_queue_time_in_millis\n",
        "source_code_with_indent": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.query_queue_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query_queue_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.total_execution_time_in_millis\n",
        "source_code_len": 131,
        "target_code": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.total_execution_time_in_millis\n",
        "target_code_len": 193,
        "diff_format": "@@ -91,2 +113,4 @@\n     def total_execution_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.total_execution_time_in_millis\n",
        "source_code_with_indent": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.total_execution_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.total_execution_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.query_planning_time_in_millis\n",
        "source_code_len": 129,
        "target_code": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query_planning_time_in_millis\n",
        "target_code_len": 191,
        "diff_format": "@@ -95,2 +119,4 @@\n     def query_planning_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query_planning_time_in_millis\n",
        "source_code_with_indent": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.query_planning_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query_planning_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.service_processing_time_in_millis\n",
        "source_code_len": 137,
        "target_code": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.service_processing_time_in_millis\n",
        "target_code_len": 199,
        "diff_format": "@@ -99,2 +125,4 @@\n     def service_processing_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.service_processing_time_in_millis\n",
        "source_code_with_indent": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.service_processing_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.service_processing_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def output_location(self) -> Optional[str]:\n        return self._query_execution.output_location\n",
        "source_code_len": 101,
        "target_code": "    def output_location(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.output_location\n",
        "target_code_len": 163,
        "diff_format": "@@ -103,2 +131,4 @@\n     def output_location(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.output_location\n",
        "source_code_with_indent": "    def output_location(self) -> Optional[str]:\n        <IND>return self._query_execution.output_location\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def output_location(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.output_location\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def data_manifest_location(self) -> Optional[str]:\n        return self._query_execution.data_manifest_location\n",
        "source_code_len": 115,
        "target_code": "    def data_manifest_location(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.data_manifest_location\n",
        "target_code_len": 177,
        "diff_format": "@@ -107,2 +137,4 @@\n     def data_manifest_location(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.data_manifest_location\n",
        "source_code_with_indent": "    def data_manifest_location(self) -> Optional[str]:\n        <IND>return self._query_execution.data_manifest_location\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def data_manifest_location(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.data_manifest_location\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def encryption_option(self) -> Optional[str]:\n        return self._query_execution.encryption_option\n",
        "source_code_len": 105,
        "target_code": "    def encryption_option(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.encryption_option\n",
        "target_code_len": 167,
        "diff_format": "@@ -111,2 +143,4 @@\n     def encryption_option(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.encryption_option\n",
        "source_code_with_indent": "    def encryption_option(self) -> Optional[str]:\n        <IND>return self._query_execution.encryption_option\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def encryption_option(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.encryption_option\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def kms_key(self) -> Optional[str]:\n        return self._query_execution.kms_key\n",
        "source_code_len": 85,
        "target_code": "    def kms_key(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.kms_key\n",
        "target_code_len": 147,
        "diff_format": "@@ -115,2 +149,4 @@\n     def kms_key(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.kms_key\n",
        "source_code_with_indent": "    def kms_key(self) -> Optional[str]:\n        <IND>return self._query_execution.kms_key\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def kms_key(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.kms_key\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def work_group(self) -> Optional[str]:\n        return self._query_execution.work_group\n",
        "source_code_len": 91,
        "target_code": "    def work_group(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.work_group\n",
        "target_code_len": 153,
        "diff_format": "@@ -119,2 +155,4 @@\n     def work_group(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.work_group\n",
        "source_code_with_indent": "    def work_group(self) -> Optional[str]:\n        <IND>return self._query_execution.work_group\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def work_group(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.work_group\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            response = retry_api_call(\n                self._connection.client.get_query_results,\n                config=self._retry_config,\n",
        "source_code_len": 154,
        "target_code": "        try:\n            connection = cast(\"Connection\", self._connection)\n            response = retry_api_call(\n                connection.client.get_query_results,\n                config=self._retry_config,\n",
        "target_code_len": 210,
        "diff_format": "@@ -164,4 +204,5 @@\n         try:\n+            connection = cast(\"Connection\", self._connection)\n             response = retry_api_call(\n-                self._connection.client.get_query_results,\n+                connection.client.get_query_results,\n                 config=self._retry_config,\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>response = retry_api_call(\n                self._connection.client.get_query_results,\n                config=self._retry_config,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>connection = cast(\"Connection\", self._connection)\n            response = retry_api_call(\n                connection.client.get_query_results,\n                config=self._retry_config,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._quoting = quoting\n        self._client = self._connection.session.client(\n            \"s3\",\n            region_name=self._connection.region_name,\n            **self._connection._client_kwargs\n        )\n",
        "source_code_len": 216,
        "target_code": "        self._quoting = quoting\n        self._client = connection.session.client(\n            \"s3\",\n            region_name=connection.region_name,\n            **connection._client_kwargs\n        )\n",
        "target_code_len": 198,
        "diff_format": "@@ -320,6 +361,6 @@\n         self._quoting = quoting\n-        self._client = self._connection.session.client(\n+        self._client = connection.session.client(\n             \"s3\",\n-            region_name=self._connection.region_name,\n-            **self._connection._client_kwargs\n+            region_name=connection.region_name,\n+            **connection._client_kwargs\n         )\n",
        "source_code_with_indent": "        self._quoting = quoting\n        self._client = self._connection.session.client(\n            \"s3\",\n            region_name=self._connection.region_name,\n            **self._connection._client_kwargs\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._quoting = quoting\n        self._client = connection.session.client(\n            \"s3\",\n            region_name=connection.region_name,\n            **connection._client_kwargs\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "laughingman7743/PyAthena",
    "commit": "076cdfb8aa869d6b8a1d229c571f7a2547341d88",
    "filename": "pyathena/result_set.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/laughingman7743-PyAthena/pyathena/result_set.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyathena/result_set.py:276:8 Incompatible attribute type [8]: Attribute `_query_execution` declared in class `AthenaResultSet` has type `AthenaQueryExecution` but is used as type `None`.",
    "message": " Attribute `_query_execution` declared in class `AthenaResultSet` has type `AthenaQueryExecution` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 276,
    "warning_line": "        self._query_execution = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection = connection\n        self._converter = converter\n        self._query_execution = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "source_code_len": 276,
        "target_code": "        super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection: Optional[\"Connection\"] = connection\n        self._converter = converter\n        self._query_execution: Optional[AthenaQueryExecution] = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "target_code_len": 332,
        "diff_format": "@@ -31,5 +31,5 @@\n         super(AthenaResultSet, self).__init__(arraysize=arraysize)\n-        self._connection = connection\n+        self._connection: Optional[\"Connection\"] = connection\n         self._converter = converter\n-        self._query_execution = query_execution\n+        self._query_execution: Optional[AthenaQueryExecution] = query_execution\n         assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "source_code_with_indent": "        <IND>super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection = connection\n        self._converter = converter\n        self._query_execution = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(AthenaResultSet, self).__init__(arraysize=arraysize)\n        self._connection: Optional[\"Connection\"] = connection\n        self._converter = converter\n        self._query_execution: Optional[AthenaQueryExecution] = query_execution\n        assert self._query_execution, \"Required argument `query_execution` not found.\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def database(self) -> Optional[str]:\n        return self._query_execution.database\n",
        "source_code_len": 87,
        "target_code": "    def database(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.database\n",
        "target_code_len": 149,
        "diff_format": "@@ -47,2 +47,4 @@\n     def database(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.database\n",
        "source_code_with_indent": "    def database(self) -> Optional[str]:\n        <IND>return self._query_execution.database\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def database(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.database\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query_id(self) -> Optional[str]:\n        return self._query_execution.query_id\n",
        "source_code_len": 87,
        "target_code": "    def query_id(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query_id\n",
        "target_code_len": 149,
        "diff_format": "@@ -51,2 +53,4 @@\n     def query_id(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query_id\n",
        "source_code_with_indent": "    def query_id(self) -> Optional[str]:\n        <IND>return self._query_execution.query_id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query_id(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query_id\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query(self) -> Optional[str]:\n        return self._query_execution.query\n",
        "source_code_len": 81,
        "target_code": "    def query(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query\n",
        "target_code_len": 143,
        "diff_format": "@@ -55,2 +59,4 @@\n     def query(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query\n",
        "source_code_with_indent": "    def query(self) -> Optional[str]:\n        <IND>return self._query_execution.query\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def statement_type(self) -> Optional[str]:\n        return self._query_execution.statement_type\n",
        "source_code_len": 99,
        "target_code": "    def statement_type(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.statement_type\n",
        "target_code_len": 161,
        "diff_format": "@@ -59,2 +65,4 @@\n     def statement_type(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.statement_type\n",
        "source_code_with_indent": "    def statement_type(self) -> Optional[str]:\n        <IND>return self._query_execution.statement_type\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def statement_type(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.statement_type\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def state(self) -> Optional[str]:\n        return self._query_execution.state\n",
        "source_code_len": 81,
        "target_code": "    def state(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.state\n",
        "target_code_len": 143,
        "diff_format": "@@ -63,2 +71,4 @@\n     def state(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.state\n",
        "source_code_with_indent": "    def state(self) -> Optional[str]:\n        <IND>return self._query_execution.state\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def state(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.state\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def state_change_reason(self) -> Optional[str]:\n        return self._query_execution.state_change_reason\n",
        "source_code_len": 109,
        "target_code": "    def state_change_reason(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.state_change_reason\n",
        "target_code_len": 171,
        "diff_format": "@@ -67,2 +77,4 @@\n     def state_change_reason(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.state_change_reason\n",
        "source_code_with_indent": "    def state_change_reason(self) -> Optional[str]:\n        <IND>return self._query_execution.state_change_reason\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def state_change_reason(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.state_change_reason\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def completion_date_time(self) -> Optional[datetime]:\n        return self._query_execution.completion_date_time\n",
        "source_code_len": 116,
        "target_code": "    def completion_date_time(self) -> Optional[datetime]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.completion_date_time\n",
        "target_code_len": 178,
        "diff_format": "@@ -71,2 +83,4 @@\n     def completion_date_time(self) -> Optional[datetime]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.completion_date_time\n",
        "source_code_with_indent": "    def completion_date_time(self) -> Optional[datetime]:\n        <IND>return self._query_execution.completion_date_time\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def completion_date_time(self) -> Optional[datetime]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.completion_date_time\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def submission_date_time(self) -> Optional[datetime]:\n        return self._query_execution.submission_date_time\n",
        "source_code_len": 116,
        "target_code": "    def submission_date_time(self) -> Optional[datetime]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.submission_date_time\n",
        "target_code_len": 178,
        "diff_format": "@@ -75,2 +89,4 @@\n     def submission_date_time(self) -> Optional[datetime]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.submission_date_time\n",
        "source_code_with_indent": "    def submission_date_time(self) -> Optional[datetime]:\n        <IND>return self._query_execution.submission_date_time\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def submission_date_time(self) -> Optional[datetime]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.submission_date_time\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        return self._query_execution.data_scanned_in_bytes\n",
        "source_code_len": 113,
        "target_code": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.data_scanned_in_bytes\n",
        "target_code_len": 175,
        "diff_format": "@@ -79,2 +95,4 @@\n     def data_scanned_in_bytes(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.data_scanned_in_bytes\n",
        "source_code_with_indent": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        <IND>return self._query_execution.data_scanned_in_bytes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def data_scanned_in_bytes(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.data_scanned_in_bytes\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.engine_execution_time_in_millis\n",
        "source_code_len": 133,
        "target_code": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.engine_execution_time_in_millis\n",
        "target_code_len": 195,
        "diff_format": "@@ -83,2 +101,4 @@\n     def engine_execution_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.engine_execution_time_in_millis\n",
        "source_code_with_indent": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.engine_execution_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def engine_execution_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.engine_execution_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.query_queue_time_in_millis\n",
        "source_code_len": 123,
        "target_code": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query_queue_time_in_millis\n",
        "target_code_len": 185,
        "diff_format": "@@ -87,2 +107,4 @@\n     def query_queue_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query_queue_time_in_millis\n",
        "source_code_with_indent": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.query_queue_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query_queue_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query_queue_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.total_execution_time_in_millis\n",
        "source_code_len": 131,
        "target_code": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.total_execution_time_in_millis\n",
        "target_code_len": 193,
        "diff_format": "@@ -91,2 +113,4 @@\n     def total_execution_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.total_execution_time_in_millis\n",
        "source_code_with_indent": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.total_execution_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def total_execution_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.total_execution_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.query_planning_time_in_millis\n",
        "source_code_len": 129,
        "target_code": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.query_planning_time_in_millis\n",
        "target_code_len": 191,
        "diff_format": "@@ -95,2 +119,4 @@\n     def query_planning_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.query_planning_time_in_millis\n",
        "source_code_with_indent": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.query_planning_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def query_planning_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.query_planning_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        return self._query_execution.service_processing_time_in_millis\n",
        "source_code_len": 137,
        "target_code": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.service_processing_time_in_millis\n",
        "target_code_len": 199,
        "diff_format": "@@ -99,2 +125,4 @@\n     def service_processing_time_in_millis(self) -> Optional[int]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.service_processing_time_in_millis\n",
        "source_code_with_indent": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        <IND>return self._query_execution.service_processing_time_in_millis\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def service_processing_time_in_millis(self) -> Optional[int]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.service_processing_time_in_millis\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def output_location(self) -> Optional[str]:\n        return self._query_execution.output_location\n",
        "source_code_len": 101,
        "target_code": "    def output_location(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.output_location\n",
        "target_code_len": 163,
        "diff_format": "@@ -103,2 +131,4 @@\n     def output_location(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.output_location\n",
        "source_code_with_indent": "    def output_location(self) -> Optional[str]:\n        <IND>return self._query_execution.output_location\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def output_location(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.output_location\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def data_manifest_location(self) -> Optional[str]:\n        return self._query_execution.data_manifest_location\n",
        "source_code_len": 115,
        "target_code": "    def data_manifest_location(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.data_manifest_location\n",
        "target_code_len": 177,
        "diff_format": "@@ -107,2 +137,4 @@\n     def data_manifest_location(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.data_manifest_location\n",
        "source_code_with_indent": "    def data_manifest_location(self) -> Optional[str]:\n        <IND>return self._query_execution.data_manifest_location\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def data_manifest_location(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.data_manifest_location\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def encryption_option(self) -> Optional[str]:\n        return self._query_execution.encryption_option\n",
        "source_code_len": 105,
        "target_code": "    def encryption_option(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.encryption_option\n",
        "target_code_len": 167,
        "diff_format": "@@ -111,2 +143,4 @@\n     def encryption_option(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.encryption_option\n",
        "source_code_with_indent": "    def encryption_option(self) -> Optional[str]:\n        <IND>return self._query_execution.encryption_option\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def encryption_option(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.encryption_option\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def kms_key(self) -> Optional[str]:\n        return self._query_execution.kms_key\n",
        "source_code_len": 85,
        "target_code": "    def kms_key(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.kms_key\n",
        "target_code_len": 147,
        "diff_format": "@@ -115,2 +149,4 @@\n     def kms_key(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.kms_key\n",
        "source_code_with_indent": "    def kms_key(self) -> Optional[str]:\n        <IND>return self._query_execution.kms_key\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def kms_key(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.kms_key\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def work_group(self) -> Optional[str]:\n        return self._query_execution.work_group\n",
        "source_code_len": 91,
        "target_code": "    def work_group(self) -> Optional[str]:\n        if not self._query_execution:\n            return None\n        return self._query_execution.work_group\n",
        "target_code_len": 153,
        "diff_format": "@@ -119,2 +155,4 @@\n     def work_group(self) -> Optional[str]:\n+        if not self._query_execution:\n+            return None\n         return self._query_execution.work_group\n",
        "source_code_with_indent": "    def work_group(self) -> Optional[str]:\n        <IND>return self._query_execution.work_group\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def work_group(self) -> Optional[str]:\n        <IND>if not self._query_execution:\n            <IND>return None\n        <DED>return self._query_execution.work_group\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            response = retry_api_call(\n                self._connection.client.get_query_results,\n                config=self._retry_config,\n",
        "source_code_len": 154,
        "target_code": "        try:\n            connection = cast(\"Connection\", self._connection)\n            response = retry_api_call(\n                connection.client.get_query_results,\n                config=self._retry_config,\n",
        "target_code_len": 210,
        "diff_format": "@@ -164,4 +204,5 @@\n         try:\n+            connection = cast(\"Connection\", self._connection)\n             response = retry_api_call(\n-                self._connection.client.get_query_results,\n+                connection.client.get_query_results,\n                 config=self._retry_config,\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>response = retry_api_call(\n                self._connection.client.get_query_results,\n                config=self._retry_config,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>connection = cast(\"Connection\", self._connection)\n            response = retry_api_call(\n                connection.client.get_query_results,\n                config=self._retry_config,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._quoting = quoting\n        self._client = self._connection.session.client(\n            \"s3\",\n            region_name=self._connection.region_name,\n            **self._connection._client_kwargs\n        )\n",
        "source_code_len": 216,
        "target_code": "        self._quoting = quoting\n        self._client = connection.session.client(\n            \"s3\",\n            region_name=connection.region_name,\n            **connection._client_kwargs\n        )\n",
        "target_code_len": 198,
        "diff_format": "@@ -320,6 +361,6 @@\n         self._quoting = quoting\n-        self._client = self._connection.session.client(\n+        self._client = connection.session.client(\n             \"s3\",\n-            region_name=self._connection.region_name,\n-            **self._connection._client_kwargs\n+            region_name=connection.region_name,\n+            **connection._client_kwargs\n         )\n",
        "source_code_with_indent": "        self._quoting = quoting\n        self._client = self._connection.session.client(\n            \"s3\",\n            region_name=self._connection.region_name,\n            **self._connection._client_kwargs\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._quoting = quoting\n        self._client = connection.session.client(\n            \"s3\",\n            region_name=connection.region_name,\n            **connection._client_kwargs\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]