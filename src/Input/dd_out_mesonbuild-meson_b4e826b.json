[
  {
    "project": "mesonbuild/meson",
    "commit": "b4e826bff3c9e72230634fb0f7f10904b777d795",
    "filename": "mesonbuild/modules/python.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/modules/python.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/modules/python.py:410:61 Incompatible parameter type [6]: Expected `mesonbuild.interpreter.kwargs.ExtractRequired` for 1st positional only parameter to call `mesonbuild.interpreter.interpreterobjects.extract_required_kwarg` but got `T.Dict[str, T.Union[T.Dict[str, typing.Any], T.List[typing.Any], bool, int, mesonbuild.interpreterbase.baseobjects.MesonInterpreterObject, mesonlib.universal.HoldableObject, str]]`.",
    "message": " Expected `mesonbuild.interpreter.kwargs.ExtractRequired` for 1st positional only parameter to call `mesonbuild.interpreter.interpreterobjects.extract_required_kwarg` but got `T.Dict[str, T.Union[T.Dict[str, typing.Any], T.List[typing.Any], bool, int, mesonbuild.interpreterbase.baseobjects.MesonInterpreterObject, mesonlib.universal.HoldableObject, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 410,
    "warning_line": "        disabled, required, feature = extract_required_kwarg(kwargs, self.subproject)"
  },
  {
    "project": "mesonbuild/meson",
    "commit": "b4e826bff3c9e72230634fb0f7f10904b777d795",
    "filename": "mesonbuild/modules/python.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/modules/python.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/modules/python.py:536:61 Incompatible parameter type [6]: Expected `mesonbuild.interpreter.kwargs.ExtractRequired` for 1st positional only parameter to call `mesonbuild.interpreter.interpreterobjects.extract_required_kwarg` but got `T.Dict[str, T.Union[T.Dict[str, typing.Any], T.List[typing.Any], bool, int, mesonbuild.interpreterbase.baseobjects.MesonInterpreterObject, mesonlib.universal.HoldableObject, str]]`.",
    "message": " Expected `mesonbuild.interpreter.kwargs.ExtractRequired` for 1st positional only parameter to call `mesonbuild.interpreter.interpreterobjects.extract_required_kwarg` but got `T.Dict[str, T.Union[T.Dict[str, typing.Any], T.List[typing.Any], bool, int, mesonbuild.interpreterbase.baseobjects.MesonInterpreterObject, mesonlib.universal.HoldableObject, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 536,
    "warning_line": "        disabled, required, feature = extract_required_kwarg(kwargs, state.subproject, feature_check)"
  },
  {
    "project": "mesonbuild/meson",
    "commit": "b4e826bff3c9e72230634fb0f7f10904b777d795",
    "filename": "mesonbuild/modules/python.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/modules/python.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/modules/python.py:537:8 Incompatible variable type [9]: want_modules is declared to have type `T.List[str]` but is used as type `T.List[T.Union[T.Dict[str, typing.Any], T.List[typing.Any], bool, int, mesonbuild.interpreterbase.baseobjects.MesonInterpreterObject, mesonlib.universal.HoldableObject, str]]`.",
    "message": " want_modules is declared to have type `T.List[str]` but is used as type `T.List[T.Union[T.Dict[str, typing.Any], T.List[typing.Any], bool, int, mesonbuild.interpreterbase.baseobjects.MesonInterpreterObject, mesonlib.universal.HoldableObject, str]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 537,
    "warning_line": "        want_modules = mesonlib.extract_as_list(kwargs, 'modules')  # type: T.List[str]"
  }
]