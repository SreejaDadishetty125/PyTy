[
  {
    "project": "Lookyloo/lookyloo",
    "commit": "9873d3ebc3ebcd64d3737c4c2705858f89f40e9a",
    "filename": "lookyloo/lookyloo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Lookyloo-lookyloo/lookyloo/lookyloo.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lookyloo/lookyloo.py:495:48 Incompatible parameter type [6]: Expected `Tuple[str, str]` for 1st positional only parameter to call `set.add` but got `Tuple[str]`.",
    "message": " Expected `Tuple[str, str]` for 1st positional only parameter to call `set.add` but got `Tuple[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 495,
    "warning_line": "                        to_display[cookie].add(('Unknown origin', ))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set\nfrom urllib.parse import urlsplit\n",
        "source_code_len": 128,
        "target_code": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set, Iterable\nfrom urllib.parse import urlsplit\n",
        "target_code_len": 138,
        "diff_format": "@@ -16,3 +16,3 @@\n import socket\n-from typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set\n+from typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set, Iterable\n from urllib.parse import urlsplit\n",
        "source_code_with_indent": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set\nfrom urllib.parse import urlsplit\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set, Iterable\nfrom urllib.parse import urlsplit\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if hasattr(url, 'cookies_sent'):\n                to_display: Dict[str, Set[Tuple[str, str]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "source_code_len": 190,
        "target_code": "            if hasattr(url, 'cookies_sent'):\n                to_display_sent: Dict[str, Set[Iterable[Optional[str]]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "target_code_len": 203,
        "diff_format": "@@ -490,3 +490,3 @@\n             if hasattr(url, 'cookies_sent'):\n-                to_display: Dict[str, Set[Tuple[str, str]]] = defaultdict(set)\n+                to_display_sent: Dict[str, Set[Iterable[Optional[str]]]] = defaultdict(set)\n                 for cookie, contexts in url.cookies_sent.items():\n",
        "source_code_with_indent": "            <DED><DED><DED>if hasattr(url, 'cookies_sent'):\n                <IND>to_display: Dict[str, Set[Tuple[str, str]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED><DED><DED>if hasattr(url, 'cookies_sent'):\n                <IND>to_display_sent: Dict[str, Set[Iterable[Optional[str]]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        # Locally created?\n                        to_display[cookie].add(('Unknown origin', ))\n                        continue\n                    for context in contexts:\n                        to_display[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                to_append['cookies_sent'] = to_display\n\n",
        "source_code_len": 356,
        "target_code": "                        # Locally created?\n                        to_display_sent[cookie].add(('Unknown origin', ))\n                        continue\n                    for context in contexts:\n                        to_display_sent[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                to_append['cookies_sent'] = to_display_sent\n\n",
        "target_code_len": 371,
        "diff_format": "@@ -494,7 +494,7 @@\n                         # Locally created?\n-                        to_display[cookie].add(('Unknown origin', ))\n+                        to_display_sent[cookie].add(('Unknown origin', ))\n                         continue\n                     for context in contexts:\n-                        to_display[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n-                to_append['cookies_sent'] = to_display\n+                        to_display_sent[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n+                to_append['cookies_sent'] = to_display_sent\n \n",
        "source_code_with_indent": "                        # Locally created?\n                        <IND>to_display[cookie].add(('Unknown origin', ))\n                        continue\n                    <DED>for context in contexts:\n                        <IND>to_display[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                <DED><DED>to_append['cookies_sent'] = to_display\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        # Locally created?\n                        <IND>to_display_sent[cookie].add(('Unknown origin', ))\n                        continue\n                    <DED>for context in contexts:\n                        <IND>to_display_sent[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                <DED><DED>to_append['cookies_sent'] = to_display_sent\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Lookyloo/lookyloo",
    "commit": "9873d3ebc3ebcd64d3737c4c2705858f89f40e9a",
    "filename": "lookyloo/lookyloo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Lookyloo-lookyloo/lookyloo/lookyloo.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lookyloo/lookyloo.py:503:16 Incompatible variable type [9]: to_display is declared to have type `Dict[str, Set[Tuple[str, str]]]` but is used as type `Dict[str, Union[typing.DefaultDict[Variable[collections._KT], Set[Variable[_T]]], typing.DefaultDict[Variable[collections._KT], Set[Variable[_T]]], typing.DefaultDict[Variable[collections._KT], Set[Variable[_T]]]]]`.",
    "message": " to_display is declared to have type `Dict[str, Set[Tuple[str, str]]]` but is used as type `Dict[str, Union[typing.DefaultDict[Variable[collections._KT], Set[Variable[_T]]], typing.DefaultDict[Variable[collections._KT], Set[Variable[_T]]], typing.DefaultDict[Variable[collections._KT], Set[Variable[_T]]]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 503,
    "warning_line": "                to_display = {'3rd_party': defaultdict(set), 'sent': defaultdict(set), 'not_sent': defaultdict(set)}",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set\nfrom urllib.parse import urlsplit\n",
        "source_code_len": 128,
        "target_code": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set, Iterable\nfrom urllib.parse import urlsplit\n",
        "target_code_len": 138,
        "diff_format": "@@ -16,3 +16,3 @@\n import socket\n-from typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set\n+from typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set, Iterable\n from urllib.parse import urlsplit\n",
        "source_code_with_indent": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set\nfrom urllib.parse import urlsplit\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import socket\nfrom typing import Union, Dict, List, Tuple, Optional, Any, MutableMapping, Set, Iterable\nfrom urllib.parse import urlsplit\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if hasattr(url, 'cookies_sent'):\n                to_display: Dict[str, Set[Tuple[str, str]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "source_code_len": 190,
        "target_code": "            if hasattr(url, 'cookies_sent'):\n                to_display_sent: Dict[str, Set[Iterable[Optional[str]]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "target_code_len": 203,
        "diff_format": "@@ -490,3 +490,3 @@\n             if hasattr(url, 'cookies_sent'):\n-                to_display: Dict[str, Set[Tuple[str, str]]] = defaultdict(set)\n+                to_display_sent: Dict[str, Set[Iterable[Optional[str]]]] = defaultdict(set)\n                 for cookie, contexts in url.cookies_sent.items():\n",
        "source_code_with_indent": "            <DED><DED><DED>if hasattr(url, 'cookies_sent'):\n                <IND>to_display: Dict[str, Set[Tuple[str, str]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED><DED><DED>if hasattr(url, 'cookies_sent'):\n                <IND>to_display_sent: Dict[str, Set[Iterable[Optional[str]]]] = defaultdict(set)\n                for cookie, contexts in url.cookies_sent.items():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        # Locally created?\n                        to_display[cookie].add(('Unknown origin', ))\n                        continue\n                    for context in contexts:\n                        to_display[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                to_append['cookies_sent'] = to_display\n\n",
        "source_code_len": 356,
        "target_code": "                        # Locally created?\n                        to_display_sent[cookie].add(('Unknown origin', ))\n                        continue\n                    for context in contexts:\n                        to_display_sent[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                to_append['cookies_sent'] = to_display_sent\n\n",
        "target_code_len": 371,
        "diff_format": "@@ -494,7 +494,7 @@\n                         # Locally created?\n-                        to_display[cookie].add(('Unknown origin', ))\n+                        to_display_sent[cookie].add(('Unknown origin', ))\n                         continue\n                     for context in contexts:\n-                        to_display[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n-                to_append['cookies_sent'] = to_display\n+                        to_display_sent[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n+                to_append['cookies_sent'] = to_display_sent\n \n",
        "source_code_with_indent": "                        # Locally created?\n                        <IND>to_display[cookie].add(('Unknown origin', ))\n                        continue\n                    <DED>for context in contexts:\n                        <IND>to_display[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                <DED><DED>to_append['cookies_sent'] = to_display\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        # Locally created?\n                        <IND>to_display_sent[cookie].add(('Unknown origin', ))\n                        continue\n                    <DED>for context in contexts:\n                        <IND>to_display_sent[cookie].add((context['setter'].hostname, context['setter'].hostnode_uuid))\n                <DED><DED>to_append['cookies_sent'] = to_display_sent\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]