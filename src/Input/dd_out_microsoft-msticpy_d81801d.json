[
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "msticpy/sectools/geoip.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/sectools/geoip.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/sectools/geoip.py:484:46 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `geoip2.database.Reader.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `geoip2.database.Reader.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 484,
    "warning_line": "        self._reader = geoip2.database.Reader(self._dbpath)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..common.provider_settings import ProviderSettings, get_provider_settings\nfrom ..common.utility import export\n",
        "source_code_len": 115,
        "target_code": "from ..common.provider_settings import ProviderSettings, get_provider_settings\nfrom ..common.pkg_config import current_config_path\nfrom ..common.utility import export\n",
        "target_code_len": 167,
        "diff_format": "@@ -45,2 +45,3 @@\n from ..common.provider_settings import ProviderSettings, get_provider_settings\n+from ..common.pkg_config import current_config_path\n from ..common.utility import export\n",
        "source_code_with_indent": "from ..common.provider_settings import ProviderSettings, get_provider_settings\nfrom ..common.utility import export\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..common.provider_settings import ProviderSettings, get_provider_settings\nfrom ..common.pkg_config import current_config_path\nfrom ..common.utility import export\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        auto_update: bool = True,\n    ):\n",
        "source_code_len": 41,
        "target_code": "        auto_update: bool = True,\n        debug: bool = False,\n    ):\n",
        "target_code_len": 70,
        "diff_format": "@@ -419,2 +420,3 @@\n         auto_update: bool = True,\n+        debug: bool = False,\n     ):\n",
        "source_code_with_indent": "        auto_update: bool = True,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        auto_update: bool = True,\n        debug: bool = False,\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.settings = _get_geoip_provider_settings(\"GeoIPLite\")\n        self._api_key = api_key or self.settings.args.get(\"AuthKey\")\n        self._dbfolder = db_folder\n",
        "source_code_len": 171,
        "target_code": "\n        self._debug = debug\n        if self._debug:\n            dbg_api_key = (\n                \"None\" if api_key is None else api_key[:4] + \"*\" * (len(api_key) - 4)\n            )\n            self._pr_debug(f\"__init__ params: api_key={dbg_api_key}\")\n            self._pr_debug(f\"    db_folder={db_folder}\")\n            self._pr_debug(f\"    force_update={force_update}\")\n            self._pr_debug(f\"    auto_update={auto_update}\")\n        self.settings = _get_geoip_provider_settings(\"GeoIPLite\")\n        self._api_key = api_key or self.settings.args.get(\"AuthKey\")\n\n        self._dbfolder = db_folder\n",
        "target_code_len": 603,
        "diff_format": "@@ -448,4 +452,14 @@\n \n+        self._debug = debug\n+        if self._debug:\n+            dbg_api_key = (\n+                \"None\" if api_key is None else api_key[:4] + \"*\" * (len(api_key) - 4)\n+            )\n+            self._pr_debug(f\"__init__ params: api_key={dbg_api_key}\")\n+            self._pr_debug(f\"    db_folder={db_folder}\")\n+            self._pr_debug(f\"    force_update={force_update}\")\n+            self._pr_debug(f\"    auto_update={auto_update}\")\n         self.settings = _get_geoip_provider_settings(\"GeoIPLite\")\n         self._api_key = api_key or self.settings.args.get(\"AuthKey\")\n+\n         self._dbfolder = db_folder\n",
        "source_code_with_indent": "\n        self.settings = _get_geoip_provider_settings(\"GeoIPLite\")\n        self._api_key = api_key or self.settings.args.get(\"AuthKey\")\n        self._dbfolder = db_folder\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._debug = debug\n        if self._debug:\n            <IND>dbg_api_key = (\n                \"None\" if api_key is None else api_key[:4] + \"*\" * (len(api_key) - 4)\n            )\n            self._pr_debug(f\"__init__ params: api_key={dbg_api_key}\")\n            self._pr_debug(f\"    db_folder={db_folder}\")\n            self._pr_debug(f\"    force_update={force_update}\")\n            self._pr_debug(f\"    auto_update={auto_update}\")\n        <DED>self.settings = _get_geoip_provider_settings(\"GeoIPLite\")\n        self._api_key = api_key or self.settings.args.get(\"AuthKey\")\n\n        self._dbfolder = db_folder\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._dbpath = self._get_geoip_dbpath(self._dbfolder)\n        if not self._dbpath:\n",
        "source_code_len": 91,
        "target_code": "        self._dbpath = self._get_geoip_dbpath(self._dbfolder)\n        if self._debug:\n            dbg_api_key = (\n                \"None\"\n                if self._api_key is None\n                else self._api_key[:4] + \"*\" * (len(self._api_key) - 4)\n            )\n            self._pr_debug(f\"__init__ values (inc settings): api_key={dbg_api_key}\")\n            self._pr_debug(f\"    db_folder={self._dbfolder}\")\n            self._pr_debug(f\"    force_update={self._force_update}\")\n            self._pr_debug(f\"    auto_update={self._auto_update}\")\n            self._pr_debug(f\"    dbpath={self._dbpath}\")\n            self._pr_debug(f\"Using config file: {current_config_path()}\")\n\n        if not self._dbpath:\n",
        "target_code_len": 708,
        "diff_format": "@@ -459,2 +473,15 @@\n         self._dbpath = self._get_geoip_dbpath(self._dbfolder)\n+        if self._debug:\n+            dbg_api_key = (\n+                \"None\"\n+                if self._api_key is None\n+                else self._api_key[:4] + \"*\" * (len(self._api_key) - 4)\n+            )\n+            self._pr_debug(f\"__init__ values (inc settings): api_key={dbg_api_key}\")\n+            self._pr_debug(f\"    db_folder={self._dbfolder}\")\n+            self._pr_debug(f\"    force_update={self._force_update}\")\n+            self._pr_debug(f\"    auto_update={self._auto_update}\")\n+            self._pr_debug(f\"    dbpath={self._dbpath}\")\n+            self._pr_debug(f\"Using config file: {current_config_path()}\")\n+\n         if not self._dbpath:\n",
        "source_code_with_indent": "        self._dbpath = self._get_geoip_dbpath(self._dbfolder)\n        if not self._dbpath:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._dbpath = self._get_geoip_dbpath(self._dbfolder)\n        if self._debug:\n            <IND>dbg_api_key = (\n                \"None\"\n                if self._api_key is None\n                else self._api_key[:4] + \"*\" * (len(self._api_key) - 4)\n            )\n            self._pr_debug(f\"__init__ values (inc settings): api_key={dbg_api_key}\")\n            self._pr_debug(f\"    db_folder={self._dbfolder}\")\n            self._pr_debug(f\"    force_update={self._force_update}\")\n            self._pr_debug(f\"    auto_update={self._auto_update}\")\n            self._pr_debug(f\"    dbpath={self._dbpath}\")\n            self._pr_debug(f\"Using config file: {current_config_path()}\")\n\n        <DED>if not self._dbpath:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n",
        "source_code_len": 2,
        "target_code": "\n    def _pr_debug(self, *args):\n        \"\"\"Print out debug info.\"\"\"\n        if self._debug:\n            print(*args)\n\n    @staticmethod\n    def _geolite_warn(mssg):\n        warnings.warn(\n            f\"GeoIpLookup: {mssg}\",\n            UserWarning,\n        )\n\n\n",
        "target_code_len": 262,
        "diff_format": "@@ -770,2 +819,14 @@\n \n+    def _pr_debug(self, *args):\n+        \"\"\"Print out debug info.\"\"\"\n+        if self._debug:\n+            print(*args)\n+\n+    @staticmethod\n+    def _geolite_warn(mssg):\n+        warnings.warn(\n+            f\"GeoIpLookup: {mssg}\",\n+            UserWarning,\n+        )\n+\n \n",
        "source_code_with_indent": "\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _pr_debug(self, *args):\n        <IND>\"\"\"Print out debug info.\"\"\"\n        if self._debug:\n            <IND>print(*args)\n\n    <DED><DED>@staticmethod\n    def _geolite_warn(mssg):\n        <IND>warnings.warn(\n            f\"GeoIpLookup: {mssg}\",\n            UserWarning,\n        )\n\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_anom_seq.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_anom_seq.py:44:8 Incompatible attribute type [8]: Attribute `sessions1` declared in class `TestAnomalous` has type `typing.List[typing.List[str]]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_anom_seq.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_anom_seq.py:45:8 Incompatible attribute type [8]: Attribute `sessions2` declared in class `TestAnomalous` has type `typing.List[typing.List[Cmd]]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_anom_seq.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_anom_seq.py:46:8 Incompatible attribute type [8]: Attribute `sessions3` declared in class `TestAnomalous` has type `typing.List[typing.List[Cmd]]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_anom_seq.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_anom_seq.py:47:8 Incompatible attribute type [8]: Attribute `times` declared in class `TestAnomalous` has type `typing.List[datetime]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_anom_seq_model.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_anom_seq_model.py:38:8 Incompatible attribute type [8]: Attribute `sessions1` declared in class `TestModel` has type `typing.List[typing.List[str]]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_anom_seq_model.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_anom_seq_model.py:39:8 Incompatible attribute type [8]: Attribute `sessions2` declared in class `TestModel` has type `typing.List[typing.List[Cmd]]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_anom_seq_model.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_anom_seq_model.py:40:8 Incompatible attribute type [8]: Attribute `sessions3` declared in class `TestModel` has type `typing.List[typing.List[Cmd]]` but is used as type `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_tiprovider_kql.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/tests/sectools/test_tiprovider_kql.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_tiprovider_kql.py:40:23 Incompatible variable type [9]: connection_str is declared to have type `str` but is used as type `None`.",
    "message": " connection_str is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "    def __init__(self, connection_str: str = None, **kwargs):"
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_tiprovider_kql.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/tests/sectools/test_tiprovider_kql.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_tiprovider_kql.py:54:4 Inconsistent override [14]: `tests.test_tiprovider_kql.KqlTestDriver.connect` overrides method defined in `msticpy.data.drivers.driver_base.DriverBase` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `typing.Optional[str]`.",
    "message": " `tests.test_tiprovider_kql.KqlTestDriver.connect` overrides method defined in `msticpy.data.drivers.driver_base.DriverBase` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `typing.Optional[str]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 54,
    "warning_line": "    def connect(self, connection_str: str, **kwargs):"
  },
  {
    "project": "microsoft/msticpy",
    "commit": "d81801d1069c23910d903f18b44328cb2e9ef8c1",
    "filename": "tests/test_tiprovider_kql.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/tests/sectools/test_tiprovider_kql.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_tiprovider_kql.py:86:4 Inconsistent override [14]: `tests.test_tiprovider_kql.KqlTestDriver.query_with_results` overrides method defined in `msticpy.data.drivers.driver_base.DriverBase` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `tests.test_tiprovider_kql.KqlTestDriver.query_with_results` overrides method defined in `msticpy.data.drivers.driver_base.DriverBase` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 86,
    "warning_line": "    def query_with_results(self, query: str) -> Tuple[pd.DataFrame, Any]:"
  }
]