[
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/masonry/builders/sdist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/masonry/builders/sdist.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/masonry/builders/sdist.py:58:20 Incompatible variable type [9]: target_dir is declared to have type `pathlib.Path` but is used as type `None`.",
    "message": " target_dir is declared to have type `pathlib.Path` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 58,
    "warning_line": "    def build(self, target_dir=None):  # type: (Path) -> Path"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/masonry/builders/sdist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/masonry/builders/sdist.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/masonry/builders/sdist.py:96:16 Incompatible attribute type [8]: Attribute `mtime` declared in class `tarfile.TarInfo` has type `int` but is used as type `float`.",
    "message": " Attribute `mtime` declared in class `tarfile.TarInfo` has type `int` but is used as type `float`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 96,
    "warning_line": "                tar_info.mtime = time.time()"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/masonry/builders/sdist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/masonry/builders/sdist.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/masonry/builders/sdist.py:103:12 Incompatible attribute type [8]: Attribute `mtime` declared in class `tarfile.TarInfo` has type `int` but is used as type `float`.",
    "message": " Attribute `mtime` declared in class `tarfile.TarInfo` has type `int` but is used as type `float`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 103,
    "warning_line": "            tar_info.mtime = time.time()"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/masonry/metadata.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/masonry/metadata.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/masonry/metadata.py:88:16 Incompatible attribute type [8]: Attribute `project_urls` declared in class `Metadata` has type `typing.Tuple[]` but is used as type `typing.Tuple[str, ...]`.",
    "message": " Attribute `project_urls` declared in class `Metadata` has type `typing.Tuple[]` but is used as type `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 88,
    "warning_line": "                meta.project_urls += (\"{}, {}\".format(name, url),)"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "poetry/core/packages/__init__.py:48:42 Incompatible parameter type [6]: Expected `pathlib.Path` for 3rd parameter `base` to call `FileDependency.__init__` but got `Optional[pathlib.Path]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "poetry/core/packages/__init__.py:48:53 Incompatible parameter type [6]: Expected `Union[List[str], typing.Set[str]]` for 4th parameter `extras` to call `FileDependency.__init__` but got `Optional[List[str]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "poetry/core/packages/__init__.py:50:47 Incompatible parameter type [6]: Expected `pathlib.Path` for 3rd parameter `base` to call `DirectoryDependency.__init__` but got `Optional[pathlib.Path]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "poetry/core/packages/__init__.py:50:58 Incompatible parameter type [6]: Expected `Union[List[str], typing.Set[str]]` for 4th parameter `extras` to call `DirectoryDependency.__init__` but got `Optional[List[str]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/dependency.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/dependency.py:32:8 Incompatible variable type [9]: extras is declared to have type `Union[List[str], frozenset[str]]` but is used as type `None`.",
    "message": " extras is declared to have type `Union[List[str], frozenset[str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "        extras=None,  # type: Union[List[str], FrozenSet[str]]"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/directory_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/directory_dependency.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/directory_dependency.py:18:8 Incompatible variable type [9]: base is declared to have type `pathlib.Path` but is used as type `None`.",
    "message": " base is declared to have type `pathlib.Path` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 18,
    "warning_line": "        base=None,  # type: Path"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/directory_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/directory_dependency.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/directory_dependency.py:20:8 Incompatible variable type [9]: extras is declared to have type `Union[List[str], Set[str]]` but is used as type `None`.",
    "message": " extras is declared to have type `Union[List[str], Set[str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "        extras=None,  # type: Union[List[str], Set[str]]"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/directory_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/directory_dependency.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/directory_dependency.py:62:12 Incompatible parameter type [6]: Expected `Union[List[str], frozenset[str]]` for 8th parameter `extras` to call `Dependency.__init__` but got `Union[List[str], Set[str]]`.",
    "message": " Expected `Union[List[str], frozenset[str]]` for 8th parameter `extras` to call `Dependency.__init__` but got `Union[List[str], Set[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 62,
    "warning_line": "            extras=extras,"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/file_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/file_dependency.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/file_dependency.py:21:8 Incompatible variable type [9]: base is declared to have type `pathlib.Path` but is used as type `None`.",
    "message": " base is declared to have type `pathlib.Path` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "        base=None,  # type: Path"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/file_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/file_dependency.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/file_dependency.py:22:8 Incompatible variable type [9]: extras is declared to have type `Union[List[str], Set[str]]` but is used as type `None`.",
    "message": " extras is declared to have type `Union[List[str], Set[str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 22,
    "warning_line": "        extras=None,  # type: Union[List[str], Set[str]]"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/file_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/file_dependency.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/file_dependency.py:48:12 Incompatible parameter type [6]: Expected `Union[List[str], frozenset[str]]` for 8th parameter `extras` to call `Dependency.__init__` but got `Union[List[str], Set[str]]`.",
    "message": " Expected `Union[List[str], frozenset[str]]` for 8th parameter `extras` to call `Dependency.__init__` but got `Union[List[str], Set[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "            extras=extras,"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/package.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/package.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/package.py:304:8 Incompatible return type [7]: Expected `Package` but got `Dependency`.",
    "message": " Expected `Package` but got `Dependency`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 304,
    "warning_line": "        return dependency"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/url_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/url_dependency.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/url_dependency.py:17:30 Invalid type [31]: Expression `typing.Union(typing.List[str], typing.Set[str])` is not a valid type.",
    "message": " Expression `typing.Union(typing.List[str], typing.Set[str])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 17,
    "warning_line": "        extras=None,  # type: Union(List[str], Set[str])"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/vcs_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/vcs_dependency.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/vcs_dependency.py:27:8 Incompatible variable type [9]: extras is declared to have type `Union[List[str], Set[str]]` but is used as type `None`.",
    "message": " extras is declared to have type `Union[List[str], Set[str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "        extras=None,  # type: Union[List[str], Set[str]]"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/packages/vcs_dependency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/packages/vcs_dependency.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/packages/vcs_dependency.py:51:12 Incompatible parameter type [6]: Expected `Union[List[str], frozenset[str]]` for 10th parameter `extras` to call `Dependency.__init__` but got `Union[List[str], Set[str]]`.",
    "message": " Expected `Union[List[str], frozenset[str]]` for 10th parameter `extras` to call `Dependency.__init__` but got `Union[List[str], Set[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 51,
    "warning_line": "            extras=extras,"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:82:41 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Version._normalize_prerelease` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Version._normalize_prerelease` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 82,
    "warning_line": "        pre = self._normalize_prerelease(pre)"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:88:38 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Version._normalize_build` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Version._normalize_build` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        build = self._normalize_build(build)"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:298:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 298,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _normalize_prerelease(self, pre):  # type: (str) -> str\n        if not pre:\n",
        "source_code_len": 85,
        "target_code": "\n    def _normalize_prerelease(self, pre):  # type: (str) -> Optional[str]\n        if not pre:\n",
        "target_code_len": 95,
        "diff_format": "@@ -295,3 +304,3 @@\n \n-    def _normalize_prerelease(self, pre):  # type: (str) -> str\n+    def _normalize_prerelease(self, pre):  # type: (str) -> Optional[str]\n         if not pre:\n",
        "source_code_with_indent": "\n    <DED>def _normalize_prerelease(self, pre):  # type: (str) -> str\n        <IND>if not pre:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _normalize_prerelease(self, pre):  # type: (str) -> Optional[str]\n        <IND>if not pre:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:302:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 302,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _normalize_prerelease(self, pre):  # type: (str) -> str\n        if not pre:\n",
        "source_code_len": 85,
        "target_code": "\n    def _normalize_prerelease(self, pre):  # type: (str) -> Optional[str]\n        if not pre:\n",
        "target_code_len": 95,
        "diff_format": "@@ -295,3 +304,3 @@\n \n-    def _normalize_prerelease(self, pre):  # type: (str) -> str\n+    def _normalize_prerelease(self, pre):  # type: (str) -> Optional[str]\n         if not pre:\n",
        "source_code_with_indent": "\n    <DED>def _normalize_prerelease(self, pre):  # type: (str) -> str\n        <IND>if not pre:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _normalize_prerelease(self, pre):  # type: (str) -> Optional[str]\n        <IND>if not pre:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:323:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 323,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _normalize_build(self, build):  # type: (str) -> str\n        if not build:\n",
        "source_code_len": 84,
        "target_code": "\n    def _normalize_build(self, build):  # type: (str) -> Optional[str]\n        if not build:\n",
        "target_code_len": 94,
        "diff_format": "@@ -320,3 +329,3 @@\n \n-    def _normalize_build(self, build):  # type: (str) -> str\n+    def _normalize_build(self, build):  # type: (str) -> Optional[str]\n         if not build:\n",
        "source_code_with_indent": "\n    <DED>def _normalize_build(self, build):  # type: (str) -> str\n        <IND>if not build:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _normalize_build(self, build):  # type: (str) -> Optional[str]\n        <IND>if not build:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:329:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 329,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _normalize_build(self, build):  # type: (str) -> str\n        if not build:\n",
        "source_code_len": 84,
        "target_code": "\n    def _normalize_build(self, build):  # type: (str) -> Optional[str]\n        if not build:\n",
        "target_code_len": 94,
        "diff_format": "@@ -320,3 +329,3 @@\n \n-    def _normalize_build(self, build):  # type: (str) -> str\n+    def _normalize_build(self, build):  # type: (str) -> Optional[str]\n         if not build:\n",
        "source_code_with_indent": "\n    <DED>def _normalize_build(self, build):  # type: (str) -> str\n        <IND>if not build:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _normalize_build(self, build):  # type: (str) -> Optional[str]\n        <IND>if not build:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:338:27 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `list.__setitem__` but got `int`.",
    "message": " Expected `str` for 2nd positional only parameter to call `list.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 338,
    "warning_line": "                parts[i] = int(part)"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/semver/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/semver/version.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/semver/version.py:342:8 Incompatible return type [7]: Expected `List[Union[int, str]]` but got `List[str]`.",
    "message": " Expected `List[Union[int, str]]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 342,
    "warning_line": "        return parts"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/version/markers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/version/markers.py",
    "file_hunks_size": 52,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/version/markers.py:523:45 Incompatible parameter type [6]: Expected `Iterator[BaseMarker]` for 1st positional only parameter to call `_flatten_markers` but got `typing.Tuple[BaseMarker, ...]`.",
    "message": " Expected `Iterator[BaseMarker]` for 1st positional only parameter to call `_flatten_markers` but got `typing.Tuple[BaseMarker, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 523,
    "warning_line": "        flattened_markers = _flatten_markers(markers, MarkerUnion)"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/version/markers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/version/markers.py",
    "file_hunks_size": 52,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/version/markers.py:525:8 Incompatible variable type [9]: Unable to unpack `List[Variable[_T]]`, expected a tuple.",
    "message": " Unable to unpack `List[Variable[_T]]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 525,
    "warning_line": "        markers = []"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/version/markers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/version/markers.py",
    "file_hunks_size": 52,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/version/markers.py:555:12 Incompatible return type [7]: Expected `MarkerUnion` but got `AnyMarker`.",
    "message": " Expected `MarkerUnion` but got `AnyMarker`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 555,
    "warning_line": "            return AnyMarker()"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/version/markers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/version/markers.py",
    "file_hunks_size": 52,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/version/markers.py:558:12 Incompatible return type [7]: Expected `MarkerUnion` but got `AnyMarker`.",
    "message": " Expected `MarkerUnion` but got `AnyMarker`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 558,
    "warning_line": "            return AnyMarker()"
  },
  {
    "project": "python-poetry/poetry-core",
    "commit": "7e304051b216b316722e8e0fa2fd198c7eed31cd",
    "filename": "poetry/core/version/markers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry-core/poetry/core/version/markers.py",
    "file_hunks_size": 52,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/core/version/markers.py:561:12 Incompatible return type [7]: Expected `MarkerUnion` but got `BaseMarker`.",
    "message": " Expected `MarkerUnion` but got `BaseMarker`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 561,
    "warning_line": "            return markers[0]"
  }
]