[
  {
    "project": "tensorflow/similarity",
    "commit": "9803dc3ff9d4f9f434a0f02b0c0c57affb603726",
    "filename": "tensorflow_similarity/models/similarity_model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-similarity/tensorflow_similarity/models/similarity_model.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensorflow_similarity/models/similarity_model.py:75:12 Incompatible variable type [9]: loss_weights is declared to have type `List[typing.Any]` but is used as type `None`.",
    "message": " loss_weights is declared to have type `List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 75,
    "warning_line": "            loss_weights: List = None,"
  },
  {
    "project": "tensorflow/similarity",
    "commit": "9803dc3ff9d4f9f434a0f02b0c0c57affb603726",
    "filename": "tensorflow_similarity/models/similarity_model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-similarity/tensorflow_similarity/models/similarity_model.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensorflow_similarity/models/similarity_model.py:76:12 Incompatible variable type [9]: weighted_metrics is declared to have type `List[typing.Any]` but is used as type `None`.",
    "message": " weighted_metrics is declared to have type `List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "            weighted_metrics: List = None,"
  },
  {
    "project": "tensorflow/similarity",
    "commit": "9803dc3ff9d4f9f434a0f02b0c0c57affb603726",
    "filename": "tensorflow_similarity/samplers/memory_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-similarity/tensorflow_similarity/samplers/memory_samplers.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensorflow_similarity/samplers/memory_samplers.py:128:34 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `FloatTensor`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `FloatTensor`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 128,
    "warning_line": "        for idx in tqdm(range(len(x)), desc='indexing classes'):"
  },
  {
    "project": "tensorflow/similarity",
    "commit": "9803dc3ff9d4f9f434a0f02b0c0c57affb603726",
    "filename": "tensorflow_similarity/samplers/memory_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-similarity/tensorflow_similarity/samplers/memory_samplers.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensorflow_similarity/samplers/memory_samplers.py:132:4 Inconsistent override [14]: `tensorflow_similarity.samplers.memory_samplers.MultiShotMemorySampler.get_examples` overrides method defined in `Sampler` inconsistently. Could not find parameter `example_per_class` in overriding signature.",
    "message": " `tensorflow_similarity.samplers.memory_samplers.MultiShotMemorySampler.get_examples` overrides method defined in `Sampler` inconsistently. Could not find parameter `example_per_class` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 132,
    "warning_line": "    def get_examples(self,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_examples(self,\n                     batch_id: int,\n                     num_classes: int,\n                     examples_per_class: int) -> Tuple[Tensor, Tensor]:\n        # select class at ramdom\n",
        "source_code_len": 208,
        "target_code": "\n    def _get_examples(self, batch_id: int, num_classes: int,\n                      examples_per_class: int) -> Tuple[FloatTensor, IntTensor]:\n        \"\"\"Get the set of examples that would be used to create a single batch.\n\n        Notes:\n         - before passing the batch data to TF, the sampler will call the\n           augmenter function (if any) on the returned example.\n\n         - A batch_size = num_classes * examples_per_class\n\n         - This function must be defined in the subclass.\n\n        Args:\n            batch_id: id of the batch in the epoch.\n\n            num_classes: How many class should be present in the examples.\n\n            examples_per_class: How many example per class should be returned.\n\n        Returns:\n            x, y: batch of examples size `num_classes` * `examples_per_class`\n        \"\"\"\n        # select class at ramdom\n",
        "target_code_len": 860,
        "diff_format": "@@ -131,6 +139,24 @@\n \n-    def get_examples(self,\n-                     batch_id: int,\n-                     num_classes: int,\n-                     examples_per_class: int) -> Tuple[Tensor, Tensor]:\n+    def _get_examples(self, batch_id: int, num_classes: int,\n+                      examples_per_class: int) -> Tuple[FloatTensor, IntTensor]:\n+        \"\"\"Get the set of examples that would be used to create a single batch.\n+\n+        Notes:\n+         - before passing the batch data to TF, the sampler will call the\n+           augmenter function (if any) on the returned example.\n+\n+         - A batch_size = num_classes * examples_per_class\n+\n+         - This function must be defined in the subclass.\n+\n+        Args:\n+            batch_id: id of the batch in the epoch.\n+\n+            num_classes: How many class should be present in the examples.\n+\n+            examples_per_class: How many example per class should be returned.\n+\n+        Returns:\n+            x, y: batch of examples size `num_classes` * `examples_per_class`\n+        \"\"\"\n         # select class at ramdom\n",
        "source_code_with_indent": "\n    <DED><DED>def get_examples(self,\n                     batch_id: int,\n                     num_classes: int,\n                     examples_per_class: int) -> Tuple[Tensor, Tensor]:\n        # select class at ramdom\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _get_examples(self, batch_id: int, num_classes: int,\n                      examples_per_class: int) -> Tuple[FloatTensor, IntTensor]:\n        <IND>\"\"\"Get the set of examples that would be used to create a single batch.\n\n        Notes:\n         - before passing the batch data to TF, the sampler will call the\n           augmenter function (if any) on the returned example.\n\n         - A batch_size = num_classes * examples_per_class\n\n         - This function must be defined in the subclass.\n\n        Args:\n            batch_id: id of the batch in the epoch.\n\n            num_classes: How many class should be present in the examples.\n\n            examples_per_class: How many example per class should be returned.\n\n        Returns:\n            x, y: batch of examples size `num_classes` * `examples_per_class`\n        \"\"\"\n        # select class at ramdom\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/similarity",
    "commit": "9803dc3ff9d4f9f434a0f02b0c0c57affb603726",
    "filename": "tensorflow_similarity/samplers/memory_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-similarity/tensorflow_similarity/samplers/memory_samplers.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensorflow_similarity/samplers/memory_samplers.py:132:4 Inconsistent override [15]: `tensorflow_similarity.samplers.memory_samplers.MultiShotMemorySampler.get_examples` overrides method defined in `Sampler` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Tuple[typing.Any, typing.Any]`.",
    "message": " `tensorflow_similarity.samplers.memory_samplers.MultiShotMemorySampler.get_examples` overrides method defined in `Sampler` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 132,
    "warning_line": "    def get_examples(self,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_examples(self,\n                     batch_id: int,\n                     num_classes: int,\n                     examples_per_class: int) -> Tuple[Tensor, Tensor]:\n        # select class at ramdom\n",
        "source_code_len": 208,
        "target_code": "\n    def _get_examples(self, batch_id: int, num_classes: int,\n                      examples_per_class: int) -> Tuple[FloatTensor, IntTensor]:\n        \"\"\"Get the set of examples that would be used to create a single batch.\n\n        Notes:\n         - before passing the batch data to TF, the sampler will call the\n           augmenter function (if any) on the returned example.\n\n         - A batch_size = num_classes * examples_per_class\n\n         - This function must be defined in the subclass.\n\n        Args:\n            batch_id: id of the batch in the epoch.\n\n            num_classes: How many class should be present in the examples.\n\n            examples_per_class: How many example per class should be returned.\n\n        Returns:\n            x, y: batch of examples size `num_classes` * `examples_per_class`\n        \"\"\"\n        # select class at ramdom\n",
        "target_code_len": 860,
        "diff_format": "@@ -131,6 +139,24 @@\n \n-    def get_examples(self,\n-                     batch_id: int,\n-                     num_classes: int,\n-                     examples_per_class: int) -> Tuple[Tensor, Tensor]:\n+    def _get_examples(self, batch_id: int, num_classes: int,\n+                      examples_per_class: int) -> Tuple[FloatTensor, IntTensor]:\n+        \"\"\"Get the set of examples that would be used to create a single batch.\n+\n+        Notes:\n+         - before passing the batch data to TF, the sampler will call the\n+           augmenter function (if any) on the returned example.\n+\n+         - A batch_size = num_classes * examples_per_class\n+\n+         - This function must be defined in the subclass.\n+\n+        Args:\n+            batch_id: id of the batch in the epoch.\n+\n+            num_classes: How many class should be present in the examples.\n+\n+            examples_per_class: How many example per class should be returned.\n+\n+        Returns:\n+            x, y: batch of examples size `num_classes` * `examples_per_class`\n+        \"\"\"\n         # select class at ramdom\n",
        "source_code_with_indent": "\n    <DED><DED>def get_examples(self,\n                     batch_id: int,\n                     num_classes: int,\n                     examples_per_class: int) -> Tuple[Tensor, Tensor]:\n        # select class at ramdom\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _get_examples(self, batch_id: int, num_classes: int,\n                      examples_per_class: int) -> Tuple[FloatTensor, IntTensor]:\n        <IND>\"\"\"Get the set of examples that would be used to create a single batch.\n\n        Notes:\n         - before passing the batch data to TF, the sampler will call the\n           augmenter function (if any) on the returned example.\n\n         - A batch_size = num_classes * examples_per_class\n\n         - This function must be defined in the subclass.\n\n        Args:\n            batch_id: id of the batch in the epoch.\n\n            num_classes: How many class should be present in the examples.\n\n            examples_per_class: How many example per class should be returned.\n\n        Returns:\n            x, y: batch of examples size `num_classes` * `examples_per_class`\n        \"\"\"\n        # select class at ramdom\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/similarity",
    "commit": "9803dc3ff9d4f9f434a0f02b0c0c57affb603726",
    "filename": "tensorflow_similarity/samplers/memory_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-similarity/tensorflow_similarity/samplers/memory_samplers.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensorflow_similarity/samplers/memory_samplers.py:247:28 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `FloatTensor`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `FloatTensor`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 247,
    "warning_line": "        self.num_elts = len(x)"
  },
  {
    "project": "tensorflow/similarity",
    "commit": "9803dc3ff9d4f9f434a0f02b0c0c57affb603726",
    "filename": "tensorflow_similarity/samplers/memory_samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-similarity/tensorflow_similarity/samplers/memory_samplers.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensorflow_similarity/samplers/memory_samplers.py:249:4 Inconsistent override [15]: `tensorflow_similarity.samplers.memory_samplers.SingleShotMemorySampler.get_examples` overrides method defined in `Sampler` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Tuple[typing.Any, typing.Any]`.",
    "message": " `tensorflow_similarity.samplers.memory_samplers.SingleShotMemorySampler.get_examples` overrides method defined in `Sampler` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 249,
    "warning_line": "    def get_examples(self, batch_id: int, num_classes: int,"
  }
]