[
  {
    "project": "enlite-ai/maze",
    "commit": "3d62375b366258521faed3649f9b741d4e8a87b1",
    "filename": "maze/core/utils/structured_env_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/enlite-ai-maze/maze/core/utils/structured_env_utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maze/core/utils/structured_env_utils.py:68:4 Incompatible return type [7]: Expected `Dict[str, Sequence[int]]` but got `Dict[Union[int, str], Dict[str, Sequence[int]]]`.",
    "message": " Expected `Dict[str, Sequence[int]]` but got `Dict[Union[int, str], Dict[str, Sequence[int]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 68,
    "warning_line": "    return shapes",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def stacked_shapes(shapes: Dict[StepKeyType, Dict[str, Sequence[int]]],\n                   agent_counts_dict: Dict[StepKeyType, int]) -> Dict[str, Sequence[int]]:\n    \"\"\"Adopt shapes dict for stacked multi-agent scenario. (Mainly for observation stacking.)\n",
        "source_code_len": 257,
        "target_code": "def stacked_shapes(shapes: Dict[StepKeyType, Dict[str, Sequence[int]]],\n                   agent_counts_dict: Dict[StepKeyType, int]) -> Dict[StepKeyType, Dict[str, Sequence[int]]]:\n    \"\"\"Adopt shapes dict for stacked multi-agent scenario. (Mainly for observation stacking.)\n",
        "target_code_len": 276,
        "diff_format": "@@ -46,3 +46,3 @@\n def stacked_shapes(shapes: Dict[StepKeyType, Dict[str, Sequence[int]]],\n-                   agent_counts_dict: Dict[StepKeyType, int]) -> Dict[str, Sequence[int]]:\n+                   agent_counts_dict: Dict[StepKeyType, int]) -> Dict[StepKeyType, Dict[str, Sequence[int]]]:\n     \"\"\"Adopt shapes dict for stacked multi-agent scenario. (Mainly for observation stacking.)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def stacked_shapes(shapes: Dict[StepKeyType, Dict[str, Sequence[int]]],\n                   agent_counts_dict: Dict[StepKeyType, int]) -> Dict[str, Sequence[int]]:\n    <IND>",
        "target_code_with_indent": "<DED>def stacked_shapes(shapes: Dict[StepKeyType, Dict[str, Sequence[int]]],\n                   agent_counts_dict: Dict[StepKeyType, int]) -> Dict[StepKeyType, Dict[str, Sequence[int]]]:\n    <IND>"
      }
    ]
  }
]