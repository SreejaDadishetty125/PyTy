[
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:51:29 Incompatible parameter type [6]: Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "message": " Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 51,
    "warning_line": "        action = TouchAction(self)"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:56:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 56,
    "warning_line": "        return self"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:68:29 Incompatible parameter type [6]: Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "message": " Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 68,
    "warning_line": "        action = TouchAction(self)"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:70:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "        return self"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:88:33 Incompatible parameter type [6]: Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "message": " Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "            action = TouchAction(self)"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:97:29 Incompatible parameter type [6]: Expected `WebDriver` for 1st positional only parameter to call `MultiAction.__init__` but got `ActionHelpers`.",
    "message": " Expected `WebDriver` for 1st positional only parameter to call `MultiAction.__init__` but got `ActionHelpers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 97,
    "warning_line": "            ma = MultiAction(self)"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:101:37 Incompatible parameter type [6]: Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "message": " Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 101,
    "warning_line": "                action = TouchAction(self)"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:109:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 109,
    "warning_line": "        return self"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:129:29 Incompatible parameter type [6]: Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "message": " Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 129,
    "warning_line": "        action = TouchAction(self)"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:136:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 136,
    "warning_line": "        return self"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:153:29 Incompatible parameter type [6]: Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "message": " Expected `Optional[WebDriver]` for 1st positional only parameter to call `TouchAction.__init__` but got `ActionHelpers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 153,
    "warning_line": "        action = TouchAction(self)"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/action_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/action_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/action_helpers.py:159:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `ActionHelpers`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 159,
    "warning_line": "        return self"
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/activities.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/activities.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/activities.py:66:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Activities`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Activities`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_len": 44,
        "target_code": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, TypeVar\n+from typing import TYPE_CHECKING, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Activities'])\n\n",
        "target_code_len": 172,
        "diff_format": "@@ -23,5 +23,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Activities'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Activities'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Activities(webdriver.Remote):\n    def start_activity(self, app_package: str, app_activity: str, **opts: str) -> T:\n        \"\"\"Opens an arbitrary activity during a test. If the activity belongs to\n",
        "source_code_len": 202,
        "target_code": "class Activities(webdriver.Remote):\n    def start_activity(self: T, app_package: str, app_activity: str, **opts: str) -> T:\n        \"\"\"Opens an arbitrary activity during a test. If the activity belongs to\n",
        "target_code_len": 205,
        "diff_format": "@@ -29,3 +30,3 @@\n class Activities(webdriver.Remote):\n-    def start_activity(self, app_package: str, app_activity: str, **opts: str) -> T:\n+    def start_activity(self: T, app_package: str, app_activity: str, **opts: str) -> T:\n         \"\"\"Opens an arbitrary activity during a test. If the activity belongs to\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Activities(webdriver.Remote):\n    <IND>def start_activity(self, app_package: str, app_activity: str, **opts: str) -> T:\n        <IND>",
        "target_code_with_indent": "class Activities(webdriver.Remote):\n    <IND>def start_activity(self: T, app_package: str, app_activity: str, **opts: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/common.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/common.py:55:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Common`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Common`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 55,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, TypeVar\n\n",
        "source_code_len": 49,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, TypeVar, Union\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, TypeVar\n+from typing import TYPE_CHECKING, Any, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Common'])\n\n",
        "target_code_len": 168,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Common'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Common'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def open_notifications(self) -> T:\n        \"\"\"Open notification shade in Android (API Level 18 and above)\n",
        "source_code_len": 111,
        "target_code": "\n    def open_notifications(self: T) -> T:\n        \"\"\"Open notification shade in Android (API Level 18 and above)\n",
        "target_code_len": 114,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def open_notifications(self) -> T:\n+    def open_notifications(self: T) -> T:\n         \"\"\"Open notification shade in Android (API Level 18 and above)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def open_notifications(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def open_notifications(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/gsm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/gsm.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/gsm.py:75:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Gsm`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Gsm`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 75,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_len": 44,
        "target_code": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, TypeVar\n+from typing import TYPE_CHECKING, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\n",
        "source_code_len": 72,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -23,3 +23,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n+\n+T = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nT = TypeVar('T', bound='WebDriver')\n\n\nclass Gsm(webdriver.Remote):\n\n    def make_gsm_call(self, phone_number: str, action: str) -> T:\n        \"\"\"Make GSM call (Emulator only)\n",
        "source_code_len": 176,
        "target_code": "\nclass Gsm(webdriver.Remote):\n\n    def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n        \"\"\"Make GSM call (Emulator only)\n",
        "target_code_len": 141,
        "diff_format": "@@ -51,8 +54,5 @@\n \n-T = TypeVar('T', bound='WebDriver')\n-\n-\n class Gsm(webdriver.Remote):\n \n-    def make_gsm_call(self, phone_number: str, action: str) -> T:\n+    def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n         \"\"\"Make GSM call (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>T = TypeVar('T', bound='WebDriver')\n\n\nclass Gsm(webdriver.Remote):\n\n    <IND>def make_gsm_call(self, phone_number: str, action: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n<DED>class Gsm(webdriver.Remote):\n\n    <IND>def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_gsm_signal(self, strength: int) -> T:\n        \"\"\"Set GSM signal strength (Emulator only)\n",
        "source_code_len": 102,
        "target_code": "\n    def set_gsm_signal(self: T, strength: int) -> T:\n        \"\"\"Set GSM signal strength (Emulator only)\n",
        "target_code_len": 105,
        "diff_format": "@@ -76,3 +77,3 @@\n \n-    def set_gsm_signal(self, strength: int) -> T:\n+    def set_gsm_signal(self: T, strength: int) -> T:\n         \"\"\"Set GSM signal strength (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_gsm_signal(self, strength: int) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_gsm_signal(self: T, strength: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_gsm_voice(self, state: str) -> T:\n        \"\"\"Set GSM voice state (Emulator only)\n",
        "source_code_len": 94,
        "target_code": "\n    def set_gsm_voice(self: T, state: str) -> T:\n        \"\"\"Set GSM voice state (Emulator only)\n",
        "target_code_len": 97,
        "diff_format": "@@ -95,3 +97,3 @@\n \n-    def set_gsm_voice(self, state: str) -> T:\n+    def set_gsm_voice(self: T, state: str) -> T:\n         \"\"\"Set GSM voice state (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_gsm_voice(self, state: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_gsm_voice(self: T, state: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/gsm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/gsm.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/gsm.py:94:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Gsm`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Gsm`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 94,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_len": 44,
        "target_code": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, TypeVar\n+from typing import TYPE_CHECKING, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\n",
        "source_code_len": 72,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -23,3 +23,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n+\n+T = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nT = TypeVar('T', bound='WebDriver')\n\n\nclass Gsm(webdriver.Remote):\n\n    def make_gsm_call(self, phone_number: str, action: str) -> T:\n        \"\"\"Make GSM call (Emulator only)\n",
        "source_code_len": 176,
        "target_code": "\nclass Gsm(webdriver.Remote):\n\n    def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n        \"\"\"Make GSM call (Emulator only)\n",
        "target_code_len": 141,
        "diff_format": "@@ -51,8 +54,5 @@\n \n-T = TypeVar('T', bound='WebDriver')\n-\n-\n class Gsm(webdriver.Remote):\n \n-    def make_gsm_call(self, phone_number: str, action: str) -> T:\n+    def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n         \"\"\"Make GSM call (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>T = TypeVar('T', bound='WebDriver')\n\n\nclass Gsm(webdriver.Remote):\n\n    <IND>def make_gsm_call(self, phone_number: str, action: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n<DED>class Gsm(webdriver.Remote):\n\n    <IND>def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_gsm_signal(self, strength: int) -> T:\n        \"\"\"Set GSM signal strength (Emulator only)\n",
        "source_code_len": 102,
        "target_code": "\n    def set_gsm_signal(self: T, strength: int) -> T:\n        \"\"\"Set GSM signal strength (Emulator only)\n",
        "target_code_len": 105,
        "diff_format": "@@ -76,3 +77,3 @@\n \n-    def set_gsm_signal(self, strength: int) -> T:\n+    def set_gsm_signal(self: T, strength: int) -> T:\n         \"\"\"Set GSM signal strength (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_gsm_signal(self, strength: int) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_gsm_signal(self: T, strength: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_gsm_voice(self, state: str) -> T:\n        \"\"\"Set GSM voice state (Emulator only)\n",
        "source_code_len": 94,
        "target_code": "\n    def set_gsm_voice(self: T, state: str) -> T:\n        \"\"\"Set GSM voice state (Emulator only)\n",
        "target_code_len": 97,
        "diff_format": "@@ -95,3 +97,3 @@\n \n-    def set_gsm_voice(self, state: str) -> T:\n+    def set_gsm_voice(self: T, state: str) -> T:\n         \"\"\"Set GSM voice state (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_gsm_voice(self, state: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_gsm_voice(self: T, state: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/gsm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/gsm.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/gsm.py:113:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Gsm`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Gsm`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 113,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_len": 44,
        "target_code": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, TypeVar\n+from typing import TYPE_CHECKING, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\n",
        "source_code_len": 72,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -23,3 +23,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n+\n+T = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Gsm'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nT = TypeVar('T', bound='WebDriver')\n\n\nclass Gsm(webdriver.Remote):\n\n    def make_gsm_call(self, phone_number: str, action: str) -> T:\n        \"\"\"Make GSM call (Emulator only)\n",
        "source_code_len": 176,
        "target_code": "\nclass Gsm(webdriver.Remote):\n\n    def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n        \"\"\"Make GSM call (Emulator only)\n",
        "target_code_len": 141,
        "diff_format": "@@ -51,8 +54,5 @@\n \n-T = TypeVar('T', bound='WebDriver')\n-\n-\n class Gsm(webdriver.Remote):\n \n-    def make_gsm_call(self, phone_number: str, action: str) -> T:\n+    def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n         \"\"\"Make GSM call (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>T = TypeVar('T', bound='WebDriver')\n\n\nclass Gsm(webdriver.Remote):\n\n    <IND>def make_gsm_call(self, phone_number: str, action: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n<DED>class Gsm(webdriver.Remote):\n\n    <IND>def make_gsm_call(self: T, phone_number: str, action: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_gsm_signal(self, strength: int) -> T:\n        \"\"\"Set GSM signal strength (Emulator only)\n",
        "source_code_len": 102,
        "target_code": "\n    def set_gsm_signal(self: T, strength: int) -> T:\n        \"\"\"Set GSM signal strength (Emulator only)\n",
        "target_code_len": 105,
        "diff_format": "@@ -76,3 +77,3 @@\n \n-    def set_gsm_signal(self, strength: int) -> T:\n+    def set_gsm_signal(self: T, strength: int) -> T:\n         \"\"\"Set GSM signal strength (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_gsm_signal(self, strength: int) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_gsm_signal(self: T, strength: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_gsm_voice(self, state: str) -> T:\n        \"\"\"Set GSM voice state (Emulator only)\n",
        "source_code_len": 94,
        "target_code": "\n    def set_gsm_voice(self: T, state: str) -> T:\n        \"\"\"Set GSM voice state (Emulator only)\n",
        "target_code_len": 97,
        "diff_format": "@@ -95,3 +97,3 @@\n \n-    def set_gsm_voice(self, state: str) -> T:\n+    def set_gsm_voice(self: T, state: str) -> T:\n         \"\"\"Set GSM voice state (Emulator only)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_gsm_voice(self, state: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_gsm_voice(self: T, state: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/power.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/power.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/power.py:46:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Power`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Power`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 46,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_len": 44,
        "target_code": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, TypeVar\n+from typing import TYPE_CHECKING, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Power'])\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Power'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Power'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_power_capacity(self, percent: int) -> T:\n        \"\"\"Emulate power capacity change on the connected emulator.\n",
        "source_code_len": 122,
        "target_code": "\n    def set_power_capacity(self: T, percent: int) -> T:\n        \"\"\"Emulate power capacity change on the connected emulator.\n",
        "target_code_len": 125,
        "diff_format": "@@ -30,3 +31,3 @@\n \n-    def set_power_capacity(self, percent: int) -> T:\n+    def set_power_capacity(self: T, percent: int) -> T:\n         \"\"\"Emulate power capacity change on the connected emulator.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def set_power_capacity(self, percent: int) -> T:\n        <IND>",
        "target_code_with_indent": "\n    def set_power_capacity(self: T, percent: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_power_ac(self, ac_state: str) -> T:\n        \"\"\"Emulate power state change on the connected emulator.\n",
        "source_code_len": 114,
        "target_code": "\n    def set_power_ac(self: T, ac_state: str) -> T:\n        \"\"\"Emulate power state change on the connected emulator.\n",
        "target_code_len": 117,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def set_power_ac(self, ac_state: str) -> T:\n+    def set_power_ac(self: T, ac_state: str) -> T:\n         \"\"\"Emulate power state change on the connected emulator.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_power_ac(self, ac_state: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_power_ac(self: T, ac_state: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/power.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/power.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/power.py:65:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Power`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Power`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 65,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_len": 44,
        "target_code": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, TypeVar\n+from typing import TYPE_CHECKING, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Power'])\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Power'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Power'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_power_capacity(self, percent: int) -> T:\n        \"\"\"Emulate power capacity change on the connected emulator.\n",
        "source_code_len": 122,
        "target_code": "\n    def set_power_capacity(self: T, percent: int) -> T:\n        \"\"\"Emulate power capacity change on the connected emulator.\n",
        "target_code_len": 125,
        "diff_format": "@@ -30,3 +31,3 @@\n \n-    def set_power_capacity(self, percent: int) -> T:\n+    def set_power_capacity(self: T, percent: int) -> T:\n         \"\"\"Emulate power capacity change on the connected emulator.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def set_power_capacity(self, percent: int) -> T:\n        <IND>",
        "target_code_with_indent": "\n    def set_power_capacity(self: T, percent: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_power_ac(self, ac_state: str) -> T:\n        \"\"\"Emulate power state change on the connected emulator.\n",
        "source_code_len": 114,
        "target_code": "\n    def set_power_ac(self: T, ac_state: str) -> T:\n        \"\"\"Emulate power state change on the connected emulator.\n",
        "target_code_len": 117,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def set_power_ac(self, ac_state: str) -> T:\n+    def set_power_ac(self: T, ac_state: str) -> T:\n         \"\"\"Emulate power state change on the connected emulator.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_power_ac(self, ac_state: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_power_ac(self: T, ac_state: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/android/sms.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/android/sms.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/android/sms.py:45:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Sms`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Sms`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 45,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_len": 44,
        "target_code": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, TypeVar\n+from typing import TYPE_CHECKING, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Sms'])\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Sms'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Sms'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def send_sms(self, phone_number: str, message: str) -> T:\n        \"\"\"Emulate send SMS event on the connected emulator.\n",
        "source_code_len": 124,
        "target_code": "\n    def send_sms(self: T, phone_number: str, message: str) -> T:\n        \"\"\"Emulate send SMS event on the connected emulator.\n",
        "target_code_len": 127,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def send_sms(self, phone_number: str, message: str) -> T:\n+    def send_sms(self: T, phone_number: str, message: str) -> T:\n         \"\"\"Emulate send SMS event on the connected emulator.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <IND>def send_sms(self, phone_number: str, message: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <IND>def send_sms(self: T, phone_number: str, message: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/applications.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/applications.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/applications.py:41:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 41,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Applications(webdriver.Remote):\n    def background_app(self, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_len": 175,
        "target_code": "class Applications(webdriver.Remote):\n    def background_app(self: T, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "target_code_len": 178,
        "diff_format": "@@ -27,3 +28,3 @@\n class Applications(webdriver.Remote):\n-    def background_app(self, seconds: int) -> T:\n+    def background_app(self: T, seconds: int) -> T:\n         \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self, seconds: int) -> T:\n        <IND>",
        "target_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self: T, seconds: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def install_app(self, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_len": 134,
        "target_code": "\n    def install_app(self: T, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def install_app(self, app_path: str, **options: Any) -> T:\n+    def install_app(self: T, app_path: str, **options: Any) -> T:\n         \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def install_app(self, app_path: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def install_app(self: T, app_path: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def remove_app(self, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "source_code_len": 122,
        "target_code": "\n    def remove_app(self: T, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "target_code_len": 125,
        "diff_format": "@@ -84,3 +85,3 @@\n \n-    def remove_app(self, app_id: str, **options: Any) -> T:\n+    def remove_app(self: T, app_id: str, **options: Any) -> T:\n         \"\"\"Remove the specified application from the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def remove_app(self, app_id: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def remove_app(self: T, app_id: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def launch_app(self) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_len": 118,
        "target_code": "\n    def launch_app(self: T) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "target_code_len": 121,
        "diff_format": "@@ -107,3 +108,3 @@\n \n-    def launch_app(self) -> T:\n+    def launch_app(self: T) -> T:\n         \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def launch_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def launch_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close_app(self) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_len": 114,
        "target_code": "\n    def close_app(self: T) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "target_code_len": 117,
        "diff_format": "@@ -116,3 +117,3 @@\n \n-    def close_app(self) -> T:\n+    def close_app(self: T) -> T:\n         \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_app(self, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "source_code_len": 105,
        "target_code": "\n    def activate_app(self: T, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "target_code_len": 108,
        "diff_format": "@@ -146,3 +147,3 @@\n \n-    def activate_app(self, app_id: str) -> T:\n+    def activate_app(self: T, app_id: str) -> T:\n         \"\"\"Activates the application if it is not running\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_app(self, app_id: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_app(self: T, app_id: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "source_code_len": 84,
        "target_code": "\n    def reset(self: T) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "target_code_len": 87,
        "diff_format": "@@ -195,3 +196,3 @@\n \n-    def reset(self) -> T:\n+    def reset(self: T) -> T:\n         \"\"\"Resets the current application on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def reset(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def reset(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/applications.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/applications.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/applications.py:83:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 83,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Applications(webdriver.Remote):\n    def background_app(self, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_len": 175,
        "target_code": "class Applications(webdriver.Remote):\n    def background_app(self: T, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "target_code_len": 178,
        "diff_format": "@@ -27,3 +28,3 @@\n class Applications(webdriver.Remote):\n-    def background_app(self, seconds: int) -> T:\n+    def background_app(self: T, seconds: int) -> T:\n         \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self, seconds: int) -> T:\n        <IND>",
        "target_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self: T, seconds: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def install_app(self, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_len": 134,
        "target_code": "\n    def install_app(self: T, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def install_app(self, app_path: str, **options: Any) -> T:\n+    def install_app(self: T, app_path: str, **options: Any) -> T:\n         \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def install_app(self, app_path: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def install_app(self: T, app_path: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def remove_app(self, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "source_code_len": 122,
        "target_code": "\n    def remove_app(self: T, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "target_code_len": 125,
        "diff_format": "@@ -84,3 +85,3 @@\n \n-    def remove_app(self, app_id: str, **options: Any) -> T:\n+    def remove_app(self: T, app_id: str, **options: Any) -> T:\n         \"\"\"Remove the specified application from the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def remove_app(self, app_id: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def remove_app(self: T, app_id: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def launch_app(self) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_len": 118,
        "target_code": "\n    def launch_app(self: T) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "target_code_len": 121,
        "diff_format": "@@ -107,3 +108,3 @@\n \n-    def launch_app(self) -> T:\n+    def launch_app(self: T) -> T:\n         \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def launch_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def launch_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close_app(self) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_len": 114,
        "target_code": "\n    def close_app(self: T) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "target_code_len": 117,
        "diff_format": "@@ -116,3 +117,3 @@\n \n-    def close_app(self) -> T:\n+    def close_app(self: T) -> T:\n         \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_app(self, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "source_code_len": 105,
        "target_code": "\n    def activate_app(self: T, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "target_code_len": 108,
        "diff_format": "@@ -146,3 +147,3 @@\n \n-    def activate_app(self, app_id: str) -> T:\n+    def activate_app(self: T, app_id: str) -> T:\n         \"\"\"Activates the application if it is not running\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_app(self, app_id: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_app(self: T, app_id: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "source_code_len": 84,
        "target_code": "\n    def reset(self: T) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "target_code_len": 87,
        "diff_format": "@@ -195,3 +196,3 @@\n \n-    def reset(self) -> T:\n+    def reset(self: T) -> T:\n         \"\"\"Resets the current application on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def reset(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def reset(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/applications.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/applications.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/applications.py:106:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 106,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Applications(webdriver.Remote):\n    def background_app(self, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_len": 175,
        "target_code": "class Applications(webdriver.Remote):\n    def background_app(self: T, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "target_code_len": 178,
        "diff_format": "@@ -27,3 +28,3 @@\n class Applications(webdriver.Remote):\n-    def background_app(self, seconds: int) -> T:\n+    def background_app(self: T, seconds: int) -> T:\n         \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self, seconds: int) -> T:\n        <IND>",
        "target_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self: T, seconds: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def install_app(self, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_len": 134,
        "target_code": "\n    def install_app(self: T, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def install_app(self, app_path: str, **options: Any) -> T:\n+    def install_app(self: T, app_path: str, **options: Any) -> T:\n         \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def install_app(self, app_path: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def install_app(self: T, app_path: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def remove_app(self, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "source_code_len": 122,
        "target_code": "\n    def remove_app(self: T, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "target_code_len": 125,
        "diff_format": "@@ -84,3 +85,3 @@\n \n-    def remove_app(self, app_id: str, **options: Any) -> T:\n+    def remove_app(self: T, app_id: str, **options: Any) -> T:\n         \"\"\"Remove the specified application from the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def remove_app(self, app_id: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def remove_app(self: T, app_id: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def launch_app(self) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_len": 118,
        "target_code": "\n    def launch_app(self: T) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "target_code_len": 121,
        "diff_format": "@@ -107,3 +108,3 @@\n \n-    def launch_app(self) -> T:\n+    def launch_app(self: T) -> T:\n         \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def launch_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def launch_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close_app(self) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_len": 114,
        "target_code": "\n    def close_app(self: T) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "target_code_len": 117,
        "diff_format": "@@ -116,3 +117,3 @@\n \n-    def close_app(self) -> T:\n+    def close_app(self: T) -> T:\n         \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_app(self, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "source_code_len": 105,
        "target_code": "\n    def activate_app(self: T, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "target_code_len": 108,
        "diff_format": "@@ -146,3 +147,3 @@\n \n-    def activate_app(self, app_id: str) -> T:\n+    def activate_app(self: T, app_id: str) -> T:\n         \"\"\"Activates the application if it is not running\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_app(self, app_id: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_app(self: T, app_id: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "source_code_len": 84,
        "target_code": "\n    def reset(self: T) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "target_code_len": 87,
        "diff_format": "@@ -195,3 +196,3 @@\n \n-    def reset(self) -> T:\n+    def reset(self: T) -> T:\n         \"\"\"Resets the current application on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def reset(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def reset(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/applications.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/applications.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/applications.py:115:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 115,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Applications(webdriver.Remote):\n    def background_app(self, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_len": 175,
        "target_code": "class Applications(webdriver.Remote):\n    def background_app(self: T, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "target_code_len": 178,
        "diff_format": "@@ -27,3 +28,3 @@\n class Applications(webdriver.Remote):\n-    def background_app(self, seconds: int) -> T:\n+    def background_app(self: T, seconds: int) -> T:\n         \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self, seconds: int) -> T:\n        <IND>",
        "target_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self: T, seconds: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def install_app(self, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_len": 134,
        "target_code": "\n    def install_app(self: T, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def install_app(self, app_path: str, **options: Any) -> T:\n+    def install_app(self: T, app_path: str, **options: Any) -> T:\n         \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def install_app(self, app_path: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def install_app(self: T, app_path: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def remove_app(self, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "source_code_len": 122,
        "target_code": "\n    def remove_app(self: T, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "target_code_len": 125,
        "diff_format": "@@ -84,3 +85,3 @@\n \n-    def remove_app(self, app_id: str, **options: Any) -> T:\n+    def remove_app(self: T, app_id: str, **options: Any) -> T:\n         \"\"\"Remove the specified application from the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def remove_app(self, app_id: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def remove_app(self: T, app_id: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def launch_app(self) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_len": 118,
        "target_code": "\n    def launch_app(self: T) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "target_code_len": 121,
        "diff_format": "@@ -107,3 +108,3 @@\n \n-    def launch_app(self) -> T:\n+    def launch_app(self: T) -> T:\n         \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def launch_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def launch_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close_app(self) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_len": 114,
        "target_code": "\n    def close_app(self: T) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "target_code_len": 117,
        "diff_format": "@@ -116,3 +117,3 @@\n \n-    def close_app(self) -> T:\n+    def close_app(self: T) -> T:\n         \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_app(self, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "source_code_len": 105,
        "target_code": "\n    def activate_app(self: T, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "target_code_len": 108,
        "diff_format": "@@ -146,3 +147,3 @@\n \n-    def activate_app(self, app_id: str) -> T:\n+    def activate_app(self: T, app_id: str) -> T:\n         \"\"\"Activates the application if it is not running\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_app(self, app_id: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_app(self: T, app_id: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "source_code_len": 84,
        "target_code": "\n    def reset(self: T) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "target_code_len": 87,
        "diff_format": "@@ -195,3 +196,3 @@\n \n-    def reset(self) -> T:\n+    def reset(self: T) -> T:\n         \"\"\"Resets the current application on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def reset(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def reset(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/applications.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/applications.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/applications.py:125:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 125,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Applications(webdriver.Remote):\n    def background_app(self, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_len": 175,
        "target_code": "class Applications(webdriver.Remote):\n    def background_app(self: T, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "target_code_len": 178,
        "diff_format": "@@ -27,3 +28,3 @@\n class Applications(webdriver.Remote):\n-    def background_app(self, seconds: int) -> T:\n+    def background_app(self: T, seconds: int) -> T:\n         \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self, seconds: int) -> T:\n        <IND>",
        "target_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self: T, seconds: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def install_app(self, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_len": 134,
        "target_code": "\n    def install_app(self: T, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def install_app(self, app_path: str, **options: Any) -> T:\n+    def install_app(self: T, app_path: str, **options: Any) -> T:\n         \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def install_app(self, app_path: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def install_app(self: T, app_path: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def remove_app(self, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "source_code_len": 122,
        "target_code": "\n    def remove_app(self: T, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "target_code_len": 125,
        "diff_format": "@@ -84,3 +85,3 @@\n \n-    def remove_app(self, app_id: str, **options: Any) -> T:\n+    def remove_app(self: T, app_id: str, **options: Any) -> T:\n         \"\"\"Remove the specified application from the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def remove_app(self, app_id: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def remove_app(self: T, app_id: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def launch_app(self) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_len": 118,
        "target_code": "\n    def launch_app(self: T) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "target_code_len": 121,
        "diff_format": "@@ -107,3 +108,3 @@\n \n-    def launch_app(self) -> T:\n+    def launch_app(self: T) -> T:\n         \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def launch_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def launch_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close_app(self) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_len": 114,
        "target_code": "\n    def close_app(self: T) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "target_code_len": 117,
        "diff_format": "@@ -116,3 +117,3 @@\n \n-    def close_app(self) -> T:\n+    def close_app(self: T) -> T:\n         \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_app(self, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "source_code_len": 105,
        "target_code": "\n    def activate_app(self: T, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "target_code_len": 108,
        "diff_format": "@@ -146,3 +147,3 @@\n \n-    def activate_app(self, app_id: str) -> T:\n+    def activate_app(self: T, app_id: str) -> T:\n         \"\"\"Activates the application if it is not running\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_app(self, app_id: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_app(self: T, app_id: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "source_code_len": 84,
        "target_code": "\n    def reset(self: T) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "target_code_len": 87,
        "diff_format": "@@ -195,3 +196,3 @@\n \n-    def reset(self) -> T:\n+    def reset(self: T) -> T:\n         \"\"\"Resets the current application on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def reset(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def reset(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/applications.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/applications.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/applications.py:161:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 161,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Applications(webdriver.Remote):\n    def background_app(self, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_len": 175,
        "target_code": "class Applications(webdriver.Remote):\n    def background_app(self: T, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "target_code_len": 178,
        "diff_format": "@@ -27,3 +28,3 @@\n class Applications(webdriver.Remote):\n-    def background_app(self, seconds: int) -> T:\n+    def background_app(self: T, seconds: int) -> T:\n         \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self, seconds: int) -> T:\n        <IND>",
        "target_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self: T, seconds: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def install_app(self, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_len": 134,
        "target_code": "\n    def install_app(self: T, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def install_app(self, app_path: str, **options: Any) -> T:\n+    def install_app(self: T, app_path: str, **options: Any) -> T:\n         \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def install_app(self, app_path: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def install_app(self: T, app_path: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def remove_app(self, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "source_code_len": 122,
        "target_code": "\n    def remove_app(self: T, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "target_code_len": 125,
        "diff_format": "@@ -84,3 +85,3 @@\n \n-    def remove_app(self, app_id: str, **options: Any) -> T:\n+    def remove_app(self: T, app_id: str, **options: Any) -> T:\n         \"\"\"Remove the specified application from the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def remove_app(self, app_id: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def remove_app(self: T, app_id: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def launch_app(self) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_len": 118,
        "target_code": "\n    def launch_app(self: T) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "target_code_len": 121,
        "diff_format": "@@ -107,3 +108,3 @@\n \n-    def launch_app(self) -> T:\n+    def launch_app(self: T) -> T:\n         \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def launch_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def launch_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close_app(self) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_len": 114,
        "target_code": "\n    def close_app(self: T) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "target_code_len": 117,
        "diff_format": "@@ -116,3 +117,3 @@\n \n-    def close_app(self) -> T:\n+    def close_app(self: T) -> T:\n         \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_app(self, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "source_code_len": 105,
        "target_code": "\n    def activate_app(self: T, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "target_code_len": 108,
        "diff_format": "@@ -146,3 +147,3 @@\n \n-    def activate_app(self, app_id: str) -> T:\n+    def activate_app(self: T, app_id: str) -> T:\n         \"\"\"Activates the application if it is not running\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_app(self, app_id: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_app(self: T, app_id: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "source_code_len": 84,
        "target_code": "\n    def reset(self: T) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "target_code_len": 87,
        "diff_format": "@@ -195,3 +196,3 @@\n \n-    def reset(self) -> T:\n+    def reset(self: T) -> T:\n         \"\"\"Resets the current application on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def reset(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def reset(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/applications.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/applications.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/applications.py:200:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Applications`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 200,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Applications'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Applications(webdriver.Remote):\n    def background_app(self, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_len": 175,
        "target_code": "class Applications(webdriver.Remote):\n    def background_app(self: T, seconds: int) -> T:\n        \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "target_code_len": 178,
        "diff_format": "@@ -27,3 +28,3 @@\n class Applications(webdriver.Remote):\n-    def background_app(self, seconds: int) -> T:\n+    def background_app(self: T, seconds: int) -> T:\n         \"\"\"Puts the application in the background on the device for a certain duration.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self, seconds: int) -> T:\n        <IND>",
        "target_code_with_indent": "class Applications(webdriver.Remote):\n    <IND>def background_app(self: T, seconds: int) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def install_app(self, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_len": 134,
        "target_code": "\n    def install_app(self: T, app_path: str, **options: Any) -> T:\n        \"\"\"Install the application found at `app_path` on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def install_app(self, app_path: str, **options: Any) -> T:\n+    def install_app(self: T, app_path: str, **options: Any) -> T:\n         \"\"\"Install the application found at `app_path` on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def install_app(self, app_path: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def install_app(self: T, app_path: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def remove_app(self, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "source_code_len": 122,
        "target_code": "\n    def remove_app(self: T, app_id: str, **options: Any) -> T:\n        \"\"\"Remove the specified application from the device.\n",
        "target_code_len": 125,
        "diff_format": "@@ -84,3 +85,3 @@\n \n-    def remove_app(self, app_id: str, **options: Any) -> T:\n+    def remove_app(self: T, app_id: str, **options: Any) -> T:\n         \"\"\"Remove the specified application from the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def remove_app(self, app_id: str, **options: Any) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def remove_app(self: T, app_id: str, **options: Any) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def launch_app(self) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_len": 118,
        "target_code": "\n    def launch_app(self: T) -> T:\n        \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "target_code_len": 121,
        "diff_format": "@@ -107,3 +108,3 @@\n \n-    def launch_app(self) -> T:\n+    def launch_app(self: T) -> T:\n         \"\"\"Start on the device the application specified in the desired capabilities.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def launch_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def launch_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close_app(self) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_len": 114,
        "target_code": "\n    def close_app(self: T) -> T:\n        \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "target_code_len": 117,
        "diff_format": "@@ -116,3 +117,3 @@\n \n-    def close_app(self) -> T:\n+    def close_app(self: T) -> T:\n         \"\"\"Stop the running application, specified in the desired capabilities, on\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close_app(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close_app(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_app(self, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "source_code_len": 105,
        "target_code": "\n    def activate_app(self: T, app_id: str) -> T:\n        \"\"\"Activates the application if it is not running\n",
        "target_code_len": 108,
        "diff_format": "@@ -146,3 +147,3 @@\n \n-    def activate_app(self, app_id: str) -> T:\n+    def activate_app(self: T, app_id: str) -> T:\n         \"\"\"Activates the application if it is not running\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_app(self, app_id: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_app(self: T, app_id: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "source_code_len": 84,
        "target_code": "\n    def reset(self: T) -> T:\n        \"\"\"Resets the current application on the device.\n",
        "target_code_len": 87,
        "diff_format": "@@ -195,3 +196,3 @@\n \n-    def reset(self) -> T:\n+    def reset(self: T) -> T:\n         \"\"\"Resets the current application on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def reset(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def reset(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/clipboard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/clipboard.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/clipboard.py:52:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Clipboard`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Clipboard`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 52,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar\n\n",
        "source_code_len": 67,
        "target_code": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar, Union\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -15,3 +15,3 @@\n import base64\n-from typing import TYPE_CHECKING, Optional, TypeVar\n+from typing import TYPE_CHECKING, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Clipboard'])\n\n",
        "target_code_len": 171,
        "diff_format": "@@ -24,5 +24,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Clipboard'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Clipboard'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_clipboard(self, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "source_code_len": 154,
        "target_code": "\n    def set_clipboard(self: T, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "target_code_len": 157,
        "diff_format": "@@ -31,3 +32,3 @@\n \n-    def set_clipboard(self, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n+    def set_clipboard(self: T, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                       label: Optional[str] = None) -> T:\n",
        "source_code_with_indent": "\n    <IND>def set_clipboard(self, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def set_clipboard(self: T, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_clipboard_text(self, text: str, label: Optional[str] = None) -> T:\n        \"\"\"Copies the given text to the system clipboard\n",
        "source_code_len": 137,
        "target_code": "\n    def set_clipboard_text(self: T, text: str, label: Optional[str] = None) -> T:\n        \"\"\"Copies the given text to the system clipboard\n",
        "target_code_len": 140,
        "diff_format": "@@ -53,3 +54,3 @@\n \n-    def set_clipboard_text(self, text: str, label: Optional[str] = None) -> T:\n+    def set_clipboard_text(self: T, text: str, label: Optional[str] = None) -> T:\n         \"\"\"Copies the given text to the system clipboard\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_clipboard_text(self, text: str, label: Optional[str] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_clipboard_text(self: T, text: str, label: Optional[str] = None) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/clipboard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/clipboard.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/clipboard.py:66:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Clipboard`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Clipboard`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar\n\n",
        "source_code_len": 67,
        "target_code": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar, Union\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -15,3 +15,3 @@\n import base64\n-from typing import TYPE_CHECKING, Optional, TypeVar\n+from typing import TYPE_CHECKING, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Clipboard'])\n\n",
        "target_code_len": 171,
        "diff_format": "@@ -24,5 +24,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Clipboard'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Clipboard'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_clipboard(self, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "source_code_len": 154,
        "target_code": "\n    def set_clipboard(self: T, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "target_code_len": 157,
        "diff_format": "@@ -31,3 +32,3 @@\n \n-    def set_clipboard(self, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n+    def set_clipboard(self: T, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                       label: Optional[str] = None) -> T:\n",
        "source_code_with_indent": "\n    <IND>def set_clipboard(self, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def set_clipboard(self: T, content: bytes, content_type: str = ClipboardContentType.PLAINTEXT,\n                      label: Optional[str] = None) -> T:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_clipboard_text(self, text: str, label: Optional[str] = None) -> T:\n        \"\"\"Copies the given text to the system clipboard\n",
        "source_code_len": 137,
        "target_code": "\n    def set_clipboard_text(self: T, text: str, label: Optional[str] = None) -> T:\n        \"\"\"Copies the given text to the system clipboard\n",
        "target_code_len": 140,
        "diff_format": "@@ -53,3 +54,3 @@\n \n-    def set_clipboard_text(self, text: str, label: Optional[str] = None) -> T:\n+    def set_clipboard_text(self: T, text: str, label: Optional[str] = None) -> T:\n         \"\"\"Copies the given text to the system clipboard\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def set_clipboard_text(self, text: str, label: Optional[str] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def set_clipboard_text(self: T, text: str, label: Optional[str] = None) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/execute_mobile_command.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/execute_mobile_command.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/execute_mobile_command.py:45:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `ExecuteMobileCommand`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `ExecuteMobileCommand`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 45,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'ExecuteMobileCommand'])\n\n",
        "target_code_len": 182,
        "diff_format": "@@ -19,5 +19,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'ExecuteMobileCommand'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'ExecuteMobileCommand'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def press_button(self, button_name: str) -> T:\n        \"\"\"Sends a physical button name to the device to simulate the user pressing.\n",
        "source_code_len": 137,
        "target_code": "\n    def press_button(self: T, button_name: str) -> T:\n        \"\"\"Sends a physical button name to the device to simulate the user pressing.\n",
        "target_code_len": 140,
        "diff_format": "@@ -26,3 +27,3 @@\n \n-    def press_button(self, button_name: str) -> T:\n+    def press_button(self: T, button_name: str) -> T:\n         \"\"\"Sends a physical button name to the device to simulate the user pressing.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <IND>def press_button(self, button_name: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <IND>def press_button(self: T, button_name: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/hw_actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/hw_actions.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/hw_actions.py:46:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 46,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_len": 59,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Optional, TypeVar\n+from typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def lock(self, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_len": 140,
        "target_code": "\n    def lock(self: T, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "target_code_len": 143,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def lock(self, seconds: Optional[int] = None) -> T:\n+    def lock(self: T, seconds: Optional[int] = None) -> T:\n         \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <IND>def lock(self, seconds: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <IND>def lock(self: T, seconds: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unlock(self) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_len": 111,
        "target_code": "\n    def unlock(self: T) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "target_code_len": 114,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def unlock(self) -> T:\n+    def unlock(self: T) -> T:\n         \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def unlock(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def unlock(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def shake(self) -> T:\n        \"\"\"Shake the device.\n",
        "source_code_len": 56,
        "target_code": "\n    def shake(self: T) -> T:\n        \"\"\"Shake the device.\n",
        "target_code_len": 59,
        "diff_format": "@@ -64,3 +65,3 @@\n \n-    def shake(self) -> T:\n+    def shake(self: T) -> T:\n         \"\"\"Shake the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def shake(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def shake(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def touch_id(self, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_len": 88,
        "target_code": "\n    def touch_id(self: T, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "target_code_len": 91,
        "diff_format": "@@ -73,3 +74,3 @@\n \n-    def touch_id(self, match: bool) -> T:\n+    def touch_id(self: T, match: bool) -> T:\n         \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def touch_id(self, match: bool) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def touch_id(self: T, match: bool) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def toggle_touch_id_enrollment(self) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_len": 98,
        "target_code": "\n    def toggle_touch_id_enrollment(self: T) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "target_code_len": 101,
        "diff_format": "@@ -88,3 +89,3 @@\n \n-    def toggle_touch_id_enrollment(self) -> T:\n+    def toggle_touch_id_enrollment(self: T) -> T:\n         \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/hw_actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/hw_actions.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/hw_actions.py:55:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 55,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_len": 59,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Optional, TypeVar\n+from typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def lock(self, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_len": 140,
        "target_code": "\n    def lock(self: T, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "target_code_len": 143,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def lock(self, seconds: Optional[int] = None) -> T:\n+    def lock(self: T, seconds: Optional[int] = None) -> T:\n         \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <IND>def lock(self, seconds: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <IND>def lock(self: T, seconds: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unlock(self) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_len": 111,
        "target_code": "\n    def unlock(self: T) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "target_code_len": 114,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def unlock(self) -> T:\n+    def unlock(self: T) -> T:\n         \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def unlock(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def unlock(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def shake(self) -> T:\n        \"\"\"Shake the device.\n",
        "source_code_len": 56,
        "target_code": "\n    def shake(self: T) -> T:\n        \"\"\"Shake the device.\n",
        "target_code_len": 59,
        "diff_format": "@@ -64,3 +65,3 @@\n \n-    def shake(self) -> T:\n+    def shake(self: T) -> T:\n         \"\"\"Shake the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def shake(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def shake(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def touch_id(self, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_len": 88,
        "target_code": "\n    def touch_id(self: T, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "target_code_len": 91,
        "diff_format": "@@ -73,3 +74,3 @@\n \n-    def touch_id(self, match: bool) -> T:\n+    def touch_id(self: T, match: bool) -> T:\n         \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def touch_id(self, match: bool) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def touch_id(self: T, match: bool) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def toggle_touch_id_enrollment(self) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_len": 98,
        "target_code": "\n    def toggle_touch_id_enrollment(self: T) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "target_code_len": 101,
        "diff_format": "@@ -88,3 +89,3 @@\n \n-    def toggle_touch_id_enrollment(self) -> T:\n+    def toggle_touch_id_enrollment(self: T) -> T:\n         \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/hw_actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/hw_actions.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/hw_actions.py:72:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 72,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_len": 59,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Optional, TypeVar\n+from typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def lock(self, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_len": 140,
        "target_code": "\n    def lock(self: T, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "target_code_len": 143,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def lock(self, seconds: Optional[int] = None) -> T:\n+    def lock(self: T, seconds: Optional[int] = None) -> T:\n         \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <IND>def lock(self, seconds: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <IND>def lock(self: T, seconds: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unlock(self) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_len": 111,
        "target_code": "\n    def unlock(self: T) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "target_code_len": 114,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def unlock(self) -> T:\n+    def unlock(self: T) -> T:\n         \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def unlock(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def unlock(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def shake(self) -> T:\n        \"\"\"Shake the device.\n",
        "source_code_len": 56,
        "target_code": "\n    def shake(self: T) -> T:\n        \"\"\"Shake the device.\n",
        "target_code_len": 59,
        "diff_format": "@@ -64,3 +65,3 @@\n \n-    def shake(self) -> T:\n+    def shake(self: T) -> T:\n         \"\"\"Shake the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def shake(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def shake(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def touch_id(self, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_len": 88,
        "target_code": "\n    def touch_id(self: T, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "target_code_len": 91,
        "diff_format": "@@ -73,3 +74,3 @@\n \n-    def touch_id(self, match: bool) -> T:\n+    def touch_id(self: T, match: bool) -> T:\n         \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def touch_id(self, match: bool) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def touch_id(self: T, match: bool) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def toggle_touch_id_enrollment(self) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_len": 98,
        "target_code": "\n    def toggle_touch_id_enrollment(self: T) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "target_code_len": 101,
        "diff_format": "@@ -88,3 +89,3 @@\n \n-    def toggle_touch_id_enrollment(self) -> T:\n+    def toggle_touch_id_enrollment(self: T) -> T:\n         \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/hw_actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/hw_actions.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/hw_actions.py:87:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 87,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_len": 59,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Optional, TypeVar\n+from typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def lock(self, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_len": 140,
        "target_code": "\n    def lock(self: T, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "target_code_len": 143,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def lock(self, seconds: Optional[int] = None) -> T:\n+    def lock(self: T, seconds: Optional[int] = None) -> T:\n         \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <IND>def lock(self, seconds: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <IND>def lock(self: T, seconds: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unlock(self) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_len": 111,
        "target_code": "\n    def unlock(self: T) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "target_code_len": 114,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def unlock(self) -> T:\n+    def unlock(self: T) -> T:\n         \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def unlock(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def unlock(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def shake(self) -> T:\n        \"\"\"Shake the device.\n",
        "source_code_len": 56,
        "target_code": "\n    def shake(self: T) -> T:\n        \"\"\"Shake the device.\n",
        "target_code_len": 59,
        "diff_format": "@@ -64,3 +65,3 @@\n \n-    def shake(self) -> T:\n+    def shake(self: T) -> T:\n         \"\"\"Shake the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def shake(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def shake(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def touch_id(self, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_len": 88,
        "target_code": "\n    def touch_id(self: T, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "target_code_len": 91,
        "diff_format": "@@ -73,3 +74,3 @@\n \n-    def touch_id(self, match: bool) -> T:\n+    def touch_id(self: T, match: bool) -> T:\n         \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def touch_id(self, match: bool) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def touch_id(self: T, match: bool) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def toggle_touch_id_enrollment(self) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_len": 98,
        "target_code": "\n    def toggle_touch_id_enrollment(self: T) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "target_code_len": 101,
        "diff_format": "@@ -88,3 +89,3 @@\n \n-    def toggle_touch_id_enrollment(self) -> T:\n+    def toggle_touch_id_enrollment(self: T) -> T:\n         \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/hw_actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/hw_actions.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/hw_actions.py:96:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `HardwareActions`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 96,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_len": 59,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Optional, TypeVar\n+from typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'HardwareActions'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def lock(self, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_len": 140,
        "target_code": "\n    def lock(self: T, seconds: Optional[int] = None) -> T:\n        \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "target_code_len": 143,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def lock(self, seconds: Optional[int] = None) -> T:\n+    def lock(self: T, seconds: Optional[int] = None) -> T:\n         \"\"\"Lock the device. No changes are made if the device is already unlocked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <IND>def lock(self, seconds: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <IND>def lock(self: T, seconds: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unlock(self) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_len": 111,
        "target_code": "\n    def unlock(self: T) -> T:\n        \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "target_code_len": 114,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-    def unlock(self) -> T:\n+    def unlock(self: T) -> T:\n         \"\"\"Unlock the device. No changes are made if the device is already locked.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def unlock(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def unlock(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def shake(self) -> T:\n        \"\"\"Shake the device.\n",
        "source_code_len": 56,
        "target_code": "\n    def shake(self: T) -> T:\n        \"\"\"Shake the device.\n",
        "target_code_len": 59,
        "diff_format": "@@ -64,3 +65,3 @@\n \n-    def shake(self) -> T:\n+    def shake(self: T) -> T:\n         \"\"\"Shake the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def shake(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def shake(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def touch_id(self, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_len": 88,
        "target_code": "\n    def touch_id(self: T, match: bool) -> T:\n        \"\"\"Simulate touchId on iOS Simulator\n",
        "target_code_len": 91,
        "diff_format": "@@ -73,3 +74,3 @@\n \n-    def touch_id(self, match: bool) -> T:\n+    def touch_id(self: T, match: bool) -> T:\n         \"\"\"Simulate touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def touch_id(self, match: bool) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def touch_id(self: T, match: bool) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def toggle_touch_id_enrollment(self) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_len": 98,
        "target_code": "\n    def toggle_touch_id_enrollment(self: T) -> T:\n        \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "target_code_len": 101,
        "diff_format": "@@ -88,3 +89,3 @@\n \n-    def toggle_touch_id_enrollment(self) -> T:\n+    def toggle_touch_id_enrollment(self: T) -> T:\n         \"\"\"Toggle enroll touchId on iOS Simulator\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def toggle_touch_id_enrollment(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/ime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/ime.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/ime.py:66:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `IME`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `IME`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, List, TypeVar\n\n",
        "source_code_len": 50,
        "target_code": "\nfrom typing import TYPE_CHECKING, List, TypeVar, Union\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, List, TypeVar\n+from typing import TYPE_CHECKING, List, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, List, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, List, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'IME'])\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'IME'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'IME'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_ime_engine(self, engine: str) -> T:\n        \"\"\"Activates the given IME engine on the device.\n",
        "source_code_len": 111,
        "target_code": "\n    def activate_ime_engine(self: T, engine: str) -> T:\n        \"\"\"Activates the given IME engine on the device.\n",
        "target_code_len": 114,
        "diff_format": "@@ -49,3 +50,3 @@\n \n-    def activate_ime_engine(self, engine: str) -> T:\n+    def activate_ime_engine(self: T, engine: str) -> T:\n         \"\"\"Activates the given IME engine on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_ime_engine(self, engine: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_ime_engine(self: T, engine: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def deactivate_ime_engine(self) -> T:\n        \"\"\"Deactivates the currently active IME engine on the device.\n",
        "source_code_len": 113,
        "target_code": "\n    def deactivate_ime_engine(self: T) -> T:\n        \"\"\"Deactivates the currently active IME engine on the device.\n",
        "target_code_len": 116,
        "diff_format": "@@ -67,3 +68,3 @@\n \n-    def deactivate_ime_engine(self) -> T:\n+    def deactivate_ime_engine(self: T) -> T:\n         \"\"\"Deactivates the currently active IME engine on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def deactivate_ime_engine(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def deactivate_ime_engine(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/ime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/ime.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/ime.py:77:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `IME`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `IME`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 77,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, List, TypeVar\n\n",
        "source_code_len": 50,
        "target_code": "\nfrom typing import TYPE_CHECKING, List, TypeVar, Union\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, List, TypeVar\n+from typing import TYPE_CHECKING, List, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, List, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, List, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'IME'])\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'IME'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'IME'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate_ime_engine(self, engine: str) -> T:\n        \"\"\"Activates the given IME engine on the device.\n",
        "source_code_len": 111,
        "target_code": "\n    def activate_ime_engine(self: T, engine: str) -> T:\n        \"\"\"Activates the given IME engine on the device.\n",
        "target_code_len": 114,
        "diff_format": "@@ -49,3 +50,3 @@\n \n-    def activate_ime_engine(self, engine: str) -> T:\n+    def activate_ime_engine(self: T, engine: str) -> T:\n         \"\"\"Activates the given IME engine on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def activate_ime_engine(self, engine: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def activate_ime_engine(self: T, engine: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def deactivate_ime_engine(self) -> T:\n        \"\"\"Deactivates the currently active IME engine on the device.\n",
        "source_code_len": 113,
        "target_code": "\n    def deactivate_ime_engine(self: T) -> T:\n        \"\"\"Deactivates the currently active IME engine on the device.\n",
        "target_code_len": 116,
        "diff_format": "@@ -67,3 +68,3 @@\n \n-    def deactivate_ime_engine(self) -> T:\n+    def deactivate_ime_engine(self: T) -> T:\n         \"\"\"Deactivates the currently active IME engine on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def deactivate_ime_engine(self) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def deactivate_ime_engine(self: T) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/keyboard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/keyboard.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/keyboard.py:50:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_len": 60,
        "target_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Dict, Optional, TypeVar\n+from typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_len": 148,
        "target_code": "\n    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_len": 151,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n+    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                       = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent": "\n    <IND>def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "source_code_len": 119,
        "target_code": "\n    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "target_code_len": 122,
        "diff_format": "@@ -59,3 +60,3 @@\n \n-    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n+    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 278,
        "target_code": "\n    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found\n        in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 289,
        "diff_format": "@@ -80,6 +81,7 @@\n \n-    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found\n+        in http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 297,
        "target_code": "\n    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in\n        http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 308,
        "diff_format": "@@ -103,6 +105,7 @@\n \n-    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a long press of keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found in\n+        http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/keyboard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/keyboard.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/keyboard.py:79:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 79,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_len": 60,
        "target_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Dict, Optional, TypeVar\n+from typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_len": 148,
        "target_code": "\n    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_len": 151,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n+    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                       = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent": "\n    <IND>def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "source_code_len": 119,
        "target_code": "\n    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "target_code_len": 122,
        "diff_format": "@@ -59,3 +60,3 @@\n \n-    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n+    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 278,
        "target_code": "\n    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found\n        in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 289,
        "diff_format": "@@ -80,6 +81,7 @@\n \n-    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found\n+        in http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 297,
        "target_code": "\n    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in\n        http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 308,
        "diff_format": "@@ -103,6 +105,7 @@\n \n-    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a long press of keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found in\n+        http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/keyboard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/keyboard.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/keyboard.py:102:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 102,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_len": 60,
        "target_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Dict, Optional, TypeVar\n+from typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_len": 148,
        "target_code": "\n    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_len": 151,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n+    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                       = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent": "\n    <IND>def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "source_code_len": 119,
        "target_code": "\n    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "target_code_len": 122,
        "diff_format": "@@ -59,3 +60,3 @@\n \n-    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n+    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 278,
        "target_code": "\n    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found\n        in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 289,
        "diff_format": "@@ -80,6 +81,7 @@\n \n-    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found\n+        in http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 297,
        "target_code": "\n    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in\n        http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 308,
        "diff_format": "@@ -103,6 +105,7 @@\n \n-    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a long press of keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found in\n+        http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/keyboard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/keyboard.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/keyboard.py:125:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Keyboard`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 125,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_len": 60,
        "target_code": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Dict, Optional, TypeVar\n+from typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Dict, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Keyboard'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_len": 148,
        "target_code": "\n    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_len": 151,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-    def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n+    def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                       = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent": "\n    <IND>def hide_keyboard(self, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def hide_keyboard(self: T, key_name: Optional[str] = None, key: Optional[str]\n                      = None, strategy: Optional[str] = None) -> T:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "source_code_len": 119,
        "target_code": "\n    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n",
        "target_code_len": 122,
        "diff_format": "@@ -59,3 +60,3 @@\n \n-    def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n+    def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def keyevent(self, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def keyevent(self: T, keycode: int, metastate: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 278,
        "target_code": "\n    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a keycode to the device.\n\n        Android only. Possible keycodes can be found\n        in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 289,
        "diff_format": "@@ -80,6 +81,7 @@\n \n-    def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found\n+        in http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "source_code_len": 297,
        "target_code": "\n    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        \"\"\"Sends a long press of keycode to the device.\n\n        Android only. Possible keycodes can be found in\n        http://developer.android.com/reference/android/view/KeyEvent.html.\n\n",
        "target_code_len": 308,
        "diff_format": "@@ -103,6 +105,7 @@\n \n-    def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n+    def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n         \"\"\"Sends a long press of keycode to the device.\n \n-        Android only. Possible keycodes can be found in http://developer.android.com/reference/android/view/KeyEvent.html.\n+        Android only. Possible keycodes can be found in\n+        http://developer.android.com/reference/android/view/KeyEvent.html.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def long_press_keycode(self, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def long_press_keycode(self: T, keycode: int, metastate: Optional[int] = None, flags: Optional[int] = None) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/location.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/location.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/location.py:37:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Location`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Location`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 37,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Location'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Location'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Location'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Location(webdriver.Remote):\n    def toggle_location_services(self) -> T:\n        \"\"\"Toggle the location services on the device.\n",
        "source_code_len": 134,
        "target_code": "class Location(webdriver.Remote):\n    def toggle_location_services(self: T) -> T:\n        \"\"\"Toggle the location services on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -27,3 +28,3 @@\n class Location(webdriver.Remote):\n-    def toggle_location_services(self) -> T:\n+    def toggle_location_services(self: T) -> T:\n         \"\"\"Toggle the location services on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Location(webdriver.Remote):\n    <IND>def toggle_location_services(self) -> T:\n        <IND>",
        "target_code_with_indent": "class Location(webdriver.Remote):\n    <IND>def toggle_location_services(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_location(self,\n                     latitude: Union[float, str],\n",
        "source_code_len": 78,
        "target_code": "\n    def set_location(self: T,\n                     latitude: Union[float, str],\n",
        "target_code_len": 81,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def set_location(self,\n+    def set_location(self: T,\n                      latitude: Union[float, str],\n",
        "source_code_with_indent": "\n    <DED>def set_location(self,\n                     latitude: Union[float, str],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def set_location(self: T,\n                     latitude: Union[float, str],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/location.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/location.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/location.py:62:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Location`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Location`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 62,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Location'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Location'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Location'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Location(webdriver.Remote):\n    def toggle_location_services(self) -> T:\n        \"\"\"Toggle the location services on the device.\n",
        "source_code_len": 134,
        "target_code": "class Location(webdriver.Remote):\n    def toggle_location_services(self: T) -> T:\n        \"\"\"Toggle the location services on the device.\n",
        "target_code_len": 137,
        "diff_format": "@@ -27,3 +28,3 @@\n class Location(webdriver.Remote):\n-    def toggle_location_services(self) -> T:\n+    def toggle_location_services(self: T) -> T:\n         \"\"\"Toggle the location services on the device.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Location(webdriver.Remote):\n    <IND>def toggle_location_services(self) -> T:\n        <IND>",
        "target_code_with_indent": "class Location(webdriver.Remote):\n    <IND>def toggle_location_services(self: T) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_location(self,\n                     latitude: Union[float, str],\n",
        "source_code_len": 78,
        "target_code": "\n    def set_location(self: T,\n                     latitude: Union[float, str],\n",
        "target_code_len": 81,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def set_location(self,\n+    def set_location(self: T,\n                      latitude: Union[float, str],\n",
        "source_code_with_indent": "\n    <DED>def set_location(self,\n                     latitude: Union[float, str],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def set_location(self: T,\n                     latitude: Union[float, str],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/log_event.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/log_event.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/log_event.py:72:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `LogEvent`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `LogEvent`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 72,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'LogEvent'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'LogEvent'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'LogEvent'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def log_event(self, vendor: str, event: str) -> T:\n        \"\"\"Log a custom event on the Appium server.\n",
        "source_code_len": 108,
        "target_code": "\n    def log_event(self: T, vendor: str, event: str) -> T:\n        \"\"\"Log a custom event on the Appium server.\n",
        "target_code_len": 111,
        "diff_format": "@@ -52,3 +53,3 @@\n \n-    def log_event(self, vendor: str, event: str) -> T:\n+    def log_event(self: T, vendor: str, event: str) -> T:\n         \"\"\"Log a custom event on the Appium server.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def log_event(self, vendor: str, event: str) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def log_event(self: T, vendor: str, event: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/remote_fs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/remote_fs.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/remote_fs.py:89:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `RemoteFS`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `RemoteFS`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 89,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar\n\n",
        "source_code_len": 67,
        "target_code": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar, Union\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -15,3 +15,3 @@\n import base64\n-from typing import TYPE_CHECKING, Optional, TypeVar\n+from typing import TYPE_CHECKING, Optional, TypeVar, Union\n \n",
        "source_code_with_indent": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import base64\nfrom typing import TYPE_CHECKING, Optional, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'RemoteFS'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -23,5 +23,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'RemoteFS'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'RemoteFS'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def push_file(self, destination_path: str,\n                  base64data: Optional[str] = None, source_path: Optional[str] = None) -> T:\n",
        "source_code_len": 141,
        "target_code": "\n    def push_file(self: T, destination_path: str,\n                  base64data: Optional[str] = None, source_path: Optional[str] = None) -> T:\n",
        "target_code_len": 144,
        "diff_format": "@@ -57,3 +58,3 @@\n \n-    def push_file(self, destination_path: str,\n+    def push_file(self: T, destination_path: str,\n                   base64data: Optional[str] = None, source_path: Optional[str] = None) -> T:\n",
        "source_code_with_indent": "\n    <DED>def push_file(self, destination_path: str,\n                  base64data: Optional[str] = None, source_path: Optional[str] = None) -> T:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def push_file(self: T, destination_path: str,\n                  base64data: Optional[str] = None, source_path: Optional[str] = None) -> T:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "appium/python-client",
    "commit": "e9114576a872a20f5c2c378fc5185470586a5dd1",
    "filename": "appium/webdriver/extensions/settings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/extensions/settings.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/extensions/settings.py:50:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `Settings`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `Settings`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_len": 55,
        "target_code": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import TYPE_CHECKING, Any, Dict, TypeVar\n+from typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n \n",
        "source_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import TYPE_CHECKING, Any, Dict, TypeVar, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_len": 109,
        "target_code": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    from appium.webdriver.webdriver import WebDriver\n\nT = TypeVar('T', bound=Union['WebDriver', 'Settings'])\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -21,5 +21,6 @@\n if TYPE_CHECKING:\n+    # noinspection PyUnresolvedReferences\n     from appium.webdriver.webdriver import WebDriver\n \n-T = TypeVar('T', bound='WebDriver')\n+T = TypeVar('T', bound=Union['WebDriver', 'Settings'])\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound='WebDriver')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    # noinspection PyUnresolvedReferences\n    <IND>from appium.webdriver.webdriver import WebDriver\n\n<DED>T = TypeVar('T', bound=Union['WebDriver', 'Settings'])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update_settings(self, settings: Dict[str, Any]) -> T:\n        \"\"\"Set settings for the current session.\n",
        "source_code_len": 112,
        "target_code": "\n    def update_settings(self: T, settings: Dict[str, Any]) -> T:\n        \"\"\"Set settings for the current session.\n",
        "target_code_len": 115,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def update_settings(self, settings: Dict[str, Any]) -> T:\n+    def update_settings(self: T, settings: Dict[str, Any]) -> T:\n         \"\"\"Set settings for the current session.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def update_settings(self, settings: Dict[str, Any]) -> T:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def update_settings(self: T, settings: Dict[str, Any]) -> T:\n        <IND>"
      }
    ]
  }
]