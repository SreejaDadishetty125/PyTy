[
  {
    "project": "sissaschool/xmlschema",
    "commit": "5b3af762eadebed026262428d6e51dfd6fff61c1",
    "filename": "xmlschema/validators/helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sissaschool-xmlschema/xmlschema/validators/helpers.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xmlschema/validators/helpers.py:48:4 Incompatible return type [7]: Expected `bool` but got `Optional[str]`.",
    "message": " Expected `bool` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 48,
    "warning_line": "    return s and s.strip()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return value\n\n\ndef not_whitespace(s: Optional[str]) -> bool:\n    return s and s.strip()\n\n\ndef count_digits(number: Union[str, bytes, int, float, Decimal]) -> Tuple[int, int]:\n    \"\"\"\n    Counts the digits of a number.\n\n    :param number: an int or a float or a Decimal or a string representing a number.\n    :return: a couple with the number of digits of the integer part and \\\n    the number of digits of the decimal part.\n    \"\"\"\n    if isinstance(number, str):\n        number = str(Decimal(number)).lstrip('-+')\n    elif isinstance(number, bytes):\n        number = str(Decimal(number.decode())).lstrip('-+')\n    else:\n        number = str(number).lstrip('-+')\n\n    if 'E' in number:\n        significand, _, exponent = number.partition('E')\n    elif 'e' in number:\n        significand, _, exponent = number.partition('e')\n    elif '.' not in number:\n        return len(number.lstrip('0')), 0\n    else:\n        integer_part, _, decimal_part = number.partition('.')\n        return len(integer_part.lstrip('0')), len(decimal_part.rstrip('0'))\n\n    significand = significand.strip('0')\n    exponent = int(exponent)\n\n    num_digits = len(significand) - 1 if '.' in significand else len(significand)\n    if exponent > 0:\n        return num_digits + exponent, 0\n    else:\n        return 0, num_digits - exponent - 1\n\n\ndef strictly_equal(obj1: object, obj2: object) -> bool:\n    \"\"\"Checks if the objects are equal and are of the same type.\"\"\"\n    return obj1 == obj2 and type(obj1) is type(obj2)\n\n",
        "source_code_len": 1495,
        "target_code": "    return value\n\n",
        "target_code_len": 18,
        "diff_format": "@@ -44,46 +44,2 @@\n     return value\n-\n-\n-def not_whitespace(s: Optional[str]) -> bool:\n-    return s and s.strip()\n-\n-\n-def count_digits(number: Union[str, bytes, int, float, Decimal]) -> Tuple[int, int]:\n-    \"\"\"\n-    Counts the digits of a number.\n-\n-    :param number: an int or a float or a Decimal or a string representing a number.\n-    :return: a couple with the number of digits of the integer part and \\\n-    the number of digits of the decimal part.\n-    \"\"\"\n-    if isinstance(number, str):\n-        number = str(Decimal(number)).lstrip('-+')\n-    elif isinstance(number, bytes):\n-        number = str(Decimal(number.decode())).lstrip('-+')\n-    else:\n-        number = str(number).lstrip('-+')\n-\n-    if 'E' in number:\n-        significand, _, exponent = number.partition('E')\n-    elif 'e' in number:\n-        significand, _, exponent = number.partition('e')\n-    elif '.' not in number:\n-        return len(number.lstrip('0')), 0\n-    else:\n-        integer_part, _, decimal_part = number.partition('.')\n-        return len(integer_part.lstrip('0')), len(decimal_part.rstrip('0'))\n-\n-    significand = significand.strip('0')\n-    exponent = int(exponent)\n-\n-    num_digits = len(significand) - 1 if '.' in significand else len(significand)\n-    if exponent > 0:\n-        return num_digits + exponent, 0\n-    else:\n-        return 0, num_digits - exponent - 1\n-\n-\n-def strictly_equal(obj1: object, obj2: object) -> bool:\n-    \"\"\"Checks if the objects are equal and are of the same type.\"\"\"\n-    return obj1 == obj2 and type(obj1) is type(obj2)\n \n",
        "source_code_with_indent": "    <DED>return value\n\n\n<DED>def not_whitespace(s: Optional[str]) -> bool:\n    <IND>return s and s.strip()\n\n\n<DED>def count_digits(number: Union[str, bytes, int, float, Decimal]) -> Tuple[int, int]:\n    <IND>\"\"\"\n    Counts the digits of a number.\n\n    :param number: an int or a float or a Decimal or a string representing a number.\n    :return: a couple with the number of digits of the integer part and \\\n    the number of digits of the decimal part.\n    \"\"\"\n    if isinstance(number, str):\n        <IND>number = str(Decimal(number)).lstrip('-+')\n    <DED>elif isinstance(number, bytes):\n        <IND>number = str(Decimal(number.decode())).lstrip('-+')\n    <DED>else:\n        <IND>number = str(number).lstrip('-+')\n\n    <DED>if 'E' in number:\n        <IND>significand, _, exponent = number.partition('E')\n    <DED>elif 'e' in number:\n        <IND>significand, _, exponent = number.partition('e')\n    <DED>elif '.' not in number:\n        <IND>return len(number.lstrip('0')), 0\n    <DED>else:\n        <IND>integer_part, _, decimal_part = number.partition('.')\n        return len(integer_part.lstrip('0')), len(decimal_part.rstrip('0'))\n\n    <DED>significand = significand.strip('0')\n    exponent = int(exponent)\n\n    num_digits = len(significand) - 1 if '.' in significand else len(significand)\n    if exponent > 0:\n        <IND>return num_digits + exponent, 0\n    <DED>else:\n        <IND>return 0, num_digits - exponent - 1\n\n\n<DED><DED>def strictly_equal(obj1: object, obj2: object) -> bool:\n    <IND>\"\"\"Checks if the objects are equal and are of the same type.\"\"\"\n    return obj1 == obj2 and type(obj1) is type(obj2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>return value\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]