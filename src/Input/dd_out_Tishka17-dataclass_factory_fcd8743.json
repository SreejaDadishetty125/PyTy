[
  {
    "project": "Tishka17/dataclass_factory",
    "commit": "fcd87437f9cb00f2ff508975a5b709a58e78a8dd",
    "filename": "dataclass_factory/factory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Tishka17-dataclass_factory/dataclass_factory/factory.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dataclass_factory/factory.py:143:8 Incompatible return type [7]: Expected `typing.Callable[[typing.Any], Variable[T]]` but got `Dict[str, Dict[str, Dict[typing.Any, typing.Any]]]`.",
    "message": " Expected `typing.Callable[[typing.Any], Variable[T]]` but got `Dict[str, Dict[str, Dict[typing.Any, typing.Any]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 143,
    "warning_line": "        return {",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def json_schema(self, class_: Type[T]) -> Parser[T]:\n        return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    def json_schema_definitions(self) -> Parser[T]:\n        return {\n",
        "source_code_len": 202,
        "target_code": "\n    def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n        return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    def json_schema_definitions(self) -> Dict[str, Any]:\n        return {\n",
        "target_code_len": 212,
        "diff_format": "@@ -138,6 +138,6 @@\n \n-    def json_schema(self, class_: Type[T]) -> Parser[T]:\n+    def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n         return self._json_schema_with_stack(class_, StackedFactory(self))\n \n-    def json_schema_definitions(self) -> Parser[T]:\n+    def json_schema_definitions(self) -> Dict[str, Any]:\n         return {\n",
        "source_code_with_indent": "\n    <DED>def json_schema(self, class_: Type[T]) -> Parser[T]:\n        <IND>return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    <DED>def json_schema_definitions(self) -> Parser[T]:\n        <IND>return {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n        <IND>return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    <DED>def json_schema_definitions(self) -> Dict[str, Any]:\n        <IND>return {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n        schema = self.schema(class_)\n",
        "source_code_len": 140,
        "target_code": "\n    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n        schema = self.schema(class_)\n",
        "target_code_len": 145,
        "diff_format": "@@ -149,3 +149,3 @@\n \n-    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n+    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n         schema = self.schema(class_)\n",
        "source_code_with_indent": "\n    <DED>def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n        <IND>schema = self.schema(class_)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n        <IND>schema = self.schema(class_)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Tishka17/dataclass_factory",
    "commit": "fcd87437f9cb00f2ff508975a5b709a58e78a8dd",
    "filename": "dataclass_factory/factory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Tishka17-dataclass_factory/dataclass_factory/factory.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dataclass_factory/factory.py:154:12 Incompatible return type [7]: Expected `typing.Callable[[typing.Any], Variable[T]]` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Callable[[typing.Any], Variable[T]]` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 154,
    "warning_line": "            return self.json_schemas[name]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def json_schema(self, class_: Type[T]) -> Parser[T]:\n        return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    def json_schema_definitions(self) -> Parser[T]:\n        return {\n",
        "source_code_len": 202,
        "target_code": "\n    def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n        return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    def json_schema_definitions(self) -> Dict[str, Any]:\n        return {\n",
        "target_code_len": 212,
        "diff_format": "@@ -138,6 +138,6 @@\n \n-    def json_schema(self, class_: Type[T]) -> Parser[T]:\n+    def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n         return self._json_schema_with_stack(class_, StackedFactory(self))\n \n-    def json_schema_definitions(self) -> Parser[T]:\n+    def json_schema_definitions(self) -> Dict[str, Any]:\n         return {\n",
        "source_code_with_indent": "\n    <DED>def json_schema(self, class_: Type[T]) -> Parser[T]:\n        <IND>return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    <DED>def json_schema_definitions(self) -> Parser[T]:\n        <IND>return {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n        <IND>return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    <DED>def json_schema_definitions(self) -> Dict[str, Any]:\n        <IND>return {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n        schema = self.schema(class_)\n",
        "source_code_len": 140,
        "target_code": "\n    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n        schema = self.schema(class_)\n",
        "target_code_len": 145,
        "diff_format": "@@ -149,3 +149,3 @@\n \n-    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n+    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n         schema = self.schema(class_)\n",
        "source_code_with_indent": "\n    <DED>def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n        <IND>schema = self.schema(class_)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n        <IND>schema = self.schema(class_)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Tishka17/dataclass_factory",
    "commit": "fcd87437f9cb00f2ff508975a5b709a58e78a8dd",
    "filename": "dataclass_factory/factory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Tishka17-dataclass_factory/dataclass_factory/factory.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dataclass_factory/factory.py:157:8 Incompatible return type [7]: Expected `typing.Callable[[typing.Any], Variable[T]]` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Callable[[typing.Any], Variable[T]]` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 157,
    "warning_line": "        return json_schema",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def json_schema(self, class_: Type[T]) -> Parser[T]:\n        return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    def json_schema_definitions(self) -> Parser[T]:\n        return {\n",
        "source_code_len": 202,
        "target_code": "\n    def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n        return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    def json_schema_definitions(self) -> Dict[str, Any]:\n        return {\n",
        "target_code_len": 212,
        "diff_format": "@@ -138,6 +138,6 @@\n \n-    def json_schema(self, class_: Type[T]) -> Parser[T]:\n+    def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n         return self._json_schema_with_stack(class_, StackedFactory(self))\n \n-    def json_schema_definitions(self) -> Parser[T]:\n+    def json_schema_definitions(self) -> Dict[str, Any]:\n         return {\n",
        "source_code_with_indent": "\n    <DED>def json_schema(self, class_: Type[T]) -> Parser[T]:\n        <IND>return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    <DED>def json_schema_definitions(self) -> Parser[T]:\n        <IND>return {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def json_schema(self, class_: Type[T]) -> Dict[str, Any]:\n        <IND>return self._json_schema_with_stack(class_, StackedFactory(self))\n\n    <DED>def json_schema_definitions(self) -> Dict[str, Any]:\n        <IND>return {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n        schema = self.schema(class_)\n",
        "source_code_len": 140,
        "target_code": "\n    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n        schema = self.schema(class_)\n",
        "target_code_len": 145,
        "diff_format": "@@ -149,3 +149,3 @@\n \n-    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n+    def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n         schema = self.schema(class_)\n",
        "source_code_with_indent": "\n    <DED>def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Parser[T]:\n        <IND>schema = self.schema(class_)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _json_schema_with_stack(self, class_: Type[T], stacked_factory: StackedFactory) -> Dict[str, Any]:\n        <IND>schema = self.schema(class_)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]