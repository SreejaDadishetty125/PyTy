[
  {
    "project": "mozman/ezdxf",
    "commit": "6669adc7dbbf0caa2474008dbc7f3f5a6f9e354f",
    "filename": "src/ezdxf/entities/dictionary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/dictionary.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/dictionary.py:97:4 Inconsistent override [14]: `src.ezdxf.entities.dictionary.Dictionary._copy_data` overrides method defined in `DXFEntity` inconsistently. Parameter of type `Dictionary` is not a supertype of the overridden parameter `DXFEntity`.",
    "message": " `src.ezdxf.entities.dictionary.Dictionary._copy_data` overrides method defined in `DXFEntity` inconsistently. Parameter of type `Dictionary` is not a supertype of the overridden parameter `DXFEntity`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 97,
    "warning_line": "    def _copy_data(self, entity: \"Dictionary\") -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _copy_data(self, entity: \"Dictionary\") -> None:\n        \"\"\"Copy hard owned entities but do not store the copies in the entity\n",
        "source_code_len": 135,
        "target_code": "\n    def _copy_data(self, entity: DXFEntity) -> None:\n        \"\"\"Copy hard owned entities but do not store the copies in the entity\n",
        "target_code_len": 132,
        "diff_format": "@@ -96,3 +95,3 @@\n \n-    def _copy_data(self, entity: \"Dictionary\") -> None:\n+    def _copy_data(self, entity: DXFEntity) -> None:\n         \"\"\"Copy hard owned entities but do not store the copies in the entity\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _copy_data(self, entity: \"Dictionary\") -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _copy_data(self, entity: DXFEntity) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        entity._value_code = self._value_code\n",
        "source_code_len": 58,
        "target_code": "        \"\"\"\n        assert isinstance(entity, Dictionary)\n        entity._value_code = self._value_code\n",
        "target_code_len": 104,
        "diff_format": "@@ -100,2 +99,3 @@\n         \"\"\"\n+        assert isinstance(entity, Dictionary)\n         entity._value_code = self._value_code\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        entity._value_code = self._value_code\n",
        "target_code_with_indent": "\n        assert isinstance(entity, Dictionary)\n        entity._value_code = self._value_code\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _copy_data(self, entity: \"Dictionary\") -> None:\n        entity._default = self._default\n",
        "source_code_len": 97,
        "target_code": "\n    def _copy_data(self, entity: DXFEntity) -> None:\n        assert isinstance(entity, DictionaryWithDefault)\n        entity._default = self._default\n",
        "target_code_len": 151,
        "diff_format": "@@ -428,3 +430,4 @@\n \n-    def _copy_data(self, entity: \"Dictionary\") -> None:\n+    def _copy_data(self, entity: DXFEntity) -> None:\n+        assert isinstance(entity, DictionaryWithDefault)\n         entity._default = self._default\n",
        "source_code_with_indent": "\n    <DED>def _copy_data(self, entity: \"Dictionary\") -> None:\n        <IND>entity._default = self._default\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _copy_data(self, entity: DXFEntity) -> None:\n        <IND>assert isinstance(entity, DictionaryWithDefault)\n        entity._default = self._default\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6669adc7dbbf0caa2474008dbc7f3f5a6f9e354f",
    "filename": "src/ezdxf/entities/dictionary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/dictionary.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/dictionary.py:215:12 Incompatible return type [7]: Expected `ItemsView[typing.Any, typing.Any]` but got `typing.Generator[typing.Tuple[typing.Any, Optional[DXFEntity]], None, None]`.",
    "message": " Expected `ItemsView[typing.Any, typing.Any]` but got `typing.Generator[typing.Tuple[typing.Any, Optional[DXFEntity]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 215,
    "warning_line": "            yield key, self.get(key)  # maybe handle -> DXFEntity",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def items(self) -> ItemsView:\n        \"\"\"Returns :class:`ItemsView` for all dictionary entries as\n",
        "source_code_len": 103,
        "target_code": "\n    def items(self):\n        \"\"\"Returns :class:`ItemsView` for all dictionary entries as\n",
        "target_code_len": 90,
        "diff_format": "@@ -208,3 +209,3 @@\n \n-    def items(self) -> ItemsView:\n+    def items(self):\n         \"\"\"Returns :class:`ItemsView` for all dictionary entries as\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def items(self) -> ItemsView:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def items(self):\n        <IND>"
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6669adc7dbbf0caa2474008dbc7f3f5a6f9e354f",
    "filename": "src/ezdxf/entities/dictionary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/dictionary.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/entities/dictionary.py:223:12 Incompatible return type [7]: Expected `DXFEntity` but got `Union[DXFEntity, str]`.",
    "message": " Expected `DXFEntity` but got `Union[DXFEntity, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 223,
    "warning_line": "            return self._data[key]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if key in self._data:\n            return self._data[key]\n        else:\n",
        "source_code_len": 79,
        "target_code": "        if key in self._data:\n            return self._data[key]  # type: ignore\n        else:\n",
        "target_code_len": 95,
        "diff_format": "@@ -222,3 +223,3 @@\n         if key in self._data:\n-            return self._data[key]\n+            return self._data[key]  # type: ignore\n         else:\n",
        "source_code_with_indent": "        if key in self._data:\n            <IND>return self._data[key]\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if key in self._data:\n            <IND>return self._data[key]  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6669adc7dbbf0caa2474008dbc7f3f5a6f9e354f",
    "filename": "src/ezdxf/entities/dictionary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/dictionary.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/entities/dictionary.py:252:8 Incompatible return type [7]: Expected `Optional[DXFEntity]` but got `Union[None, DXFEntity, str]`.",
    "message": " Expected `Optional[DXFEntity]` but got `Union[None, DXFEntity, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 252,
    "warning_line": "        return self._data.get(key, default)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"Returns :class:`DXFEntity` for `key`, if `key` exist else `default`.\"\"\"\n        return self._data.get(key, default)\n\n",
        "source_code_len": 128,
        "target_code": "        \"\"\"Returns :class:`DXFEntity` for `key`, if `key` exist else `default`.\"\"\"\n        return self._data.get(key, default)  # type: ignore\n\n",
        "target_code_len": 144,
        "diff_format": "@@ -251,3 +252,3 @@\n         \"\"\"Returns :class:`DXFEntity` for `key`, if `key` exist else `default`.\"\"\"\n-        return self._data.get(key, default)\n+        return self._data.get(key, default)  # type: ignore\n \n",
        "source_code_with_indent": "        <IND>\"\"\"Returns :class:`DXFEntity` for `key`, if `key` exist else `default`.\"\"\"\n        return self._data.get(key, default)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Returns :class:`DXFEntity` for `key`, if `key` exist else `default`.\"\"\"\n        return self._data.get(key, default)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6669adc7dbbf0caa2474008dbc7f3f5a6f9e354f",
    "filename": "src/ezdxf/entities/dictionary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/dictionary.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/entities/dictionary.py:372:8 Incompatible return type [7]: Expected `Dictionary` but got `DXFEntity`.",
    "message": " Expected `Dictionary` but got `DXFEntity`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 372,
    "warning_line": "        return dxf_dict",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            dxf_dict = self.add_new_dict(key)\n        return dxf_dict\n\n",
        "source_code_len": 71,
        "target_code": "            dxf_dict = self.add_new_dict(key)\n        return dxf_dict  # type: ignore\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -371,3 +373,3 @@\n             dxf_dict = self.add_new_dict(key)\n-        return dxf_dict\n+        return dxf_dict  # type: ignore\n \n",
        "source_code_with_indent": "            <IND>dxf_dict = self.add_new_dict(key)\n        <DED>return dxf_dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>dxf_dict = self.add_new_dict(key)\n        <DED>return dxf_dict  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]