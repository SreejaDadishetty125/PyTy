[
  {
    "project": "python/mypy",
    "commit": "142851305ee948867a6e85191eb65c2e78459251",
    "filename": "mypy/semanal_typeddict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/semanal_typeddict.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/semanal_typeddict.py:295:32 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `SemanticAnalyzerInterface.schedule_patch` but got `Final`.",
    "message": " Expected `int` for 1st positional only parameter to call `SemanticAnalyzerInterface.schedule_patch` but got `Final`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 295,
    "warning_line": "        self.api.schedule_patch(PRIORITY_FALLBACKS, patch)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "                                            fallback)\n\n        def patch() -> None:\n            # Calculate the correct value type for the fallback Mapping.\n            assert info.typeddict_type, \"TypedDict type deleted before calling the patch\"\n            fallback.args[1] = join.join_type_list(list(info.typeddict_type.items.values()))\n\n        # We can't calculate the complete fallback type until after semantic\n        # analysis, since otherwise MROs might be incomplete. Postpone a callback\n        # function that patches the fallback.\n        self.api.schedule_patch(PRIORITY_FALLBACKS, patch)\n        return info\n",
        "source_code_len": 625,
        "target_code": "                                            fallback)\n        return info\n",
        "target_code_len": 74,
        "diff_format": "@@ -285,12 +285,2 @@\n                                             fallback)\n-\n-        def patch() -> None:\n-            # Calculate the correct value type for the fallback Mapping.\n-            assert info.typeddict_type, \"TypedDict type deleted before calling the patch\"\n-            fallback.args[1] = join.join_type_list(list(info.typeddict_type.items.values()))\n-\n-        # We can't calculate the complete fallback type until after semantic\n-        # analysis, since otherwise MROs might be incomplete. Postpone a callback\n-        # function that patches the fallback.\n-        self.api.schedule_patch(PRIORITY_FALLBACKS, patch)\n         return info\n",
        "source_code_with_indent": "                                            fallback)\n\n        def patch() -> None:\n            # Calculate the correct value type for the fallback Mapping.\n            <IND>assert info.typeddict_type, \"TypedDict type deleted before calling the patch\"\n            fallback.args[1] = join.join_type_list(list(info.typeddict_type.items.values()))\n\n        # We can't calculate the complete fallback type until after semantic\n        # analysis, since otherwise MROs might be incomplete. Postpone a callback\n        # function that patches the fallback.\n        <DED>self.api.schedule_patch(PRIORITY_FALLBACKS, patch)\n        return info\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                            fallback)\n        return info\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]