[
  {
    "project": "ubisoft/mixer",
    "commit": "8c0d8ef820a4aa3a1cc859ab8895dbb740bb43f0",
    "filename": "mixer/blender_data/bpy_data_proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/bpy_data_proxy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/bpy_data_proxy.py:280:51 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 280,
    "warning_line": "        bpy_data_collection_proxy = self._data.get(incoming_proxy.collection_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "source_code_len": 97,
        "target_code": "import logging\nfrom typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -27,3 +27,3 @@\n import logging\n-from typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n+from typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "RootIds = Set[T.ID]\nIDProxies = Mapping[str, DatablockProxy]\nIDs = Mapping[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_len": 128,
        "target_code": "RootIds = Set[T.ID]\nIDProxies = Dict[str, DatablockProxy]\nIDs = Dict[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "target_code_len": 122,
        "diff_format": "@@ -94,4 +94,4 @@\n RootIds = Set[T.ID]\n-IDProxies = Mapping[str, DatablockProxy]\n-IDs = Mapping[str, T.ID]\n+IDProxies = Dict[str, DatablockProxy]\n+IDs = Dict[str, T.ID]\n UnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_with_indent": "<DED><DED>RootIds = Set[T.ID]\nIDProxies = Mapping[str, DatablockProxy]\nIDs = Mapping[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>RootIds = Set[T.ID]\nIDProxies = Dict[str, DatablockProxy]\nIDs = Dict[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "8c0d8ef820a4aa3a1cc859ab8895dbb740bb43f0",
    "filename": "mixer/blender_data/bpy_data_proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/bpy_data_proxy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/bpy_data_proxy.py:296:51 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 296,
    "warning_line": "        bpy_data_collection_proxy = self._data.get(incoming_proxy.collection_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "source_code_len": 97,
        "target_code": "import logging\nfrom typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -27,3 +27,3 @@\n import logging\n-from typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n+from typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "RootIds = Set[T.ID]\nIDProxies = Mapping[str, DatablockProxy]\nIDs = Mapping[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_len": 128,
        "target_code": "RootIds = Set[T.ID]\nIDProxies = Dict[str, DatablockProxy]\nIDs = Dict[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "target_code_len": 122,
        "diff_format": "@@ -94,4 +94,4 @@\n RootIds = Set[T.ID]\n-IDProxies = Mapping[str, DatablockProxy]\n-IDs = Mapping[str, T.ID]\n+IDProxies = Dict[str, DatablockProxy]\n+IDs = Dict[str, T.ID]\n UnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_with_indent": "<DED><DED>RootIds = Set[T.ID]\nIDProxies = Mapping[str, DatablockProxy]\nIDs = Mapping[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>RootIds = Set[T.ID]\nIDProxies = Dict[str, DatablockProxy]\nIDs = Dict[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "8c0d8ef820a4aa3a1cc859ab8895dbb740bb43f0",
    "filename": "mixer/blender_data/bpy_data_proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/bpy_data_proxy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/bpy_data_proxy.py:337:55 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 337,
    "warning_line": "            bpy_data_collection_proxy = self._data.get(proxy.collection_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "source_code_len": 97,
        "target_code": "import logging\nfrom typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -27,3 +27,3 @@\n import logging\n-from typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n+from typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Mapping, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Optional, Set, Tuple, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "RootIds = Set[T.ID]\nIDProxies = Mapping[str, DatablockProxy]\nIDs = Mapping[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_len": 128,
        "target_code": "RootIds = Set[T.ID]\nIDProxies = Dict[str, DatablockProxy]\nIDs = Dict[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "target_code_len": 122,
        "diff_format": "@@ -94,4 +94,4 @@\n RootIds = Set[T.ID]\n-IDProxies = Mapping[str, DatablockProxy]\n-IDs = Mapping[str, T.ID]\n+IDProxies = Dict[str, DatablockProxy]\n+IDs = Dict[str, T.ID]\n UnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_with_indent": "<DED><DED>RootIds = Set[T.ID]\nIDProxies = Mapping[str, DatablockProxy]\nIDs = Mapping[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>RootIds = Set[T.ID]\nIDProxies = Dict[str, DatablockProxy]\nIDs = Dict[str, T.ID]\nUnresolvedRefs = Dict[str, UnresolvedRef]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "8c0d8ef820a4aa3a1cc859ab8895dbb740bb43f0",
    "filename": "mixer/blender_data/diff.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/diff.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/diff.py:119:80 Incompatible parameter type [6]: Expected `Mapping[str, DatablockProxy]` for 1st positional only parameter to call `find_renamed` but got `typing.Dict[typing.Optional[str], DatablockProxy]`.",
    "message": " Expected `Mapping[str, DatablockProxy]` for 1st positional only parameter to call `find_renamed` but got `typing.Dict[typing.Optional[str], DatablockProxy]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "        self.items_added, self.items_removed, self.items_renamed = find_renamed(proxy_items, blender_items)"
  },
  {
    "project": "ubisoft/mixer",
    "commit": "8c0d8ef820a4aa3a1cc859ab8895dbb740bb43f0",
    "filename": "mixer/blender_data/filter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/filter.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/filter.py:198:8 Incompatible return type [7]: Expected `ItemsView[typing.Any, typing.Any]` but got `typing.AbstractSet[typing.Tuple[Variable[typing._KT], Variable[typing._VT_co](covariant)]]`.",
    "message": " Expected `ItemsView[typing.Any, typing.Any]` but got `typing.AbstractSet[typing.Tuple[Variable[typing._KT], Variable[typing._VT_co](covariant)]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 198,
    "warning_line": "        return bl_rna_properties.items()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, filter_stack):\n        self._properties: Mapping[BlRna, Properties] = {}\n        self._filter_stack: FilterStack = filter_stack\n",
        "source_code_len": 151,
        "target_code": "    def __init__(self, filter_stack):\n        self._properties: Dict[BlRna, Properties] = {}\n        self._filter_stack: FilterStack = filter_stack\n",
        "target_code_len": 148,
        "diff_format": "@@ -174,3 +174,3 @@\n     def __init__(self, filter_stack):\n-        self._properties: Mapping[BlRna, Properties] = {}\n+        self._properties: Dict[BlRna, Properties] = {}\n         self._filter_stack: FilterStack = filter_stack\n",
        "source_code_with_indent": "    def __init__(self, filter_stack):\n        <IND>self._properties: Mapping[BlRna, Properties] = {}\n        self._filter_stack: FilterStack = filter_stack\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, filter_stack):\n        <IND>self._properties: Dict[BlRna, Properties] = {}\n        self._filter_stack: FilterStack = filter_stack\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]