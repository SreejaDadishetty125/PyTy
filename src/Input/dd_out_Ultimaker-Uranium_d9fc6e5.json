[
  {
    "project": "Ultimaker/Uranium",
    "commit": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "filename": "UM/PluginObject.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/PluginObject.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/PluginObject.py:15:47 Invalid type [31]: Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 15,
    "warning_line": "        self._metadata = {}  # type: Dict[str: Any]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._version = None  # type: Optional[str]\n        self._metadata = {}  # type: Dict[str: Any]\n        self._name = None  # type: Optional[str]\n",
        "source_code_len": 153,
        "target_code": "        self._version = None  # type: Optional[str]\n        self._metadata = {}  # type: Dict[str, Any]\n        self._name = None  # type: Optional[str]\n",
        "target_code_len": 153,
        "diff_format": "@@ -14,3 +14,3 @@\n         self._version = None  # type: Optional[str]\n-        self._metadata = {}  # type: Dict[str: Any]\n+        self._metadata = {}  # type: Dict[str, Any]\n         self._name = None  # type: Optional[str]\n",
        "source_code_with_indent": "        self._version = None  # type: Optional[str]\n        self._metadata = {}  # type: Dict[str: Any]\n        self._name = None  # type: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._version = None  # type: Optional[str]\n        self._metadata = {}  # type: Dict[str, Any]\n        self._name = None  # type: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "filename": "UM/PluginObject.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/PluginObject.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/PluginObject.py:31:36 Invalid type [31]: Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 31,
    "warning_line": "    def setMetaData(self, metadata: Dict[str: Any]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str: Any]:\n        return self._metadata\n",
        "source_code_len": 241,
        "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata\n",
        "target_code_len": 241,
        "diff_format": "@@ -30,6 +30,6 @@\n     #   The metadata of the plugin is set at the moment it is loaded.\n-    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n+    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n         self._metadata = metadata\n \n-    def getMetaData(self) -> Dict[str: Any]:\n+    def getMetaData(self) -> Dict[str, Any]:\n         return self._metadata\n",
        "source_code_with_indent": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str: Any]:\n        <IND>return self._metadata\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str, Any]:\n        <IND>return self._metadata\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "filename": "UM/PluginObject.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/PluginObject.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/PluginObject.py:34:29 Invalid type [31]: Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 34,
    "warning_line": "    def getMetaData(self) -> Dict[str: Any]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str: Any]:\n        return self._metadata\n",
        "source_code_len": 241,
        "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata\n",
        "target_code_len": 241,
        "diff_format": "@@ -30,6 +30,6 @@\n     #   The metadata of the plugin is set at the moment it is loaded.\n-    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n+    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n         self._metadata = metadata\n \n-    def getMetaData(self) -> Dict[str: Any]:\n+    def getMetaData(self) -> Dict[str, Any]:\n         return self._metadata\n",
        "source_code_with_indent": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str: Any]:\n        <IND>return self._metadata\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str, Any]:\n        <IND>return self._metadata\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]