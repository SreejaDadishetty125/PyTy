[
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/earl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/earl.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/earl.py:88:16 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `rdflib.term.URIRef.__new__` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `rdflib.term.URIRef.__new__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "                asserter_homepage if asserter_uri is None else asserter_uri",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if asserter_uri is not None or asserter_homepage is not None:\n            self.asserter = asserter = URIRef(\n                asserter_homepage if asserter_uri is None else asserter_uri\n            )\n            graph.add((asserter, RDF.type, FOAF.Person))\n",
        "source_code_len": 264,
        "target_code": "        if asserter_uri is not None or asserter_homepage is not None:\n            # cast to remove Optional because mypy is not smart enough to\n            # figure out that it won't be optional.\n            asserter_ref = cast(\n                str, asserter_homepage if asserter_uri is None else asserter_uri\n            )\n            self.asserter = asserter = URIRef(asserter_ref)\n            graph.add((asserter, RDF.type, FOAF.Person))\n",
        "target_code_len": 441,
        "diff_format": "@@ -86,5 +86,8 @@\n         if asserter_uri is not None or asserter_homepage is not None:\n-            self.asserter = asserter = URIRef(\n-                asserter_homepage if asserter_uri is None else asserter_uri\n+            # cast to remove Optional because mypy is not smart enough to\n+            # figure out that it won't be optional.\n+            asserter_ref = cast(\n+                str, asserter_homepage if asserter_uri is None else asserter_uri\n             )\n+            self.asserter = asserter = URIRef(asserter_ref)\n             graph.add((asserter, RDF.type, FOAF.Person))\n",
        "source_code_with_indent": "        if asserter_uri is not None or asserter_homepage is not None:\n            <IND>self.asserter = asserter = URIRef(\n                asserter_homepage if asserter_uri is None else asserter_uri\n            )\n            graph.add((asserter, RDF.type, FOAF.Person))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if asserter_uri is not None or asserter_homepage is not None:\n            # cast to remove Optional because mypy is not smart enough to\n            # figure out that it won't be optional.\n            <IND>asserter_ref = cast(\n                str, asserter_homepage if asserter_uri is None else asserter_uri\n            )\n            self.asserter = asserter = URIRef(asserter_ref)\n            graph.add((asserter, RDF.type, FOAF.Person))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_onedotone.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_onedotone.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_onedotone.py:19:0 Incompatible variable type [9]: unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str], ...]`.",
    "message": " unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str], ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 19,
    "warning_line": "unsupported_tests += (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Tuple\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,2 +3,3 @@\n import os\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -17,3 +18,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_len": 69,
        "target_code": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_len": 86,
        "diff_format": "@@ -26,3 +27,3 @@\n \n-known_bugs = (\n+known_bugs: Tuple[str, ...] = (\n     # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_onedotone.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_onedotone.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_onedotone.py:23:0 Incompatible variable type [9]: unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str, str], ...]`.",
    "message": " unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str, str], ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 23,
    "warning_line": "unsupported_tests += (\"flatten\", \"compact\", \"expand\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Tuple\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,2 +3,3 @@\n import os\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -17,3 +18,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_len": 69,
        "target_code": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_len": 86,
        "diff_format": "@@ -26,3 +27,3 @@\n \n-known_bugs = (\n+known_bugs: Tuple[str, ...] = (\n     # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_onedotone.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_onedotone.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_onedotone.py:24:0 Incompatible variable type [9]: unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "message": " unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 24,
    "warning_line": "unsupported_tests += (\"html\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Tuple\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,2 +3,3 @@\n import os\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -17,3 +18,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_len": 69,
        "target_code": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_len": 86,
        "diff_format": "@@ -26,3 +27,3 @@\n \n-known_bugs = (\n+known_bugs: Tuple[str, ...] = (\n     # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_onedotone.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_onedotone.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_onedotone.py:25:0 Incompatible variable type [9]: unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "message": " unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 25,
    "warning_line": "unsupported_tests += (\"fromRdf\",)  # The JSON-LD 1.1 enhancement applies to parsing only",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Tuple\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,2 +3,3 @@\n import os\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -17,3 +18,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_len": 69,
        "target_code": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_len": 86,
        "diff_format": "@@ -26,3 +27,3 @@\n \n-known_bugs = (\n+known_bugs: Tuple[str, ...] = (\n     # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_onedotone.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_onedotone.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_onedotone.py:143:4 Incompatible variable type [9]: known_bugs is declared to have type `typing.Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "message": " known_bugs is declared to have type `typing.Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 143,
    "warning_line": "    known_bugs += (\"toRdf/js11-in\", )",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Tuple\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,2 +3,3 @@\n import os\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -17,3 +18,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_len": 69,
        "target_code": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_len": 86,
        "diff_format": "@@ -26,3 +27,3 @@\n \n-known_bugs = (\n+known_bugs: Tuple[str, ...] = (\n     # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent": "\nknown_bugs = (\n    # TODO: Literal doesn't preserve representations\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nknown_bugs: Tuple[str, ...] = (\n    # TODO: Literal doesn't preserve representations\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_testsuite.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_testsuite.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_testsuite.py:12:0 Incompatible variable type [9]: unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str], ...]`.",
    "message": " unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str], ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 12,
    "warning_line": "unsupported_tests += (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import json\n\n",
        "source_code_len": 13,
        "target_code": "import json\nfrom typing import Tuple\n\n",
        "target_code_len": 38,
        "diff_format": "@@ -2,2 +2,3 @@\n import json\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import json\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import json\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -10,3 +11,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_testsuite.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_testsuite.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_testsuite.py:16:0 Incompatible variable type [9]: unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str, str], ...]`.",
    "message": " unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[typing.Union[str, str, str], ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 16,
    "warning_line": "unsupported_tests += (\"flatten\", \"compact\", \"expand\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import json\n\n",
        "source_code_len": 13,
        "target_code": "import json\nfrom typing import Tuple\n\n",
        "target_code_len": 38,
        "diff_format": "@@ -2,2 +2,3 @@\n import json\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import json\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import json\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -10,3 +11,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/jsonld/test_testsuite.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/jsonld/test_testsuite.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/jsonld/test_testsuite.py:17:0 Incompatible variable type [9]: unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "message": " unsupported_tests is declared to have type `typing.Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 17,
    "warning_line": "unsupported_tests += (\"html\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import json\n\n",
        "source_code_len": 13,
        "target_code": "import json\nfrom typing import Tuple\n\n",
        "target_code_len": 38,
        "diff_format": "@@ -2,2 +2,3 @@\n import json\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import json\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import json\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_len": 67,
        "target_code": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_len": 84,
        "diff_format": "@@ -10,3 +11,3 @@\n \n-unsupported_tests = (\"frame\", \"normalize\")\n+unsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\n unsupported_tests += (\n",
        "source_code_with_indent": "\nunsupported_tests = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nunsupported_tests: Tuple[str, ...] = (\"frame\", \"normalize\")\nunsupported_tests += (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/test_dawg.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/test_dawg.py:208:44 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "message": " Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 208,
    "warning_line": "    query_path: PurePath = file_uri_to_path(query)"
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/test_dawg.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/test_dawg.py:292:55 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "message": " Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 292,
    "warning_line": "                data_path: PurePath = file_uri_to_path(data)"
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/test_dawg.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/test_dawg.py:343:44 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "message": " Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 343,
    "warning_line": "    query_path: PurePath = file_uri_to_path(query)"
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/test_dawg.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/test_dawg.py:345:36 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "message": " Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 345,
    "warning_line": "    resfile_path = file_uri_to_path(resfile) if resfile else None"
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "min_patch_found": false,
    "full_warning_msg": "test/test_dawg.py:369:75 Incompatible parameter type [6]: Expected `Variable[typing.AnyStr <: [str, bytes]]` for 1st positional only parameter to call `urljoin` but got `Node`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "min_patch_found": false,
    "full_warning_msg": "test/test_dawg.py:376:37 Incompatible parameter type [6]: Expected `Variable[typing.AnyStr <: [str, bytes]]` for 1st positional only parameter to call `urljoin` but got `Node`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "min_patch_found": false,
    "full_warning_msg": "test/test_dawg.py:385:66 Incompatible parameter type [6]: Expected `Variable[typing.AnyStr <: [str, bytes]]` for 1st positional only parameter to call `urljoin` but got `Node`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/test_dawg.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/test_dawg.py:484:55 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "message": " Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 484,
    "warning_line": "                data_path: PurePath = file_uri_to_path(data)"
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/test/test_dawg.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/test_dawg.py:490:56 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "message": " Expected `str` for 1st positional only parameter to call `file_uri_to_path` but got `Node`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 490,
    "warning_line": "                    x_path: PurePath = file_uri_to_path(x)"
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "c3425a1274add61cc5cb9b71fc37c2aca803b424",
    "filename": "test/test_dawg.py",
    "min_patch_found": false,
    "full_warning_msg": "test/test_dawg.py:504:62 Incompatible parameter type [6]: Expected `Variable[typing.AnyStr <: [str, bytes]]` for 1st positional only parameter to call `urljoin` but got `Node`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  }
]