[
  {
    "project": "TheAlgorithms/Python",
    "commit": "2606f1bbe58dfc370ce1f35d3d9c51396e791fa6",
    "filename": "other/graham_scan.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/graham_scan.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/graham_scan.py:88:29 Incompatible parameter type [6]: Expected `typing.List[typing.Any]` for 2nd positional only parameter to call `list.insert` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `typing.List[typing.Any]` for 2nd positional only parameter to call `list.insert` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "    sorted_points.insert(0, (minx, miny))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef graham_scan(points: list[list[int, int]]) -> list[list[int, int]]:\n    \"\"\"Pure implementation of graham scan algorithm in Python\n",
        "source_code_len": 134,
        "target_code": "\ndef graham_scan(points: list[tuple[int, int]]) -> list[tuple[int, int]]:\n    \"\"\"Pure implementation of graham scan algorithm in Python\n",
        "target_code_len": 136,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-def graham_scan(points: list[list[int, int]]) -> list[list[int, int]]:\n+def graham_scan(points: list[tuple[int, int]]) -> list[tuple[int, int]]:\n     \"\"\"Pure implementation of graham scan algorithm in Python\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef graham_scan(points: list[list[int, int]]) -> list[list[int, int]]:\n    <IND>",
        "target_code_with_indent": "\ndef graham_scan(points: list[tuple[int, int]]) -> list[tuple[int, int]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def check_direction(\n        starting: list[int, int], via: list[int, int], target: list[int, int]\n    ) -> Direction:\n",
        "source_code_len": 123,
        "target_code": "    def check_direction(\n        starting: tuple[int, int], via: tuple[int, int], target: tuple[int, int]\n    ) -> Direction:\n",
        "target_code_len": 126,
        "diff_format": "@@ -97,3 +97,3 @@\n     def check_direction(\n-        starting: list[int, int], via: list[int, int], target: list[int, int]\n+        starting: tuple[int, int], via: tuple[int, int], target: tuple[int, int]\n     ) -> Direction:\n",
        "source_code_with_indent": "    <DED>def check_direction(\n        starting: list[int, int], via: list[int, int], target: list[int, int]\n    ) -> Direction:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def check_direction(\n        starting: tuple[int, int], via: tuple[int, int], target: tuple[int, int]\n    ) -> Direction:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "2606f1bbe58dfc370ce1f35d3d9c51396e791fa6",
    "filename": "other/graham_scan.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/graham_scan.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/graham_scan.py:138:12 Incompatible return type [7]: Expected `graham_scan.Direction` but got implicit return value of `None`.",
    "message": " Expected `graham_scan.Direction` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 138,
    "warning_line": "            return Direction.right",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef graham_scan(points: list[list[int, int]]) -> list[list[int, int]]:\n    \"\"\"Pure implementation of graham scan algorithm in Python\n",
        "source_code_len": 134,
        "target_code": "\ndef graham_scan(points: list[tuple[int, int]]) -> list[tuple[int, int]]:\n    \"\"\"Pure implementation of graham scan algorithm in Python\n",
        "target_code_len": 136,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-def graham_scan(points: list[list[int, int]]) -> list[list[int, int]]:\n+def graham_scan(points: list[tuple[int, int]]) -> list[tuple[int, int]]:\n     \"\"\"Pure implementation of graham scan algorithm in Python\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef graham_scan(points: list[list[int, int]]) -> list[list[int, int]]:\n    <IND>",
        "target_code_with_indent": "\ndef graham_scan(points: list[tuple[int, int]]) -> list[tuple[int, int]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def check_direction(\n        starting: list[int, int], via: list[int, int], target: list[int, int]\n    ) -> Direction:\n",
        "source_code_len": 123,
        "target_code": "    def check_direction(\n        starting: tuple[int, int], via: tuple[int, int], target: tuple[int, int]\n    ) -> Direction:\n",
        "target_code_len": 126,
        "diff_format": "@@ -97,3 +97,3 @@\n     def check_direction(\n-        starting: list[int, int], via: list[int, int], target: list[int, int]\n+        starting: tuple[int, int], via: tuple[int, int], target: tuple[int, int]\n     ) -> Direction:\n",
        "source_code_with_indent": "    <DED>def check_direction(\n        starting: list[int, int], via: list[int, int], target: list[int, int]\n    ) -> Direction:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def check_direction(\n        starting: tuple[int, int], via: tuple[int, int], target: tuple[int, int]\n    ) -> Direction:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return Direction.left\n        if target_angle == via_angle:\n            return Direction.straight\n        if target_angle < via_angle:\n            return Direction.right\n\n    stack = deque()\n    stack.append(sorted_points[0])\n",
        "source_code_len": 238,
        "target_code": "            return Direction.left\n        elif target_angle == via_angle:\n            return Direction.straight\n        else:\n            return Direction.right\n\n    stack: deque[tuple[int, int]] = deque()\n    stack.append(sorted_points[0])\n",
        "target_code_len": 241,
        "diff_format": "@@ -134,8 +134,8 @@\n             return Direction.left\n-        if target_angle == via_angle:\n+        elif target_angle == via_angle:\n             return Direction.straight\n-        if target_angle < via_angle:\n+        else:\n             return Direction.right\n \n-    stack = deque()\n+    stack: deque[tuple[int, int]] = deque()\n     stack.append(sorted_points[0])\n",
        "source_code_with_indent": "            <IND>return Direction.left\n        <DED>if target_angle == via_angle:\n            <IND>return Direction.straight\n        <DED>if target_angle < via_angle:\n            <IND>return Direction.right\n\n    <DED><DED>stack = deque()\n    stack.append(sorted_points[0])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return Direction.left\n        <DED>elif target_angle == via_angle:\n            <IND>return Direction.straight\n        <DED>else:\n            <IND>return Direction.right\n\n    <DED><DED>stack: deque[tuple[int, int]] = deque()\n    stack.append(sorted_points[0])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]