[
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "pystac/extensions/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/pystac/extensions/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystac/extensions/base.py:31:44 Incompatible variable type [9]: typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
    "message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
        "source_code_len": 181,
        "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        result = self.properties.get(prop_name)\n        if result is not None:\n",
        "target_code_len": 154,
        "diff_format": "@@ -30,4 +30,4 @@\n \n-    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n-        result: Optional[typ] = self.properties.get(prop_name)\n+    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n+        result = self.properties.get(prop_name)\n         if result is not None:\n",
        "source_code_with_indent": "\n    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        <IND>result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        <IND>result = self.properties.get(prop_name)\n        if result is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_projection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_projection.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_projection.py:122:50 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 122,
    "warning_line": "        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Set\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "source_code_len": 80,
        "target_code": "        # Set\n        assert proj_epsg is not None\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "target_code_len": 117,
        "diff_format": "@@ -121,2 +121,3 @@\n         # Set\n+        assert proj_epsg is not None\n         ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "source_code_with_indent": "        # Set\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Set\n        assert proj_epsg is not None\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_projection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_projection.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_projection.py:123:25 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 123,
    "warning_line": "        self.assertEqual(proj_epsg + 100, proj_item.properties[\"proj:epsg\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Set\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "source_code_len": 80,
        "target_code": "        # Set\n        assert proj_epsg is not None\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "target_code_len": 117,
        "diff_format": "@@ -121,2 +121,3 @@\n         # Set\n+        assert proj_epsg is not None\n         ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "source_code_with_indent": "        # Set\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Set\n        assert proj_epsg is not None\n        ProjectionExtension.ext(proj_item).epsg = proj_epsg + 100\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:52:49 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 52,
    "warning_line": "        ViewExtension.ext(view_item).off_nadir = view_off_nadir + 10",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "source_code_len": 145,
        "target_code": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        assert view_off_nadir is not None\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "target_code_len": 187,
        "diff_format": "@@ -48,2 +48,3 @@\n         view_off_nadir = ViewExtension.ext(view_item).off_nadir\n+        assert view_off_nadir is not None\n         self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "source_code_with_indent": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        assert view_off_nadir is not None\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:53:25 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 53,
    "warning_line": "        self.assertEqual(view_off_nadir + 10, view_item.properties[\"view:off_nadir\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "source_code_len": 145,
        "target_code": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        assert view_off_nadir is not None\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "target_code_len": 187,
        "diff_format": "@@ -48,2 +48,3 @@\n         view_off_nadir = ViewExtension.ext(view_item).off_nadir\n+        assert view_off_nadir is not None\n         self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "source_code_with_indent": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_off_nadir = ViewExtension.ext(view_item).off_nadir\n        assert view_off_nadir is not None\n        self.assertEqual(view_off_nadir, view_item.properties[\"view:off_nadir\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:87:55 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 87,
    "warning_line": "        ViewExtension.ext(view_item).incidence_angle = view_incidence_angle + 10",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        self.assertEqual(\n",
        "source_code_len": 102,
        "target_code": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        assert view_incidence_angle is not None\n        self.assertEqual(\n",
        "target_code_len": 150,
        "diff_format": "@@ -81,2 +82,3 @@\n         view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n+        assert view_incidence_angle is not None\n         self.assertEqual(\n",
        "source_code_with_indent": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        self.assertEqual(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        assert view_incidence_angle is not None\n        self.assertEqual(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:89:12 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 89,
    "warning_line": "            view_incidence_angle + 10, view_item.properties[\"view:incidence_angle\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        self.assertEqual(\n",
        "source_code_len": 102,
        "target_code": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        assert view_incidence_angle is not None\n        self.assertEqual(\n",
        "target_code_len": 150,
        "diff_format": "@@ -81,2 +82,3 @@\n         view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n+        assert view_incidence_angle is not None\n         self.assertEqual(\n",
        "source_code_with_indent": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        self.assertEqual(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_incidence_angle = ViewExtension.ext(view_item).incidence_angle\n        assert view_incidence_angle is not None\n        self.assertEqual(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:122:47 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 122,
    "warning_line": "        ViewExtension.ext(view_item).azimuth = view_azimuth + 100",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "source_code_len": 137,
        "target_code": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        assert view_azimuth is not None\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "target_code_len": 177,
        "diff_format": "@@ -118,2 +120,3 @@\n         view_azimuth = ViewExtension.ext(view_item).azimuth\n+        assert view_azimuth is not None\n         self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "source_code_with_indent": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        assert view_azimuth is not None\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:123:25 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 123,
    "warning_line": "        self.assertEqual(view_azimuth + 100, view_item.properties[\"view:azimuth\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "source_code_len": 137,
        "target_code": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        assert view_azimuth is not None\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "target_code_len": 177,
        "diff_format": "@@ -118,2 +120,3 @@\n         view_azimuth = ViewExtension.ext(view_item).azimuth\n+        assert view_azimuth is not None\n         self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "source_code_with_indent": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_azimuth = ViewExtension.ext(view_item).azimuth\n        assert view_azimuth is not None\n        self.assertEqual(view_azimuth, view_item.properties[\"view:azimuth\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:155:51 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 155,
    "warning_line": "        ViewExtension.ext(view_item).sun_azimuth = view_sun_azimuth + 100",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "source_code_len": 153,
        "target_code": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        assert view_sun_azimuth is not None\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "target_code_len": 197,
        "diff_format": "@@ -151,2 +154,3 @@\n         view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n+        assert view_sun_azimuth is not None\n         self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "source_code_with_indent": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        assert view_sun_azimuth is not None\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:157:12 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 157,
    "warning_line": "            view_sun_azimuth + 100, view_item.properties[\"view:sun_azimuth\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "source_code_len": 153,
        "target_code": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        assert view_sun_azimuth is not None\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "target_code_len": 197,
        "diff_format": "@@ -151,2 +154,3 @@\n         view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n+        assert view_sun_azimuth is not None\n         self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "source_code_with_indent": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_sun_azimuth = ViewExtension.ext(view_item).sun_azimuth\n        assert view_sun_azimuth is not None\n        self.assertEqual(view_sun_azimuth, view_item.properties[\"view:sun_azimuth\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:190:53 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 190,
    "warning_line": "        ViewExtension.ext(view_item).sun_elevation = view_sun_elevation + 10",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "source_code_len": 161,
        "target_code": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        assert view_sun_elevation is not None\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "target_code_len": 207,
        "diff_format": "@@ -186,2 +190,3 @@\n         view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n+        assert view_sun_elevation is not None\n         self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "source_code_with_indent": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        assert view_sun_elevation is not None\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/extensions/test_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/extensions/test_view.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/extensions/test_view.py:192:12 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 192,
    "warning_line": "            view_sun_elevation + 10, view_item.properties[\"view:sun_elevation\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "source_code_len": 161,
        "target_code": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        assert view_sun_elevation is not None\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "target_code_len": 207,
        "diff_format": "@@ -186,2 +190,3 @@\n         view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n+        assert view_sun_elevation is not None\n         self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "source_code_with_indent": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_sun_elevation = ViewExtension.ext(view_item).sun_elevation\n        assert view_sun_elevation is not None\n        self.assertEqual(view_sun_elevation, view_item.properties[\"view:sun_elevation\"])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "stac-utils/pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "tests/test_link.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac/tests/test_link.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_link.py:95:39 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 1st positional only parameter to call `pystac.link.Link.from_dict` but got `typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], typing.Dict[str, str]]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 1st positional only parameter to call `pystac.link.Link.from_dict` but got `typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], typing.Dict[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "            d2 = pystac.Link.from_dict(d).to_dict()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            {\"rel\": \"r\", \"href\": \"/t\"},\n            {\"rel\": \"r\", \"href\": \"t\", \"type\": \"a/b\", \"title\": \"t\", \"c\": \"d\", 1: 2},\n            # Special case.\n",
        "source_code_len": 152,
        "target_code": "            {\"rel\": \"r\", \"href\": \"/t\"},\n            {\"rel\": \"r\", \"href\": \"t\", \"type\": \"a/b\", \"title\": \"t\", \"c\": \"d\", \"1\": 2},\n            # Special case.\n",
        "target_code_len": 154,
        "diff_format": "@@ -89,3 +91,3 @@\n             {\"rel\": \"r\", \"href\": \"/t\"},\n-            {\"rel\": \"r\", \"href\": \"t\", \"type\": \"a/b\", \"title\": \"t\", \"c\": \"d\", 1: 2},\n+            {\"rel\": \"r\", \"href\": \"t\", \"type\": \"a/b\", \"title\": \"t\", \"c\": \"d\", \"1\": 2},\n             # Special case.\n",
        "source_code_with_indent": "            {\"rel\": \"r\", \"href\": \"/t\"},\n            {\"rel\": \"r\", \"href\": \"t\", \"type\": \"a/b\", \"title\": \"t\", \"c\": \"d\", 1: 2},\n            # Special case.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            {\"rel\": \"r\", \"href\": \"/t\"},\n            {\"rel\": \"r\", \"href\": \"t\", \"type\": \"a/b\", \"title\": \"t\", \"c\": \"d\", \"1\": 2},\n            # Special case.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]