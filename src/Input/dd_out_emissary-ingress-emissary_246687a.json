[
  {
    "project": "emissary-ingress/emissary",
    "commit": "246687a20f7111833df58432d95c9312cd80e8de",
    "filename": "ambassador/ambassador/envoy/v2/v2listener.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2listener.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2listener.py:412:46 Incompatible parameter type [6]: Expected `typing.Union[List[Dict[typing.Any, typing.Any]], V2TLSContext]` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, List[str]]`.",
    "message": " Expected `typing.Union[List[Dict[typing.Any, typing.Any]], V2TLSContext]` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 412,
    "warning_line": "                chain['filter_chain_match'] = {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for name, hosts, ctx in envoy_contexts:\n            config.ir.logger.info(\"V2Listener: SNI route check %s, %s, %s\" % (name, hosts, json.dumps(ctx, indent=4, sort_keys=True)))\n\n            chain = {\n                'tls_context': ctx,\n                'routes': list(self.routes)\n            }\n\n",
        "source_code_len": 301,
        "target_code": "        for name, hosts, ctx in envoy_contexts:\n            config.ir.logger.info(\"V2Listener: SNI route check %s, %s, %s\" %\n                                  (name, hosts, json.dumps(ctx, indent=4, sort_keys=True)))\n\n            routes = list(self.routes)\n\n            chain: Dict[str, Any] = { 'tls_context': ctx }\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -403,8 +403,8 @@\n         for name, hosts, ctx in envoy_contexts:\n-            config.ir.logger.info(\"V2Listener: SNI route check %s, %s, %s\" % (name, hosts, json.dumps(ctx, indent=4, sort_keys=True)))\n-\n-            chain = {\n-                'tls_context': ctx,\n-                'routes': list(self.routes)\n-            }\n+            config.ir.logger.info(\"V2Listener: SNI route check %s, %s, %s\" %\n+                                  (name, hosts, json.dumps(ctx, indent=4, sort_keys=True)))\n+\n+            routes = list(self.routes)\n+\n+            chain: Dict[str, Any] = { 'tls_context': ctx }\n \n",
        "source_code_with_indent": "        <DED>for name, hosts, ctx in envoy_contexts:\n            <IND>config.ir.logger.info(\"V2Listener: SNI route check %s, %s, %s\" % (name, hosts, json.dumps(ctx, indent=4, sort_keys=True)))\n\n            chain = {\n                'tls_context': ctx,\n                'routes': list(self.routes)\n            }\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>for name, hosts, ctx in envoy_contexts:\n            <IND>config.ir.logger.info(\"V2Listener: SNI route check %s, %s, %s\" %\n                                  (name, hosts, json.dumps(ctx, indent=4, sort_keys=True)))\n\n            routes = list(self.routes)\n\n            chain: Dict[str, Any] = { 'tls_context': ctx }\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "246687a20f7111833df58432d95c9312cd80e8de",
    "filename": "ambassador/ambassador/envoy/v2/v2ratelimitaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2ratelimitaction.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2ratelimitaction.py:34:12 Incompatible variable type [9]: rate_limit is declared to have type `Dict[str, typing.Any]` but is used as type `typing.List[Variable[_T]]`.",
    "message": " rate_limit is declared to have type `Dict[str, typing.Any]` but is used as type `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "            rate_limit = []",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, ClassVar, Dict, TYPE_CHECKING\n\nfrom ...utils import RichStatus\n\n",
        "source_code_len": 89,
        "target_code": "\nfrom typing import Any, ClassVar, Dict, List, TYPE_CHECKING\n\n# from ...utils import RichStatus\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -14,5 +14,5 @@\n \n-from typing import Any, ClassVar, Dict, TYPE_CHECKING\n+from typing import Any, ClassVar, Dict, List, TYPE_CHECKING\n \n-from ...utils import RichStatus\n+# from ...utils import RichStatus\n \n",
        "source_code_with_indent": "\nfrom typing import Any, ClassVar, Dict, TYPE_CHECKING\n\nfrom ...utils import RichStatus\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, ClassVar, Dict, List, TYPE_CHECKING\n\n# from ...utils import RichStatus\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.stage = 0\n        self.actions = []\n\n        if rate_limit == {}:\n            rate_limit = []\n\n",
        "source_code_len": 108,
        "target_code": "        self.stage = 0\n        self.actions: List[dict] = []\n\n        # if rate_limit == {}:\n        #     rate_limit = []\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -30,6 +30,6 @@\n         self.stage = 0\n-        self.actions = []\n+        self.actions: List[dict] = []\n \n-        if rate_limit == {}:\n-            rate_limit = []\n+        # if rate_limit == {}:\n+        #     rate_limit = []\n \n",
        "source_code_with_indent": "        self.stage = 0\n        self.actions = []\n\n        if rate_limit == {}:\n            <IND>rate_limit = []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.stage = 0\n        self.actions: List[dict] = []\n\n        # if rate_limit == {}:\n        #     rate_limit = []\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "                # WTF.\n                err = RichStatus.fromError()\n                config.ir.post_error(\"Label for RateLimit is not valid: %s\" % action)\n",
        "source_code_len": 154,
        "target_code": "                # WTF.\n                config.ir.post_error(\"Label for RateLimit is not valid: %s\" % action)\n",
        "target_code_len": 109,
        "diff_format": "@@ -111,3 +111,2 @@\n                 # WTF.\n-                err = RichStatus.fromError()\n                 config.ir.post_error(\"Label for RateLimit is not valid: %s\" % action)\n",
        "source_code_with_indent": "                # WTF.\n                <IND>err = RichStatus.fromError()\n                config.ir.post_error(\"Label for RateLimit is not valid: %s\" % action)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # WTF.\n                <IND>config.ir.post_error(\"Label for RateLimit is not valid: %s\" % action)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "246687a20f7111833df58432d95c9312cd80e8de",
    "filename": "ambassador/ambassador/ir/irauth.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/ir/irauth.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/ir/irauth.py:108:24 Incompatible parameter type [6]: Expected `Optional[ambassador.ambassador.ir.irresource.IRResource]` for 2nd parameter `resource` to call `IR.post_error` but got `Resource`.",
    "message": " Expected `Optional[ambassador.ambassador.ir.irresource.IRResource]` for 2nd parameter `resource` to call `IR.post_error` but got `Resource`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "                        resource=module",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    # Don't use self.post_error() here, since we need to explicitly override the\n                    # resource.\n                    self.ir.post_error(\n                        \"AuthService cannot support multiple %s values; using %s\" % (key, previous),\n",
        "source_code_len": 270,
        "target_code": "                    # Don't use self.post_error() here, since we need to explicitly override the\n                    # resource. And don't use self.ir.post_error, since our module isn't an IRResource.\n                    self.ir.aconf.post_error(\n                        \"AuthService cannot support multiple %s values; using %s\" % (key, previous),\n",
        "target_code_len": 348,
        "diff_format": "@@ -104,4 +103,4 @@\n                     # Don't use self.post_error() here, since we need to explicitly override the\n-                    # resource.\n-                    self.ir.post_error(\n+                    # resource. And don't use self.ir.post_error, since our module isn't an IRResource.\n+                    self.ir.aconf.post_error(\n                         \"AuthService cannot support multiple %s values; using %s\" % (key, previous),\n",
        "source_code_with_indent": "                    # Don't use self.post_error() here, since we need to explicitly override the\n                    # resource.\n                    <IND>self.ir.post_error(\n                        \"AuthService cannot support multiple %s values; using %s\" % (key, previous),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    # Don't use self.post_error() here, since we need to explicitly override the\n                    # resource. And don't use self.ir.post_error, since our module isn't an IRResource.\n                    <IND>self.ir.aconf.post_error(\n                        \"AuthService cannot support multiple %s values; using %s\" % (key, previous),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "246687a20f7111833df58432d95c9312cd80e8de",
    "filename": "ambassador/ambassador/ir/irlistener.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/ir/irlistener.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/ir/irlistener.py:97:16 Incompatible parameter type [6]: Expected `int` for 4th parameter `service_port` to call `IRListener.__init__` but got `str`.",
    "message": " Expected `int` for 4th parameter `service_port` to call `IRListener.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 97,
    "warning_line": "                service_port=redirect_cleartext_from,"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "246687a20f7111833df58432d95c9312cd80e8de",
    "filename": "ambassador/ambassador/ir/irmapping.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/ir/irmapping.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/ir/irmapping.py:186:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[str, typing.Any]`.",
    "message": " Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 186,
    "warning_line": "                    label.append({ 'generic_key': rate_limit_descriptor })",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                label = [\n                    'source_cluster',\n",
        "source_code_len": 65,
        "target_code": "\n                label: List[Any] = [\n                    'source_cluster',\n",
        "target_code_len": 76,
        "diff_format": "@@ -175,3 +175,3 @@\n \n-                label = [\n+                label: List[Any] = [\n                     'source_cluster',\n",
        "source_code_with_indent": "\n                label = [\n                    'source_cluster',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                label: List[Any] = [\n                    'source_cluster',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "246687a20f7111833df58432d95c9312cd80e8de",
    "filename": "ambassador/ambassador/ir/irmapping.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/ir/irmapping.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/ir/irmapping.py:192:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[typing.Any, Dict[str, typing.Any]]`.",
    "message": " Expected `str` for 1st positional only parameter to call `list.append` but got `Dict[typing.Any, Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 192,
    "warning_line": "                    label.append({",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                label = [\n                    'source_cluster',\n",
        "source_code_len": 65,
        "target_code": "\n                label: List[Any] = [\n                    'source_cluster',\n",
        "target_code_len": 76,
        "diff_format": "@@ -175,3 +175,3 @@\n \n-                label = [\n+                label: List[Any] = [\n                     'source_cluster',\n",
        "source_code_with_indent": "\n                label = [\n                    'source_cluster',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                label: List[Any] = [\n                    'source_cluster',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "246687a20f7111833df58432d95c9312cd80e8de",
    "filename": "ambassador/ambassador/ir/irtlscontext.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/ir/irtlscontext.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/ir/irtlscontext.py:54:19 Unbound name [10]: Name `st` is used but not defined in the current scope.",
    "message": " Name `st` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 54,
    "warning_line": "        self.name: st = config.get('name')",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.name: st = config.get('name')\n        self.hosts = config.get('hosts')\n",
        "source_code_len": 85,
        "target_code": "\n        self.name = config.get('name')\n        self.hosts = config.get('hosts')\n",
        "target_code_len": 81,
        "diff_format": "@@ -53,3 +53,3 @@\n \n-        self.name: st = config.get('name')\n+        self.name = config.get('name')\n         self.hosts = config.get('hosts')\n",
        "source_code_with_indent": "\n        self.name: st = config.get('name')\n        self.hosts = config.get('hosts')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self.name = config.get('name')\n        self.hosts = config.get('hosts')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]