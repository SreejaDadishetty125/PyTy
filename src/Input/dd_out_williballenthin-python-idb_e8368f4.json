[
  {
    "project": "williballenthin/python-idb",
    "commit": "e8368f412a5c9fc20040807c56d83c3f35aa1373",
    "filename": "idb/fileformat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/williballenthin-python-idb/idb/fileformat.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "idb/fileformat.py:1040:15 Unbound name [10]: Name `v_prim` is used but not defined in the current scope.",
    "message": " Name `v_prim` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 1040,
    "warning_line": "class v_zbytes(v_prim):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass v_zbytes(v_prim):\n    \"\"\"\n    A v_zbytes placeholder class which will automatically return\n    up to a null terminator bytes dynamically.\n    \"\"\"\n\n    _vs_builder = True\n\n    def __init__(self, val=b\"\"):\n        v_prim.__init__(self)\n        self.vsParse(val + b\"\\x00\")\n\n    def vsParse(self, fbytes, offset=0):\n        nulloff = fbytes.find(b\"\\x00\", offset)\n        if nulloff == -1:\n            raise Exception(self.__class__.__name__ + \" found no NULL terminator!\")\n\n        self._vs_value = fbytes[offset:nulloff]\n        self._vs_length = len(self._vs_value)\n        return nulloff + 1\n\n    def vsEmit(self):\n        return self._vs_value\n\n    def vsGetValue(self):\n        return self._vs_value\n\n    def vsSetValue(self, val):\n        self._vs_value = val\n        self._vs_length = len(self._vs_value)\n\n    def vsSetLength(self, size):\n        raise Exception(\n            \"Cannot vsSetLength on {}! (its dynamic)\".format(self.__class__.__name__)\n        )\n\n\nclass TILTypeInfo(vstruct.VStruct):\n",
        "source_code_len": 1008,
        "target_code": "\nclass TILTypeInfo(vstruct.VStruct):\n",
        "target_code_len": 37,
        "diff_format": "@@ -1039,39 +1039,2 @@\n \n-class v_zbytes(v_prim):\n-    \"\"\"\n-    A v_zbytes placeholder class which will automatically return\n-    up to a null terminator bytes dynamically.\n-    \"\"\"\n-\n-    _vs_builder = True\n-\n-    def __init__(self, val=b\"\"):\n-        v_prim.__init__(self)\n-        self.vsParse(val + b\"\\x00\")\n-\n-    def vsParse(self, fbytes, offset=0):\n-        nulloff = fbytes.find(b\"\\x00\", offset)\n-        if nulloff == -1:\n-            raise Exception(self.__class__.__name__ + \" found no NULL terminator!\")\n-\n-        self._vs_value = fbytes[offset:nulloff]\n-        self._vs_length = len(self._vs_value)\n-        return nulloff + 1\n-\n-    def vsEmit(self):\n-        return self._vs_value\n-\n-    def vsGetValue(self):\n-        return self._vs_value\n-\n-    def vsSetValue(self, val):\n-        self._vs_value = val\n-        self._vs_length = len(self._vs_value)\n-\n-    def vsSetLength(self, size):\n-        raise Exception(\n-            \"Cannot vsSetLength on {}! (its dynamic)\".format(self.__class__.__name__)\n-        )\n-\n-\n class TILTypeInfo(vstruct.VStruct):\n",
        "source_code_with_indent": "\n<DED><DED>class v_zbytes(v_prim):\n    <IND>\"\"\"\n    A v_zbytes placeholder class which will automatically return\n    up to a null terminator bytes dynamically.\n    \"\"\"\n\n    _vs_builder = True\n\n    def __init__(self, val=b\"\"):\n        <IND>v_prim.__init__(self)\n        self.vsParse(val + b\"\\x00\")\n\n    <DED>def vsParse(self, fbytes, offset=0):\n        <IND>nulloff = fbytes.find(b\"\\x00\", offset)\n        if nulloff == -1:\n            <IND>raise Exception(self.__class__.__name__ + \" found no NULL terminator!\")\n\n        <DED>self._vs_value = fbytes[offset:nulloff]\n        self._vs_length = len(self._vs_value)\n        return nulloff + 1\n\n    <DED>def vsEmit(self):\n        <IND>return self._vs_value\n\n    <DED>def vsGetValue(self):\n        <IND>return self._vs_value\n\n    <DED>def vsSetValue(self, val):\n        <IND>self._vs_value = val\n        self._vs_length = len(self._vs_value)\n\n    <DED>def vsSetLength(self, size):\n        <IND>raise Exception(\n            \"Cannot vsSetLength on {}! (its dynamic)\".format(self.__class__.__name__)\n        )\n\n\n<DED><DED>class TILTypeInfo(vstruct.VStruct):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class TILTypeInfo(vstruct.VStruct):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]