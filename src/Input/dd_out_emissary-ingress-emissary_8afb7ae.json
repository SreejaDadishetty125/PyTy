[
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/fetch/knative.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/fetch/knative.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/fetch/knative.py:169:75 Incompatible parameter type [6]: Expected `typing.Tuple[str, str, Optional[Dict[str, typing.Any]]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Tuple[str, Optional[str], Dict[str, typing.Any]]`.",
    "message": " Expected `typing.Tuple[str, str, Optional[Dict[str, typing.Any]]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Tuple[str, Optional[str], Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 169,
    "warning_line": "            self.aconf.k8s_status_updates[f\"{obj.name}.{obj.namespace}\"] = status_update",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            status = self._make_status(generation=obj.generation, lb_domain=current_lb_domain)\n            status_update = (obj.gvk.domain, obj.namespace, status)\n\n            self.logger.info(f\"Updating Knative {obj.kind} {obj.name} status to {status_update}\")\n            self.aconf.k8s_status_updates[f\"{obj.name}.{obj.namespace}\"] = status_update\n        else:\n",
        "source_code_len": 365,
        "target_code": "            status = self._make_status(generation=obj.generation, lb_domain=current_lb_domain)\n\n            if status:\n                status_update = (obj.gvk.domain, obj.namespace or 'default', status)\n                self.logger.info(f\"Updating Knative {obj.kind} {obj.name} status to {status_update}\")\n                self.aconf.k8s_status_updates[f\"{obj.name}.{obj.namespace}\"] = status_update\n        else:\n",
        "target_code_len": 413,
        "diff_format": "@@ -165,6 +165,7 @@\n             status = self._make_status(generation=obj.generation, lb_domain=current_lb_domain)\n-            status_update = (obj.gvk.domain, obj.namespace, status)\n \n-            self.logger.info(f\"Updating Knative {obj.kind} {obj.name} status to {status_update}\")\n-            self.aconf.k8s_status_updates[f\"{obj.name}.{obj.namespace}\"] = status_update\n+            if status:\n+                status_update = (obj.gvk.domain, obj.namespace or 'default', status)\n+                self.logger.info(f\"Updating Knative {obj.kind} {obj.name} status to {status_update}\")\n+                self.aconf.k8s_status_updates[f\"{obj.name}.{obj.namespace}\"] = status_update\n         else:\n",
        "source_code_with_indent": "            <IND>status = self._make_status(generation=obj.generation, lb_domain=current_lb_domain)\n            status_update = (obj.gvk.domain, obj.namespace, status)\n\n            self.logger.info(f\"Updating Knative {obj.kind} {obj.name} status to {status_update}\")\n            self.aconf.k8s_status_updates[f\"{obj.name}.{obj.namespace}\"] = status_update\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>status = self._make_status(generation=obj.generation, lb_domain=current_lb_domain)\n\n            if status:\n                <IND>status_update = (obj.gvk.domain, obj.namespace or 'default', status)\n                self.logger.info(f\"Updating Knative {obj.kind} {obj.name} status to {status_update}\")\n                self.aconf.k8s_status_updates[f\"{obj.name}.{obj.namespace}\"] = status_update\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/ir.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/ir.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/ir.py:363:39 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 363,
    "warning_line": "            host_args[\"requestPolicy\"][\"insecure\"][\"action\"] = \"Route\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args = {\n            \"hostname\": \"*\",\n",
        "source_code_len": 147,
        "target_code": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args: Dict[str, Any] = {\n            \"hostname\": \"*\",\n",
        "target_code_len": 163,
        "diff_format": "@@ -337,3 +346,3 @@\n         # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n-        host_args = {\n+        host_args: Dict[str, Any] = {\n             \"hostname\": \"*\",\n",
        "source_code_with_indent": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args = {\n            \"hostname\": \"*\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args: Dict[str, Any] = {\n            \"hostname\": \"*\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/ir.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/ir.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/ir.py:367:24 Incompatible parameter type [6]: Expected `Optional[str]` for 6th positional only parameter to call `IRHost.__init__` but got `Union[Dict[str, Dict[str, int]], Dict[str, Dict[str, str]], Dict[str, str], str]`.",
    "message": " Expected `Optional[str]` for 6th positional only parameter to call `IRHost.__init__` but got `Union[Dict[str, Dict[str, int]], Dict[str, Dict[str, str]], Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 367,
    "warning_line": "                      **host_args)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args = {\n            \"hostname\": \"*\",\n",
        "source_code_len": 147,
        "target_code": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args: Dict[str, Any] = {\n            \"hostname\": \"*\",\n",
        "target_code_len": 163,
        "diff_format": "@@ -337,3 +346,3 @@\n         # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n-        host_args = {\n+        host_args: Dict[str, Any] = {\n             \"hostname\": \"*\",\n",
        "source_code_with_indent": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args = {\n            \"hostname\": \"*\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args: Dict[str, Any] = {\n            \"hostname\": \"*\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/ir.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/ir.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/ir.py:367:24 Incompatible parameter type [6]: Expected `str` for 6th positional only parameter to call `IRHost.__init__` but got `Union[Dict[str, Dict[str, int]], Dict[str, Dict[str, str]], Dict[str, str], str]`.",
    "message": " Expected `str` for 6th positional only parameter to call `IRHost.__init__` but got `Union[Dict[str, Dict[str, int]], Dict[str, Dict[str, str]], Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 367,
    "warning_line": "                      **host_args)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args = {\n            \"hostname\": \"*\",\n",
        "source_code_len": 147,
        "target_code": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args: Dict[str, Any] = {\n            \"hostname\": \"*\",\n",
        "target_code_len": 163,
        "diff_format": "@@ -337,3 +346,3 @@\n         # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n-        host_args = {\n+        host_args: Dict[str, Any] = {\n             \"hostname\": \"*\",\n",
        "source_code_with_indent": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args = {\n            \"hostname\": \"*\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # case will we do ACME. Set additionalPort to -1 so we don't grab 8080 in the TLS case.\n        host_args: Dict[str, Any] = {\n            \"hostname\": \"*\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irbasemapping.py",
    "min_patch_found": false,
    "full_warning_msg": "python/ambassador/ir/irbasemapping.py:102:55 Incompatible parameter type [6]: Expected `Optional[str]` for 8th parameter `metadata_labels` to call `IRResource.__init__` but got `Optional[Dict[str, str]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:120:27 Unsupported operand [58]: `in` is not supported for right operand type `Optional[IRTLSContext]`.",
    "message": " `in` is not supported for right operand type `Optional[IRTLSContext]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 120,
    "warning_line": "                        if 'hosts' in host_tls_context:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        host_tls_context = ir.get_tls_context(host_tls_context_name)\n\n",
        "source_code_len": 86,
        "target_code": "                        host_tls_context = ir.get_tls_context(host_tls_context_name)\n                        assert(host_tls_context)    # For mypy -- we checked above to be sure it exists.\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -100,2 +100,3 @@\n                         host_tls_context = ir.get_tls_context(host_tls_context_name)\n+                        assert(host_tls_context)    # For mypy -- we checked above to be sure it exists.\n \n",
        "source_code_with_indent": "                        <DED>host_tls_context = ir.get_tls_context(host_tls_context_name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        <DED>host_tls_context = ir.get_tls_context(host_tls_context_name)\n                        assert(host_tls_context)    # For mypy -- we checked above to be sure it exists.\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:183:71 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, str]]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `Optional[typing.Dict[str, str]]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "                        tls_config_context = IRTLSContext(ir, aconf, **tls_context_init, **host_tls_config)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:183:71 Incompatible parameter type [6]: Expected `Optional[bool]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `Optional[bool]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "                        tls_config_context = IRTLSContext(ir, aconf, **tls_context_init, **host_tls_config)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:183:71 Incompatible parameter type [6]: Expected `Optional[str]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `Optional[str]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "                        tls_config_context = IRTLSContext(ir, aconf, **tls_context_init, **host_tls_config)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:183:71 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "                        tls_config_context = IRTLSContext(ir, aconf, **tls_context_init, **host_tls_config)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:217:56 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, str]]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `Optional[typing.Dict[str, str]]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "                        ctx = IRTLSContext(ir, aconf, **new_ctx)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:217:56 Incompatible parameter type [6]: Expected `Optional[bool]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `Optional[bool]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "                        ctx = IRTLSContext(ir, aconf, **new_ctx)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:217:56 Incompatible parameter type [6]: Expected `Optional[str]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `Optional[str]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "                        ctx = IRTLSContext(ir, aconf, **new_ctx)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:217:56 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[None, typing.List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "                        ctx = IRTLSContext(ir, aconf, **new_ctx)"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/ir/irhost.py:358:57 Incompatible parameter type [6]: Expected `typing.Union[typing_extensions.Literal[True], typing.List[str], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing_extensions.Literal[8080]`.",
    "message": " Expected `typing.Union[typing_extensions.Literal[True], typing.List[str], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing_extensions.Literal[8080]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 358,
    "warning_line": "                    new_ctx['redirect_cleartext_from'] = 8080"
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "python/ambassador/ir/irhost.py:360:48 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, str]]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "message": " Expected `Optional[typing.Dict[str, str]]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "                ctx = IRTLSContext(ir, aconf, **new_ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_len": 59,
        "target_code": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_len": 268,
        "diff_format": "@@ -359,3 +370,5 @@\n \n-                ctx = IRTLSContext(ir, aconf, **new_ctx)\n+                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n+                # everything I've tried just causes more trouble elsewhere. (Flynn)\n+                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n \n",
        "source_code_with_indent": "\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "python/ambassador/ir/irhost.py:360:48 Incompatible parameter type [6]: Expected `Optional[bool]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "message": " Expected `Optional[bool]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "                ctx = IRTLSContext(ir, aconf, **new_ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_len": 59,
        "target_code": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_len": 268,
        "diff_format": "@@ -359,3 +370,5 @@\n \n-                ctx = IRTLSContext(ir, aconf, **new_ctx)\n+                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n+                # everything I've tried just causes more trouble elsewhere. (Flynn)\n+                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n \n",
        "source_code_with_indent": "\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "python/ambassador/ir/irhost.py:360:48 Incompatible parameter type [6]: Expected `Optional[str]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "message": " Expected `Optional[str]` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "                ctx = IRTLSContext(ir, aconf, **new_ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_len": 59,
        "target_code": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_len": 268,
        "diff_format": "@@ -359,3 +370,5 @@\n \n-                ctx = IRTLSContext(ir, aconf, **new_ctx)\n+                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n+                # everything I've tried just causes more trouble elsewhere. (Flynn)\n+                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n \n",
        "source_code_with_indent": "\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irhost.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/ir/irhost.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "python/ambassador/ir/irhost.py:360:48 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `IRTLSContext.__init__` but got `typing.Union[bool, typing.List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "                ctx = IRTLSContext(ir, aconf, **new_ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_len": 59,
        "target_code": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_len": 268,
        "diff_format": "@@ -359,3 +370,5 @@\n \n-                ctx = IRTLSContext(ir, aconf, **new_ctx)\n+                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n+                # everything I've tried just causes more trouble elsewhere. (Flynn)\n+                ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n \n",
        "source_code_with_indent": "\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                # XXX mypy doesn't like Dict[str, object] as the keyword args to IRTLSContext, but so far,\n                # everything I've tried just causes more trouble elsewhere. (Flynn)\n                <DED>ctx = IRTLSContext(ir, aconf, **new_ctx)    # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/ir/irtlscontext.py",
    "min_patch_found": false,
    "full_warning_msg": "python/ambassador/ir/irtlscontext.py:79:55 Incompatible parameter type [6]: Expected `Optional[str]` for 8th parameter `metadata_labels` to call `IRResource.__init__` but got `Optional[Dict[str, str]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:750:52 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 750,
    "warning_line": "        return self.cache_internal(name, namespace, tls_crt, tls_key, user_key, root_crt)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "source_code_len": 163,
        "target_code": "\n    def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "target_code_len": 249,
        "diff_format": "@@ -751,3 +751,5 @@\n \n-    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n+    def cache_internal(self, name: str, namespace: str,\n+                       tls_crt: Optional[str], tls_key: Optional[str],\n+                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n         h = hashlib.new('sha1')\n",
        "source_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:750:61 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 750,
    "warning_line": "        return self.cache_internal(name, namespace, tls_crt, tls_key, user_key, root_crt)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "source_code_len": 163,
        "target_code": "\n    def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "target_code_len": 249,
        "diff_format": "@@ -751,3 +751,5 @@\n \n-    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n+    def cache_internal(self, name: str, namespace: str,\n+                       tls_crt: Optional[str], tls_key: Optional[str],\n+                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n         h = hashlib.new('sha1')\n",
        "source_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:750:70 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "message": " Expected `str` for 5th positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 750,
    "warning_line": "        return self.cache_internal(name, namespace, tls_crt, tls_key, user_key, root_crt)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "source_code_len": 163,
        "target_code": "\n    def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "target_code_len": 249,
        "diff_format": "@@ -751,3 +751,5 @@\n \n-    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n+    def cache_internal(self, name: str, namespace: str,\n+                       tls_crt: Optional[str], tls_key: Optional[str],\n+                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n         h = hashlib.new('sha1')\n",
        "source_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador/utils.py:750:80 Incompatible parameter type [6]: Expected `str` for 6th positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "message": " Expected `str` for 6th positional only parameter to call `SecretHandler.cache_internal` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 750,
    "warning_line": "        return self.cache_internal(name, namespace, tls_crt, tls_key, user_key, root_crt)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "source_code_len": 163,
        "target_code": "\n    def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        h = hashlib.new('sha1')\n",
        "target_code_len": 249,
        "diff_format": "@@ -751,3 +751,5 @@\n \n-    def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n+    def cache_internal(self, name: str, namespace: str,\n+                       tls_crt: Optional[str], tls_key: Optional[str],\n+                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n         h = hashlib.new('sha1')\n",
        "source_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str, tls_crt: str, tls_key: str, user_key: str, root_crt: str) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def cache_internal(self, name: str, namespace: str,\n                       tls_crt: Optional[str], tls_key: Optional[str],\n                       user_key: Optional[str], root_crt: Optional[str]) -> SavedSecret:\n        <IND>h = hashlib.new('sha1')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador_cli/mockery.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador_cli/mockery.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador_cli/mockery.py:137:38 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `WatchSpec._star` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `WatchSpec._star` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "        s = f\"{self.kind}|{self._star(self.namespace)}|{self._star(self._fieldstr())}|{self._star(self._labelstr())}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _star(s: str) -> str:\n        return s if s else \"*\"\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def _star(s: Optional[str]) -> str:\n        return s if s else \"*\"\n",
        "target_code_len": 89,
        "diff_format": "@@ -132,3 +132,3 @@\n     @staticmethod\n-    def _star(s: str) -> str:\n+    def _star(s: Optional[str]) -> str:\n         return s if s else \"*\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _star(s: str) -> str:\n        <IND>return s if s else \"*\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _star(s: Optional[str]) -> str:\n        <IND>return s if s else \"*\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador_cli/mockery.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador_cli/mockery.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador_cli/mockery.py:148:45 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `WatchSpec._star` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `WatchSpec._star` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 148,
    "warning_line": "            return f\"{self.kind}|{self._star(self.namespace)}|{self._star(self._fieldstr())}|{self._star(self._labelstr())}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _star(s: str) -> str:\n        return s if s else \"*\"\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def _star(s: Optional[str]) -> str:\n        return s if s else \"*\"\n",
        "target_code_len": 89,
        "diff_format": "@@ -132,3 +132,3 @@\n     @staticmethod\n-    def _star(s: str) -> str:\n+    def _star(s: Optional[str]) -> str:\n         return s if s else \"*\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _star(s: str) -> str:\n        <IND>return s if s else \"*\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _star(s: Optional[str]) -> str:\n        <IND>return s if s else \"*\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador_diag/diagd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador_diag/diagd.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador_diag/diagd.py:304:42 Unsupported operand [58]: `+` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `+` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 304,
    "warning_line": "        self.next_timer_log = base_time + delta",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def ok_to_log_timers(self, base_time: Optional[float]=None, delta: Optional[float]=10.0) -> None:\n        \"\"\"\n",
        "source_code_len": 115,
        "target_code": "\n    def ok_to_log_timers(self, base_time: Optional[float]=None, delta: float=10.0) -> None:\n        \"\"\"\n",
        "target_code_len": 105,
        "diff_format": "@@ -294,3 +300,3 @@\n \n-    def ok_to_log_timers(self, base_time: Optional[float]=None, delta: Optional[float]=10.0) -> None:\n+    def ok_to_log_timers(self, base_time: Optional[float]=None, delta: float=10.0) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def ok_to_log_timers(self, base_time: Optional[float]=None, delta: Optional[float]=10.0) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def ok_to_log_timers(self, base_time: Optional[float]=None, delta: float=10.0) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "8afb7aede22c526a3099e3ec699ec15ac5293b88",
    "filename": "python/ambassador_diag/diagd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/python/ambassador_diag/diagd.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ambassador_diag/diagd.py:1609:34 Incompatible parameter type [6]: Expected `Union[int, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `bytes`.",
    "message": " Expected `Union[int, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1609,
    "warning_line": "                odict['output'] = subprocess.check_output(command, stderr=subprocess.STDOUT, timeout=timeout)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "source_code_len": 103,
        "target_code": "import subprocess\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_len": 145,
        "diff_format": "@@ -17,3 +17,4 @@\n import subprocess\n-from typing import Any, Callable, Dict, List, Optional, Tuple, Union, TYPE_CHECKING\n+from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union, TYPE_CHECKING\n+from typing import cast as typecast\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        command = ['envoy', '--config-path', econf_validation_path, '--mode', 'validate']\n        odict = {\n            'exit_code': 0,\n            'output': ''\n        }\n\n",
        "source_code_len": 172,
        "target_code": "        command = ['envoy', '--config-path', econf_validation_path, '--mode', 'validate']\n\n        v_exit = 0\n        v_encoded = ''.encode('utf-8')\n\n",
        "target_code_len": 150,
        "diff_format": "@@ -1597,6 +1606,5 @@\n         command = ['envoy', '--config-path', econf_validation_path, '--mode', 'validate']\n-        odict = {\n-            'exit_code': 0,\n-            'output': ''\n-        }\n+\n+        v_exit = 0\n+        v_encoded = ''.encode('utf-8')\n \n",
        "source_code_with_indent": "        <DED>command = ['envoy', '--config-path', econf_validation_path, '--mode', 'validate']\n        odict = {\n            'exit_code': 0,\n            'output': ''\n        }\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>command = ['envoy', '--config-path', econf_validation_path, '--mode', 'validate']\n\n        v_exit = 0\n        v_encoded = ''.encode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            try:\n                odict['output'] = subprocess.check_output(command, stderr=subprocess.STDOUT, timeout=timeout)\n                odict['exit_code'] = 0\n                break\n            except subprocess.CalledProcessError as e:\n                odict['exit_code'] = e.returncode\n                odict['output'] = e.output\n                break\n            except subprocess.TimeoutExpired as e:\n                odict['exit_code'] = 1\n                odict['output'] = e.output or ''\n                self.logger.warn(\"envoy configuration validation timed out after {} seconds{}\\n{}\",\n                    timeout, ', retrying...' if retry < retries - 1 else '', odict['output'])\n                continue\n\n        if odict['exit_code'] == 0:\n            self.logger.debug(\"successfully validated the resulting envoy configuration, continuing...\")\n",
        "source_code_len": 858,
        "target_code": "            try:\n                v_encoded = subprocess.check_output(command, stderr=subprocess.STDOUT, timeout=timeout)\n                v_exit = 0\n                break\n            except subprocess.CalledProcessError as e:\n                v_exit = e.returncode\n                v_encoded = e.output\n                break\n            except subprocess.TimeoutExpired as e:\n                v_exit = 1\n                v_encoded = e.output or ''.encode('utf-8')\n\n                self.logger.warn(\"envoy configuration validation timed out after {} seconds{}\\n{}\",\n                    timeout, ', retrying...' if retry < retries - 1 else '', v_encoded.decode('utf-8'))\n                continue\n\n        if v_exit == 0:\n            self.logger.debug(\"successfully validated the resulting envoy configuration, continuing...\")\n",
        "target_code_len": 819,
        "diff_format": "@@ -1608,17 +1616,18 @@\n             try:\n-                odict['output'] = subprocess.check_output(command, stderr=subprocess.STDOUT, timeout=timeout)\n-                odict['exit_code'] = 0\n+                v_encoded = subprocess.check_output(command, stderr=subprocess.STDOUT, timeout=timeout)\n+                v_exit = 0\n                 break\n             except subprocess.CalledProcessError as e:\n-                odict['exit_code'] = e.returncode\n-                odict['output'] = e.output\n+                v_exit = e.returncode\n+                v_encoded = e.output\n                 break\n             except subprocess.TimeoutExpired as e:\n-                odict['exit_code'] = 1\n-                odict['output'] = e.output or ''\n+                v_exit = 1\n+                v_encoded = e.output or ''.encode('utf-8')\n+\n                 self.logger.warn(\"envoy configuration validation timed out after {} seconds{}\\n{}\",\n-                    timeout, ', retrying...' if retry < retries - 1 else '', odict['output'])\n+                    timeout, ', retrying...' if retry < retries - 1 else '', v_encoded.decode('utf-8'))\n                 continue\n \n-        if odict['exit_code'] == 0:\n+        if v_exit == 0:\n             self.logger.debug(\"successfully validated the resulting envoy configuration, continuing...\")\n",
        "source_code_with_indent": "            <IND>try:\n                <IND>odict['output'] = subprocess.check_output(command, stderr=subprocess.STDOUT, timeout=timeout)\n                odict['exit_code'] = 0\n                break\n            <DED>except subprocess.CalledProcessError as e:\n                <IND>odict['exit_code'] = e.returncode\n                odict['output'] = e.output\n                break\n            <DED>except subprocess.TimeoutExpired as e:\n                <IND>odict['exit_code'] = 1\n                odict['output'] = e.output or ''\n                self.logger.warn(\"envoy configuration validation timed out after {} seconds{}\\n{}\",\n                    timeout, ', retrying...' if retry < retries - 1 else '', odict['output'])\n                continue\n\n        <DED><DED>if odict['exit_code'] == 0:\n            <IND>self.logger.debug(\"successfully validated the resulting envoy configuration, continuing...\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>try:\n                <IND>v_encoded = subprocess.check_output(command, stderr=subprocess.STDOUT, timeout=timeout)\n                v_exit = 0\n                break\n            <DED>except subprocess.CalledProcessError as e:\n                <IND>v_exit = e.returncode\n                v_encoded = e.output\n                break\n            <DED>except subprocess.TimeoutExpired as e:\n                <IND>v_exit = 1\n                v_encoded = e.output or ''.encode('utf-8')\n\n                self.logger.warn(\"envoy configuration validation timed out after {} seconds{}\\n{}\",\n                    timeout, ', retrying...' if retry < retries - 1 else '', v_encoded.decode('utf-8'))\n                continue\n\n        <DED><DED>if v_exit == 0:\n            <IND>self.logger.debug(\"successfully validated the resulting envoy configuration, continuing...\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        try:\n            decoded_error = odict['output'].decode('utf-8')\n            odict['output'] = decoded_error\n        except:\n",
        "source_code_len": 134,
        "target_code": "\n        v_str = typecast(str, v_encoded)\n\n        try:\n            v_str = v_encoded.decode('utf-8')\n        except:\n",
        "target_code_len": 118,
        "diff_format": "@@ -1626,5 +1635,6 @@\n \n+        v_str = typecast(str, v_encoded)\n+\n         try:\n-            decoded_error = odict['output'].decode('utf-8')\n-            odict['output'] = decoded_error\n+            v_str = v_encoded.decode('utf-8')\n         except:\n",
        "source_code_with_indent": "\n        <DED>try:\n            <IND>decoded_error = odict['output'].decode('utf-8')\n            odict['output'] = decoded_error\n        <DED>except:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>v_str = typecast(str, v_encoded)\n\n        try:\n            <IND>v_str = v_encoded.decode('utf-8')\n        <DED>except:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.logger.error(\"{}\\ncould not validate the envoy configuration above after {} retries, failed with error \\n{}\\nAborting update...\".format(config_json, retries, odict['output']))\n        return False\n",
        "source_code_len": 211,
        "target_code": "\n        self.logger.error(\"{}\\ncould not validate the envoy configuration above after {} retries, failed with error \\n{}\\n(exit code {})\\nAborting update...\".format(config_json, retries, v_str, v_exit))\n        return False\n",
        "target_code_len": 225,
        "diff_format": "@@ -1632,3 +1642,3 @@\n \n-        self.logger.error(\"{}\\ncould not validate the envoy configuration above after {} retries, failed with error \\n{}\\nAborting update...\".format(config_json, retries, odict['output']))\n+        self.logger.error(\"{}\\ncould not validate the envoy configuration above after {} retries, failed with error \\n{}\\n(exit code {})\\nAborting update...\".format(config_json, retries, v_str, v_exit))\n         return False\n",
        "source_code_with_indent": "\n        <DED>self.logger.error(\"{}\\ncould not validate the envoy configuration above after {} retries, failed with error \\n{}\\nAborting update...\".format(config_json, retries, odict['output']))\n        return False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self.logger.error(\"{}\\ncould not validate the envoy configuration above after {} retries, failed with error \\n{}\\n(exit code {})\\nAborting update...\".format(config_json, retries, v_str, v_exit))\n        return False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]