[
  {
    "project": "PUNCH-Cyber/stoq",
    "commit": "b185b12df1eb72012cdc98c4bdc51252fd52430d",
    "filename": "stoq/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PUNCH-Cyber-stoq/stoq/core.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stoq/core.py:630:28 Incompatible parameter type [6]: Expected `typing.Iterable[Tuple[Payload, str]]` for 1st positional only parameter to call `set.update` but got `typing.Generator[Tuple[ExtractedPayload, typing.Any], None, None]`.",
    "message": " Expected `typing.Iterable[Tuple[Payload, str]]` for 1st positional only parameter to call `set.update` but got `typing.Generator[Tuple[ExtractedPayload, typing.Any], None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 630,
    "warning_line": "                            (extracted_payload, add_dispatch)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, request: Request, add_dispatches: Set[Tuple[Payload, str]]\n    ) -> Optional[Tuple[List[ExtractedPayload], Set[Tuple[Payload, str]]]]:\n        # Form total set of dispatches to run\n",
        "source_code_len": 195,
        "target_code": "        self, request: Request, add_dispatches: Set[Tuple[Payload, str]]\n    ) -> Optional[Tuple[List[Payload], Set[Tuple[Payload, str]]]]:\n        # Form total set of dispatches to run\n",
        "target_code_len": 186,
        "diff_format": "@@ -702,3 +702,3 @@\n         self, request: Request, add_dispatches: Set[Tuple[Payload, str]]\n-    ) -> Optional[Tuple[List[ExtractedPayload], Set[Tuple[Payload, str]]]]:\n+    ) -> Optional[Tuple[List[Payload], Set[Tuple[Payload, str]]]]:\n         # Form total set of dispatches to run\n",
        "source_code_with_indent": "        self, request: Request, add_dispatches: Set[Tuple[Payload, str]]\n    ) -> Optional[Tuple[List[ExtractedPayload], Set[Tuple[Payload, str]]]]:\n        # Form total set of dispatches to run\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, request: Request, add_dispatches: Set[Tuple[Payload, str]]\n    ) -> Optional[Tuple[List[Payload], Set[Tuple[Payload, str]]]]:\n        # Form total set of dispatches to run\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PUNCH-Cyber/stoq",
    "commit": "b185b12df1eb72012cdc98c4bdc51252fd52430d",
    "filename": "stoq/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PUNCH-Cyber-stoq/stoq/core.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stoq/core.py:728:8 Incompatible variable type [9]: nested_worker_results is declared to have type `List[Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]]` but is used as type `Tuple[Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]]`.",
    "message": " nested_worker_results is declared to have type `List[Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]]` but is used as type `Tuple[Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 728,
    "warning_line": "        nested_worker_results: List[",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Run plugins\n        nested_worker_results: List[\n            Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]\n        ] = await asyncio.gather(\n",
        "source_code_len": 161,
        "target_code": "        # Run plugins\n        nested_worker_results: List[  # type: ignore\n            Tuple[Set[Tuple[Payload, str]], List[Payload]]\n        ] = await asyncio.gather(\n",
        "target_code_len": 168,
        "diff_format": "@@ -727,4 +727,4 @@\n         # Run plugins\n-        nested_worker_results: List[\n-            Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]\n+        nested_worker_results: List[  # type: ignore\n+            Tuple[Set[Tuple[Payload, str]], List[Payload]]\n         ] = await asyncio.gather(\n",
        "source_code_with_indent": "        # Run plugins\n        nested_worker_results: List[\n            Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]\n        ] = await asyncio.gather(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Run plugins\n        nested_worker_results: List[  # type: ignore\n            Tuple[Set[Tuple[Payload, str]], List[Payload]]\n        ] = await asyncio.gather(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PUNCH-Cyber/stoq",
    "commit": "b185b12df1eb72012cdc98c4bdc51252fd52430d",
    "filename": "stoq/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PUNCH-Cyber-stoq/stoq/core.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stoq/core.py:747:39 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Optional[List[str]]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Optional[List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 747,
    "warning_line": "        worker_plugins: Set[str] = set(self.always_dispatch)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        }\n        self.always_dispatch = always_dispatch\n        if not self.always_dispatch:\n",
        "source_code_len": 94,
        "target_code": "        }\n        self.always_dispatch = always_dispatch or []\n        if not self.always_dispatch:\n",
        "target_code_len": 100,
        "diff_format": "@@ -481,3 +481,3 @@\n         }\n-        self.always_dispatch = always_dispatch\n+        self.always_dispatch = always_dispatch or []\n         if not self.always_dispatch:\n",
        "source_code_with_indent": "        }\n        self.always_dispatch = always_dispatch\n        if not self.always_dispatch:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        }\n        self.always_dispatch = always_dispatch or []\n        if not self.always_dispatch:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PUNCH-Cyber/stoq",
    "commit": "b185b12df1eb72012cdc98c4bdc51252fd52430d",
    "filename": "stoq/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PUNCH-Cyber-stoq/stoq/core.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stoq/core.py:748:8 Incompatible variable type [9]: dispatch_results is declared to have type `List[Set[str]]` but is used as type `Tuple[Set[str]]`.",
    "message": " dispatch_results is declared to have type `List[Set[str]]` but is used as type `Tuple[Set[str]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 748,
    "warning_line": "        dispatch_results: List[Set[str]] = await asyncio.gather(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        worker_plugins: Set[str] = set(self.always_dispatch)\n        dispatch_results: List[Set[str]] = await asyncio.gather(\n            *[\n",
        "source_code_len": 141,
        "target_code": "        worker_plugins: Set[str] = set(self.always_dispatch)\n        dispatch_results: List[Set[str]] = await asyncio.gather(  # type: ignore\n            *[\n",
        "target_code_len": 157,
        "diff_format": "@@ -747,3 +747,3 @@\n         worker_plugins: Set[str] = set(self.always_dispatch)\n-        dispatch_results: List[Set[str]] = await asyncio.gather(\n+        dispatch_results: List[Set[str]] = await asyncio.gather(  # type: ignore\n             *[\n",
        "source_code_with_indent": "        <IND>worker_plugins: Set[str] = set(self.always_dispatch)\n        dispatch_results: List[Set[str]] = await asyncio.gather(\n            *[\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>worker_plugins: Set[str] = set(self.always_dispatch)\n        dispatch_results: List[Set[str]] = await asyncio.gather(  # type: ignore\n            *[\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PUNCH-Cyber/stoq",
    "commit": "b185b12df1eb72012cdc98c4bdc51252fd52430d",
    "filename": "stoq/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PUNCH-Cyber-stoq/stoq/core.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stoq/core.py:806:12 Incompatible variable type [9]: plugin is declared to have type `stoq.plugins.worker.WorkerPlugin` but is used as type `stoq.plugins.base.BasePlugin`.",
    "message": " plugin is declared to have type `stoq.plugins.worker.WorkerPlugin` but is used as type `stoq.plugins.base.BasePlugin`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 806,
    "warning_line": "            plugin: WorkerPlugin = self.load_plugin(plugin_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            plugin: WorkerPlugin = self.load_plugin(plugin_name)\n        except Exception as e:\n",
        "source_code_len": 109,
        "target_code": "        try:\n            plugin: WorkerPlugin = self.load_plugin(plugin_name)  # type: ignore\n        except Exception as e:\n",
        "target_code_len": 125,
        "diff_format": "@@ -805,3 +805,3 @@\n         try:\n-            plugin: WorkerPlugin = self.load_plugin(plugin_name)\n+            plugin: WorkerPlugin = self.load_plugin(plugin_name)  # type: ignore\n         except Exception as e:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>plugin: WorkerPlugin = self.load_plugin(plugin_name)\n        <DED>except Exception as e:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>plugin: WorkerPlugin = self.load_plugin(plugin_name)  # type: ignore\n        <DED>except Exception as e:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PUNCH-Cyber/stoq",
    "commit": "b185b12df1eb72012cdc98c4bdc51252fd52430d",
    "filename": "stoq/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PUNCH-Cyber-stoq/stoq/core.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stoq/core.py:917:8 Incompatible variable type [9]: extracted_payloads is declared to have type `List[ExtractedPayload]` but is used as type `List[Payload]`.",
    "message": " extracted_payloads is declared to have type `List[ExtractedPayload]` but is used as type `List[Payload]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 917,
    "warning_line": "        extracted_payloads: List[ExtractedPayload] = [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Run plugins\n        nested_worker_results: List[\n            Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]\n        ] = await asyncio.gather(\n",
        "source_code_len": 161,
        "target_code": "        # Run plugins\n        nested_worker_results: List[  # type: ignore\n            Tuple[Set[Tuple[Payload, str]], List[Payload]]\n        ] = await asyncio.gather(\n",
        "target_code_len": 168,
        "diff_format": "@@ -727,4 +727,4 @@\n         # Run plugins\n-        nested_worker_results: List[\n-            Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]\n+        nested_worker_results: List[  # type: ignore\n+            Tuple[Set[Tuple[Payload, str]], List[Payload]]\n         ] = await asyncio.gather(\n",
        "source_code_with_indent": "        # Run plugins\n        nested_worker_results: List[\n            Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]\n        ] = await asyncio.gather(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Run plugins\n        nested_worker_results: List[  # type: ignore\n            Tuple[Set[Tuple[Payload, str]], List[Payload]]\n        ] = await asyncio.gather(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, payload: Payload, plugin: WorkerPlugin, request: Request\n    ) -> Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]:\n        self.log.debug(\n",
        "source_code_len": 161,
        "target_code": "        self, payload: Payload, plugin: WorkerPlugin, request: Request\n    ) -> Tuple[Set[Tuple[Payload, str]], List[Payload]]:\n        self.log.debug(\n",
        "target_code_len": 152,
        "diff_format": "@@ -883,3 +883,3 @@\n         self, payload: Payload, plugin: WorkerPlugin, request: Request\n-    ) -> Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]:\n+    ) -> Tuple[Set[Tuple[Payload, str]], List[Payload]]:\n         self.log.debug(\n",
        "source_code_with_indent": "        self, payload: Payload, plugin: WorkerPlugin, request: Request\n    ) -> Tuple[Set[Tuple[Payload, str]], List[ExtractedPayload]]:\n        <IND>self.log.debug(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, payload: Payload, plugin: WorkerPlugin, request: Request\n    ) -> Tuple[Set[Tuple[Payload, str]], List[Payload]]:\n        <IND>self.log.debug(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        additional_dispatches: Set[Tuple[Payload, str]] = {\n            (payload, plugin_name)\n            for plugin_name in worker_response.dispatch_to\n        }\n\n        extracted_payloads: List[ExtractedPayload] = [\n            Payload(\n",
        "source_code_len": 241,
        "target_code": "        additional_dispatches: Set[Tuple[Payload, str]] = {\n            (payload, plugin_name) for plugin_name in worker_response.dispatch_to\n        }\n\n        extracted_payloads: List[Payload] = [\n            Payload(\n",
        "target_code_len": 220,
        "diff_format": "@@ -912,7 +912,6 @@\n         additional_dispatches: Set[Tuple[Payload, str]] = {\n-            (payload, plugin_name)\n-            for plugin_name in worker_response.dispatch_to\n+            (payload, plugin_name) for plugin_name in worker_response.dispatch_to\n         }\n \n-        extracted_payloads: List[ExtractedPayload] = [\n+        extracted_payloads: List[Payload] = [\n             Payload(\n",
        "source_code_with_indent": "        additional_dispatches: Set[Tuple[Payload, str]] = {\n            (payload, plugin_name)\n            for plugin_name in worker_response.dispatch_to\n        }\n\n        extracted_payloads: List[ExtractedPayload] = [\n            Payload(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        additional_dispatches: Set[Tuple[Payload, str]] = {\n            (payload, plugin_name) for plugin_name in worker_response.dispatch_to\n        }\n\n        extracted_payloads: List[Payload] = [\n            Payload(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]