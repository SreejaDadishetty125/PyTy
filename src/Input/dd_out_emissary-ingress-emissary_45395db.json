[
  {
    "project": "emissary-ingress/emissary",
    "commit": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "filename": "ambassador/ambassador/envoy/v2/v2route.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2route.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2route.py:47:46 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "            runtime_fraction['runtime_key'] = f'routing.traffic_shift.{mapping.cluster.name}'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, TYPE_CHECKING\n\n",
        "source_code_len": 41,
        "target_code": "\nfrom typing import Dict, List, Union, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -14,3 +14,4 @@\n \n-from typing import List, TYPE_CHECKING\n+from typing import Dict, List, Union, TYPE_CHECKING\n+from typing import cast as typecast\n \n",
        "source_code_with_indent": "\nfrom typing import List, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, List, Union, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        runtime_fraction = {\n            'default_value': {\n",
        "source_code_len": 61,
        "target_code": "\n        runtime_fraction: Dict[str, Union[dict, str]] = {\n            'default_value': {\n",
        "target_code_len": 90,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-        runtime_fraction = {\n+        runtime_fraction: Dict[str, Union[dict, str]] = {\n             'default_value': {\n",
        "source_code_with_indent": "\n        runtime_fraction = {\n            'default_value': {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        runtime_fraction: Dict[str, Union[dict, str]] = {\n            'default_value': {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                route = config.save_element('route', irgroup, V2Route(config, irgroup, {}))\n                config.routes.append(route)\n",
        "source_code_len": 235,
        "target_code": "            if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                # Casting an empty dict to an IRBaseMapping may look weird, but in fact IRBaseMapping\n                # is (ultimately) a subclass of dict, so it's the cleanest way to pass in a completely\n                # empty IRBaseMapping to V2Route().\n                #\n                # (We could also have written V2Route to allow the mapping to be Optional, but that\n                # makes a lot of its constructor much uglier.)\n                route = config.save_element('route', irgroup, V2Route(config, irgroup, typecast(IRBaseMapping, {})))\n                config.routes.append(route)\n",
        "target_code_len": 698,
        "diff_format": "@@ -201,3 +203,9 @@\n             if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n-                route = config.save_element('route', irgroup, V2Route(config, irgroup, {}))\n+                # Casting an empty dict to an IRBaseMapping may look weird, but in fact IRBaseMapping\n+                # is (ultimately) a subclass of dict, so it's the cleanest way to pass in a completely\n+                # empty IRBaseMapping to V2Route().\n+                #\n+                # (We could also have written V2Route to allow the mapping to be Optional, but that\n+                # makes a lot of its constructor much uglier.)\n+                route = config.save_element('route', irgroup, V2Route(config, irgroup, typecast(IRBaseMapping, {})))\n                 config.routes.append(route)\n",
        "source_code_with_indent": "            <DED>if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                <IND>route = config.save_element('route', irgroup, V2Route(config, irgroup, {}))\n                config.routes.append(route)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                # Casting an empty dict to an IRBaseMapping may look weird, but in fact IRBaseMapping\n                # is (ultimately) a subclass of dict, so it's the cleanest way to pass in a completely\n                # empty IRBaseMapping to V2Route().\n                #\n                # (We could also have written V2Route to allow the mapping to be Optional, but that\n                # makes a lot of its constructor much uglier.)\n                <IND>route = config.save_element('route', irgroup, V2Route(config, irgroup, typecast(IRBaseMapping, {})))\n                config.routes.append(route)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "filename": "ambassador/ambassador/envoy/v2/v2route.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2route.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2route.py:202:87 Incompatible parameter type [6]: Expected `IRBaseMapping` for 3rd positional only parameter to call `V2Route.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " Expected `IRBaseMapping` for 3rd positional only parameter to call `V2Route.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 202,
    "warning_line": "                route = config.save_element('route', irgroup, V2Route(config, irgroup, {}))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, TYPE_CHECKING\n\n",
        "source_code_len": 41,
        "target_code": "\nfrom typing import Dict, List, Union, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -14,3 +14,4 @@\n \n-from typing import List, TYPE_CHECKING\n+from typing import Dict, List, Union, TYPE_CHECKING\n+from typing import cast as typecast\n \n",
        "source_code_with_indent": "\nfrom typing import List, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, List, Union, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        runtime_fraction = {\n            'default_value': {\n",
        "source_code_len": 61,
        "target_code": "\n        runtime_fraction: Dict[str, Union[dict, str]] = {\n            'default_value': {\n",
        "target_code_len": 90,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-        runtime_fraction = {\n+        runtime_fraction: Dict[str, Union[dict, str]] = {\n             'default_value': {\n",
        "source_code_with_indent": "\n        runtime_fraction = {\n            'default_value': {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        runtime_fraction: Dict[str, Union[dict, str]] = {\n            'default_value': {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                route = config.save_element('route', irgroup, V2Route(config, irgroup, {}))\n                config.routes.append(route)\n",
        "source_code_len": 235,
        "target_code": "            if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                # Casting an empty dict to an IRBaseMapping may look weird, but in fact IRBaseMapping\n                # is (ultimately) a subclass of dict, so it's the cleanest way to pass in a completely\n                # empty IRBaseMapping to V2Route().\n                #\n                # (We could also have written V2Route to allow the mapping to be Optional, but that\n                # makes a lot of its constructor much uglier.)\n                route = config.save_element('route', irgroup, V2Route(config, irgroup, typecast(IRBaseMapping, {})))\n                config.routes.append(route)\n",
        "target_code_len": 698,
        "diff_format": "@@ -201,3 +203,9 @@\n             if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n-                route = config.save_element('route', irgroup, V2Route(config, irgroup, {}))\n+                # Casting an empty dict to an IRBaseMapping may look weird, but in fact IRBaseMapping\n+                # is (ultimately) a subclass of dict, so it's the cleanest way to pass in a completely\n+                # empty IRBaseMapping to V2Route().\n+                #\n+                # (We could also have written V2Route to allow the mapping to be Optional, but that\n+                # makes a lot of its constructor much uglier.)\n+                route = config.save_element('route', irgroup, V2Route(config, irgroup, typecast(IRBaseMapping, {})))\n                 config.routes.append(route)\n",
        "source_code_with_indent": "            <DED>if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                <IND>route = config.save_element('route', irgroup, V2Route(config, irgroup, {}))\n                config.routes.append(route)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>if irgroup.get('host_redirect') is not None and len(irgroup.get('mappings', [])) == 0:\n                # Casting an empty dict to an IRBaseMapping may look weird, but in fact IRBaseMapping\n                # is (ultimately) a subclass of dict, so it's the cleanest way to pass in a completely\n                # empty IRBaseMapping to V2Route().\n                #\n                # (We could also have written V2Route to allow the mapping to be Optional, but that\n                # makes a lot of its constructor much uglier.)\n                <IND>route = config.save_element('route', irgroup, V2Route(config, irgroup, typecast(IRBaseMapping, {})))\n                config.routes.append(route)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "filename": "ambassador/ambassador_diag/diagd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador_diag/diagd.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador_diag/diagd.py:707:20 Incompatible attribute type [8]: Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
    "message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 707,
    "warning_line": "                    self.failure_list = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    self.env_good = True\n                    self.failure_list = None\n\n",
        "source_code_len": 87,
        "target_code": "                    self.env_good = True\n                    self.failure_list = []\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -706,3 +706,3 @@\n                     self.env_good = True\n-                    self.failure_list = None\n+                    self.failure_list = []\n \n",
        "source_code_with_indent": "                    <IND>self.env_good = True\n                    self.failure_list = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>self.env_good = True\n                    self.failure_list = []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "filename": "ambassador/ambassador_diag/diagd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador_diag/diagd.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador_diag/diagd.py:1022:8 Incompatible attribute type [8]: Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `Optional[List[typing.Any]]`.",
    "message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 1022,
    "warning_line": "        self.failure_list = failure_list",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        for err_key, err_list in ir.aconf.errors.items():\n            if err_key == \"-global-\":\n                err_key = \"\"\n\n            for err in err_list:\n                err_text = err['error']\n\n                self.app.logger.info(f'error {err_key} {err_text}')\n\n                if err_text.find('CRD') >= 0:\n                    if err_text.find('core') >= 0:\n                        failures['core CRDs'] = True\n                    else:\n                        failures['other CRDs'] = True\n\n                    env_good = False\n                elif err_text.find('TLS') >= 0:\n                    failures['TLS errors'] = True\n                    env_good = False\n\n        some_tls = False\n\n        for context in ir.tls_contexts:\n            if context:\n                some_tls = True\n                break\n\n        if not some_tls:\n            failures['no TLS contexts'] = True\n            env_good = False\n\n        some_mappings = False\n\n        for group in ir.groups.values():\n            if group and (group.location != '--internal--'):\n                some_mappings = True\n                break\n\n        if not some_mappings:\n            failures['no Mappings'] = True\n            env_good = False\n\n        failure_list = None\n\n",
        "source_code_len": 1246,
        "target_code": "\n        if not ir:\n            failures['no config loaded'] = True\n            env_good = False\n        else:\n            if not ir.aconf:\n                failures['completely empty config'] = True\n                env_good = False\n            else:\n                for err_key, err_list in ir.aconf.errors.items():\n                    if err_key == \"-global-\":\n                        err_key = \"\"\n\n                    for err in err_list:\n                        err_text = err['error']\n\n                        self.app.logger.info(f'error {err_key} {err_text}')\n\n                        if err_text.find('CRD') >= 0:\n                            if err_text.find('core') >= 0:\n                                failures['core CRDs'] = True\n                            else:\n                                failures['other CRDs'] = True\n\n                            env_good = False\n                        elif err_text.find('TLS') >= 0:\n                            failures['TLS errors'] = True\n                            env_good = False\n\n            some_tls = False\n\n            for context in ir.tls_contexts:\n                if context:\n                    some_tls = True\n                    break\n\n            if not some_tls:\n                failures['no TLS contexts'] = True\n                env_good = False\n\n            some_mappings = False\n\n            for group in ir.groups.values():\n                if group and (group.location != '--internal--'):\n                    some_mappings = True\n                    break\n\n            if not some_mappings:\n                failures['no Mappings'] = True\n                env_good = False\n\n        failure_list: List[str] = []\n\n",
        "target_code_len": 1688,
        "diff_format": "@@ -973,45 +973,53 @@\n \n-        for err_key, err_list in ir.aconf.errors.items():\n-            if err_key == \"-global-\":\n-                err_key = \"\"\n-\n-            for err in err_list:\n-                err_text = err['error']\n-\n-                self.app.logger.info(f'error {err_key} {err_text}')\n-\n-                if err_text.find('CRD') >= 0:\n-                    if err_text.find('core') >= 0:\n-                        failures['core CRDs'] = True\n-                    else:\n-                        failures['other CRDs'] = True\n-\n-                    env_good = False\n-                elif err_text.find('TLS') >= 0:\n-                    failures['TLS errors'] = True\n-                    env_good = False\n-\n-        some_tls = False\n-\n-        for context in ir.tls_contexts:\n-            if context:\n-                some_tls = True\n-                break\n-\n-        if not some_tls:\n-            failures['no TLS contexts'] = True\n+        if not ir:\n+            failures['no config loaded'] = True\n             env_good = False\n-\n-        some_mappings = False\n-\n-        for group in ir.groups.values():\n-            if group and (group.location != '--internal--'):\n-                some_mappings = True\n-                break\n-\n-        if not some_mappings:\n-            failures['no Mappings'] = True\n-            env_good = False\n-\n-        failure_list = None\n+        else:\n+            if not ir.aconf:\n+                failures['completely empty config'] = True\n+                env_good = False\n+            else:\n+                for err_key, err_list in ir.aconf.errors.items():\n+                    if err_key == \"-global-\":\n+                        err_key = \"\"\n+\n+                    for err in err_list:\n+                        err_text = err['error']\n+\n+                        self.app.logger.info(f'error {err_key} {err_text}')\n+\n+                        if err_text.find('CRD') >= 0:\n+                            if err_text.find('core') >= 0:\n+                                failures['core CRDs'] = True\n+                            else:\n+                                failures['other CRDs'] = True\n+\n+                            env_good = False\n+                        elif err_text.find('TLS') >= 0:\n+                            failures['TLS errors'] = True\n+                            env_good = False\n+\n+            some_tls = False\n+\n+            for context in ir.tls_contexts:\n+                if context:\n+                    some_tls = True\n+                    break\n+\n+            if not some_tls:\n+                failures['no TLS contexts'] = True\n+                env_good = False\n+\n+            some_mappings = False\n+\n+            for group in ir.groups.values():\n+                if group and (group.location != '--internal--'):\n+                    some_mappings = True\n+                    break\n+\n+            if not some_mappings:\n+                failures['no Mappings'] = True\n+                env_good = False\n+\n+        failure_list: List[str] = []\n \n",
        "source_code_with_indent": "\n        for err_key, err_list in ir.aconf.errors.items():\n            <IND>if err_key == \"-global-\":\n                <IND>err_key = \"\"\n\n            <DED>for err in err_list:\n                <IND>err_text = err['error']\n\n                self.app.logger.info(f'error {err_key} {err_text}')\n\n                if err_text.find('CRD') >= 0:\n                    <IND>if err_text.find('core') >= 0:\n                        <IND>failures['core CRDs'] = True\n                    <DED>else:\n                        <IND>failures['other CRDs'] = True\n\n                    <DED>env_good = False\n                <DED>elif err_text.find('TLS') >= 0:\n                    <IND>failures['TLS errors'] = True\n                    env_good = False\n\n        <DED><DED><DED>some_tls = False\n\n        for context in ir.tls_contexts:\n            <IND>if context:\n                <IND>some_tls = True\n                break\n\n        <DED><DED>if not some_tls:\n            <IND>failures['no TLS contexts'] = True\n            env_good = False\n\n        <DED>some_mappings = False\n\n        for group in ir.groups.values():\n            <IND>if group and (group.location != '--internal--'):\n                <IND>some_mappings = True\n                break\n\n        <DED><DED>if not some_mappings:\n            <IND>failures['no Mappings'] = True\n            env_good = False\n\n        <DED>failure_list = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if not ir:\n            <IND>failures['no config loaded'] = True\n            env_good = False\n        <DED>else:\n            <IND>if not ir.aconf:\n                <IND>failures['completely empty config'] = True\n                env_good = False\n            <DED>else:\n                <IND>for err_key, err_list in ir.aconf.errors.items():\n                    <IND>if err_key == \"-global-\":\n                        <IND>err_key = \"\"\n\n                    <DED>for err in err_list:\n                        <IND>err_text = err['error']\n\n                        self.app.logger.info(f'error {err_key} {err_text}')\n\n                        if err_text.find('CRD') >= 0:\n                            <IND>if err_text.find('core') >= 0:\n                                <IND>failures['core CRDs'] = True\n                            <DED>else:\n                                <IND>failures['other CRDs'] = True\n\n                            <DED>env_good = False\n                        <DED>elif err_text.find('TLS') >= 0:\n                            <IND>failures['TLS errors'] = True\n                            env_good = False\n\n            <DED><DED><DED><DED>some_tls = False\n\n            for context in ir.tls_contexts:\n                <IND>if context:\n                    <IND>some_tls = True\n                    break\n\n            <DED><DED>if not some_tls:\n                <IND>failures['no TLS contexts'] = True\n                env_good = False\n\n            <DED>some_mappings = False\n\n            for group in ir.groups.values():\n                <IND>if group and (group.location != '--internal--'):\n                    <IND>some_mappings = True\n                    break\n\n            <DED><DED>if not some_mappings:\n                <IND>failures['no Mappings'] = True\n                env_good = False\n\n        <DED><DED>failure_list: List[str] = []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]