[
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/asgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/asgi.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/asgi.py:75:8 Incompatible variable type [9]: headers is declared to have type `List[Tuple[bytes, bytes]]` but is used as type `None`.",
    "message": " headers is declared to have type `List[Tuple[bytes, bytes]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 75,
    "warning_line": "        headers: List[Tuple[bytes, bytes]] = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/asgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/asgi.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/asgi.py:77:8 Incompatible variable type [9]: ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 77,
    "warning_line": "        ext: dict = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/default.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/default.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/default.py:98:8 Incompatible variable type [9]: headers is declared to have type `typing.List[typing.Tuple[bytes, bytes]]` but is used as type `None`.",
    "message": " headers is declared to have type `typing.List[typing.Tuple[bytes, bytes]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 98,
    "warning_line": "        headers: Headers = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/default.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/default.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/default.py:100:8 Incompatible variable type [9]: ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 100,
    "warning_line": "        ext: dict = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/default.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/default.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/default.py:165:8 Incompatible variable type [9]: headers is declared to have type `typing.List[typing.Tuple[bytes, bytes]]` but is used as type `None`.",
    "message": " headers is declared to have type `typing.List[typing.Tuple[bytes, bytes]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 165,
    "warning_line": "        headers: Headers = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/default.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/default.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/default.py:167:8 Incompatible variable type [9]: ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 167,
    "warning_line": "        ext: dict = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/mock.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/mock.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/mock.py:17:8 Incompatible variable type [9]: headers is declared to have type `List[Tuple[bytes, bytes]]` but is used as type `None`.",
    "message": " headers is declared to have type `List[Tuple[bytes, bytes]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 17,
    "warning_line": "        headers: List[Tuple[bytes, bytes]] = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/mock.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/mock.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/mock.py:19:8 Incompatible variable type [9]: ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 19,
    "warning_line": "        ext: dict = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/mock.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/mock.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/mock.py:40:8 Incompatible variable type [9]: headers is declared to have type `List[Tuple[bytes, bytes]]` but is used as type `None`.",
    "message": " headers is declared to have type `List[Tuple[bytes, bytes]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "        headers: List[Tuple[bytes, bytes]] = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/mock.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/mock.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/mock.py:42:8 Incompatible variable type [9]: ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 42,
    "warning_line": "        ext: dict = None,"
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/wsgi.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/wsgi.py:66:8 Incompatible variable type [9]: headers is declared to have type `typing.List[typing.Tuple[bytes, bytes]]` but is used as type `None`.",
    "message": " headers is declared to have type `typing.List[typing.Tuple[bytes, bytes]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "        headers: typing.List[typing.Tuple[bytes, bytes]] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]] = None,\n        stream: httpcore.SyncByteStream = None,\n        ext: dict = None,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict\n    ]:\n        headers = [] if headers is None else headers\n        stream = httpcore.PlainByteStream(content=b\"\") if stream is None else stream\n\n",
        "source_code_len": 462,
        "target_code": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]],\n        stream: typing.Iterable[bytes],\n        extensions: dict,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], typing.Iterable[bytes], dict\n    ]:\n        wsgi_input = io.BytesIO(b\"\".join(stream))\n\n",
        "target_code_len": 358,
        "diff_format": "@@ -65,10 +65,9 @@\n         url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n-        headers: typing.List[typing.Tuple[bytes, bytes]] = None,\n-        stream: httpcore.SyncByteStream = None,\n-        ext: dict = None,\n+        headers: typing.List[typing.Tuple[bytes, bytes]],\n+        stream: typing.Iterable[bytes],\n+        extensions: dict,\n     ) -> typing.Tuple[\n-        int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict\n+        int, typing.List[typing.Tuple[bytes, bytes]], typing.Iterable[bytes], dict\n     ]:\n-        headers = [] if headers is None else headers\n-        stream = httpcore.PlainByteStream(content=b\"\") if stream is None else stream\n+        wsgi_input = io.BytesIO(b\"\".join(stream))\n \n",
        "source_code_with_indent": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]] = None,\n        stream: httpcore.SyncByteStream = None,\n        ext: dict = None,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict\n    ]:\n        <IND>headers = [] if headers is None else headers\n        stream = httpcore.PlainByteStream(content=b\"\") if stream is None else stream\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]],\n        stream: typing.Iterable[bytes],\n        extensions: dict,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], typing.Iterable[bytes], dict\n    ]:\n        <IND>wsgi_input = io.BytesIO(b\"\".join(stream))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "encode/httpx",
    "commit": "1a6e254f72d9fd5694a1c10a28927e193ab4f76b",
    "filename": "httpx/_transports/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-httpx/httpx/_transports/wsgi.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "httpx/_transports/wsgi.py:68:8 Incompatible variable type [9]: ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " ext is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 68,
    "warning_line": "        ext: dict = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]] = None,\n        stream: httpcore.SyncByteStream = None,\n        ext: dict = None,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict\n    ]:\n        headers = [] if headers is None else headers\n        stream = httpcore.PlainByteStream(content=b\"\") if stream is None else stream\n\n",
        "source_code_len": 462,
        "target_code": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]],\n        stream: typing.Iterable[bytes],\n        extensions: dict,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], typing.Iterable[bytes], dict\n    ]:\n        wsgi_input = io.BytesIO(b\"\".join(stream))\n\n",
        "target_code_len": 358,
        "diff_format": "@@ -65,10 +65,9 @@\n         url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n-        headers: typing.List[typing.Tuple[bytes, bytes]] = None,\n-        stream: httpcore.SyncByteStream = None,\n-        ext: dict = None,\n+        headers: typing.List[typing.Tuple[bytes, bytes]],\n+        stream: typing.Iterable[bytes],\n+        extensions: dict,\n     ) -> typing.Tuple[\n-        int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict\n+        int, typing.List[typing.Tuple[bytes, bytes]], typing.Iterable[bytes], dict\n     ]:\n-        headers = [] if headers is None else headers\n-        stream = httpcore.PlainByteStream(content=b\"\") if stream is None else stream\n+        wsgi_input = io.BytesIO(b\"\".join(stream))\n \n",
        "source_code_with_indent": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]] = None,\n        stream: httpcore.SyncByteStream = None,\n        ext: dict = None,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict\n    ]:\n        <IND>headers = [] if headers is None else headers\n        stream = httpcore.PlainByteStream(content=b\"\") if stream is None else stream\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes],\n        headers: typing.List[typing.Tuple[bytes, bytes]],\n        stream: typing.Iterable[bytes],\n        extensions: dict,\n    ) -> typing.Tuple[\n        int, typing.List[typing.Tuple[bytes, bytes]], typing.Iterable[bytes], dict\n    ]:\n        <IND>wsgi_input = io.BytesIO(b\"\".join(stream))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]