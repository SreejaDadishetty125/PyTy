[
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/frosch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/frosch.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/frosch.py:50:39 Incompatible parameter type [6]: Expected `TracebackType` for 1st positional only parameter to call `ParsedException.__init__` but got `typing.Optional[TracebackType]`.",
    "message": " Expected `TracebackType` for 1st positional only parameter to call `ParsedException.__init__` but got `typing.Optional[TracebackType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "    parsed_exception = ParsedException(exception.__traceback__, error_type, error_message)"
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/frosch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/frosch.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/frosch.py:55:67 Incompatible variable type [9]: traceback_ is declared to have type `TracebackType` but is used as type `None`.",
    "message": " traceback_ is declared to have type `TracebackType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 55,
    "warning_line": "def pytrace_excepthook(error_type: type, error_message: TypeError, traceback_: TracebackType=None):"
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/frosch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/frosch.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/frosch.py:68:68 Incompatible variable type [9]: traceback_ is declared to have type `TracebackType` but is used as type `None`.",
    "message": " traceback_ is declared to have type `TracebackType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 68,
    "warning_line": "def _pytrace_excepthook(error_type: type, error_message: TypeError, traceback_: TracebackType=None):"
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/type_hooks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/type_hooks.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/type_hooks.py:50:12 Incompatible return type [7]: Expected `Dict[typing.Type[typing.Any], typing.Callable[..., typing.Any]]` but got `None`.",
    "message": " Expected `Dict[typing.Type[typing.Any], typing.Callable[..., typing.Any]]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import importlib\nfrom typing import Any, Dict\n\n",
        "source_code_len": 47,
        "target_code": "import importlib\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -18,3 +18,3 @@\n import importlib\n-from typing import Any, Dict\n+from typing import Any, Dict, Optional\n \n",
        "source_code_with_indent": "import importlib\nfrom typing import Any, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import importlib\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        loader = cls()\n        loader._hooks = hooks # pylint: disable=W0212\n        return loader\n\n    def _lazy_load_hooks(self, module) -> Dict[type, Callable]:\n        \"\"\"Because we don't know what variables are actually used and to avoid import\n",
        "source_code_len": 250,
        "target_code": "        loader = cls()\n        loader._hooks = hooks  # pylint: disable=W0212\n        return loader\n\n    def _lazy_load_hooks(self, module) -> Optional[Dict[type, Callable]]:\n        \"\"\"Because we don't know what variables are actually used and to avoid import\n",
        "target_code_len": 261,
        "diff_format": "@@ -39,6 +39,6 @@\n         loader = cls()\n-        loader._hooks = hooks # pylint: disable=W0212\n+        loader._hooks = hooks  # pylint: disable=W0212\n         return loader\n \n-    def _lazy_load_hooks(self, module) -> Dict[type, Callable]:\n+    def _lazy_load_hooks(self, module) -> Optional[Dict[type, Callable]]:\n         \"\"\"Because we don't know what variables are actually used and to avoid import\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        loader = cls()\n        loader._hooks = hooks # pylint: disable=W0212\n        return loader\n\n    <DED>def _lazy_load_hooks(self, module) -> Dict[type, Callable]:\n        <IND>",
        "target_code_with_indent": "        loader = cls()\n        loader._hooks = hooks  # pylint: disable=W0212\n        return loader\n\n    <DED>def _lazy_load_hooks(self, module) -> Optional[Dict[type, Callable]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/type_hooks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/type_hooks.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/type_hooks.py:51:8 Incompatible return type [7]: Expected `Dict[typing.Type[typing.Any], typing.Callable[..., typing.Any]]` but got implicit return value of `None`.",
    "message": " Expected `Dict[typing.Type[typing.Any], typing.Callable[..., typing.Any]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 51,
    "warning_line": "        self._hooks.update(module.hooks)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import importlib\nfrom typing import Any, Dict\n\n",
        "source_code_len": 47,
        "target_code": "import importlib\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -18,3 +18,3 @@\n import importlib\n-from typing import Any, Dict\n+from typing import Any, Dict, Optional\n \n",
        "source_code_with_indent": "import importlib\nfrom typing import Any, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import importlib\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        loader = cls()\n        loader._hooks = hooks # pylint: disable=W0212\n        return loader\n\n    def _lazy_load_hooks(self, module) -> Dict[type, Callable]:\n        \"\"\"Because we don't know what variables are actually used and to avoid import\n",
        "source_code_len": 250,
        "target_code": "        loader = cls()\n        loader._hooks = hooks  # pylint: disable=W0212\n        return loader\n\n    def _lazy_load_hooks(self, module) -> Optional[Dict[type, Callable]]:\n        \"\"\"Because we don't know what variables are actually used and to avoid import\n",
        "target_code_len": 261,
        "diff_format": "@@ -39,6 +39,6 @@\n         loader = cls()\n-        loader._hooks = hooks # pylint: disable=W0212\n+        loader._hooks = hooks  # pylint: disable=W0212\n         return loader\n \n-    def _lazy_load_hooks(self, module) -> Dict[type, Callable]:\n+    def _lazy_load_hooks(self, module) -> Optional[Dict[type, Callable]]:\n         \"\"\"Because we don't know what variables are actually used and to avoid import\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        loader = cls()\n        loader._hooks = hooks # pylint: disable=W0212\n        return loader\n\n    <DED>def _lazy_load_hooks(self, module) -> Dict[type, Callable]:\n        <IND>",
        "target_code_with_indent": "        loader = cls()\n        loader._hooks = hooks  # pylint: disable=W0212\n        return loader\n\n    <DED>def _lazy_load_hooks(self, module) -> Optional[Dict[type, Callable]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/writer.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/writer.py:117:34 Incompatible parameter type [6]: Expected `List[int]` for 1st positional only parameter to call `ConsoleWriter.construct_debug_tree` but got `List[str]`.",
    "message": " Expected `List[int]` for 1st positional only parameter to call `ConsoleWriter.construct_debug_tree` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 117,
    "warning_line": "        self.construct_debug_tree(lines, sorted_values)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_len": 127,
        "target_code": "\n    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "target_code_len": 127,
        "diff_format": "@@ -122,3 +121,3 @@\n \n-    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n+    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n         \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/writer.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/writer.py:131:20 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 131,
    "warning_line": "        lines[0] += self.offset_vert_lines(offsets)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_len": 127,
        "target_code": "\n    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "target_code_len": 127,
        "diff_format": "@@ -122,3 +121,3 @@\n \n-    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n+    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n         \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/writer.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/writer.py:138:29 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 138,
    "warning_line": "                lines[i] += (\" \" * (new_offset))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_len": 127,
        "target_code": "\n    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "target_code_len": 127,
        "diff_format": "@@ -122,3 +121,3 @@\n \n-    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n+    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n         \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/writer.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/writer.py:141:32 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 141,
    "warning_line": "                    lines[i] += \"\u2502\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_len": 127,
        "target_code": "\n    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "target_code_len": 127,
        "diff_format": "@@ -122,3 +121,3 @@\n \n-    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n+    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n         \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/writer.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/writer.py:146:32 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 146,
    "warning_line": "                    lines[i] += \"\u2514\u2500\u2500 {}\".format(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_len": 127,
        "target_code": "\n    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "target_code_len": 127,
        "diff_format": "@@ -122,3 +121,3 @@\n \n-    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n+    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n         \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "HallerPatrick/frosch",
    "commit": "4965ec5467d381e2fd1b20edecdffcb3c5964565",
    "filename": "frosch/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/HallerPatrick-frosch/frosch/writer.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frosch/writer.py:154:32 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 154,
    "warning_line": "                    lines[i] += self.offset_vert_lines(offsets)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_len": 127,
        "target_code": "\n    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        \"\"\"Construction of debug tree\"\"\"\n",
        "target_code_len": 127,
        "diff_format": "@@ -122,3 +121,3 @@\n \n-    def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n+    def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n         \"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[int], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def construct_debug_tree(self, lines: List[str], sorted_values: List[Variable]):\n        <IND>\"\"\"Construction of debug tree\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]