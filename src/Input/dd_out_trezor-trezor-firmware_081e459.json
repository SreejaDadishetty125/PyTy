[
  {
    "project": "trezor/trezor-firmware",
    "commit": "081e4590756af5eefa3952a8a5fe25a19616536d",
    "filename": "core/src/apps/common/storage/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/apps/common/storage/common.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/apps/common/storage/common.py:55:8 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 55,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from trezor import config\n\n",
        "source_code_len": 27,
        "target_code": "from trezor import config\n\nif False:\n    from typing import Optional\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -1,2 +1,5 @@\n from trezor import config\n+\n+if False:\n+    from typing import Optional\n \n",
        "source_code_with_indent": "from trezor import config\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from trezor import config\n\nif False:\n    <IND>from typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_uint8(app: int, key: int) -> int:\n    val = _get(app, key)\n",
        "source_code_len": 69,
        "target_code": "\ndef _get_uint8(app: int, key: int) -> Optional[int]:\n    val = _get(app, key)\n",
        "target_code_len": 79,
        "diff_format": "@@ -51,3 +54,3 @@\n \n-def _get_uint8(app: int, key: int) -> int:\n+def _get_uint8(app: int, key: int) -> Optional[int]:\n     val = _get(app, key)\n",
        "source_code_with_indent": "\n<DED>def _get_uint8(app: int, key: int) -> int:\n    <IND>val = _get(app, key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _get_uint8(app: int, key: int) -> Optional[int]:\n    <IND>val = _get(app, key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "081e4590756af5eefa3952a8a5fe25a19616536d",
    "filename": "core/src/apps/common/storage/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/apps/common/storage/common.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/apps/common/storage/common.py:66:8 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from trezor import config\n\n",
        "source_code_len": 27,
        "target_code": "from trezor import config\n\nif False:\n    from typing import Optional\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -1,2 +1,5 @@\n from trezor import config\n+\n+if False:\n+    from typing import Optional\n \n",
        "source_code_with_indent": "from trezor import config\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from trezor import config\n\nif False:\n    <IND>from typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_uint16(app: int, key: int) -> int:\n    val = _get(app, key)\n",
        "source_code_len": 70,
        "target_code": "\ndef _get_uint16(app: int, key: int) -> Optional[int]:\n    val = _get(app, key)\n",
        "target_code_len": 80,
        "diff_format": "@@ -62,3 +65,3 @@\n \n-def _get_uint16(app: int, key: int) -> int:\n+def _get_uint16(app: int, key: int) -> Optional[int]:\n     val = _get(app, key)\n",
        "source_code_with_indent": "\n<DED>def _get_uint16(app: int, key: int) -> int:\n    <IND>val = _get(app, key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _get_uint16(app: int, key: int) -> Optional[int]:\n    <IND>val = _get(app, key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "081e4590756af5eefa3952a8a5fe25a19616536d",
    "filename": "core/src/apps/common/storage/device.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/apps/common/storage/device.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/apps/common/storage/device.py:68:8 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 68,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from apps.common.storage import common\n\n",
        "source_code_len": 40,
        "target_code": "from apps.common.storage import common\n\nif False:\n    from typing import Optional\n\n",
        "target_code_len": 83,
        "diff_format": "@@ -6,2 +6,5 @@\n from apps.common.storage import common\n+\n+if False:\n+    from typing import Optional\n \n",
        "source_code_with_indent": "from apps.common.storage import common\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from apps.common.storage import common\n\nif False:\n    <IND>from typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_label() -> str:\n    label = common._get(_NAMESPACE, _LABEL, True)  # public\n",
        "source_code_len": 85,
        "target_code": "\ndef get_label() -> Optional[str]:\n    label = common._get(_NAMESPACE, _LABEL, True)  # public\n",
        "target_code_len": 95,
        "diff_format": "@@ -64,3 +67,3 @@\n \n-def get_label() -> str:\n+def get_label() -> Optional[str]:\n     label = common._get(_NAMESPACE, _LABEL, True)  # public\n",
        "source_code_with_indent": "\n<DED>def get_label() -> str:\n    <IND>label = common._get(_NAMESPACE, _LABEL, True)  # public\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_label() -> Optional[str]:\n    <IND>label = common._get(_NAMESPACE, _LABEL, True)  # public\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "081e4590756af5eefa3952a8a5fe25a19616536d",
    "filename": "core/src/apps/common/storage/slip39_mnemonics.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/apps/common/storage/slip39_mnemonics.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/apps/common/storage/slip39_mnemonics.py:17:4 Incompatible return type [7]: Expected `str` but got `bool`.",
    "message": " Expected `str` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 17,
    "warning_line": "    return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from apps.common.storage import common\n\n",
        "source_code_len": 40,
        "target_code": "from apps.common.storage import common\n\nif False:\n    from typing import List, Optional\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -3,2 +3,5 @@\n from apps.common.storage import common\n+\n+if False:\n+    from typing import List, Optional\n \n",
        "source_code_with_indent": "from apps.common.storage import common\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from apps.common.storage import common\n\nif False:\n    <IND>from typing import List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get(index: int) -> str:\n    m = common._get(common._APP_SLIP39_MNEMONICS, index)\n",
        "source_code_len": 86,
        "target_code": "\ndef get(index: int) -> Optional[str]:\n    m = common._get(common._APP_SLIP39_MNEMONICS, index)\n",
        "target_code_len": 96,
        "diff_format": "@@ -12,3 +15,3 @@\n \n-def get(index: int) -> str:\n+def get(index: int) -> Optional[str]:\n     m = common._get(common._APP_SLIP39_MNEMONICS, index)\n",
        "source_code_with_indent": "\n<DED>def get(index: int) -> str:\n    <IND>m = common._get(common._APP_SLIP39_MNEMONICS, index)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get(index: int) -> Optional[str]:\n    <IND>m = common._get(common._APP_SLIP39_MNEMONICS, index)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return m.decode()\n    return False\n\n\ndef fetch() -> list:\n    mnemonics = []\n",
        "source_code_len": 85,
        "target_code": "        return m.decode()\n    return None\n\n\ndef fetch() -> List[str]:\n    mnemonics = []\n",
        "target_code_len": 89,
        "diff_format": "@@ -16,6 +19,6 @@\n         return m.decode()\n-    return False\n+    return None\n \n \n-def fetch() -> list:\n+def fetch() -> List[str]:\n     mnemonics = []\n",
        "source_code_with_indent": "        <IND>return m.decode()\n    <DED>return False\n\n\n<DED>def fetch() -> list:\n    <IND>mnemonics = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return m.decode()\n    <DED>return None\n\n\n<DED>def fetch() -> List[str]:\n    <IND>mnemonics = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]