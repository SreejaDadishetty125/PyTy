[
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "bidict/_orderedbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/bidict/_orderedbase.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bidict/_orderedbase.py:107:4 Inconsistent override [15]: `__slots__` overrides attribute defined in `_Node` inconsistently. Type `typing.Tuple[]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str]`.",
    "message": " `__slots__` overrides attribute defined in `_Node` inconsistently. Type `typing.Tuple[]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 107,
    "warning_line": "    __slots__ = ()"
  },
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "bidict/_orderedbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/bidict/_orderedbase.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bidict/_orderedbase.py:134:4 Inconsistent override [15]: `__slots__` overrides attribute defined in `BidictBase` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.List[str]`.",
    "message": " `__slots__` overrides attribute defined in `BidictBase` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.List[str]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 134,
    "warning_line": "    __slots__ = ('_sntl',)"
  },
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "bidict/_orderedbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/bidict/_orderedbase.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bidict/_orderedbase.py:201:4 Inconsistent override [14]: `bidict._orderedbase.OrderedBidictBase._already_have` overrides method defined in `BidictBase` inconsistently. Could not find parameter `oldkey` in overriding signature.",
    "message": " `bidict._orderedbase.OrderedBidictBase._already_have` overrides method defined in `BidictBase` inconsistently. Could not find parameter `oldkey` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 201,
    "warning_line": "    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ\n        # Overrides _base.BidictBase.\n",
        "source_code_len": 173,
        "target_code": "    @staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # type: ignore\n        # Overrides _base.BidictBase.\n",
        "target_code_len": 153,
        "diff_format": "@@ -200,3 +214,3 @@\n     @staticmethod\n-    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ\n+    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # type: ignore\n         # Overrides _base.BidictBase.\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ\n        # Overrides _base.BidictBase.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # type: ignore\n        # Overrides _base.BidictBase.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "bidict/_orderedbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/bidict/_orderedbase.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bidict/_orderedbase.py:201:4 Inconsistent override [14]: `bidict._orderedbase.OrderedBidictBase._already_have` overrides method defined in `BidictBase` inconsistently. Could not find parameter `oldval` in overriding signature.",
    "message": " `bidict._orderedbase.OrderedBidictBase._already_have` overrides method defined in `BidictBase` inconsistently. Could not find parameter `oldval` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 201,
    "warning_line": "    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ\n        # Overrides _base.BidictBase.\n",
        "source_code_len": 173,
        "target_code": "    @staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # type: ignore\n        # Overrides _base.BidictBase.\n",
        "target_code_len": 153,
        "diff_format": "@@ -200,3 +214,3 @@\n     @staticmethod\n-    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ\n+    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # type: ignore\n         # Overrides _base.BidictBase.\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # pylint: disable=arguments-differ\n        # Overrides _base.BidictBase.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _already_have(key: KT, val: VT, nodeinv: _Node, nodefwd: _Node) -> bool:  # type: ignore\n        # Overrides _base.BidictBase.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "bidict/_orderedbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/bidict/_orderedbase.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bidict/_orderedbase.py:205:4 Inconsistent override [15]: `bidict._orderedbase.OrderedBidictBase._write_item` overrides method defined in `BidictBase` inconsistently. Returned type `None` is not a subtype of the overridden return `_WriteResult`.",
    "message": " `bidict._orderedbase.OrderedBidictBase._write_item` overrides method defined in `BidictBase` inconsistently. Returned type `None` is not a subtype of the overridden return `_WriteResult`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 205,
    "warning_line": "    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> None:  # pylint: disable=too-many-locals",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n        # Overrides _base.BidictBase.\n",
        "source_code_len": 155,
        "target_code": "\n    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> _WriteResult:\n        # Overrides _base.BidictBase.\n",
        "target_code_len": 128,
        "diff_format": "@@ -204,3 +218,3 @@\n \n-    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n+    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> _WriteResult:\n         # Overrides _base.BidictBase.\n",
        "source_code_with_indent": "\n    <DED>def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n        # Overrides _base.BidictBase.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> _WriteResult:\n        # Overrides _base.BidictBase.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "bidict/_orderedbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/bidict/_orderedbase.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bidict/_orderedbase.py:248:8 Incompatible return type [7]: Expected `None` but got `_WriteResult`.",
    "message": " Expected `None` but got `_WriteResult`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 248,
    "warning_line": "        return _WriteResult(key, val, oldkey, oldval)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n        # Overrides _base.BidictBase.\n",
        "source_code_len": 155,
        "target_code": "\n    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> _WriteResult:\n        # Overrides _base.BidictBase.\n",
        "target_code_len": 128,
        "diff_format": "@@ -204,3 +218,3 @@\n \n-    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n+    def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> _WriteResult:\n         # Overrides _base.BidictBase.\n",
        "source_code_with_indent": "\n    <DED>def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n        # Overrides _base.BidictBase.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _write_item(self, key: KT, val: VT, dedup_result: _DedupResult) -> _WriteResult:\n        # Overrides _base.BidictBase.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "bidict/_orderedbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/bidict/_orderedbase.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bidict/_orderedbase.py:250:4 Inconsistent override [14]: `bidict._orderedbase.OrderedBidictBase._undo_write` overrides method defined in `BidictBase` inconsistently. Parameter of type `_DedupResult` is not a supertype of the overridden parameter `_WriteResult`.",
    "message": " `bidict._orderedbase.OrderedBidictBase._undo_write` overrides method defined in `BidictBase` inconsistently. Parameter of type `_DedupResult` is not a supertype of the overridden parameter `_WriteResult`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 250,
    "warning_line": "    def _undo_write(self, dedup_result: _DedupResult, write_result: _DedupResult) -> None:  # pylint: disable=too-many-locals",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _undo_write(self, dedup_result: _DedupResult, write_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n        fwdm = self._fwdm\n",
        "source_code_len": 153,
        "target_code": "\n    def _undo_write(self, dedup_result: _DedupResult, write_result: _WriteResult) -> None:\n        fwdm = self._fwdm\n",
        "target_code_len": 118,
        "diff_format": "@@ -249,3 +263,3 @@\n \n-    def _undo_write(self, dedup_result: _DedupResult, write_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n+    def _undo_write(self, dedup_result: _DedupResult, write_result: _WriteResult) -> None:\n         fwdm = self._fwdm\n",
        "source_code_with_indent": "\n    <DED>def _undo_write(self, dedup_result: _DedupResult, write_result: _DedupResult) -> None:  # pylint: disable=too-many-locals\n        <IND>fwdm = self._fwdm\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _undo_write(self, dedup_result: _DedupResult, write_result: _WriteResult) -> None:\n        <IND>fwdm = self._fwdm\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jab/bidict",
    "commit": "0ad5284f7590e6903ed1f747709b2883eff3729b",
    "filename": "setup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jab-bidict/setup.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "setup.py:83:36 Unsupported operand [58]: `+` is not supported for operand types `typing.List[str]` and `typing.List[typing.Union[typing.List[str], str]]`.",
    "message": " `+` is not supported for operand types `typing.List[str]` and `typing.List[typing.Union[typing.List[str], str]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 83,
    "warning_line": "DEV_REQS = SETUP_REQS + DOCS_REQS + TEST_REQS + COVERAGE_REQS + PRECOMMIT_REQS + ['tox < 4']",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # so \u2020est the code in the Sphinx docs using Sphinx's own doctest support.\n    DOCS_REQS,\n]\n",
        "source_code_len": 95,
        "target_code": "    # so \u2020est the code in the Sphinx docs using Sphinx's own doctest support.\n    *DOCS_REQS,\n]\n",
        "target_code_len": 96,
        "diff_format": "@@ -71,3 +72,3 @@\n     # so \u2020est the code in the Sphinx docs using Sphinx's own doctest support.\n-    DOCS_REQS,\n+    *DOCS_REQS,\n ]\n",
        "source_code_with_indent": "    # so \u2020est the code in the Sphinx docs using Sphinx's own doctest support.\n    DOCS_REQS,\n]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # so \u2020est the code in the Sphinx docs using Sphinx's own doctest support.\n    *DOCS_REQS,\n]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]