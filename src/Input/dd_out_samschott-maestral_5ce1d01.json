[
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/cli.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/cli.py:285:31 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `list.append` but got `List[List[str]]`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `list.append` but got `List[List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 285,
    "warning_line": "        wrapped_columns.append([textwrap.wrap(cell, width=width) for cell in column])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    wrapped_columns: List[List[str]] = []\n\n",
        "source_code_len": 44,
        "target_code": "\n    wrapped_columns: List[List[List[str]]] = []\n\n",
        "target_code_len": 50,
        "diff_format": "@@ -281,3 +291,3 @@\n \n-    wrapped_columns: List[List[str]] = []\n+    wrapped_columns: List[List[List[str]]] = []\n \n",
        "source_code_with_indent": "\n    <DED>wrapped_columns: List[List[str]] = []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>wrapped_columns: List[List[List[str]]] = []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/cli.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "maestral/cli.py:330:8 Incompatible attribute type [8]: Attribute `list_commands` declared in class `click.core.MultiCommand` has type `BoundMethod[typing.Callable(click.core.MultiCommand.list_commands)[[Named(self, click.core.MultiCommand), Named(ctx, click.core.Context)], Iterable[str]], SpecialHelpOrder]` but is used as type `BoundMethod[typing.Callable(SpecialHelpOrder.list_commands_for_help)[[Named(self, SpecialHelpOrder), Named(ctx, click.core.Context)], Iterable[str]], SpecialHelpOrder]`.",
    "message": " Attribute `list_commands` declared in class `click.core.MultiCommand` has type `BoundMethod[typing.Callable(click.core.MultiCommand.list_commands)[[Named(self, click.core.MultiCommand), Named(ctx, click.core.Context)], Iterable[str]], SpecialHelpOrder]` but is used as type `BoundMethod[typing.Callable(SpecialHelpOrder.list_commands_for_help)[[Named(self, SpecialHelpOrder), Named(ctx, click.core.Context)], Iterable[str]], SpecialHelpOrder]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 330,
    "warning_line": "        self.list_commands = self.list_commands_for_help",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def get_help(self, ctx: click.Context) -> str:\n        self.list_commands = self.list_commands_for_help\n        return super(SpecialHelpOrder, self).get_help(ctx)\n",
        "source_code_len": 167,
        "target_code": "    def get_help(self, ctx: click.Context) -> str:\n        self.list_commands = self.list_commands_for_help  # type: ignore\n        return super(SpecialHelpOrder, self).get_help(ctx)\n",
        "target_code_len": 183,
        "diff_format": "@@ -329,3 +341,3 @@\n     def get_help(self, ctx: click.Context) -> str:\n-        self.list_commands = self.list_commands_for_help\n+        self.list_commands = self.list_commands_for_help  # type: ignore\n         return super(SpecialHelpOrder, self).get_help(ctx)\n",
        "source_code_with_indent": "    <DED>def get_help(self, ctx: click.Context) -> str:\n        <IND>self.list_commands = self.list_commands_for_help\n        return super(SpecialHelpOrder, self).get_help(ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def get_help(self, ctx: click.Context) -> str:\n        <IND>self.list_commands = self.list_commands_for_help  # type: ignore\n        return super(SpecialHelpOrder, self).get_help(ctx)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/config/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/config/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/config/base.py:63:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 63,
    "warning_line": "            raise RuntimeError('Please set the environment variable HOME to '",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return path\n    else:\n        # Get home from alternative locations\n        for env_var in ('HOME', 'USERPROFILE', 'TMP'):\n            # os.environ.get() returns a raw byte string which needs to be\n            # decoded with the codec that the OS is using to represent\n            # environment variables.\n            path = os.environ.get(env_var, '')\n            if osp.isdir(path):\n                return path\n            else:\n                path = ''\n\n        if not path:\n            raise RuntimeError('Please set the environment variable HOME to '\n                               'your user/home directory.')\n\n",
        "source_code_len": 626,
        "target_code": "        return path\n\n    # get home from alternative locations\n    for env_var in ('HOME', 'USERPROFILE', 'TMP'):\n        # os.environ.get() returns a raw byte string which needs to be\n        # decoded with the codec that the OS is using to represent\n        # environment variables.\n        path = os.environ.get(env_var, '')\n        if osp.isdir(path):\n            return path\n        else:\n            path = ''\n\n    if not path:\n        raise RuntimeError('Please set the environment variable HOME to '\n                           'your user/home directory.')\n\n    return path\n\n",
        "target_code_len": 582,
        "diff_format": "@@ -49,17 +49,19 @@\n         return path\n-    else:\n-        # Get home from alternative locations\n-        for env_var in ('HOME', 'USERPROFILE', 'TMP'):\n-            # os.environ.get() returns a raw byte string which needs to be\n-            # decoded with the codec that the OS is using to represent\n-            # environment variables.\n-            path = os.environ.get(env_var, '')\n-            if osp.isdir(path):\n-                return path\n-            else:\n-                path = ''\n \n-        if not path:\n-            raise RuntimeError('Please set the environment variable HOME to '\n-                               'your user/home directory.')\n+    # get home from alternative locations\n+    for env_var in ('HOME', 'USERPROFILE', 'TMP'):\n+        # os.environ.get() returns a raw byte string which needs to be\n+        # decoded with the codec that the OS is using to represent\n+        # environment variables.\n+        path = os.environ.get(env_var, '')\n+        if osp.isdir(path):\n+            return path\n+        else:\n+            path = ''\n+\n+    if not path:\n+        raise RuntimeError('Please set the environment variable HOME to '\n+                           'your user/home directory.')\n+\n+    return path\n \n",
        "source_code_with_indent": "        <IND>return path\n    <DED>else:\n        # Get home from alternative locations\n        <IND>for env_var in ('HOME', 'USERPROFILE', 'TMP'):\n            # os.environ.get() returns a raw byte string which needs to be\n            # decoded with the codec that the OS is using to represent\n            # environment variables.\n            <IND>path = os.environ.get(env_var, '')\n            if osp.isdir(path):\n                <IND>return path\n            <DED>else:\n                <IND>path = ''\n\n        <DED><DED>if not path:\n            <IND>raise RuntimeError('Please set the environment variable HOME to '\n                               'your user/home directory.')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return path\n\n    # get home from alternative locations\n    <DED>for env_var in ('HOME', 'USERPROFILE', 'TMP'):\n        # os.environ.get() returns a raw byte string which needs to be\n        # decoded with the codec that the OS is using to represent\n        # environment variables.\n        <IND>path = os.environ.get(env_var, '')\n        if osp.isdir(path):\n            <IND>return path\n        <DED>else:\n            <IND>path = ''\n\n    <DED><DED>if not path:\n        <IND>raise RuntimeError('Please set the environment variable HOME to '\n                           'your user/home directory.')\n\n    <DED>return path\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/config/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/config/user.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/config/user.py:306:8 Incompatible return type [7]: Expected `DefaultsConfig` but got `cp.ConfigParser`.",
    "message": " Expected `DefaultsConfig` but got `cp.ConfigParser`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 306,
    "warning_line": "        return old_defaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _load_old_defaults(self, old_version: str) -> DefaultsConfig:\n        \"\"\"Read old defaults.\"\"\"\n",
        "source_code_len": 104,
        "target_code": "\n    def _load_old_defaults(self, old_version: str) -> cp.ConfigParser:\n        \"\"\"Read old defaults.\"\"\"\n",
        "target_code_len": 105,
        "diff_format": "@@ -300,3 +297,3 @@\n \n-    def _load_old_defaults(self, old_version: str) -> DefaultsConfig:\n+    def _load_old_defaults(self, old_version: str) -> cp.ConfigParser:\n         \"\"\"Read old defaults.\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def _load_old_defaults(self, old_version: str) -> DefaultsConfig:\n        <IND>\"\"\"Read old defaults.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def _load_old_defaults(self, old_version: str) -> cp.ConfigParser:\n        <IND>\"\"\"Read old defaults.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/config/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/config/user.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/config/user.py:321:36 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 321,
    "warning_line": "                new_value = options[option]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _update_defaults(self, defaults: DefaultsConfig, old_version: str) -> None:\n        \"\"\"Update defaults after a change in version.\"\"\"\n        old_defaults = self._load_old_defaults(old_version)\n        for section, options in defaults:\n            for option in options:\n                new_value = options[option]\n                try:\n                    old_val = old_defaults.get(section, option)\n                except (cp.NoSectionError, cp.NoOptionError):\n                    old_val = None\n\n                if old_val is None or str(new_value) != old_val:\n                    self._set(section, option, new_value)\n\n    def _remove_deprecated_options(self, old_version):\n        \"\"\"\n",
        "source_code_len": 697,
        "target_code": "\n    def _remove_deprecated_options(self, old_version: str) -> None:\n        \"\"\"\n",
        "target_code_len": 81,
        "diff_format": "@@ -315,17 +312,3 @@\n \n-    def _update_defaults(self, defaults: DefaultsConfig, old_version: str) -> None:\n-        \"\"\"Update defaults after a change in version.\"\"\"\n-        old_defaults = self._load_old_defaults(old_version)\n-        for section, options in defaults:\n-            for option in options:\n-                new_value = options[option]\n-                try:\n-                    old_val = old_defaults.get(section, option)\n-                except (cp.NoSectionError, cp.NoOptionError):\n-                    old_val = None\n-\n-                if old_val is None or str(new_value) != old_val:\n-                    self._set(section, option, new_value)\n-\n-    def _remove_deprecated_options(self, old_version):\n+    def _remove_deprecated_options(self, old_version: str) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def _update_defaults(self, defaults: DefaultsConfig, old_version: str) -> None:\n        <IND>\"\"\"Update defaults after a change in version.\"\"\"\n        old_defaults = self._load_old_defaults(old_version)\n        for section, options in defaults:\n            <IND>for option in options:\n                <IND>new_value = options[option]\n                try:\n                    <IND>old_val = old_defaults.get(section, option)\n                <DED>except (cp.NoSectionError, cp.NoOptionError):\n                    <IND>old_val = None\n\n                <DED>if old_val is None or str(new_value) != old_val:\n                    <IND>self._set(section, option, new_value)\n\n    <DED><DED><DED><DED>def _remove_deprecated_options(self, old_version):\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def _remove_deprecated_options(self, old_version: str) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/config/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/config/user.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "maestral/config/user.py:458:35 Incompatible variable type [9]: default is declared to have type `Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], NoDefault, bool, bytes, float, int, str, typing.Tuple[typing.Any, ...]]` but is used as type `typing.Type[NoDefault]`.",
    "message": " default is declared to have type `Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], NoDefault, bool, bytes, float, int, str, typing.Tuple[typing.Any, ...]]` but is used as type `typing.Type[NoDefault]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 458,
    "warning_line": "    def get(self, section, option, default: ConfType = NoDefault):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def get(self, section, option, default: ConfType = NoDefault):\n        \"\"\"\n",
        "source_code_len": 80,
        "target_code": "\n    def get(self, section, option, default: Any = NoDefault) -> Any:  # type: ignore\n        \"\"\"\n",
        "target_code_len": 98,
        "diff_format": "@@ -457,3 +441,3 @@\n \n-    def get(self, section, option, default: ConfType = NoDefault):\n+    def get(self, section, option, default: Any = NoDefault) -> Any:  # type: ignore\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get(self, section, option, default: ConfType = NoDefault):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get(self, section, option, default: Any = NoDefault) -> Any:  # type: ignore\n        <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/config/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/config/user.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "maestral/config/user.py:539:26 Incompatible parameter type [6]: Expected `Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], NoDefault, bool, bytes, float, int, str, typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], NoDefault, bool, bytes, float, int, str, typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 539,
    "warning_line": "            value = float(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def set(self, section: str, option: str, value: ConfType, save: bool = True):\n        \"\"\"\n",
        "source_code_len": 95,
        "target_code": "\n    def set(self, section: str, option: str, value: Any, save: bool = True) -> None:  # type: ignore\n        \"\"\"\n",
        "target_code_len": 114,
        "diff_format": "@@ -522,3 +506,3 @@\n \n-    def set(self, section: str, option: str, value: ConfType, save: bool = True):\n+    def set(self, section: str, option: str, value: Any, save: bool = True) -> None:  # type: ignore\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def set(self, section: str, option: str, value: ConfType, save: bool = True):\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def set(self, section: str, option: str, value: Any, save: bool = True) -> None:  # type: ignore\n        <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/config/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/config/user.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "maestral/config/user.py:541:24 Incompatible parameter type [6]: Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], NoDefault, bool, bytes, float, int, str, typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], NoDefault, bool, bytes, float, int, str, typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 541,
    "warning_line": "            value = int(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def set(self, section: str, option: str, value: ConfType, save: bool = True):\n        \"\"\"\n",
        "source_code_len": 95,
        "target_code": "\n    def set(self, section: str, option: str, value: Any, save: bool = True) -> None:  # type: ignore\n        \"\"\"\n",
        "target_code_len": 114,
        "diff_format": "@@ -522,3 +506,3 @@\n \n-    def set(self, section: str, option: str, value: ConfType, save: bool = True):\n+    def set(self, section: str, option: str, value: Any, save: bool = True) -> None:  # type: ignore\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def set(self, section: str, option: str, value: ConfType, save: bool = True):\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def set(self, section: str, option: str, value: Any, save: bool = True) -> None:  # type: ignore\n        <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/main.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/main.py:746:8 Incompatible return type [7]: Expected `Dict[str, Union[bool, str]]` but got `Dict[str, Union[bool, float, str]]`.",
    "message": " Expected `Dict[str, Union[bool, str]]` but got `Dict[str, Union[bool, float, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 746,
    "warning_line": "        return dropbox_stone_to_dict(res)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_account_info(self) -> Dict[str, Union[str, bool]]:\n        \"\"\"\n",
        "source_code_len": 76,
        "target_code": "\n    def get_account_info(self) -> Dict[str, Union[str, float, bool]]:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -729,3 +744,3 @@\n \n-    def get_account_info(self) -> Dict[str, Union[str, bool]]:\n+    def get_account_info(self) -> Dict[str, Union[str, float, bool]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_account_info(self) -> Dict[str, Union[str, bool]]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_account_info(self) -> Dict[str, Union[str, float, bool]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/main.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/main.py:764:8 Incompatible return type [7]: Expected `Dict[str, Union[bool, str]]` but got `Dict[str, Union[bool, float, str]]`.",
    "message": " Expected `Dict[str, Union[bool, str]]` but got `Dict[str, Union[bool, float, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 764,
    "warning_line": "        return dropbox_stone_to_dict(res)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_space_usage(self) -> Dict[str, Union[str, bool]]:\n        \"\"\"\n",
        "source_code_len": 75,
        "target_code": "\n    def get_space_usage(self) -> Dict[str, Union[str, float, bool]]:\n        \"\"\"\n",
        "target_code_len": 82,
        "diff_format": "@@ -747,3 +762,3 @@\n \n-    def get_space_usage(self) -> Dict[str, Union[str, bool]]:\n+    def get_space_usage(self) -> Dict[str, Union[str, float, bool]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_space_usage(self) -> Dict[str, Union[str, bool]]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_space_usage(self) -> Dict[str, Union[str, float, bool]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/main.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/main.py:792:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 792,
    "warning_line": "            self._delete_old_profile_pics()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @to_maestral_error()  # to handle errors when downloading and saving profile pic\n    def get_profile_pic(self) -> str:\n        \"\"\"\n",
        "source_code_len": 135,
        "target_code": "    @to_maestral_error()  # to handle errors when downloading and saving profile pic\n    def get_profile_pic(self) -> Optional[str]:\n        \"\"\"\n",
        "target_code_len": 145,
        "diff_format": "@@ -768,3 +783,3 @@\n     @to_maestral_error()  # to handle errors when downloading and saving profile pic\n-    def get_profile_pic(self) -> str:\n+    def get_profile_pic(self) -> Optional[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@to_maestral_error()  # to handle errors when downloading and saving profile pic\n    def get_profile_pic(self) -> str:\n        <IND>",
        "target_code_with_indent": "    <DED>@to_maestral_error()  # to handle errors when downloading and saving profile pic\n    def get_profile_pic(self) -> Optional[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/sync.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/sync.py",
    "file_hunks_size": 60,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/sync.py:320:31 Incompatible parameter type [6]: Expected `typing.Iterable[typing.Any]` for 1st positional only parameter to call `set.update` but got `typing.Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], bool, bytes, float, int, maestral.config.user.NoDefault, str, typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `typing.Iterable[typing.Any]` for 1st positional only parameter to call `set.update` but got `typing.Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], bool, bytes, float, int, maestral.config.user.NoDefault, str, typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 320,
    "warning_line": "            state_list.update(*others)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update(self, *others: ConfType) -> None:\n        with self._lock:\n",
        "source_code_len": 75,
        "target_code": "\n    def update(self, *others: Any) -> None:\n        with self._lock:\n",
        "target_code_len": 70,
        "diff_format": "@@ -315,3 +313,3 @@\n \n-    def update(self, *others: ConfType) -> None:\n+    def update(self, *others: Any) -> None:\n         with self._lock:\n",
        "source_code_with_indent": "\n    <DED><DED>def update(self, *others: ConfType) -> None:\n        <IND>with self._lock:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def update(self, *others: Any) -> None:\n        <IND>with self._lock:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/sync.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/sync.py",
    "file_hunks_size": 60,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/sync.py:327:42 Incompatible parameter type [6]: Expected `typing.Iterable[typing.Any]` for 1st positional only parameter to call `set.difference_update` but got `typing.Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], bool, bytes, float, int, maestral.config.user.NoDefault, str, typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `typing.Iterable[typing.Any]` for 1st positional only parameter to call `set.difference_update` but got `typing.Union[None, typing.Dict[typing.Any, typing.Any], typing.List[typing.Any], typing.Set[typing.Any], bool, bytes, float, int, maestral.config.user.NoDefault, str, typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 327,
    "warning_line": "            state_list.difference_update(*others)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def difference_update(self, *others: ConfType) -> None:\n        with self._lock:\n",
        "source_code_len": 86,
        "target_code": "\n    def difference_update(self, *others: Any) -> None:\n        with self._lock:\n",
        "target_code_len": 81,
        "diff_format": "@@ -322,3 +320,3 @@\n \n-    def difference_update(self, *others: ConfType) -> None:\n+    def difference_update(self, *others: Any) -> None:\n         with self._lock:\n",
        "source_code_with_indent": "\n    <DED><DED>def difference_update(self, *others: ConfType) -> None:\n        <IND>with self._lock:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def difference_update(self, *others: Any) -> None:\n        <IND>with self._lock:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/sync.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/sync.py",
    "file_hunks_size": 60,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/sync.py:1034:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `SyncEngine.to_dbx_path` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `SyncEngine.to_dbx_path` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1034,
    "warning_line": "            dbx_path = self.to_dbx_path(local_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if not (local_path or dbx_path):\n            raise ValueError('Either local_path or dbx_path must be given.')\n\n        if not dbx_path:\n            dbx_path = self.to_dbx_path(local_path)\n\n",
        "source_code_len": 209,
        "target_code": "        \"\"\"\n\n        if not dbx_path:\n            if local_path:\n                dbx_path = self.to_dbx_path(local_path)\n            else:\n                raise ValueError('Either local_path or dbx_path must be given.')\n\n",
        "target_code_len": 221,
        "diff_format": "@@ -1029,7 +1027,8 @@\n         \"\"\"\n-        if not (local_path or dbx_path):\n-            raise ValueError('Either local_path or dbx_path must be given.')\n \n         if not dbx_path:\n-            dbx_path = self.to_dbx_path(local_path)\n+            if local_path:\n+                dbx_path = self.to_dbx_path(local_path)\n+            else:\n+                raise ValueError('Either local_path or dbx_path must be given.')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if not (local_path or dbx_path):\n            <IND>raise ValueError('Either local_path or dbx_path must be given.')\n\n        <DED>if not dbx_path:\n            <IND>dbx_path = self.to_dbx_path(local_path)\n\n",
        "target_code_with_indent": "\n\n        if not dbx_path:\n            <IND>if local_path:\n                <IND>dbx_path = self.to_dbx_path(local_path)\n            <DED>else:\n                <IND>raise ValueError('Either local_path or dbx_path must be given.')\n\n"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "5ce1d01a9937bcc76bf57d65a082a5b9335b4969",
    "filename": "maestral/sync.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/sync.py",
    "file_hunks_size": 60,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/sync.py:2399:16 Incompatible return type [7]: Expected `Conflict` but got implicit return value of `None`.",
    "message": " Expected `Conflict` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 2399,
    "warning_line": "                return Conflict.Conflict",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        elif remote_rev != local_rev:\n            # Dropbox server version has a different rev, likely is newer.\n",
        "source_code_len": 114,
        "target_code": "\n        else:\n            # Dropbox server version has a different rev, likely is newer.\n",
        "target_code_len": 90,
        "diff_format": "@@ -2369,3 +2377,3 @@\n \n-        elif remote_rev != local_rev:\n+        else:\n             # Dropbox server version has a different rev, likely is newer.\n",
        "source_code_with_indent": "\n        <DED>elif remote_rev != local_rev:\n            # Dropbox server version has a different rev, likely is newer.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>else:\n            # Dropbox server version has a different rev, likely is newer.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]