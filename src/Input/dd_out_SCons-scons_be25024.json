[
  {
    "project": "SCons/scons",
    "commit": "be25024e65a30e65a9e3799ffa5323e23f49003d",
    "filename": "test/build-errors.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SCons-scons/test/Errors/nonexistent-executable.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/build-errors.py:123:12 Incompatible variable type [9]: error_message_not_found is declared to have type `int` but is used as type `None`.",
    "message": " error_message_not_found is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 123,
    "warning_line": "            error_message_not_found = None"
  },
  {
    "project": "SCons/scons",
    "commit": "be25024e65a30e65a9e3799ffa5323e23f49003d",
    "filename": "test/build-errors.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SCons-scons/test/Errors/nonexistent-executable.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/build-errors.py:155:12 Incompatible variable type [9]: error_message_not_found is declared to have type `int` but is used as type `None`.",
    "message": " error_message_not_found is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 155,
    "warning_line": "            error_message_not_found = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\ntest.write('SConstruct2', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld': bld })\nenv.bld(target = 'f2', source = 'f2.in')\n\"\"\" % string.replace(not_executable, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct2 .',\n         stdout = test.wrap_stdout(\"%s f2.in f2\\n\" % not_executable, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    errs = [\n        bad_command,\n        unrecognized % (not_executable, 'f2'),\n        unspecified % 'f2'\n    ]\n    test.fail_test(not test.stderr() in errs)\nelse:\n    errs = [\n        cannot_execute % (not_executable, 'f2'),\n        Permission_denied % (not_executable, 'f2'),\n        permission_denied % (not_executable, 'f2'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        if string.find(test.stderr(), err) != -1:\n            error_message_not_found = None\n            break\n    test.fail_test(error_message_not_found)\n\ntest.write('SConstruct3', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld' : bld })\nenv.bld(target = 'f3', source = 'f3.in')\n\"\"\" % string.replace(test.workdir, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct3 .',\n         stdout = test.wrap_stdout(\"%s f3.in f3\\n\" % test.workdir, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    errs = [\n        bad_command,\n        unrecognized % (test.workdir, 'f3'),\n        unspecified % 'f3'\n    ]\n    test.fail_test(not test.stderr() in errs)\nelse:\n    errs = [\n        cannot_execute % (not_executable, 'f3'),\n        is_a_directory % (test.workdir, 'f3'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        if string.find(test.stderr(), err) != -1:\n            error_message_not_found = None\n            break\n    test.fail_test(error_message_not_found)\n\ntest.write('SConstruct4', r\"\"\"\nenv = Environment()\nenv.Command('test.out', 'test.in', Copy('$TARGET', '$SOURCE'))\nenv.InstallAs('test2.out', 'test.out')\n# Mark test2.out as precious so we'll handle the exception in\n# FunctionAction() rather than when the target is cleaned before building.\nenv.Precious('test2.out')\nenv.Default('test2.out')\n\"\"\")\n\ntest.write('test.in', \"test.in 1\\n\")\n\ntest.run(arguments = '-f SConstruct4 .')\n\ntest.write('test.in', \"test.in 2\\n\")\n\ntest.writable('test2.out', 0)\nf = open(test.workpath('test2.out'))\n\ntest.run(arguments = '-f SConstruct4 .',\n         stderr = None,\n         status = 2)\n\nf.close()\ntest.writable('test2.out', 1)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\" % test.stderr())\nerrs = [\n    \"scons: *** [test2.out] test2.out: Permission denied\\n\",\n    \"scons: *** [test2.out] test2.out: permission denied\\n\",\n]\ntest.fail_test(test.stderr() not in errs)\n\ntest.pass_test()\n",
        "source_code_len": 2877,
        "target_code": "\ntest.pass_test()\n",
        "target_code_len": 18,
        "diff_format": "@@ -126,98 +106,2 @@\n \n-test.write('SConstruct2', r\"\"\"\n-bld = Builder(action = '%s $SOURCES $TARGET')\n-env = Environment(BUILDERS = { 'bld': bld })\n-env.bld(target = 'f2', source = 'f2.in')\n-\"\"\" % string.replace(not_executable, '\\\\', '\\\\\\\\'))\n-\n-test.run(arguments='-f SConstruct2 .',\n-         stdout = test.wrap_stdout(\"%s f2.in f2\\n\" % not_executable, error=1),\n-         stderr = None,\n-         status = 2)\n-\n-test.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\n-if os.name == 'nt':\n-    errs = [\n-        bad_command,\n-        unrecognized % (not_executable, 'f2'),\n-        unspecified % 'f2'\n-    ]\n-    test.fail_test(not test.stderr() in errs)\n-else:\n-    errs = [\n-        cannot_execute % (not_executable, 'f2'),\n-        Permission_denied % (not_executable, 'f2'),\n-        permission_denied % (not_executable, 'f2'),\n-    ]\n-    error_message_not_found = 1\n-    for err in errs:\n-        if string.find(test.stderr(), err) != -1:\n-            error_message_not_found = None\n-            break\n-    test.fail_test(error_message_not_found)\n-\n-test.write('SConstruct3', r\"\"\"\n-bld = Builder(action = '%s $SOURCES $TARGET')\n-env = Environment(BUILDERS = { 'bld' : bld })\n-env.bld(target = 'f3', source = 'f3.in')\n-\"\"\" % string.replace(test.workdir, '\\\\', '\\\\\\\\'))\n-\n-test.run(arguments='-f SConstruct3 .',\n-         stdout = test.wrap_stdout(\"%s f3.in f3\\n\" % test.workdir, error=1),\n-         stderr = None,\n-         status = 2)\n-\n-test.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\n-if os.name == 'nt':\n-    errs = [\n-        bad_command,\n-        unrecognized % (test.workdir, 'f3'),\n-        unspecified % 'f3'\n-    ]\n-    test.fail_test(not test.stderr() in errs)\n-else:\n-    errs = [\n-        cannot_execute % (not_executable, 'f3'),\n-        is_a_directory % (test.workdir, 'f3'),\n-    ]\n-    error_message_not_found = 1\n-    for err in errs:\n-        if string.find(test.stderr(), err) != -1:\n-            error_message_not_found = None\n-            break\n-    test.fail_test(error_message_not_found)\n-\n-test.write('SConstruct4', r\"\"\"\n-env = Environment()\n-env.Command('test.out', 'test.in', Copy('$TARGET', '$SOURCE'))\n-env.InstallAs('test2.out', 'test.out')\n-# Mark test2.out as precious so we'll handle the exception in\n-# FunctionAction() rather than when the target is cleaned before building.\n-env.Precious('test2.out')\n-env.Default('test2.out')\n-\"\"\")\n-\n-test.write('test.in', \"test.in 1\\n\")\n-\n-test.run(arguments = '-f SConstruct4 .')\n-\n-test.write('test.in', \"test.in 2\\n\")\n-\n-test.writable('test2.out', 0)\n-f = open(test.workpath('test2.out'))\n-\n-test.run(arguments = '-f SConstruct4 .',\n-         stderr = None,\n-         status = 2)\n-\n-f.close()\n-test.writable('test2.out', 1)\n-\n-test.description_set(\"Incorrect STDERR:\\n%s\" % test.stderr())\n-errs = [\n-    \"scons: *** [test2.out] test2.out: Permission denied\\n\",\n-    \"scons: *** [test2.out] test2.out: permission denied\\n\",\n-]\n-test.fail_test(test.stderr() not in errs)\n-\n test.pass_test()\n",
        "source_code_with_indent": "\n<DED>test.write('SConstruct2', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld': bld })\nenv.bld(target = 'f2', source = 'f2.in')\n\"\"\" % string.replace(not_executable, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct2 .',\n         stdout = test.wrap_stdout(\"%s f2.in f2\\n\" % not_executable, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    <IND>errs = [\n        bad_command,\n        unrecognized % (not_executable, 'f2'),\n        unspecified % 'f2'\n    ]\n    test.fail_test(not test.stderr() in errs)\n<DED>else:\n    <IND>errs = [\n        cannot_execute % (not_executable, 'f2'),\n        Permission_denied % (not_executable, 'f2'),\n        permission_denied % (not_executable, 'f2'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        <IND>if string.find(test.stderr(), err) != -1:\n            <IND>error_message_not_found = None\n            break\n    <DED><DED>test.fail_test(error_message_not_found)\n\n<DED>test.write('SConstruct3', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld' : bld })\nenv.bld(target = 'f3', source = 'f3.in')\n\"\"\" % string.replace(test.workdir, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct3 .',\n         stdout = test.wrap_stdout(\"%s f3.in f3\\n\" % test.workdir, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    <IND>errs = [\n        bad_command,\n        unrecognized % (test.workdir, 'f3'),\n        unspecified % 'f3'\n    ]\n    test.fail_test(not test.stderr() in errs)\n<DED>else:\n    <IND>errs = [\n        cannot_execute % (not_executable, 'f3'),\n        is_a_directory % (test.workdir, 'f3'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        <IND>if string.find(test.stderr(), err) != -1:\n            <IND>error_message_not_found = None\n            break\n    <DED><DED>test.fail_test(error_message_not_found)\n\n<DED>test.write('SConstruct4', r\"\"\"\nenv = Environment()\nenv.Command('test.out', 'test.in', Copy('$TARGET', '$SOURCE'))\nenv.InstallAs('test2.out', 'test.out')\n# Mark test2.out as precious so we'll handle the exception in\n# FunctionAction() rather than when the target is cleaned before building.\nenv.Precious('test2.out')\nenv.Default('test2.out')\n\"\"\")\n\ntest.write('test.in', \"test.in 1\\n\")\n\ntest.run(arguments = '-f SConstruct4 .')\n\ntest.write('test.in', \"test.in 2\\n\")\n\ntest.writable('test2.out', 0)\nf = open(test.workpath('test2.out'))\n\ntest.run(arguments = '-f SConstruct4 .',\n         stderr = None,\n         status = 2)\n\nf.close()\ntest.writable('test2.out', 1)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\" % test.stderr())\nerrs = [\n    \"scons: *** [test2.out] test2.out: Permission denied\\n\",\n    \"scons: *** [test2.out] test2.out: permission denied\\n\",\n]\ntest.fail_test(test.stderr() not in errs)\n\ntest.pass_test()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>test.pass_test()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SCons/scons",
    "commit": "be25024e65a30e65a9e3799ffa5323e23f49003d",
    "filename": "test/build-errors.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SCons-scons/test/Errors/nonexistent-executable.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/build-errors.py:186:12 Incompatible variable type [9]: error_message_not_found is declared to have type `int` but is used as type `None`.",
    "message": " error_message_not_found is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 186,
    "warning_line": "            error_message_not_found = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\ntest.write('SConstruct2', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld': bld })\nenv.bld(target = 'f2', source = 'f2.in')\n\"\"\" % string.replace(not_executable, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct2 .',\n         stdout = test.wrap_stdout(\"%s f2.in f2\\n\" % not_executable, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    errs = [\n        bad_command,\n        unrecognized % (not_executable, 'f2'),\n        unspecified % 'f2'\n    ]\n    test.fail_test(not test.stderr() in errs)\nelse:\n    errs = [\n        cannot_execute % (not_executable, 'f2'),\n        Permission_denied % (not_executable, 'f2'),\n        permission_denied % (not_executable, 'f2'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        if string.find(test.stderr(), err) != -1:\n            error_message_not_found = None\n            break\n    test.fail_test(error_message_not_found)\n\ntest.write('SConstruct3', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld' : bld })\nenv.bld(target = 'f3', source = 'f3.in')\n\"\"\" % string.replace(test.workdir, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct3 .',\n         stdout = test.wrap_stdout(\"%s f3.in f3\\n\" % test.workdir, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    errs = [\n        bad_command,\n        unrecognized % (test.workdir, 'f3'),\n        unspecified % 'f3'\n    ]\n    test.fail_test(not test.stderr() in errs)\nelse:\n    errs = [\n        cannot_execute % (not_executable, 'f3'),\n        is_a_directory % (test.workdir, 'f3'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        if string.find(test.stderr(), err) != -1:\n            error_message_not_found = None\n            break\n    test.fail_test(error_message_not_found)\n\ntest.write('SConstruct4', r\"\"\"\nenv = Environment()\nenv.Command('test.out', 'test.in', Copy('$TARGET', '$SOURCE'))\nenv.InstallAs('test2.out', 'test.out')\n# Mark test2.out as precious so we'll handle the exception in\n# FunctionAction() rather than when the target is cleaned before building.\nenv.Precious('test2.out')\nenv.Default('test2.out')\n\"\"\")\n\ntest.write('test.in', \"test.in 1\\n\")\n\ntest.run(arguments = '-f SConstruct4 .')\n\ntest.write('test.in', \"test.in 2\\n\")\n\ntest.writable('test2.out', 0)\nf = open(test.workpath('test2.out'))\n\ntest.run(arguments = '-f SConstruct4 .',\n         stderr = None,\n         status = 2)\n\nf.close()\ntest.writable('test2.out', 1)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\" % test.stderr())\nerrs = [\n    \"scons: *** [test2.out] test2.out: Permission denied\\n\",\n    \"scons: *** [test2.out] test2.out: permission denied\\n\",\n]\ntest.fail_test(test.stderr() not in errs)\n\ntest.pass_test()\n",
        "source_code_len": 2877,
        "target_code": "\ntest.pass_test()\n",
        "target_code_len": 18,
        "diff_format": "@@ -126,98 +106,2 @@\n \n-test.write('SConstruct2', r\"\"\"\n-bld = Builder(action = '%s $SOURCES $TARGET')\n-env = Environment(BUILDERS = { 'bld': bld })\n-env.bld(target = 'f2', source = 'f2.in')\n-\"\"\" % string.replace(not_executable, '\\\\', '\\\\\\\\'))\n-\n-test.run(arguments='-f SConstruct2 .',\n-         stdout = test.wrap_stdout(\"%s f2.in f2\\n\" % not_executable, error=1),\n-         stderr = None,\n-         status = 2)\n-\n-test.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\n-if os.name == 'nt':\n-    errs = [\n-        bad_command,\n-        unrecognized % (not_executable, 'f2'),\n-        unspecified % 'f2'\n-    ]\n-    test.fail_test(not test.stderr() in errs)\n-else:\n-    errs = [\n-        cannot_execute % (not_executable, 'f2'),\n-        Permission_denied % (not_executable, 'f2'),\n-        permission_denied % (not_executable, 'f2'),\n-    ]\n-    error_message_not_found = 1\n-    for err in errs:\n-        if string.find(test.stderr(), err) != -1:\n-            error_message_not_found = None\n-            break\n-    test.fail_test(error_message_not_found)\n-\n-test.write('SConstruct3', r\"\"\"\n-bld = Builder(action = '%s $SOURCES $TARGET')\n-env = Environment(BUILDERS = { 'bld' : bld })\n-env.bld(target = 'f3', source = 'f3.in')\n-\"\"\" % string.replace(test.workdir, '\\\\', '\\\\\\\\'))\n-\n-test.run(arguments='-f SConstruct3 .',\n-         stdout = test.wrap_stdout(\"%s f3.in f3\\n\" % test.workdir, error=1),\n-         stderr = None,\n-         status = 2)\n-\n-test.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\n-if os.name == 'nt':\n-    errs = [\n-        bad_command,\n-        unrecognized % (test.workdir, 'f3'),\n-        unspecified % 'f3'\n-    ]\n-    test.fail_test(not test.stderr() in errs)\n-else:\n-    errs = [\n-        cannot_execute % (not_executable, 'f3'),\n-        is_a_directory % (test.workdir, 'f3'),\n-    ]\n-    error_message_not_found = 1\n-    for err in errs:\n-        if string.find(test.stderr(), err) != -1:\n-            error_message_not_found = None\n-            break\n-    test.fail_test(error_message_not_found)\n-\n-test.write('SConstruct4', r\"\"\"\n-env = Environment()\n-env.Command('test.out', 'test.in', Copy('$TARGET', '$SOURCE'))\n-env.InstallAs('test2.out', 'test.out')\n-# Mark test2.out as precious so we'll handle the exception in\n-# FunctionAction() rather than when the target is cleaned before building.\n-env.Precious('test2.out')\n-env.Default('test2.out')\n-\"\"\")\n-\n-test.write('test.in', \"test.in 1\\n\")\n-\n-test.run(arguments = '-f SConstruct4 .')\n-\n-test.write('test.in', \"test.in 2\\n\")\n-\n-test.writable('test2.out', 0)\n-f = open(test.workpath('test2.out'))\n-\n-test.run(arguments = '-f SConstruct4 .',\n-         stderr = None,\n-         status = 2)\n-\n-f.close()\n-test.writable('test2.out', 1)\n-\n-test.description_set(\"Incorrect STDERR:\\n%s\" % test.stderr())\n-errs = [\n-    \"scons: *** [test2.out] test2.out: Permission denied\\n\",\n-    \"scons: *** [test2.out] test2.out: permission denied\\n\",\n-]\n-test.fail_test(test.stderr() not in errs)\n-\n test.pass_test()\n",
        "source_code_with_indent": "\n<DED>test.write('SConstruct2', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld': bld })\nenv.bld(target = 'f2', source = 'f2.in')\n\"\"\" % string.replace(not_executable, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct2 .',\n         stdout = test.wrap_stdout(\"%s f2.in f2\\n\" % not_executable, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    <IND>errs = [\n        bad_command,\n        unrecognized % (not_executable, 'f2'),\n        unspecified % 'f2'\n    ]\n    test.fail_test(not test.stderr() in errs)\n<DED>else:\n    <IND>errs = [\n        cannot_execute % (not_executable, 'f2'),\n        Permission_denied % (not_executable, 'f2'),\n        permission_denied % (not_executable, 'f2'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        <IND>if string.find(test.stderr(), err) != -1:\n            <IND>error_message_not_found = None\n            break\n    <DED><DED>test.fail_test(error_message_not_found)\n\n<DED>test.write('SConstruct3', r\"\"\"\nbld = Builder(action = '%s $SOURCES $TARGET')\nenv = Environment(BUILDERS = { 'bld' : bld })\nenv.bld(target = 'f3', source = 'f3.in')\n\"\"\" % string.replace(test.workdir, '\\\\', '\\\\\\\\'))\n\ntest.run(arguments='-f SConstruct3 .',\n         stdout = test.wrap_stdout(\"%s f3.in f3\\n\" % test.workdir, error=1),\n         stderr = None,\n         status = 2)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\\n\" % test.stderr())\nif os.name == 'nt':\n    <IND>errs = [\n        bad_command,\n        unrecognized % (test.workdir, 'f3'),\n        unspecified % 'f3'\n    ]\n    test.fail_test(not test.stderr() in errs)\n<DED>else:\n    <IND>errs = [\n        cannot_execute % (not_executable, 'f3'),\n        is_a_directory % (test.workdir, 'f3'),\n    ]\n    error_message_not_found = 1\n    for err in errs:\n        <IND>if string.find(test.stderr(), err) != -1:\n            <IND>error_message_not_found = None\n            break\n    <DED><DED>test.fail_test(error_message_not_found)\n\n<DED>test.write('SConstruct4', r\"\"\"\nenv = Environment()\nenv.Command('test.out', 'test.in', Copy('$TARGET', '$SOURCE'))\nenv.InstallAs('test2.out', 'test.out')\n# Mark test2.out as precious so we'll handle the exception in\n# FunctionAction() rather than when the target is cleaned before building.\nenv.Precious('test2.out')\nenv.Default('test2.out')\n\"\"\")\n\ntest.write('test.in', \"test.in 1\\n\")\n\ntest.run(arguments = '-f SConstruct4 .')\n\ntest.write('test.in', \"test.in 2\\n\")\n\ntest.writable('test2.out', 0)\nf = open(test.workpath('test2.out'))\n\ntest.run(arguments = '-f SConstruct4 .',\n         stderr = None,\n         status = 2)\n\nf.close()\ntest.writable('test2.out', 1)\n\ntest.description_set(\"Incorrect STDERR:\\n%s\" % test.stderr())\nerrs = [\n    \"scons: *** [test2.out] test2.out: Permission denied\\n\",\n    \"scons: *** [test2.out] test2.out: permission denied\\n\",\n]\ntest.fail_test(test.stderr() not in errs)\n\ntest.pass_test()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>test.pass_test()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]