[
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/base.py:34:27 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "    def dump(self, obj, *, many: bool = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n",
        "source_code_len": 5,
        "target_code": "\"\"\"\nimport typing\n\n",
        "target_code_len": 19,
        "diff_format": "@@ -9,2 +9,3 @@\n \"\"\"\n+import typing\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n",
        "target_code_with_indent": "\nimport typing\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def dump(self, obj, *, many: bool = None):\n        raise NotImplementedError\n\n    def dumps(self, obj, *, many: bool = None):\n        raise NotImplementedError\n\n    def load(self, data, *, many: bool = None, partial=None, unknown=None):\n        raise NotImplementedError\n",
        "source_code_len": 276,
        "target_code": "\n    def dump(self, obj, *, many: typing.Optional[bool] = None):\n        raise NotImplementedError\n\n    def dumps(self, obj, *, many: typing.Optional[bool] = None):\n        raise NotImplementedError\n\n    def load(\n        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n    ):\n        raise NotImplementedError\n",
        "target_code_len": 341,
        "diff_format": "@@ -33,9 +34,11 @@\n \n-    def dump(self, obj, *, many: bool = None):\n+    def dump(self, obj, *, many: typing.Optional[bool] = None):\n         raise NotImplementedError\n \n-    def dumps(self, obj, *, many: bool = None):\n+    def dumps(self, obj, *, many: typing.Optional[bool] = None):\n         raise NotImplementedError\n \n-    def load(self, data, *, many: bool = None, partial=None, unknown=None):\n+    def load(\n+        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n+    ):\n         raise NotImplementedError\n",
        "source_code_with_indent": "\n    def dump(self, obj, *, many: bool = None):\n        <IND>raise NotImplementedError\n\n    <DED>def dumps(self, obj, *, many: bool = None):\n        <IND>raise NotImplementedError\n\n    <DED>def load(self, data, *, many: bool = None, partial=None, unknown=None):\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def dump(self, obj, *, many: typing.Optional[bool] = None):\n        <IND>raise NotImplementedError\n\n    <DED>def dumps(self, obj, *, many: typing.Optional[bool] = None):\n        <IND>raise NotImplementedError\n\n    <DED>def load(\n        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n    ):\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/base.py:37:28 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 37,
    "warning_line": "    def dumps(self, obj, *, many: bool = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n",
        "source_code_len": 5,
        "target_code": "\"\"\"\nimport typing\n\n",
        "target_code_len": 19,
        "diff_format": "@@ -9,2 +9,3 @@\n \"\"\"\n+import typing\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n",
        "target_code_with_indent": "\nimport typing\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def dump(self, obj, *, many: bool = None):\n        raise NotImplementedError\n\n    def dumps(self, obj, *, many: bool = None):\n        raise NotImplementedError\n\n    def load(self, data, *, many: bool = None, partial=None, unknown=None):\n        raise NotImplementedError\n",
        "source_code_len": 276,
        "target_code": "\n    def dump(self, obj, *, many: typing.Optional[bool] = None):\n        raise NotImplementedError\n\n    def dumps(self, obj, *, many: typing.Optional[bool] = None):\n        raise NotImplementedError\n\n    def load(\n        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n    ):\n        raise NotImplementedError\n",
        "target_code_len": 341,
        "diff_format": "@@ -33,9 +34,11 @@\n \n-    def dump(self, obj, *, many: bool = None):\n+    def dump(self, obj, *, many: typing.Optional[bool] = None):\n         raise NotImplementedError\n \n-    def dumps(self, obj, *, many: bool = None):\n+    def dumps(self, obj, *, many: typing.Optional[bool] = None):\n         raise NotImplementedError\n \n-    def load(self, data, *, many: bool = None, partial=None, unknown=None):\n+    def load(\n+        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n+    ):\n         raise NotImplementedError\n",
        "source_code_with_indent": "\n    def dump(self, obj, *, many: bool = None):\n        <IND>raise NotImplementedError\n\n    <DED>def dumps(self, obj, *, many: bool = None):\n        <IND>raise NotImplementedError\n\n    <DED>def load(self, data, *, many: bool = None, partial=None, unknown=None):\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def dump(self, obj, *, many: typing.Optional[bool] = None):\n        <IND>raise NotImplementedError\n\n    <DED>def dumps(self, obj, *, many: typing.Optional[bool] = None):\n        <IND>raise NotImplementedError\n\n    <DED>def load(\n        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n    ):\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/base.py:40:28 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "    def load(self, data, *, many: bool = None, partial=None, unknown=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n",
        "source_code_len": 5,
        "target_code": "\"\"\"\nimport typing\n\n",
        "target_code_len": 19,
        "diff_format": "@@ -9,2 +9,3 @@\n \"\"\"\n+import typing\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n",
        "target_code_with_indent": "\nimport typing\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def dump(self, obj, *, many: bool = None):\n        raise NotImplementedError\n\n    def dumps(self, obj, *, many: bool = None):\n        raise NotImplementedError\n\n    def load(self, data, *, many: bool = None, partial=None, unknown=None):\n        raise NotImplementedError\n",
        "source_code_len": 276,
        "target_code": "\n    def dump(self, obj, *, many: typing.Optional[bool] = None):\n        raise NotImplementedError\n\n    def dumps(self, obj, *, many: typing.Optional[bool] = None):\n        raise NotImplementedError\n\n    def load(\n        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n    ):\n        raise NotImplementedError\n",
        "target_code_len": 341,
        "diff_format": "@@ -33,9 +34,11 @@\n \n-    def dump(self, obj, *, many: bool = None):\n+    def dump(self, obj, *, many: typing.Optional[bool] = None):\n         raise NotImplementedError\n \n-    def dumps(self, obj, *, many: bool = None):\n+    def dumps(self, obj, *, many: typing.Optional[bool] = None):\n         raise NotImplementedError\n \n-    def load(self, data, *, many: bool = None, partial=None, unknown=None):\n+    def load(\n+        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n+    ):\n         raise NotImplementedError\n",
        "source_code_with_indent": "\n    def dump(self, obj, *, many: bool = None):\n        <IND>raise NotImplementedError\n\n    <DED>def dumps(self, obj, *, many: bool = None):\n        <IND>raise NotImplementedError\n\n    <DED>def load(self, data, *, many: bool = None, partial=None, unknown=None):\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def dump(self, obj, *, many: typing.Optional[bool] = None):\n        <IND>raise NotImplementedError\n\n    <DED>def dumps(self, obj, *, many: typing.Optional[bool] = None):\n        <IND>raise NotImplementedError\n\n    <DED>def load(\n        self, data, *, many: typing.Optional[bool] = None, partial=None, unknown=None\n    ):\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/base.py:44:28 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "        self, json_data, *, many: bool = None, partial=None, unknown=None, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n",
        "source_code_len": 5,
        "target_code": "\"\"\"\nimport typing\n\n",
        "target_code_len": 19,
        "diff_format": "@@ -9,2 +9,3 @@\n \"\"\"\n+import typing\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n",
        "target_code_with_indent": "\nimport typing\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def loads(\n        self, json_data, *, many: bool = None, partial=None, unknown=None, **kwargs\n    ):\n",
        "source_code_len": 106,
        "target_code": "    def loads(\n        self,\n        json_data,\n        *,\n        many: typing.Optional[bool] = None,\n        partial=None,\n        unknown=None,\n        **kwargs\n    ):\n",
        "target_code_len": 171,
        "diff_format": "@@ -43,3 +46,9 @@\n     def loads(\n-        self, json_data, *, many: bool = None, partial=None, unknown=None, **kwargs\n+        self,\n+        json_data,\n+        *,\n+        many: typing.Optional[bool] = None,\n+        partial=None,\n+        unknown=None,\n+        **kwargs\n     ):\n",
        "source_code_with_indent": "    <DED>def loads(\n        self, json_data, *, many: bool = None, partial=None, unknown=None, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def loads(\n        self,\n        json_data,\n        *,\n        many: typing.Optional[bool] = None,\n        partial=None,\n        unknown=None,\n        **kwargs\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/exceptions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/exceptions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/exceptions.py:30:8 Incompatible variable type [9]: data is declared to have type `typing.Union[typing.Iterable[typing.Mapping[str, typing.Any]], typing.Mapping[str, typing.Any]]` but is used as type `None`.",
    "message": " data is declared to have type `typing.Union[typing.Iterable[typing.Mapping[str, typing.Any]], typing.Mapping[str, typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 30,
    "warning_line": "        data: typing.Union[",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        field_name: str = SCHEMA,\n        data: typing.Union[\n            typing.Mapping[str, typing.Any],\n            typing.Iterable[typing.Mapping[str, typing.Any]],\n        ] = None,\n        valid_data: typing.Union[\n            typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]\n        ] = None,\n",
        "source_code_len": 323,
        "target_code": "        field_name: str = SCHEMA,\n        data: typing.Optional[\n            typing.Union[\n                typing.Mapping[str, typing.Any],\n                typing.Iterable[typing.Mapping[str, typing.Any]],\n            ]\n        ] = None,\n        valid_data: typing.Optional[\n            typing.Union[\n                typing.List[typing.Dict[str, typing.Any]],\n                typing.Dict[str, typing.Any],\n            ]\n        ] = None,\n",
        "target_code_len": 438,
        "diff_format": "@@ -29,8 +29,13 @@\n         field_name: str = SCHEMA,\n-        data: typing.Union[\n-            typing.Mapping[str, typing.Any],\n-            typing.Iterable[typing.Mapping[str, typing.Any]],\n+        data: typing.Optional[\n+            typing.Union[\n+                typing.Mapping[str, typing.Any],\n+                typing.Iterable[typing.Mapping[str, typing.Any]],\n+            ]\n         ] = None,\n-        valid_data: typing.Union[\n-            typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]\n+        valid_data: typing.Optional[\n+            typing.Union[\n+                typing.List[typing.Dict[str, typing.Any]],\n+                typing.Dict[str, typing.Any],\n+            ]\n         ] = None,\n",
        "source_code_with_indent": "        field_name: str = SCHEMA,\n        data: typing.Union[\n            typing.Mapping[str, typing.Any],\n            typing.Iterable[typing.Mapping[str, typing.Any]],\n        ] = None,\n        valid_data: typing.Union[\n            typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]\n        ] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        field_name: str = SCHEMA,\n        data: typing.Optional[\n            typing.Union[\n                typing.Mapping[str, typing.Any],\n                typing.Iterable[typing.Mapping[str, typing.Any]],\n            ]\n        ] = None,\n        valid_data: typing.Optional[\n            typing.Union[\n                typing.List[typing.Dict[str, typing.Any]],\n                typing.Dict[str, typing.Any],\n            ]\n        ] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/exceptions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/exceptions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/exceptions.py:34:8 Incompatible variable type [9]: valid_data is declared to have type `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Dict[str, typing.Any]]]` but is used as type `None`.",
    "message": " valid_data is declared to have type `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Dict[str, typing.Any]]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "        valid_data: typing.Union[",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        field_name: str = SCHEMA,\n        data: typing.Union[\n            typing.Mapping[str, typing.Any],\n            typing.Iterable[typing.Mapping[str, typing.Any]],\n        ] = None,\n        valid_data: typing.Union[\n            typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]\n        ] = None,\n",
        "source_code_len": 323,
        "target_code": "        field_name: str = SCHEMA,\n        data: typing.Optional[\n            typing.Union[\n                typing.Mapping[str, typing.Any],\n                typing.Iterable[typing.Mapping[str, typing.Any]],\n            ]\n        ] = None,\n        valid_data: typing.Optional[\n            typing.Union[\n                typing.List[typing.Dict[str, typing.Any]],\n                typing.Dict[str, typing.Any],\n            ]\n        ] = None,\n",
        "target_code_len": 438,
        "diff_format": "@@ -29,8 +29,13 @@\n         field_name: str = SCHEMA,\n-        data: typing.Union[\n-            typing.Mapping[str, typing.Any],\n-            typing.Iterable[typing.Mapping[str, typing.Any]],\n+        data: typing.Optional[\n+            typing.Union[\n+                typing.Mapping[str, typing.Any],\n+                typing.Iterable[typing.Mapping[str, typing.Any]],\n+            ]\n         ] = None,\n-        valid_data: typing.Union[\n-            typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]\n+        valid_data: typing.Optional[\n+            typing.Union[\n+                typing.List[typing.Dict[str, typing.Any]],\n+                typing.Dict[str, typing.Any],\n+            ]\n         ] = None,\n",
        "source_code_with_indent": "        field_name: str = SCHEMA,\n        data: typing.Union[\n            typing.Mapping[str, typing.Any],\n            typing.Iterable[typing.Mapping[str, typing.Any]],\n        ] = None,\n        valid_data: typing.Union[\n            typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]\n        ] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        field_name: str = SCHEMA,\n        data: typing.Optional[\n            typing.Union[\n                typing.Mapping[str, typing.Any],\n                typing.Iterable[typing.Mapping[str, typing.Any]],\n            ]\n        ] = None,\n        valid_data: typing.Optional[\n            typing.Union[\n                typing.List[typing.Dict[str, typing.Any]],\n                typing.Dict[str, typing.Any],\n            ]\n        ] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:150:8 Incompatible variable type [9]: data_key is declared to have type `str` but is used as type `None`.",
    "message": " data_key is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 150,
    "warning_line": "        data_key: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_len": 482,
        "target_code": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_len": 601,
        "diff_format": "@@ -149,13 +149,15 @@\n         missing: typing.Any = missing_,\n-        data_key: str = None,\n-        attribute: str = None,\n-        validate: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+        data_key: typing.Optional[str] = None,\n+        attribute: typing.Optional[str] = None,\n+        validate: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+            ]\n         ] = None,\n         required: bool = False,\n-        allow_none: bool = None,\n+        allow_none: typing.Optional[bool] = None,\n         load_only: bool = False,\n         dump_only: bool = False,\n-        error_messages: typing.Dict[str, str] = None,\n+        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n         **metadata\n",
        "source_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:151:8 Incompatible variable type [9]: attribute is declared to have type `str` but is used as type `None`.",
    "message": " attribute is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 151,
    "warning_line": "        attribute: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_len": 482,
        "target_code": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_len": 601,
        "diff_format": "@@ -149,13 +149,15 @@\n         missing: typing.Any = missing_,\n-        data_key: str = None,\n-        attribute: str = None,\n-        validate: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+        data_key: typing.Optional[str] = None,\n+        attribute: typing.Optional[str] = None,\n+        validate: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+            ]\n         ] = None,\n         required: bool = False,\n-        allow_none: bool = None,\n+        allow_none: typing.Optional[bool] = None,\n         load_only: bool = False,\n         dump_only: bool = False,\n-        error_messages: typing.Dict[str, str] = None,\n+        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n         **metadata\n",
        "source_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:152:8 Incompatible variable type [9]: validate is declared to have type `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Iterable[typing.Callable[[typing.Any], typing.Any]]]` but is used as type `None`.",
    "message": " validate is declared to have type `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Iterable[typing.Callable[[typing.Any], typing.Any]]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 152,
    "warning_line": "        validate: typing.Union[",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_len": 482,
        "target_code": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_len": 601,
        "diff_format": "@@ -149,13 +149,15 @@\n         missing: typing.Any = missing_,\n-        data_key: str = None,\n-        attribute: str = None,\n-        validate: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+        data_key: typing.Optional[str] = None,\n+        attribute: typing.Optional[str] = None,\n+        validate: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+            ]\n         ] = None,\n         required: bool = False,\n-        allow_none: bool = None,\n+        allow_none: typing.Optional[bool] = None,\n         load_only: bool = False,\n         dump_only: bool = False,\n-        error_messages: typing.Dict[str, str] = None,\n+        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n         **metadata\n",
        "source_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:157:8 Incompatible variable type [9]: allow_none is declared to have type `bool` but is used as type `None`.",
    "message": " allow_none is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 157,
    "warning_line": "        allow_none: bool = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_len": 482,
        "target_code": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_len": 601,
        "diff_format": "@@ -149,13 +149,15 @@\n         missing: typing.Any = missing_,\n-        data_key: str = None,\n-        attribute: str = None,\n-        validate: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+        data_key: typing.Optional[str] = None,\n+        attribute: typing.Optional[str] = None,\n+        validate: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+            ]\n         ] = None,\n         required: bool = False,\n-        allow_none: bool = None,\n+        allow_none: typing.Optional[bool] = None,\n         load_only: bool = False,\n         dump_only: bool = False,\n-        error_messages: typing.Dict[str, str] = None,\n+        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n         **metadata\n",
        "source_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:160:8 Incompatible variable type [9]: error_messages is declared to have type `typing.Dict[str, str]` but is used as type `None`.",
    "message": " error_messages is declared to have type `typing.Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 160,
    "warning_line": "        error_messages: typing.Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_len": 482,
        "target_code": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_len": 601,
        "diff_format": "@@ -149,13 +149,15 @@\n         missing: typing.Any = missing_,\n-        data_key: str = None,\n-        attribute: str = None,\n-        validate: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+        data_key: typing.Optional[str] = None,\n+        attribute: typing.Optional[str] = None,\n+        validate: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n+            ]\n         ] = None,\n         required: bool = False,\n-        allow_none: bool = None,\n+        allow_none: typing.Optional[bool] = None,\n         load_only: bool = False,\n         dump_only: bool = False,\n-        error_messages: typing.Dict[str, str] = None,\n+        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n         **metadata\n",
        "source_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: str = None,\n        attribute: str = None,\n        validate: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n        ] = None,\n        required: bool = False,\n        allow_none: bool = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Dict[str, str] = None,\n        **metadata\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        missing: typing.Any = missing_,\n        data_key: typing.Optional[str] = None,\n        attribute: typing.Optional[str] = None,\n        validate: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Iterable[typing.Callable[[typing.Any], typing.Any]],\n            ]\n        ] = None,\n        required: bool = False,\n        allow_none: typing.Optional[bool] = None,\n        load_only: bool = False,\n        dump_only: bool = False,\n        error_messages: typing.Optional[typing.Dict[str, str]] = None,\n        **metadata\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:296:8 Incompatible variable type [9]: accessor is declared to have type `typing.Callable[[typing.Any, str, typing.Any], typing.Any]` but is used as type `None`.",
    "message": " accessor is declared to have type `typing.Callable[[typing.Any, str, typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 296,
    "warning_line": "        accessor: typing.Callable[[typing.Any, str, typing.Any], typing.Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        obj: typing.Any,\n        accessor: typing.Callable[[typing.Any, str, typing.Any], typing.Any] = None,\n        **kwargs\n",
        "source_code_len": 127,
        "target_code": "        obj: typing.Any,\n        accessor: typing.Optional[\n            typing.Callable[[typing.Any, str, typing.Any], typing.Any]\n        ] = None,\n        **kwargs\n",
        "target_code_len": 166,
        "diff_format": "@@ -295,3 +297,5 @@\n         obj: typing.Any,\n-        accessor: typing.Callable[[typing.Any, str, typing.Any], typing.Any] = None,\n+        accessor: typing.Optional[\n+            typing.Callable[[typing.Any, str, typing.Any], typing.Any]\n+        ] = None,\n         **kwargs\n",
        "source_code_with_indent": "        obj: typing.Any,\n        accessor: typing.Callable[[typing.Any, str, typing.Any], typing.Any] = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        obj: typing.Any,\n        accessor: typing.Optional[\n            typing.Callable[[typing.Any, str, typing.Any], typing.Any]\n        ] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:321:8 Incompatible variable type [9]: attr is declared to have type `str` but is used as type `None`.",
    "message": " attr is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 321,
    "warning_line": "        attr: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        value: typing.Any,\n        attr: str = None,\n        data: typing.Mapping[str, typing.Any] = None,\n        **kwargs\n",
        "source_code_len": 124,
        "target_code": "        value: typing.Any,\n        attr: typing.Optional[str] = None,\n        data: typing.Optional[typing.Mapping[str, typing.Any]] = None,\n        **kwargs\n",
        "target_code_len": 158,
        "diff_format": "@@ -320,4 +324,4 @@\n         value: typing.Any,\n-        attr: str = None,\n-        data: typing.Mapping[str, typing.Any] = None,\n+        attr: typing.Optional[str] = None,\n+        data: typing.Optional[typing.Mapping[str, typing.Any]] = None,\n         **kwargs\n",
        "source_code_with_indent": "        value: typing.Any,\n        attr: str = None,\n        data: typing.Mapping[str, typing.Any] = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        value: typing.Any,\n        attr: typing.Optional[str] = None,\n        data: typing.Optional[typing.Mapping[str, typing.Any]] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:322:8 Incompatible variable type [9]: data is declared to have type `typing.Mapping[str, typing.Any]` but is used as type `None`.",
    "message": " data is declared to have type `typing.Mapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 322,
    "warning_line": "        data: typing.Mapping[str, typing.Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        value: typing.Any,\n        attr: str = None,\n        data: typing.Mapping[str, typing.Any] = None,\n        **kwargs\n",
        "source_code_len": 124,
        "target_code": "        value: typing.Any,\n        attr: typing.Optional[str] = None,\n        data: typing.Optional[typing.Mapping[str, typing.Any]] = None,\n        **kwargs\n",
        "target_code_len": 158,
        "diff_format": "@@ -320,4 +324,4 @@\n         value: typing.Any,\n-        attr: str = None,\n-        data: typing.Mapping[str, typing.Any] = None,\n+        attr: typing.Optional[str] = None,\n+        data: typing.Optional[typing.Mapping[str, typing.Any]] = None,\n         **kwargs\n",
        "source_code_with_indent": "        value: typing.Any,\n        attr: str = None,\n        data: typing.Mapping[str, typing.Any] = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        value: typing.Any,\n        attr: typing.Optional[str] = None,\n        data: typing.Optional[typing.Mapping[str, typing.Any]] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:480:8 Incompatible variable type [9]: unknown is declared to have type `str` but is used as type `None`.",
    "message": " unknown is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 480,
    "warning_line": "        unknown: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        default: typing.Any = missing_,\n        only: types.StrSequenceOrSet = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        unknown: str = None,\n        **kwargs\n",
        "source_code_len": 205,
        "target_code": "        default: typing.Any = missing_,\n        only: typing.Optional[types.StrSequenceOrSet] = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        unknown: typing.Optional[str] = None,\n        **kwargs\n",
        "target_code_len": 239,
        "diff_format": "@@ -476,6 +480,6 @@\n         default: typing.Any = missing_,\n-        only: types.StrSequenceOrSet = None,\n+        only: typing.Optional[types.StrSequenceOrSet] = None,\n         exclude: types.StrSequenceOrSet = (),\n         many: bool = False,\n-        unknown: str = None,\n+        unknown: typing.Optional[str] = None,\n         **kwargs\n",
        "source_code_with_indent": "        default: typing.Any = missing_,\n        only: types.StrSequenceOrSet = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        unknown: str = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        default: typing.Any = missing_,\n        only: typing.Optional[types.StrSequenceOrSet] = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        unknown: typing.Optional[str] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1013:8 Incompatible variable type [9]: places is declared to have type `int` but is used as type `None`.",
    "message": " places is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1013,
    "warning_line": "        places: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        places: int = None,\n        rounding: str = None,\n        *,\n",
        "source_code_len": 83,
        "target_code": "        self,\n        places: typing.Optional[int] = None,\n        rounding: typing.Optional[str] = None,\n        *,\n",
        "target_code_len": 117,
        "diff_format": "@@ -1012,4 +1016,4 @@\n         self,\n-        places: int = None,\n-        rounding: str = None,\n+        places: typing.Optional[int] = None,\n+        rounding: typing.Optional[str] = None,\n         *,\n",
        "source_code_with_indent": "        self,\n        places: int = None,\n        rounding: str = None,\n        *,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        places: typing.Optional[int] = None,\n        rounding: typing.Optional[str] = None,\n        *,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1014:8 Incompatible variable type [9]: rounding is declared to have type `str` but is used as type `None`.",
    "message": " rounding is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1014,
    "warning_line": "        rounding: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        places: int = None,\n        rounding: str = None,\n        *,\n",
        "source_code_len": 83,
        "target_code": "        self,\n        places: typing.Optional[int] = None,\n        rounding: typing.Optional[str] = None,\n        *,\n",
        "target_code_len": 117,
        "diff_format": "@@ -1012,4 +1016,4 @@\n         self,\n-        places: int = None,\n-        rounding: str = None,\n+        places: typing.Optional[int] = None,\n+        rounding: typing.Optional[str] = None,\n         *,\n",
        "source_code_with_indent": "        self,\n        places: int = None,\n        rounding: str = None,\n        *,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        places: typing.Optional[int] = None,\n        rounding: typing.Optional[str] = None,\n        *,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1107:17 Incompatible variable type [9]: truthy is declared to have type `typing.Set[typing.Any]` but is used as type `None`.",
    "message": " truthy is declared to have type `typing.Set[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1107,
    "warning_line": "        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs\n    ):\n",
        "source_code_len": 104,
        "target_code": "    def __init__(\n        self,\n        *,\n        truthy: typing.Optional[typing.Set] = None,\n        falsy: typing.Optional[typing.Set] = None,\n        **kwargs\n    ):\n",
        "target_code_len": 170,
        "diff_format": "@@ -1106,3 +1110,7 @@\n     def __init__(\n-        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs\n+        self,\n+        *,\n+        truthy: typing.Optional[typing.Set] = None,\n+        falsy: typing.Optional[typing.Set] = None,\n+        **kwargs\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        *,\n        truthy: typing.Optional[typing.Set] = None,\n        falsy: typing.Optional[typing.Set] = None,\n        **kwargs\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1107:44 Incompatible variable type [9]: falsy is declared to have type `typing.Set[typing.Any]` but is used as type `None`.",
    "message": " falsy is declared to have type `typing.Set[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1107,
    "warning_line": "        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs\n    ):\n",
        "source_code_len": 104,
        "target_code": "    def __init__(\n        self,\n        *,\n        truthy: typing.Optional[typing.Set] = None,\n        falsy: typing.Optional[typing.Set] = None,\n        **kwargs\n    ):\n",
        "target_code_len": 170,
        "diff_format": "@@ -1106,3 +1110,7 @@\n     def __init__(\n-        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs\n+        self,\n+        *,\n+        truthy: typing.Optional[typing.Set] = None,\n+        falsy: typing.Optional[typing.Set] = None,\n+        **kwargs\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, *, truthy: typing.Set = None, falsy: typing.Set = None, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        *,\n        truthy: typing.Optional[typing.Set] = None,\n        falsy: typing.Optional[typing.Set] = None,\n        **kwargs\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1184:23 Incompatible variable type [9]: format is declared to have type `str` but is used as type `None`.",
    "message": " format is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1184,
    "warning_line": "    def __init__(self, format: str = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "source_code_len": 90,
        "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "target_code_len": 107,
        "diff_format": "@@ -1183,3 +1191,3 @@\n \n-    def __init__(self, format: str = None, **kwargs):\n+    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n         super().__init__(**kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, format: str = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1249:23 Incompatible variable type [9]: format is declared to have type `str` but is used as type `None`.",
    "message": " format is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1249,
    "warning_line": "    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "source_code_len": 90,
        "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "target_code_len": 107,
        "diff_format": "@@ -1183,3 +1191,3 @@\n \n-    def __init__(self, format: str = None, **kwargs):\n+    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n         super().__init__(**kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, format: str = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):\n        super().__init__(format=format, **kwargs)\n",
        "source_code_len": 138,
        "target_code": "\n    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        timezone: typing.Optional[dt.timezone] = None,\n        **kwargs\n    ):\n        super().__init__(format=format, **kwargs)\n",
        "target_code_len": 218,
        "diff_format": "@@ -1248,3 +1256,9 @@\n \n-    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):\n+    def __init__(\n+        self,\n+        format: typing.Optional[str] = None,\n+        *,\n+        timezone: typing.Optional[dt.timezone] = None,\n+        **kwargs\n+    ):\n         super().__init__(format=format, **kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):\n        <IND>super().__init__(format=format, **kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        timezone: typing.Optional[dt.timezone] = None,\n        **kwargs\n    ):\n        <IND>super().__init__(format=format, **kwargs)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1249:46 Incompatible variable type [9]: timezone is declared to have type `dt.timezone` but is used as type `None`.",
    "message": " timezone is declared to have type `dt.timezone` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1249,
    "warning_line": "    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "source_code_len": 90,
        "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "target_code_len": 107,
        "diff_format": "@@ -1183,3 +1191,3 @@\n \n-    def __init__(self, format: str = None, **kwargs):\n+    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n         super().__init__(**kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, format: str = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):\n        super().__init__(format=format, **kwargs)\n",
        "source_code_len": 138,
        "target_code": "\n    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        timezone: typing.Optional[dt.timezone] = None,\n        **kwargs\n    ):\n        super().__init__(format=format, **kwargs)\n",
        "target_code_len": 218,
        "diff_format": "@@ -1248,3 +1256,9 @@\n \n-    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):\n+    def __init__(\n+        self,\n+        format: typing.Optional[str] = None,\n+        *,\n+        timezone: typing.Optional[dt.timezone] = None,\n+        **kwargs\n+    ):\n         super().__init__(format=format, **kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, format: str = None, *, timezone: dt.timezone = None, **kwargs):\n        <IND>super().__init__(format=format, **kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        timezone: typing.Optional[dt.timezone] = None,\n        **kwargs\n    ):\n        <IND>super().__init__(format=format, **kwargs)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1281:14 Incompatible variable type [9]: format is declared to have type `str` but is used as type `None`.",
    "message": " format is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1281,
    "warning_line": "        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "source_code_len": 90,
        "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "target_code_len": 107,
        "diff_format": "@@ -1183,3 +1191,3 @@\n \n-    def __init__(self, format: str = None, **kwargs):\n+    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n         super().__init__(**kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, format: str = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs\n    ):\n",
        "source_code_len": 107,
        "target_code": "    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        default_timezone: typing.Optional[dt.tzinfo] = None,\n        **kwargs\n    ):\n",
        "target_code_len": 173,
        "diff_format": "@@ -1280,3 +1294,7 @@\n     def __init__(\n-        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs\n+        self,\n+        format: typing.Optional[str] = None,\n+        *,\n+        default_timezone: typing.Optional[dt.tzinfo] = None,\n+        **kwargs\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        default_timezone: typing.Optional[dt.tzinfo] = None,\n        **kwargs\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1281:37 Incompatible variable type [9]: default_timezone is declared to have type `dt.tzinfo` but is used as type `None`.",
    "message": " default_timezone is declared to have type `dt.tzinfo` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1281,
    "warning_line": "        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "source_code_len": 90,
        "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
        "target_code_len": 107,
        "diff_format": "@@ -1183,3 +1191,3 @@\n \n-    def __init__(self, format: str = None, **kwargs):\n+    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n         super().__init__(**kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, format: str = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs\n    ):\n",
        "source_code_len": 107,
        "target_code": "    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        default_timezone: typing.Optional[dt.tzinfo] = None,\n        **kwargs\n    ):\n",
        "target_code_len": 173,
        "diff_format": "@@ -1280,3 +1294,7 @@\n     def __init__(\n-        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs\n+        self,\n+        format: typing.Optional[str] = None,\n+        *,\n+        default_timezone: typing.Optional[dt.tzinfo] = None,\n+        **kwargs\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, format: str = None, *, default_timezone: dt.tzinfo = None, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        format: typing.Optional[str] = None,\n        *,\n        default_timezone: typing.Optional[dt.tzinfo] = None,\n        **kwargs\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1449:8 Incompatible variable type [9]: keys is declared to have type `typing.Union[typing.Type[typing.Any], Field]` but is used as type `None`.",
    "message": " keys is declared to have type `typing.Union[typing.Type[typing.Any], Field]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1449,
    "warning_line": "        keys: typing.Union[Field, type] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        keys: typing.Union[Field, type] = None,\n        values: typing.Union[Field, type] = None,\n        **kwargs\n",
        "source_code_len": 129,
        "target_code": "        self,\n        keys: typing.Optional[typing.Union[Field, type]] = None,\n        values: typing.Optional[typing.Union[Field, type]] = None,\n        **kwargs\n",
        "target_code_len": 163,
        "diff_format": "@@ -1448,4 +1466,4 @@\n         self,\n-        keys: typing.Union[Field, type] = None,\n-        values: typing.Union[Field, type] = None,\n+        keys: typing.Optional[typing.Union[Field, type]] = None,\n+        values: typing.Optional[typing.Union[Field, type]] = None,\n         **kwargs\n",
        "source_code_with_indent": "        self,\n        keys: typing.Union[Field, type] = None,\n        values: typing.Union[Field, type] = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        keys: typing.Optional[typing.Union[Field, type]] = None,\n        values: typing.Optional[typing.Union[Field, type]] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1450:8 Incompatible variable type [9]: values is declared to have type `typing.Union[typing.Type[typing.Any], Field]` but is used as type `None`.",
    "message": " values is declared to have type `typing.Union[typing.Type[typing.Any], Field]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1450,
    "warning_line": "        values: typing.Union[Field, type] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        keys: typing.Union[Field, type] = None,\n        values: typing.Union[Field, type] = None,\n        **kwargs\n",
        "source_code_len": 129,
        "target_code": "        self,\n        keys: typing.Optional[typing.Union[Field, type]] = None,\n        values: typing.Optional[typing.Union[Field, type]] = None,\n        **kwargs\n",
        "target_code_len": 163,
        "diff_format": "@@ -1448,4 +1466,4 @@\n         self,\n-        keys: typing.Union[Field, type] = None,\n-        values: typing.Union[Field, type] = None,\n+        keys: typing.Optional[typing.Union[Field, type]] = None,\n+        values: typing.Optional[typing.Union[Field, type]] = None,\n         **kwargs\n",
        "source_code_with_indent": "        self,\n        keys: typing.Union[Field, type] = None,\n        values: typing.Union[Field, type] = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        keys: typing.Optional[typing.Union[Field, type]] = None,\n        values: typing.Optional[typing.Union[Field, type]] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1705:23 Incompatible variable type [9]: serialize is declared to have type `str` but is used as type `None`.",
    "message": " serialize is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1705,
    "warning_line": "    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):\n        # Set dump_only and load_only based on arguments\n",
        "source_code_len": 140,
        "target_code": "\n    def __init__(\n        self,\n        serialize: typing.Optional[str] = None,\n        deserialize: typing.Optional[str] = None,\n        **kwargs\n    ):\n        # Set dump_only and load_only based on arguments\n",
        "target_code_len": 212,
        "diff_format": "@@ -1704,3 +1722,8 @@\n \n-    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):\n+    def __init__(\n+        self,\n+        serialize: typing.Optional[str] = None,\n+        deserialize: typing.Optional[str] = None,\n+        **kwargs\n+    ):\n         # Set dump_only and load_only based on arguments\n",
        "source_code_with_indent": "\n    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):\n        # Set dump_only and load_only based on arguments\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self,\n        serialize: typing.Optional[str] = None,\n        deserialize: typing.Optional[str] = None,\n        **kwargs\n    ):\n        # Set dump_only and load_only based on arguments\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1705:46 Incompatible variable type [9]: deserialize is declared to have type `str` but is used as type `None`.",
    "message": " deserialize is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1705,
    "warning_line": "    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):\n        # Set dump_only and load_only based on arguments\n",
        "source_code_len": 140,
        "target_code": "\n    def __init__(\n        self,\n        serialize: typing.Optional[str] = None,\n        deserialize: typing.Optional[str] = None,\n        **kwargs\n    ):\n        # Set dump_only and load_only based on arguments\n",
        "target_code_len": 212,
        "diff_format": "@@ -1704,3 +1722,8 @@\n \n-    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):\n+    def __init__(\n+        self,\n+        serialize: typing.Optional[str] = None,\n+        deserialize: typing.Optional[str] = None,\n+        **kwargs\n+    ):\n         # Set dump_only and load_only based on arguments\n",
        "source_code_with_indent": "\n    def __init__(self, serialize: str = None, deserialize: str = None, **kwargs):\n        # Set dump_only and load_only based on arguments\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self,\n        serialize: typing.Optional[str] = None,\n        deserialize: typing.Optional[str] = None,\n        **kwargs\n    ):\n        # Set dump_only and load_only based on arguments\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1758:8 Incompatible variable type [9]: serialize is declared to have type `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Callable[[typing.Any, typing.Dict[typing.Any, typing.Any]], typing.Any]]` but is used as type `None`.",
    "message": " serialize is declared to have type `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Callable[[typing.Any, typing.Dict[typing.Any, typing.Any]], typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1758,
    "warning_line": "        serialize: typing.Union[",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        serialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n        deserialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n",
        "source_code_len": 364,
        "target_code": "        self,\n        serialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n        deserialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n",
        "target_code_len": 466,
        "diff_format": "@@ -1757,9 +1780,13 @@\n         self,\n-        serialize: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+        serialize: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+            ]\n         ] = None,\n-        deserialize: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+        deserialize: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+            ]\n         ] = None,\n",
        "source_code_with_indent": "        self,\n        serialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n        deserialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        serialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n        deserialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/fields.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/fields.py:1762:8 Incompatible variable type [9]: deserialize is declared to have type `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Callable[[typing.Any, typing.Dict[typing.Any, typing.Any]], typing.Any]]` but is used as type `None`.",
    "message": " deserialize is declared to have type `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Callable[[typing.Any, typing.Dict[typing.Any, typing.Any]], typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1762,
    "warning_line": "        deserialize: typing.Union[",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        serialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n        deserialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n",
        "source_code_len": 364,
        "target_code": "        self,\n        serialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n        deserialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n",
        "target_code_len": 466,
        "diff_format": "@@ -1757,9 +1780,13 @@\n         self,\n-        serialize: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+        serialize: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+            ]\n         ] = None,\n-        deserialize: typing.Union[\n-            typing.Callable[[typing.Any], typing.Any],\n-            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+        deserialize: typing.Optional[\n+            typing.Union[\n+                typing.Callable[[typing.Any], typing.Any],\n+                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n+            ]\n         ] = None,\n",
        "source_code_with_indent": "        self,\n        serialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n        deserialize: typing.Union[\n            typing.Callable[[typing.Any], typing.Any],\n            typing.Callable[[typing.Any, typing.Dict], typing.Any],\n        ] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        serialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n        deserialize: typing.Optional[\n            typing.Union[\n                typing.Callable[[typing.Any], typing.Any],\n                typing.Callable[[typing.Any, typing.Dict], typing.Any],\n            ]\n        ] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:371:8 Incompatible variable type [9]: context is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " context is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 371,
    "warning_line": "        context: typing.Dict = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        only: types.StrSequenceOrSet = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        context: typing.Dict = None,\n        load_only: types.StrSequenceOrSet = (),\n",
        "source_code_len": 215,
        "target_code": "        *,\n        only: typing.Optional[types.StrSequenceOrSet] = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        context: typing.Optional[typing.Dict] = None,\n        load_only: types.StrSequenceOrSet = (),\n",
        "target_code_len": 249,
        "diff_format": "@@ -367,6 +367,6 @@\n         *,\n-        only: types.StrSequenceOrSet = None,\n+        only: typing.Optional[types.StrSequenceOrSet] = None,\n         exclude: types.StrSequenceOrSet = (),\n         many: bool = False,\n-        context: typing.Dict = None,\n+        context: typing.Optional[typing.Dict] = None,\n         load_only: types.StrSequenceOrSet = (),\n",
        "source_code_with_indent": "        *,\n        only: types.StrSequenceOrSet = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        context: typing.Dict = None,\n        load_only: types.StrSequenceOrSet = (),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        only: typing.Optional[types.StrSequenceOrSet] = None,\n        exclude: types.StrSequenceOrSet = (),\n        many: bool = False,\n        context: typing.Optional[typing.Dict] = None,\n        load_only: types.StrSequenceOrSet = (),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:375:8 Incompatible variable type [9]: unknown is declared to have type `str` but is used as type `None`.",
    "message": " unknown is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 375,
    "warning_line": "        unknown: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        partial: typing.Union[bool, types.StrSequenceOrSet] = False,\n        unknown: str = None\n    ):\n",
        "source_code_len": 104,
        "target_code": "        partial: typing.Union[bool, types.StrSequenceOrSet] = False,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 121,
        "diff_format": "@@ -374,3 +374,3 @@\n         partial: typing.Union[bool, types.StrSequenceOrSet] = False,\n-        unknown: str = None\n+        unknown: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        partial: typing.Union[bool, types.StrSequenceOrSet] = False,\n        unknown: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        partial: typing.Union[bool, types.StrSequenceOrSet] = False,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:528:39 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 528,
    "warning_line": "    def dump(self, obj: typing.Any, *, many: bool = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def dump(self, obj: typing.Any, *, many: bool = None):\n        \"\"\"Serialize an object to native Python data types according to this\n",
        "source_code_len": 137,
        "target_code": "\n    def dump(self, obj: typing.Any, *, many: typing.Optional[bool] = None):\n        \"\"\"Serialize an object to native Python data types according to this\n",
        "target_code_len": 154,
        "diff_format": "@@ -527,3 +527,3 @@\n \n-    def dump(self, obj: typing.Any, *, many: bool = None):\n+    def dump(self, obj: typing.Any, *, many: typing.Optional[bool] = None):\n         \"\"\"Serialize an object to native Python data types according to this\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def dump(self, obj: typing.Any, *, many: bool = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def dump(self, obj: typing.Any, *, many: typing.Optional[bool] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:566:44 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 566,
    "warning_line": "    def dumps(self, obj: typing.Any, *args, many: bool = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def dump(self, obj: typing.Any, *, many: bool = None):\n        \"\"\"Serialize an object to native Python data types according to this\n",
        "source_code_len": 137,
        "target_code": "\n    def dump(self, obj: typing.Any, *, many: typing.Optional[bool] = None):\n        \"\"\"Serialize an object to native Python data types according to this\n",
        "target_code_len": 154,
        "diff_format": "@@ -527,3 +527,3 @@\n \n-    def dump(self, obj: typing.Any, *, many: bool = None):\n+    def dump(self, obj: typing.Any, *, many: typing.Optional[bool] = None):\n         \"\"\"Serialize an object to native Python data types according to this\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def dump(self, obj: typing.Any, *, many: bool = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def dump(self, obj: typing.Any, *, many: typing.Optional[bool] = None):\n        <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def dumps(self, obj: typing.Any, *args, many: bool = None, **kwargs):\n        \"\"\"Same as :meth:`dump`, except return a JSON-encoded string.\n",
        "source_code_len": 145,
        "target_code": "\n    def dumps(\n        self, obj: typing.Any, *args, many: typing.Optional[bool] = None, **kwargs\n    ):\n        \"\"\"Same as :meth:`dump`, except return a JSON-encoded string.\n",
        "target_code_len": 176,
        "diff_format": "@@ -565,3 +565,5 @@\n \n-    def dumps(self, obj: typing.Any, *args, many: bool = None, **kwargs):\n+    def dumps(\n+        self, obj: typing.Any, *args, many: typing.Optional[bool] = None, **kwargs\n+    ):\n         \"\"\"Same as :meth:`dump`, except return a JSON-encoded string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def dumps(self, obj: typing.Any, *args, many: bool = None, **kwargs):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def dumps(\n        self, obj: typing.Any, *args, many: typing.Optional[bool] = None, **kwargs\n    ):\n        <IND>"
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:699:8 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 699,
    "warning_line": "        many: bool = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_len": 141,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 192,
        "diff_format": "@@ -698,5 +700,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_len": 168,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_len": 219,
        "diff_format": "@@ -814,5 +816,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         postprocess: bool = True\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:701:8 Incompatible variable type [9]: unknown is declared to have type `str` but is used as type `None`.",
    "message": " unknown is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 701,
    "warning_line": "        unknown: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_len": 141,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 192,
        "diff_format": "@@ -698,5 +700,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_len": 168,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_len": 219,
        "diff_format": "@@ -814,5 +816,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         postprocess: bool = True\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:731:8 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 731,
    "warning_line": "        many: bool = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_len": 141,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 192,
        "diff_format": "@@ -698,5 +700,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        **kwargs\n",
        "source_code_len": 152,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        **kwargs\n",
        "target_code_len": 203,
        "diff_format": "@@ -730,5 +732,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         **kwargs\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_len": 168,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_len": 219,
        "diff_format": "@@ -814,5 +816,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         postprocess: bool = True\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:733:8 Incompatible variable type [9]: unknown is declared to have type `str` but is used as type `None`.",
    "message": " unknown is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 733,
    "warning_line": "        unknown: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_len": 141,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 192,
        "diff_format": "@@ -698,5 +700,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        **kwargs\n",
        "source_code_len": 152,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        **kwargs\n",
        "target_code_len": 203,
        "diff_format": "@@ -730,5 +732,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         **kwargs\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_len": 168,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_len": 219,
        "diff_format": "@@ -814,5 +816,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         postprocess: bool = True\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:783:8 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 783,
    "warning_line": "        many: bool = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None\n    ) -> typing.Dict[str, typing.List[str]]:\n",
        "source_code_len": 150,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None\n    ) -> typing.Dict[str, typing.List[str]]:\n",
        "target_code_len": 184,
        "diff_format": "@@ -782,4 +784,4 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None\n     ) -> typing.Dict[str, typing.List[str]]:\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None\n    ) -> typing.Dict[str, typing.List[str]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None\n    ) -> typing.Dict[str, typing.List[str]]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_len": 168,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_len": 219,
        "diff_format": "@@ -814,5 +816,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         postprocess: bool = True\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:815:8 Incompatible variable type [9]: many is declared to have type `bool` but is used as type `None`.",
    "message": " many is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 815,
    "warning_line": "        many: bool = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_len": 168,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_len": 219,
        "diff_format": "@@ -814,5 +816,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         postprocess: bool = True\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/schema.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/schema.py:817:8 Incompatible variable type [9]: unknown is declared to have type `str` but is used as type `None`.",
    "message": " unknown is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 817,
    "warning_line": "        unknown: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_len": 168,
        "target_code": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_len": 219,
        "diff_format": "@@ -814,5 +816,5 @@\n         *,\n-        many: bool = None,\n-        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n-        unknown: str = None,\n+        many: typing.Optional[bool] = None,\n+        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n+        unknown: typing.Optional[str] = None,\n         postprocess: bool = True\n",
        "source_code_with_indent": "        *,\n        many: bool = None,\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\n        unknown: str = None,\n        postprocess: bool = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        many: typing.Optional[bool] = None,\n        partial: typing.Optional[typing.Union[bool, types.StrSequenceOrSet]] = None,\n        unknown: typing.Optional[str] = None,\n        postprocess: bool = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:97:8 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 97,
    "warning_line": "        error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        relative: bool = False,\n        schemes: types.StrSequenceOrSet = None,\n        require_tld: bool = True,\n        error: str = None\n    ):\n",
        "source_code_len": 147,
        "target_code": "        relative: bool = False,\n        schemes: typing.Optional[types.StrSequenceOrSet] = None,\n        require_tld: bool = True,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 181,
        "diff_format": "@@ -94,5 +94,5 @@\n         relative: bool = False,\n-        schemes: types.StrSequenceOrSet = None,\n+        schemes: typing.Optional[types.StrSequenceOrSet] = None,\n         require_tld: bool = True,\n-        error: str = None\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        relative: bool = False,\n        schemes: types.StrSequenceOrSet = None,\n        require_tld: bool = True,\n        error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        relative: bool = False,\n        schemes: typing.Optional[types.StrSequenceOrSet] = None,\n        require_tld: bool = True,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:157:26 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 157,
    "warning_line": "    def __init__(self, *, error: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, *, error: str = None):\n        self.error = error or self.default_message  # type: str\n",
        "source_code_len": 111,
        "target_code": "\n    def __init__(self, *, error: typing.Optional[str] = None):\n        self.error = error or self.default_message  # type: str\n",
        "target_code_len": 128,
        "diff_format": "@@ -156,3 +156,3 @@\n \n-    def __init__(self, *, error: str = None):\n+    def __init__(self, *, error: typing.Optional[str] = None):\n         self.error = error or self.default_message  # type: str\n",
        "source_code_with_indent": "\n    def __init__(self, *, error: str = None):\n        <IND>self.error = error or self.default_message  # type: str\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, *, error: typing.Optional[str] = None):\n        <IND>self.error = error or self.default_message  # type: str\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:223:8 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 223,
    "warning_line": "        error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        max_inclusive: bool = True,\n        error: str = None\n    ):\n",
        "source_code_len": 69,
        "target_code": "        max_inclusive: bool = True,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 86,
        "diff_format": "@@ -222,3 +222,3 @@\n         max_inclusive: bool = True,\n-        error: str = None\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        max_inclusive: bool = True,\n        error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        max_inclusive: bool = True,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:288:14 Incompatible variable type [9]: min is declared to have type `int` but is used as type `None`.",
    "message": " min is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 288,
    "warning_line": "        self, min: int = None, max: int = None, *, equal: int = None, error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_len": 113,
        "target_code": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 221,
        "diff_format": "@@ -287,3 +287,8 @@\n     def __init__(\n-        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n+        self,\n+        min: typing.Optional[int] = None,\n+        max: typing.Optional[int] = None,\n+        *,\n+        equal: typing.Optional[int] = None,\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:288:31 Incompatible variable type [9]: max is declared to have type `int` but is used as type `None`.",
    "message": " max is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 288,
    "warning_line": "        self, min: int = None, max: int = None, *, equal: int = None, error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_len": 113,
        "target_code": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 221,
        "diff_format": "@@ -287,3 +287,8 @@\n     def __init__(\n-        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n+        self,\n+        min: typing.Optional[int] = None,\n+        max: typing.Optional[int] = None,\n+        *,\n+        equal: typing.Optional[int] = None,\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:288:51 Incompatible variable type [9]: equal is declared to have type `int` but is used as type `None`.",
    "message": " equal is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 288,
    "warning_line": "        self, min: int = None, max: int = None, *, equal: int = None, error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_len": 113,
        "target_code": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 221,
        "diff_format": "@@ -287,3 +287,8 @@\n     def __init__(\n-        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n+        self,\n+        min: typing.Optional[int] = None,\n+        max: typing.Optional[int] = None,\n+        *,\n+        equal: typing.Optional[int] = None,\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:288:70 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 288,
    "warning_line": "        self, min: int = None, max: int = None, *, equal: int = None, error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_len": 113,
        "target_code": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 221,
        "diff_format": "@@ -287,3 +287,8 @@\n     def __init__(\n-        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n+        self,\n+        min: typing.Optional[int] = None,\n+        max: typing.Optional[int] = None,\n+        *,\n+        equal: typing.Optional[int] = None,\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, min: int = None, max: int = None, *, equal: int = None, error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        equal: typing.Optional[int] = None,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:339:38 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 339,
    "warning_line": "    def __init__(self, comparable, *, error: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, comparable, *, error: str = None):\n        self.comparable = comparable\n",
        "source_code_len": 96,
        "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        self.comparable = comparable\n",
        "target_code_len": 113,
        "diff_format": "@@ -338,3 +343,3 @@\n \n-    def __init__(self, comparable, *, error: str = None):\n+    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n         self.comparable = comparable\n",
        "source_code_with_indent": "\n    def __init__(self, comparable, *, error: str = None):\n        <IND>self.comparable = comparable\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        <IND>self.comparable = comparable\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:377:8 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 377,
    "warning_line": "        error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        error: str = None\n    ):\n",
        "source_code_len": 44,
        "target_code": "        *,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 61,
        "diff_format": "@@ -376,3 +381,3 @@\n         *,\n-        error: str = None\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        *,\n        error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:411:39 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 411,
    "warning_line": "    def __init__(self, method: str, *, error: str = None, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, method: str, *, error: str = None, **kwargs):\n        self.method = method\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, method: str, *, error: typing.Optional[str] = None, **kwargs):\n        self.method = method\n",
        "target_code_len": 116,
        "diff_format": "@@ -410,3 +415,3 @@\n \n-    def __init__(self, method: str, *, error: str = None, **kwargs):\n+    def __init__(self, method: str, *, error: typing.Optional[str] = None, **kwargs):\n         self.method = method\n",
        "source_code_with_indent": "\n    def __init__(self, method: str, *, error: str = None, **kwargs):\n        <IND>self.method = method\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, method: str, *, error: typing.Optional[str] = None, **kwargs):\n        <IND>self.method = method\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:441:53 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 441,
    "warning_line": "    def __init__(self, iterable: typing.Iterable, *, error: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, iterable: typing.Iterable, *, error: str = None):\n        self.iterable = iterable\n",
        "source_code_len": 107,
        "target_code": "\n    def __init__(\n        self, iterable: typing.Iterable, *, error: typing.Optional[str] = None\n    ):\n        self.iterable = iterable\n",
        "target_code_len": 138,
        "diff_format": "@@ -440,3 +445,5 @@\n \n-    def __init__(self, iterable: typing.Iterable, *, error: str = None):\n+    def __init__(\n+        self, iterable: typing.Iterable, *, error: typing.Optional[str] = None\n+    ):\n         self.iterable = iterable\n",
        "source_code_with_indent": "\n    def __init__(self, iterable: typing.Iterable, *, error: str = None):\n        <IND>self.iterable = iterable\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self, iterable: typing.Iterable, *, error: typing.Optional[str] = None\n    ):\n        <IND>self.iterable = iterable\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:476:8 Incompatible variable type [9]: labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
    "message": " labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 476,
    "warning_line": "        labels: typing.Iterable[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
        "source_code_len": 123,
        "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 157,
        "diff_format": "@@ -475,5 +482,5 @@\n         choices: typing.Iterable,\n-        labels: typing.Iterable[str] = None,\n+        labels: typing.Optional[typing.Iterable[str]] = None,\n         *,\n-        error: str = None\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "marshmallow-code/marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow/src/marshmallow/validate.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/marshmallow/validate.py:478:8 Incompatible variable type [9]: error is declared to have type `str` but is used as type `None`.",
    "message": " error is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 478,
    "warning_line": "        error: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
        "source_code_len": 123,
        "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_len": 157,
        "diff_format": "@@ -475,5 +482,5 @@\n         choices: typing.Iterable,\n-        labels: typing.Iterable[str] = None,\n+        labels: typing.Optional[typing.Iterable[str]] = None,\n         *,\n-        error: str = None\n+        error: typing.Optional[str] = None\n     ):\n",
        "source_code_with_indent": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]