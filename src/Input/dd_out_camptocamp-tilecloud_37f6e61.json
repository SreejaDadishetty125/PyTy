[
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/grid/free.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/camptocamp-tilecloud/tilecloud/grid/free.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tilecloud/grid/free.py:25:46 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `int.__mod__` but got `Union[float, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `int.__mod__` but got `Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "                if self.resolutions[parent] % resolution == 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from math import floor\nfrom typing import Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 82,
        "target_code": "from math import floor\nfrom typing import Iterator, List, Optional, Sequence, Tuple\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -1,3 +1,3 @@\n from math import floor\n-from typing import Iterator, List, Optional, Tuple, Union\n+from typing import Iterator, List, Optional, Sequence, Tuple\n \n",
        "source_code_with_indent": "from math import floor\nfrom typing import Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from math import floor\nfrom typing import Iterator, List, Optional, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_len": 158,
        "target_code": "        self,\n        resolutions: Sequence[int],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "target_code_len": 114,
        "diff_format": "@@ -9,3 +9,3 @@\n         self,\n-        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n+        resolutions: Sequence[int],\n         max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_with_indent": "        self,\n        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        resolutions: Sequence[int],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/grid/free.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/camptocamp-tilecloud/tilecloud/grid/free.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tilecloud/grid/free.py:36:57 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `int.__truediv__` but got `Union[float, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `int.__truediv__` but got `Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "                factor = self.resolutions[tilecoord.z] / self.resolutions[child_z]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from math import floor\nfrom typing import Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 82,
        "target_code": "from math import floor\nfrom typing import Iterator, List, Optional, Sequence, Tuple\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -1,3 +1,3 @@\n from math import floor\n-from typing import Iterator, List, Optional, Tuple, Union\n+from typing import Iterator, List, Optional, Sequence, Tuple\n \n",
        "source_code_with_indent": "from math import floor\nfrom typing import Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from math import floor\nfrom typing import Iterator, List, Optional, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_len": 158,
        "target_code": "        self,\n        resolutions: Sequence[int],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "target_code_len": 114,
        "diff_format": "@@ -9,3 +9,3 @@\n         self,\n-        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n+        resolutions: Sequence[int],\n         max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_with_indent": "        self,\n        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        resolutions: Sequence[int],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/grid/free.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/camptocamp-tilecloud/tilecloud/grid/free.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tilecloud/grid/free.py:55:56 Unsupported operand [58]: `*` is not supported for operand types `int` and `Union[float, int]`.",
    "message": " `*` is not supported for operand types `int` and `Union[float, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 55,
    "warning_line": "            + (self.tile_size * tilecoord.x - border) * self.resolutions[tilecoord.z] / self.scale",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def extent(self, tilecoord: TileCoord, border: int = 0) -> Tuple[float, float, float, float]:\n        assert self.max_extent\n",
        "source_code_len": 130,
        "target_code": "\n    def extent(self, tilecoord: TileCoord, border: float = 0) -> Tuple[float, float, float, float]:\n        assert self.max_extent\n",
        "target_code_len": 132,
        "diff_format": "@@ -42,3 +42,3 @@\n \n-    def extent(self, tilecoord: TileCoord, border: int = 0) -> Tuple[float, float, float, float]:\n+    def extent(self, tilecoord: TileCoord, border: float = 0) -> Tuple[float, float, float, float]:\n         assert self.max_extent\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED><DED>def extent(self, tilecoord: TileCoord, border: int = 0) -> Tuple[float, float, float, float]:\n        <IND>assert self.max_extent\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED><DED>def extent(self, tilecoord: TileCoord, border: float = 0) -> Tuple[float, float, float, float]:\n        <IND>assert self.max_extent\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/grid/free.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/camptocamp-tilecloud/tilecloud/grid/free.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tilecloud/grid/free.py:61:14 Unsupported operand [58]: `*` is not supported for operand types `int` and `Union[float, int]`.",
    "message": " `*` is not supported for operand types `int` and `Union[float, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 61,
    "warning_line": "            * self.resolutions[tilecoord.z]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def extent(self, tilecoord: TileCoord, border: int = 0) -> Tuple[float, float, float, float]:\n        assert self.max_extent\n",
        "source_code_len": 130,
        "target_code": "\n    def extent(self, tilecoord: TileCoord, border: float = 0) -> Tuple[float, float, float, float]:\n        assert self.max_extent\n",
        "target_code_len": 132,
        "diff_format": "@@ -42,3 +42,3 @@\n \n-    def extent(self, tilecoord: TileCoord, border: int = 0) -> Tuple[float, float, float, float]:\n+    def extent(self, tilecoord: TileCoord, border: float = 0) -> Tuple[float, float, float, float]:\n         assert self.max_extent\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED><DED>def extent(self, tilecoord: TileCoord, border: int = 0) -> Tuple[float, float, float, float]:\n        <IND>assert self.max_extent\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED><DED>def extent(self, tilecoord: TileCoord, border: float = 0) -> Tuple[float, float, float, float]:\n        <IND>assert self.max_extent\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/grid/free.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/camptocamp-tilecloud/tilecloud/grid/free.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tilecloud/grid/free.py:75:50 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `int.__truediv__` but got `Union[float, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `int.__truediv__` but got `Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 75,
    "warning_line": "            factor = self.resolutions[parent_z] / self.resolutions[tilecoord.z]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from math import floor\nfrom typing import Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 82,
        "target_code": "from math import floor\nfrom typing import Iterator, List, Optional, Sequence, Tuple\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -1,3 +1,3 @@\n from math import floor\n-from typing import Iterator, List, Optional, Tuple, Union\n+from typing import Iterator, List, Optional, Sequence, Tuple\n \n",
        "source_code_with_indent": "from math import floor\nfrom typing import Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from math import floor\nfrom typing import Iterator, List, Optional, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_len": 158,
        "target_code": "        self,\n        resolutions: Sequence[int],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "target_code_len": 114,
        "diff_format": "@@ -9,3 +9,3 @@\n         self,\n-        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n+        resolutions: Sequence[int],\n         max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_with_indent": "        self,\n        resolutions: Union[List[int], Tuple[int, ...], Tuple[int, int, float]],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        resolutions: Sequence[int],\n        max_extent: Optional[Tuple[int, int, int, int]] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_metatile.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_metatile.py:23:36 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `MetaTileSplitterTileStore.get` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_metatile.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_metatile.py:56:36 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `MetaTileSplitterTileStore.get` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:16:64 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.delete` but got `typing.Tuple[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:19:61 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.get` but got `typing.Tuple[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:23:61 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.put` but got `typing.Tuple[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:68:35 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.put` but got `typing.List[typing.Optional[Tile]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:78:35 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.get` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:79:16 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `consume` but got `typing.Iterator[typing.Optional[Tile]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:87:38 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.delete` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:104:35 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.put` but got `typing.List[typing.Optional[Tile]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:115:35 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.get` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:116:16 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `consume` but got `typing.Iterator[typing.Optional[Tile]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:130:38 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.delete` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:167:47 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.delete` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:169:44 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.get` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "camptocamp/tilecloud",
    "commit": "37f6e61b4b2514f7c3c3dbb39cfdac2cdb3a95a0",
    "filename": "tilecloud/tests/test_tilestore.py",
    "min_patch_found": false,
    "full_warning_msg": "tilecloud/tests/test_tilestore.py:170:44 Incompatible parameter type [6]: Expected `typing.Iterator[Tile]` for 1st positional only parameter to call `TileStore.put` but got `typing.List[Tile]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]