[
  {
    "project": "Chia-Network/chia-blockchain",
    "commit": "1ec2fc152627a32515f545ad3790edab7dd085d5",
    "filename": "chia/util/streamable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Chia-Network-chia-blockchain/chia/util/streamable.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "chia/util/streamable.py:206:45 Incompatible parameter type [6]: Expected `typing.Union[typing_extensions.Literal['big'], typing_extensions.Literal['little']]` for 2nd positional only parameter to call `int.from_bytes` but got `str`.",
    "message": " Expected `typing.Union[typing_extensions.Literal['big'], typing_extensions.Literal['little']]` for 2nd positional only parameter to call `int.from_bytes` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 206,
    "warning_line": "    return uint32(int.from_bytes(size_bytes, byteorder))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from blspy import G1Element, G2Element, PrivateKey\n\n",
        "source_code_len": 52,
        "target_code": "from blspy import G1Element, G2Element, PrivateKey\nfrom typing_extensions import Literal\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -12,2 +12,3 @@\n from blspy import G1Element, G2Element, PrivateKey\n+from typing_extensions import Literal\n \n",
        "source_code_with_indent": "from blspy import G1Element, G2Element, PrivateKey\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from blspy import G1Element, G2Element, PrivateKey\nfrom typing_extensions import Literal\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_uint32(f: BinaryIO, byteorder: str = \"big\") -> uint32:\n    size_bytes = f.read(4)\n",
        "source_code_len": 93,
        "target_code": "\ndef parse_uint32(f: BinaryIO, byteorder: Literal[\"little\", \"big\"] = \"big\") -> uint32:\n    size_bytes = f.read(4)\n",
        "target_code_len": 114,
        "diff_format": "@@ -202,3 +203,3 @@\n \n-def parse_uint32(f: BinaryIO, byteorder: str = \"big\") -> uint32:\n+def parse_uint32(f: BinaryIO, byteorder: Literal[\"little\", \"big\"] = \"big\") -> uint32:\n     size_bytes = f.read(4)\n",
        "source_code_with_indent": "\n<DED><DED>def parse_uint32(f: BinaryIO, byteorder: str = \"big\") -> uint32:\n    <IND>size_bytes = f.read(4)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def parse_uint32(f: BinaryIO, byteorder: Literal[\"little\", \"big\"] = \"big\") -> uint32:\n    <IND>size_bytes = f.read(4)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Chia-Network/chia-blockchain",
    "commit": "1ec2fc152627a32515f545ad3790edab7dd085d5",
    "filename": "chia/util/streamable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Chia-Network-chia-blockchain/chia/util/streamable.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "chia/util/streamable.py:210:30 Incompatible parameter type [6]: Expected `typing.Union[typing_extensions.Literal['big'], typing_extensions.Literal['little']]` for 2nd positional only parameter to call `int.to_bytes` but got `str`.",
    "message": " Expected `typing.Union[typing_extensions.Literal['big'], typing_extensions.Literal['little']]` for 2nd positional only parameter to call `int.to_bytes` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 210,
    "warning_line": "    f.write(value.to_bytes(4, byteorder))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from blspy import G1Element, G2Element, PrivateKey\n\n",
        "source_code_len": 52,
        "target_code": "from blspy import G1Element, G2Element, PrivateKey\nfrom typing_extensions import Literal\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -12,2 +12,3 @@\n from blspy import G1Element, G2Element, PrivateKey\n+from typing_extensions import Literal\n \n",
        "source_code_with_indent": "from blspy import G1Element, G2Element, PrivateKey\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from blspy import G1Element, G2Element, PrivateKey\nfrom typing_extensions import Literal\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef write_uint32(f: BinaryIO, value: uint32, byteorder: str = \"big\"):\n    f.write(value.to_bytes(4, byteorder))\n",
        "source_code_len": 113,
        "target_code": "\ndef write_uint32(f: BinaryIO, value: uint32, byteorder: Literal[\"little\", \"big\"] = \"big\"):\n    f.write(value.to_bytes(4, byteorder))\n",
        "target_code_len": 134,
        "diff_format": "@@ -208,3 +209,3 @@\n \n-def write_uint32(f: BinaryIO, value: uint32, byteorder: str = \"big\"):\n+def write_uint32(f: BinaryIO, value: uint32, byteorder: Literal[\"little\", \"big\"] = \"big\"):\n     f.write(value.to_bytes(4, byteorder))\n",
        "source_code_with_indent": "\n<DED>def write_uint32(f: BinaryIO, value: uint32, byteorder: str = \"big\"):\n    <IND>f.write(value.to_bytes(4, byteorder))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def write_uint32(f: BinaryIO, value: uint32, byteorder: Literal[\"little\", \"big\"] = \"big\"):\n    <IND>f.write(value.to_bytes(4, byteorder))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]