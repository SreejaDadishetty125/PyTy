[
  {
    "project": "IntelAI/nauta",
    "commit": "e03fd58d238be1a0d61b42872ac9b0392d0fbd8c",
    "filename": "applications/cli/commands/template/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/IntelAI-nauta/applications/cli/commands/template/common.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "applications/cli/commands/template/common.py:182:36 Invalid type [31]: Expression `(typing.List[applications.cli.commands.template.common.Template], typing.List[str])` is not a valid type.",
    "message": " Expression `(typing.List[applications.cli.commands.template.common.Template], typing.List[str])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 182,
    "warning_line": "def prepare_list_of_templates() -> (List[Template], List[str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "source_code_len": 69,
        "target_code": "from http import HTTPStatus\nfrom typing import Dict, List, Optional, Tuple\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -19,3 +19,3 @@\n from http import HTTPStatus\n-from typing import Dict, List, Optional\n+from typing import Dict, List, Optional, Tuple\n \n",
        "source_code_with_indent": "from http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from http import HTTPStatus\nfrom typing import Dict, List, Optional, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef prepare_list_of_templates() -> (List[Template], List[str]):\n    error_messages = []\n    remote_templates = {}\n    try:\n",
        "source_code_len": 124,
        "target_code": "\ndef prepare_list_of_templates() -> Tuple[List[Tuple], List[str]]:\n    error_messages = []\n    remote_templates: Dict[str, Template] = {}\n    try:\n",
        "target_code_len": 147,
        "diff_format": "@@ -181,5 +181,5 @@\n \n-def prepare_list_of_templates() -> (List[Template], List[str]):\n+def prepare_list_of_templates() -> Tuple[List[Tuple], List[str]]:\n     error_messages = []\n-    remote_templates = {}\n+    remote_templates: Dict[str, Template] = {}\n     try:\n",
        "source_code_with_indent": "\n<DED>def prepare_list_of_templates() -> (List[Template], List[str]):\n    <IND>error_messages = []\n    remote_templates = {}\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def prepare_list_of_templates() -> Tuple[List[Tuple], List[str]]:\n    <IND>error_messages = []\n    remote_templates: Dict[str, Template] = {}\n    try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]