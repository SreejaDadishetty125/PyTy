[
  {
    "project": "recognai/rubrix",
    "commit": "e0de45000f0e7e36da6aecddbb5ba50929fb6413",
    "filename": "src/rubrix/server/datasets/service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/recognai-rubrix/src/rubrix/server/datasets/service.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/rubrix/server/datasets/service.py:125:8 Incompatible return type [7]: Expected `Dataset` but got `Optional[Dataset]`.",
    "message": " Expected `Dataset` but got `Optional[Dataset]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 125,
    "warning_line": "        return Dataset(**found.dict()) if found else None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def find_by_name(self, name: str, owner: Optional[str]) -> Dataset:\n        \"\"\"\n",
        "source_code_len": 85,
        "target_code": "\n    def find_by_name(self, name: str, owner: Optional[str]) -> DatasetDB:\n        \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -99,3 +100,3 @@\n \n-    def find_by_name(self, name: str, owner: Optional[str]) -> Dataset:\n+    def find_by_name(self, name: str, owner: Optional[str]) -> DatasetDB:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def find_by_name(self, name: str, owner: Optional[str]) -> Dataset:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def find_by_name(self, name: str, owner: Optional[str]) -> DatasetDB:\n        <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            raise EntityNotFoundError(name=name, type=Dataset)\n\n        if found.owner and owner and found.owner != owner:\n            raise ForbiddenOperationError()\n\n        return Dataset(**found.dict()) if found else None\n\n",
        "source_code_len": 227,
        "target_code": "            raise EntityNotFoundError(name=name, type=Dataset)\n        if found.owner and owner and found.owner != owner:\n            raise ForbiddenOperationError()\n        return found\n\n",
        "target_code_len": 188,
        "diff_format": "@@ -120,7 +121,5 @@\n             raise EntityNotFoundError(name=name, type=Dataset)\n-\n         if found.owner and owner and found.owner != owner:\n             raise ForbiddenOperationError()\n-\n-        return Dataset(**found.dict()) if found else None\n+        return found\n \n",
        "source_code_with_indent": "            <IND>raise EntityNotFoundError(name=name, type=Dataset)\n\n        <DED>if found.owner and owner and found.owner != owner:\n            <IND>raise ForbiddenOperationError()\n\n        <DED>return Dataset(**found.dict()) if found else None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>raise EntityNotFoundError(name=name, type=Dataset)\n        <DED>if found.owner and owner and found.owner != owner:\n            <IND>raise ForbiddenOperationError()\n        <DED>return found\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "recognai/rubrix",
    "commit": "e0de45000f0e7e36da6aecddbb5ba50929fb6413",
    "filename": "src/rubrix/server/tasks/commons/es_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/recognai-rubrix/src/rubrix/server/commons/es_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/rubrix/server/tasks/commons/es_helpers.py:123:4 Incompatible variable type [9]: es_aggregations is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " es_aggregations is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 123,
    "warning_line": "    es_aggregations: Dict[str, Any] = None"
  },
  {
    "project": "recognai/rubrix",
    "commit": "e0de45000f0e7e36da6aecddbb5ba50929fb6413",
    "filename": "src/rubrix/server/tasks/commons/es_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/recognai-rubrix/src/rubrix/server/commons/es_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/rubrix/server/tasks/commons/es_helpers.py:180:21 Incompatible variable type [9]: predicted_by is declared to have type `List[str]` but is used as type `None`.",
    "message": " predicted_by is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 180,
    "warning_line": "    def predicted_by(predicted_by: List[str] = None) -> Optional[Dict[str, Any]]:"
  },
  {
    "project": "recognai/rubrix",
    "commit": "e0de45000f0e7e36da6aecddbb5ba50929fb6413",
    "filename": "src/rubrix/server/tasks/commons/es_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/recognai-rubrix/src/rubrix/server/commons/es_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/rubrix/server/tasks/commons/es_helpers.py:192:21 Incompatible variable type [9]: annotated_by is declared to have type `List[str]` but is used as type `None`.",
    "message": " annotated_by is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 192,
    "warning_line": "    def annotated_by(annotated_by: List[str] = None) -> Optional[Dict[str, Any]]:"
  },
  {
    "project": "recognai/rubrix",
    "commit": "e0de45000f0e7e36da6aecddbb5ba50929fb6413",
    "filename": "src/rubrix/server/tasks/commons/es_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/recognai-rubrix/src/rubrix/server/commons/es_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/rubrix/server/tasks/commons/es_helpers.py:227:21 Incompatible variable type [9]: predicted_as is declared to have type `List[str]` but is used as type `None`.",
    "message": " predicted_as is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 227,
    "warning_line": "    def predicted_as(predicted_as: List[str] = None) -> Optional[Dict[str, Any]]:"
  },
  {
    "project": "recognai/rubrix",
    "commit": "e0de45000f0e7e36da6aecddbb5ba50929fb6413",
    "filename": "src/rubrix/server/tasks/commons/es_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/recognai-rubrix/src/rubrix/server/commons/es_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/rubrix/server/tasks/commons/es_helpers.py:238:21 Incompatible variable type [9]: annotated_as is declared to have type `List[str]` but is used as type `None`.",
    "message": " annotated_as is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 238,
    "warning_line": "    def annotated_as(annotated_as: List[str] = None) -> Optional[Dict[str, Any]]:"
  }
]