[
  {
    "project": "flairNLP/flair",
    "commit": "2bdfd3d37d487191a5cefa80d4a7dbb868244b00",
    "filename": "flair/data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/flairNLP-flair/flair/data.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "flair/data.py:1155:4 Inconsistent override [14]: `flair.data.Image.get_embedding` overrides method defined in `DataPoint` inconsistently. Could not find parameter `names` in overriding signature.",
    "message": " `flair.data.Image.get_embedding` overrides method defined in `DataPoint` inconsistently. Could not find parameter `names` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1155,
    "warning_line": "    def get_embedding(self) -> torch.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return f\"Image: {image_repr} {image_url}\"\n\n    def get_embedding(self) -> torch.Tensor:\n        embeddings = [\n            self._embeddings[embed] for embed in\n            sorted(self._embeddings.keys())\n        ]\n\n        if embeddings:\n            return torch.cat(embeddings, dim=0)\n\n        return torch.tensor([], device=flair.device)\n\n",
        "source_code_len": 349,
        "target_code": "        return f\"Image: {image_repr} {image_url}\"\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -1153,13 +1142,2 @@\n         return f\"Image: {image_repr} {image_url}\"\n-\n-    def get_embedding(self) -> torch.Tensor:\n-        embeddings = [\n-            self._embeddings[embed] for embed in\n-            sorted(self._embeddings.keys())\n-        ]\n-\n-        if embeddings:\n-            return torch.cat(embeddings, dim=0)\n-\n-        return torch.tensor([], device=flair.device)\n \n",
        "source_code_with_indent": "        return f\"Image: {image_repr} {image_url}\"\n\n    <DED>def get_embedding(self) -> torch.Tensor:\n        <IND>embeddings = [\n            self._embeddings[embed] for embed in\n            sorted(self._embeddings.keys())\n        ]\n\n        if embeddings:\n            <IND>return torch.cat(embeddings, dim=0)\n\n        <DED>return torch.tensor([], device=flair.device)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        return f\"Image: {image_repr} {image_url}\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]