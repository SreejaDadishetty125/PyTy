[
  {
    "project": "pantsbuild/pants",
    "commit": "9f356a3f1810b0ce15cd3b847080536caa12502f",
    "filename": "src/python/pants/engine/rules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/rules.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/rules.py:47:15 Invalid type [31]: Expression `pants.util.objects.datatype(\"TaskRule\", [\"input_selectors\", \"func\", \"product_type\", \"constraint\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"TaskRule\", [\"input_selectors\", \"func\", \"product_type\", \"constraint\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 47,
    "warning_line": "class TaskRule(datatype('TaskRule', ['input_selectors', 'func', 'product_type', 'constraint']),"
  },
  {
    "project": "pantsbuild/pants",
    "commit": "9f356a3f1810b0ce15cd3b847080536caa12502f",
    "filename": "src/python/pants/engine/rules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/rules.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/rules.py:61:20 Invalid type [31]: Expression `pants.util.objects.datatype(\"SingletonRule\", [\"product_type\", \"func\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"SingletonRule\", [\"product_type\", \"func\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 61,
    "warning_line": "class SingletonRule(datatype('SingletonRule', ['product_type', 'func']), Rule):"
  },
  {
    "project": "pantsbuild/pants",
    "commit": "9f356a3f1810b0ce15cd3b847080536caa12502f",
    "filename": "src/python/pants/engine/rules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/rules.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/rules.py:78:20 Invalid type [31]: Expression `pants.util.objects.datatype(\"IntrinsicRule\", [\"subject_type\", \"product_type\", \"func\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"IntrinsicRule\", [\"subject_type\", \"product_type\", \"func\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 78,
    "warning_line": "class IntrinsicRule(datatype('IntrinsicRule', ['subject_type', 'product_type', 'func']), Rule):"
  },
  {
    "project": "pantsbuild/pants",
    "commit": "9f356a3f1810b0ce15cd3b847080536caa12502f",
    "filename": "src/python/pants/engine/rules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/rules.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/rules.py:96:16 Invalid type [31]: Expression `pants.util.objects.datatype(\"RuleIndex\", [\"tasks\", \"intrinsics\", \"singletons\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"RuleIndex\", [\"tasks\", \"intrinsics\", \"singletons\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 96,
    "warning_line": "class RuleIndex(datatype('RuleIndex', ['tasks', 'intrinsics', 'singletons'])):"
  },
  {
    "project": "pantsbuild/pants",
    "commit": "9f356a3f1810b0ce15cd3b847080536caa12502f",
    "filename": "src/python/pants/engine/selectors.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/selectors.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/selectors.py:145:23 Invalid type [31]: Expression `pants.util.objects.datatype(\"Projection\", [\"product\", \"projected_subject\", \"fields\", \"input_product\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"Projection\", [\"product\", \"projected_subject\", \"fields\", \"input_product\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 145,
    "warning_line": "class SelectProjection(datatype('Projection', ['product', 'projected_subject', 'fields', 'input_product']), Selector):"
  },
  {
    "project": "pantsbuild/pants",
    "commit": "9f356a3f1810b0ce15cd3b847080536caa12502f",
    "filename": "src/python/pants/engine/selectors.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pants/src/python/pants/engine/selectors.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/python/pants/engine/selectors.py:173:20 Invalid type [31]: Expression `pants.util.objects.datatype(\"Literal\", [\"subject\", \"product\"])` is not a valid type.",
    "message": " Expression `pants.util.objects.datatype(\"Literal\", [\"subject\", \"product\"])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 173,
    "warning_line": "class SelectLiteral(datatype('Literal', ['subject', 'product']), Selector):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                       self.projected_subject.__name__,\n                                       repr(self.fields),\n                                       getattr(\n                                         self.input_product, '__name__', repr(self.input_product)))\n\n\nclass SelectLiteral(datatype('Literal', ['subject', 'product']), Selector):\n  \"\"\"Selects a literal Subject (other than the one applied to the selector).\"\"\"\n  optional = False\n\n  def __repr__(self):\n    return '{}({}, {})'.format(type(self).__name__,\n                               repr(self.subject),\n                               type_or_constraint_repr(self.product))\n",
        "source_code_len": 651,
        "target_code": "                                       self.projected_subject.__name__,\n                                       repr(self.field),\n                                       getattr(\n                                         self.input_product, '__name__', repr(self.input_product)))\n",
        "target_code_len": 277,
        "diff_format": "@@ -167,14 +172,4 @@\n                                        self.projected_subject.__name__,\n-                                       repr(self.fields),\n+                                       repr(self.field),\n                                        getattr(\n                                          self.input_product, '__name__', repr(self.input_product)))\n-\n-\n-class SelectLiteral(datatype('Literal', ['subject', 'product']), Selector):\n-  \"\"\"Selects a literal Subject (other than the one applied to the selector).\"\"\"\n-  optional = False\n-\n-  def __repr__(self):\n-    return '{}({}, {})'.format(type(self).__name__,\n-                               repr(self.subject),\n-                               type_or_constraint_repr(self.product))\n",
        "source_code_with_indent": "                                       self.projected_subject.__name__,\n                                       repr(self.fields),\n                                       getattr(\n                                         self.input_product, '__name__', repr(self.input_product)))\n\n\n<DED><DED>class SelectLiteral(datatype('Literal', ['subject', 'product']), Selector):\n  <IND>\"\"\"Selects a literal Subject (other than the one applied to the selector).\"\"\"\n  optional = False\n\n  def __repr__(self):\n    <IND>return '{}({}, {})'.format(type(self).__name__,\n                               repr(self.subject),\n                               type_or_constraint_repr(self.product))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                       self.projected_subject.__name__,\n                                       repr(self.field),\n                                       getattr(\n                                         self.input_product, '__name__', repr(self.input_product)))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]