[
  {
    "project": "poljar/matrix-nio",
    "commit": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "filename": "nio/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/api.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/api.py:93:25 Incompatible variable type [9]: homeserver is declared to have type `str` but is used as type `None`.",
    "message": " homeserver is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 93,
    "warning_line": "    def mxc_to_http(mxc, homeserver=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def mxc_to_http(mxc, homeserver=None):\n        # type: (str) -> Optional[str]\n        \"\"\"Convert a matrix content URI to a HTTP URI.\"\"\"\n",
        "source_code_len": 140,
        "target_code": "    def mxc_to_http(mxc, homeserver=None):\n        # type: (str, Optional[str]) -> Optional[str]\n        \"\"\"Convert a matrix content URI to a HTTP URI.\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -93,3 +93,3 @@\n     def mxc_to_http(mxc, homeserver=None):\n-        # type: (str) -> Optional[str]\n+        # type: (str, Optional[str]) -> Optional[str]\n         \"\"\"Convert a matrix content URI to a HTTP URI.\"\"\"\n",
        "source_code_with_indent": "    def mxc_to_http(mxc, homeserver=None):\n        # type: (str) -> Optional[str]\n        <IND>\"\"\"Convert a matrix content URI to a HTTP URI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def mxc_to_http(mxc, homeserver=None):\n        # type: (str, Optional[str]) -> Optional[str]\n        <IND>\"\"\"Convert a matrix content URI to a HTTP URI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "source_code_len": 68,
        "target_code": "\n        parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -103,3 +103,3 @@\n \n-        homeserver = urlparse(homeserver) if homeserver else None\n+        parsed_homeserver = urlparse(homeserver) if homeserver else None\n \n",
        "source_code_with_indent": "\n        <DED>homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "filename": "nio/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/api.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/api.py:104:8 Incompatible variable type [9]: homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
    "message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 104,
    "warning_line": "        homeserver = urlparse(homeserver) if homeserver else None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "source_code_len": 68,
        "target_code": "\n        parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -103,3 +103,3 @@\n \n-        homeserver = urlparse(homeserver) if homeserver else None\n+        parsed_homeserver = urlparse(homeserver) if homeserver else None\n \n",
        "source_code_with_indent": "\n        <DED>homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "filename": "nio/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/api.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/api.py:121:51 Incompatible variable type [9]: homeserver is declared to have type `str` but is used as type `None`.",
    "message": " homeserver is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "    def encrypted_mxc_to_plumb(mxc, key, hash, iv, homeserver=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def encrypted_mxc_to_plumb(mxc, key, hash, iv, homeserver=None):\n        # type: (str, str, str, str) -> Optional[str]\n        \"\"\"Convert a matrix content URI to a encrypted mxc URI.\n",
        "source_code_len": 187,
        "target_code": "    def encrypted_mxc_to_plumb(mxc, key, hash, iv, homeserver=None):\n        # type: (str, str, str, str, Optional[str]) -> Optional[str]\n        \"\"\"Convert a matrix content URI to a encrypted mxc URI.\n",
        "target_code_len": 202,
        "diff_format": "@@ -121,3 +121,3 @@\n     def encrypted_mxc_to_plumb(mxc, key, hash, iv, homeserver=None):\n-        # type: (str, str, str, str) -> Optional[str]\n+        # type: (str, str, str, str, Optional[str]) -> Optional[str]\n         \"\"\"Convert a matrix content URI to a encrypted mxc URI.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def encrypted_mxc_to_plumb(mxc, key, hash, iv, homeserver=None):\n        # type: (str, str, str, str) -> Optional[str]\n        <IND>",
        "target_code_with_indent": "    def encrypted_mxc_to_plumb(mxc, key, hash, iv, homeserver=None):\n        # type: (str, str, str, str, Optional[str]) -> Optional[str]\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (homeserver._replace(scheme=\"emxc\").geturl()\n                if homeserver else None)\n\n",
        "source_code_len": 170,
        "target_code": "\n        parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (parsed_homeserver._replace(scheme=\"emxc\").geturl()\n                if parsed_homeserver else None)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -148,6 +148,6 @@\n \n-        homeserver = urlparse(homeserver) if homeserver else None\n-\n-        host = (homeserver._replace(scheme=\"emxc\").geturl()\n-                if homeserver else None)\n+        parsed_homeserver = urlparse(homeserver) if homeserver else None\n+\n+        host = (parsed_homeserver._replace(scheme=\"emxc\").geturl()\n+                if parsed_homeserver else None)\n \n",
        "source_code_with_indent": "\n        <DED>homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (homeserver._replace(scheme=\"emxc\").geturl()\n                if homeserver else None)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (parsed_homeserver._replace(scheme=\"emxc\").geturl()\n                if parsed_homeserver else None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "filename": "nio/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/api.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/api.py:149:8 Incompatible variable type [9]: homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
    "message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 149,
    "warning_line": "        homeserver = urlparse(homeserver) if homeserver else None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (homeserver._replace(scheme=\"emxc\").geturl()\n                if homeserver else None)\n\n",
        "source_code_len": 170,
        "target_code": "\n        parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (parsed_homeserver._replace(scheme=\"emxc\").geturl()\n                if parsed_homeserver else None)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -148,6 +148,6 @@\n \n-        homeserver = urlparse(homeserver) if homeserver else None\n-\n-        host = (homeserver._replace(scheme=\"emxc\").geturl()\n-                if homeserver else None)\n+        parsed_homeserver = urlparse(homeserver) if homeserver else None\n+\n+        host = (parsed_homeserver._replace(scheme=\"emxc\").geturl()\n+                if parsed_homeserver else None)\n \n",
        "source_code_with_indent": "\n        <DED>homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (homeserver._replace(scheme=\"emxc\").geturl()\n                if homeserver else None)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n        host = (parsed_homeserver._replace(scheme=\"emxc\").geturl()\n                if parsed_homeserver else None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]