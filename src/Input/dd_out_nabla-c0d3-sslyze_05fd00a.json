[
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "05fd00aca281681a7c5dc3a370f3cb1d5f9e4970",
    "filename": "sslyze/cli/command_line_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/cli/command_line_parser.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "sslyze/cli/command_line_parser.py:288:50 Incompatible parameter type [6]: Expected `typing_extensions.Literal['certificate_info']` for 1st positional only parameter to call `NonTotalTypedDictionary.__setitem__` but got `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]`.",
    "message": " Expected `typing_extensions.Literal['certificate_info']` for 1st positional only parameter to call `NonTotalTypedDictionary.__setitem__` but got `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 288,
    "warning_line": "                    scan_commands_extra_arguments[scan_command] = extra_args",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                if extra_args:\n                    scan_commands_extra_arguments[scan_command] = extra_args\n\n",
        "source_code_len": 109,
        "target_code": "                if extra_args:\n                    scan_commands_extra_arguments[scan_command] = extra_args  # type: ignore\n\n",
        "target_code_len": 125,
        "diff_format": "@@ -287,3 +287,3 @@\n                 if extra_args:\n-                    scan_commands_extra_arguments[scan_command] = extra_args\n+                    scan_commands_extra_arguments[scan_command] = extra_args  # type: ignore\n \n",
        "source_code_with_indent": "                if extra_args:\n                    <IND>scan_commands_extra_arguments[scan_command] = extra_args\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if extra_args:\n                    <IND>scan_commands_extra_arguments[scan_command] = extra_args  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "05fd00aca281681a7c5dc3a370f3cb1d5f9e4970",
    "filename": "sslyze/cli/console_output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/cli/console_output.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/cli/console_output.py:64:78 Incompatible parameter type [6]: Expected `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]` for 1st positional only parameter to call `ScanCommandsRepository.get_implementation_cls` but got `str`.",
    "message": " Expected `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]` for 1st positional only parameter to call `ScanCommandsRepository.get_implementation_cls` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_command).cli_connector_cls",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from sslyze.cli.command_line_parser import ParsedCommandLine\n",
        "source_code_len": 61,
        "target_code": "from typing import cast\n\nfrom sslyze.cli.command_line_parser import ParsedCommandLine\n",
        "target_code_len": 86,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import cast\n+\n from sslyze.cli.command_line_parser import ParsedCommandLine\n",
        "source_code_with_indent": "from sslyze.cli.command_line_parser import ParsedCommandLine\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import cast\n\nfrom sslyze.cli.command_line_parser import ParsedCommandLine\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from sslyze.connection_helpers.errors import ConnectionToServerFailed\nfrom sslyze.plugins.scan_commands import ScanCommandsRepository\nfrom sslyze.scanner import ServerScanResult, ScanCommandErrorReasonEnum\n",
        "source_code_len": 206,
        "target_code": "from sslyze.connection_helpers.errors import ConnectionToServerFailed\nfrom sslyze.plugins.scan_commands import ScanCommandsRepository, ScanCommandType\nfrom sslyze.scanner import ServerScanResult, ScanCommandErrorReasonEnum\n",
        "target_code_len": 223,
        "diff_format": "@@ -4,3 +6,3 @@\n from sslyze.connection_helpers.errors import ConnectionToServerFailed\n-from sslyze.plugins.scan_commands import ScanCommandsRepository\n+from sslyze.plugins.scan_commands import ScanCommandsRepository, ScanCommandType\n from sslyze.scanner import ServerScanResult, ScanCommandErrorReasonEnum\n",
        "source_code_with_indent": "from sslyze.connection_helpers.errors import ConnectionToServerFailed\nfrom sslyze.plugins.scan_commands import ScanCommandsRepository\nfrom sslyze.scanner import ServerScanResult, ScanCommandErrorReasonEnum\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from sslyze.connection_helpers.errors import ConnectionToServerFailed\nfrom sslyze.plugins.scan_commands import ScanCommandsRepository, ScanCommandType\nfrom sslyze.scanner import ServerScanResult, ScanCommandErrorReasonEnum\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for scan_command, scan_command_result in server_scan_result.scan_commands_results.items():\n            target_result_str += \"\\n\"\n            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_command).cli_connector_cls\n            for line in cli_connector_cls.result_to_console_output(scan_command_result):\n",
        "source_code_len": 336,
        "target_code": "        for scan_command, scan_command_result in server_scan_result.scan_commands_results.items():\n            typed_scan_command = cast(ScanCommandType, scan_command)\n            target_result_str += \"\\n\"\n            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(typed_scan_command).cli_connector_cls\n            for line in cli_connector_cls.result_to_console_output(scan_command_result):\n",
        "target_code_len": 411,
        "diff_format": "@@ -62,4 +64,5 @@\n         for scan_command, scan_command_result in server_scan_result.scan_commands_results.items():\n+            typed_scan_command = cast(ScanCommandType, scan_command)\n             target_result_str += \"\\n\"\n-            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_command).cli_connector_cls\n+            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(typed_scan_command).cli_connector_cls\n             for line in cli_connector_cls.result_to_console_output(scan_command_result):\n",
        "source_code_with_indent": "        for scan_command, scan_command_result in server_scan_result.scan_commands_results.items():\n            <IND>target_result_str += \"\\n\"\n            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_command).cli_connector_cls\n            for line in cli_connector_cls.result_to_console_output(scan_command_result):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for scan_command, scan_command_result in server_scan_result.scan_commands_results.items():\n            <IND>typed_scan_command = cast(ScanCommandType, scan_command)\n            target_result_str += \"\\n\"\n            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(typed_scan_command).cli_connector_cls\n            for line in cli_connector_cls.result_to_console_output(scan_command_result):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "05fd00aca281681a7c5dc3a370f3cb1d5f9e4970",
    "filename": "sslyze/scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/scanner.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "sslyze/scanner.py:156:80 Incompatible parameter type [6]: Expected `typing_extensions.Literal['certificate_info']` for 1st positional only parameter to call `NonTotalTypedDictionary.get` but got `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]`.",
    "message": " Expected `typing_extensions.Literal['certificate_info']` for 1st positional only parameter to call `NonTotalTypedDictionary.get` but got `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "            scan_cmd_extra_args = server_scan.scan_commands_extra_arguments.get(scan_cmd)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            implementation_cls = ScanCommandsRepository.get_implementation_cls(scan_cmd)\n            scan_cmd_extra_args = server_scan.scan_commands_extra_arguments.get(scan_cmd)\n\n",
        "source_code_len": 180,
        "target_code": "            implementation_cls = ScanCommandsRepository.get_implementation_cls(scan_cmd)\n            scan_cmd_extra_args = server_scan.scan_commands_extra_arguments.get(scan_cmd)  # type: ignore\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -155,3 +155,3 @@\n             implementation_cls = ScanCommandsRepository.get_implementation_cls(scan_cmd)\n-            scan_cmd_extra_args = server_scan.scan_commands_extra_arguments.get(scan_cmd)\n+            scan_cmd_extra_args = server_scan.scan_commands_extra_arguments.get(scan_cmd)  # type: ignore\n \n",
        "source_code_with_indent": "            <IND>implementation_cls = ScanCommandsRepository.get_implementation_cls(scan_cmd)\n            scan_cmd_extra_args = server_scan.scan_commands_extra_arguments.get(scan_cmd)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>implementation_cls = ScanCommandsRepository.get_implementation_cls(scan_cmd)\n            scan_cmd_extra_args = server_scan.scan_commands_extra_arguments.get(scan_cmd)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "05fd00aca281681a7c5dc3a370f3cb1d5f9e4970",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/tests/factories.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:126:30 Incompatible parameter type [6]: Expected `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]` for 1st positional only parameter to call `set.add` but got `str`.",
    "message": " Expected `typing.Union[typing_extensions.Literal['certificate_info'], typing_extensions.Literal['heartbleed'], typing_extensions.Literal['http_headers'], typing_extensions.Literal['openssl_ccs_injection'], typing_extensions.Literal['robot'], typing_extensions.Literal['session_renegotiation'], typing_extensions.Literal['session_resumption'], typing_extensions.Literal['session_resumption_rate'], typing_extensions.Literal['ssl_2_0_cipher_suites'], typing_extensions.Literal['ssl_3_0_cipher_suites'], typing_extensions.Literal['tls_1_0_cipher_suites'], typing_extensions.Literal['tls_1_1_cipher_suites'], typing_extensions.Literal['tls_1_2_cipher_suites'], typing_extensions.Literal['tls_1_3_cipher_suites'], typing_extensions.Literal['tls_1_3_early_data'], typing_extensions.Literal['tls_compression'], typing_extensions.Literal['tls_fallback_scsv']]` for 1st positional only parameter to call `set.add` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 126,
    "warning_line": "            scan_commands.add(scan_cmd)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from traceback import TracebackException\nfrom typing import Optional, Set\n\n",
        "source_code_len": 75,
        "target_code": "from traceback import TracebackException\nfrom typing import Optional, Set, cast\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -1,3 +1,3 @@\n from traceback import TracebackException\n-from typing import Optional, Set\n+from typing import Optional, Set, cast\n \n",
        "source_code_with_indent": "from traceback import TracebackException\nfrom typing import Optional, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from traceback import TracebackException\nfrom typing import Optional, Set, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for scan_cmd in final_results.keys():\n            scan_commands.add(scan_cmd)\n        for scan_cmd in final_errors.keys():\n",
        "source_code_len": 131,
        "target_code": "        for scan_cmd in final_results.keys():\n            typed_scan_cmd = cast(ScanCommandType, scan_cmd)\n            scan_commands.add(typed_scan_cmd)\n        for scan_cmd in final_errors.keys():\n",
        "target_code_len": 198,
        "diff_format": "@@ -125,3 +125,4 @@\n         for scan_cmd in final_results.keys():\n-            scan_commands.add(scan_cmd)\n+            typed_scan_cmd = cast(ScanCommandType, scan_cmd)\n+            scan_commands.add(typed_scan_cmd)\n         for scan_cmd in final_errors.keys():\n",
        "source_code_with_indent": "        for scan_cmd in final_results.keys():\n            <IND>scan_commands.add(scan_cmd)\n        <DED>for scan_cmd in final_errors.keys():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for scan_cmd in final_results.keys():\n            <IND>typed_scan_cmd = cast(ScanCommandType, scan_cmd)\n            scan_commands.add(typed_scan_cmd)\n        <DED>for scan_cmd in final_errors.keys():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]