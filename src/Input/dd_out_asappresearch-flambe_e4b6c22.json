[
  {
    "project": "asappresearch/flambe",
    "commit": "e4b6c228cf49c1607ba45f4e0447463ad56a05c4",
    "filename": "flambe/field/text.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asappresearch-flambe/flambe/field/text.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "flambe/field/text.py:406:4 Inconsistent override [14]: `flambe.field.text.TextField.process` overrides method defined in `flambe.field.field.Field` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "message": " `flambe.field.text.TextField.process` overrides method defined in `flambe.field.field.Field` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 406,
    "warning_line": "    def process(self, example: Union[str, Tuple[Any], List[Any], Dict[Any, Any]]) \\",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # TODO update when we add generics\n    def process(self, example: Union[str, Tuple[Any], List[Any], Dict[Any, Any]]) \\\n            -> Union[torch.Tensor, List[torch.Tensor], Dict[str, torch.Tensor]]:  # type: ignore\n        \"\"\"Process an example, and create a Tensor.\n",
        "source_code_len": 272,
        "target_code": "    # TODO update when we add generics\n    def process(self, example:  # type: ignore\n                Union[str, Tuple[Any], List[Any], Dict[Any, Any]]) \\\n            -> Union[torch.Tensor, Tuple[torch.Tensor, ...],\n                     List[torch.Tensor], Dict[str, torch.Tensor]]:\n        \"\"\"Process an example, and create a Tensor.\n",
        "target_code_len": 335,
        "diff_format": "@@ -405,4 +405,6 @@\n     # TODO update when we add generics\n-    def process(self, example: Union[str, Tuple[Any], List[Any], Dict[Any, Any]]) \\\n-            -> Union[torch.Tensor, List[torch.Tensor], Dict[str, torch.Tensor]]:  # type: ignore\n+    def process(self, example:  # type: ignore\n+                Union[str, Tuple[Any], List[Any], Dict[Any, Any]]) \\\n+            -> Union[torch.Tensor, Tuple[torch.Tensor, ...],\n+                     List[torch.Tensor], Dict[str, torch.Tensor]]:\n         \"\"\"Process an example, and create a Tensor.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    # TODO update when we add generics\n    <DED><DED>def process(self, example: Union[str, Tuple[Any], List[Any], Dict[Any, Any]])            -> Union[torch.Tensor, List[torch.Tensor], Dict[str, torch.Tensor]]:  # type: ignore\n        <IND>",
        "target_code_with_indent": "    # TODO update when we add generics\n    <DED><DED>def process(self, example:  # type: ignore\n                Union[str, Tuple[Any], List[Any], Dict[Any, Any]])            -> Union[torch.Tensor, Tuple[torch.Tensor, ...],\n                     List[torch.Tensor], Dict[str, torch.Tensor]]:\n        <IND>"
      }
    ]
  }
]