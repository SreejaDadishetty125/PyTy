[
  {
    "project": "gandersen101/spaczz",
    "commit": "8b01a2afa25308be1f2e4a756a56fc5bf426146f",
    "filename": "src/spaczz/pipeline/spaczzruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gandersen101-spaczz/src/spaczz/pipeline/spaczzruler.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spaczz/pipeline/spaczzruler.py:734:40 Incompatible parameter type [6]: Expected `typing.Tuple[int, int, int]` for 1st positional only parameter to call `list.append` but got `typing.Tuple[str, int, int]`.",
    "message": " Expected `typing.Tuple[int, int, int]` for 1st positional only parameter to call `list.append` but got `typing.Tuple[str, int, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 734,
    "warning_line": "                filtered_matches.append(match)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            >>> ruler = SpaczzRuler(nlp)\n            >>> matches = [(\"TEST\", 1, 3), (\"TEST, 1, 2)]\n            >>> ruler._filter_overlapping_matches(matches)\n            [(\"TEST\", 1, 3)]\n        \"\"\"\n        filtered_matches: list[tuple[int, int, int]] = []\n        for match in matches:\n",
        "source_code_len": 287,
        "target_code": "            >>> ruler = SpaczzRuler(nlp)\n            >>> matches = [(\"TEST\", 1, 3), (\"TEST\", 1, 2)]\n            >>> ruler._filter_overlapping_matches(matches)\n            [('TEST', 1, 3)]\n        \"\"\"\n        filtered_matches: list[tuple[str, int, int]] = []\n        for match in matches:\n",
        "target_code_len": 288,
        "diff_format": "@@ -724,7 +724,7 @@\n             >>> ruler = SpaczzRuler(nlp)\n-            >>> matches = [(\"TEST\", 1, 3), (\"TEST, 1, 2)]\n+            >>> matches = [(\"TEST\", 1, 3), (\"TEST\", 1, 2)]\n             >>> ruler._filter_overlapping_matches(matches)\n-            [(\"TEST\", 1, 3)]\n-        \"\"\"\n-        filtered_matches: list[tuple[int, int, int]] = []\n+            [('TEST', 1, 3)]\n+        \"\"\"\n+        filtered_matches: list[tuple[str, int, int]] = []\n         for match in matches:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        filtered_matches: list[tuple[int, int, int]] = []\n        for match in matches:\n",
        "target_code_with_indent": "\n        filtered_matches: list[tuple[str, int, int]] = []\n        for match in matches:\n"
      }
    ]
  },
  {
    "project": "gandersen101/spaczz",
    "commit": "8b01a2afa25308be1f2e4a756a56fc5bf426146f",
    "filename": "src/spaczz/pipeline/spaczzruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gandersen101-spaczz/src/spaczz/pipeline/spaczzruler.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spaczz/pipeline/spaczzruler.py:735:8 Incompatible return type [7]: Expected `typing.List[typing.Tuple[str, int, int]]` but got `typing.List[typing.Tuple[int, int, int]]`.",
    "message": " Expected `typing.List[typing.Tuple[str, int, int]]` but got `typing.List[typing.Tuple[int, int, int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 735,
    "warning_line": "        return filtered_matches",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            >>> ruler = SpaczzRuler(nlp)\n            >>> matches = [(\"TEST\", 1, 3), (\"TEST, 1, 2)]\n            >>> ruler._filter_overlapping_matches(matches)\n            [(\"TEST\", 1, 3)]\n        \"\"\"\n        filtered_matches: list[tuple[int, int, int]] = []\n        for match in matches:\n",
        "source_code_len": 287,
        "target_code": "            >>> ruler = SpaczzRuler(nlp)\n            >>> matches = [(\"TEST\", 1, 3), (\"TEST\", 1, 2)]\n            >>> ruler._filter_overlapping_matches(matches)\n            [('TEST', 1, 3)]\n        \"\"\"\n        filtered_matches: list[tuple[str, int, int]] = []\n        for match in matches:\n",
        "target_code_len": 288,
        "diff_format": "@@ -724,7 +724,7 @@\n             >>> ruler = SpaczzRuler(nlp)\n-            >>> matches = [(\"TEST\", 1, 3), (\"TEST, 1, 2)]\n+            >>> matches = [(\"TEST\", 1, 3), (\"TEST\", 1, 2)]\n             >>> ruler._filter_overlapping_matches(matches)\n-            [(\"TEST\", 1, 3)]\n-        \"\"\"\n-        filtered_matches: list[tuple[int, int, int]] = []\n+            [('TEST', 1, 3)]\n+        \"\"\"\n+        filtered_matches: list[tuple[str, int, int]] = []\n         for match in matches:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        filtered_matches: list[tuple[int, int, int]] = []\n        for match in matches:\n",
        "target_code_with_indent": "\n        filtered_matches: list[tuple[str, int, int]] = []\n        for match in matches:\n"
      }
    ]
  }
]