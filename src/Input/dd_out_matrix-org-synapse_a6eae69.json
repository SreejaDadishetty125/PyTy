[
  {
    "project": "matrix-org/synapse",
    "commit": "a6eae69ffefdfce2e3c5c5f9a6020d9e70e2f19c",
    "filename": "synapse/handlers/federation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/matrix-org-synapse/synapse/handlers/federation.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "synapse/handlers/federation.py:1263:12 Incompatible parameter type [6]: Expected `Optional[Dict[str, str]]` for 6th parameter `params` to call `FederationHandler._make_and_verify_event` but got `Dict[str, Dict[str, RoomVersion]]`.",
    "message": " Expected `Optional[Dict[str, str]]` for 6th parameter `params` to call `FederationHandler._make_and_verify_event` but got `Dict[str, Dict[str, RoomVersion]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1263,
    "warning_line": "            params={\"ver\": KNOWN_ROOM_VERSIONS},",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom http import HTTPStatus\nfrom typing import Dict, Iterable, List, Optional, Sequence, Tuple\n\n",
        "source_code_len": 111,
        "target_code": "import logging\nfrom collections import Container\nfrom http import HTTPStatus\nfrom typing import Dict, Iterable, List, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 152,
        "diff_format": "@@ -21,4 +21,5 @@\n import logging\n+from collections import Container\n from http import HTTPStatus\n-from typing import Dict, Iterable, List, Optional, Sequence, Tuple\n+from typing import Dict, Iterable, List, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import logging\nfrom http import HTTPStatus\nfrom typing import Dict, Iterable, List, Optional, Sequence, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom collections import Container\nfrom http import HTTPStatus\nfrom typing import Dict, Iterable, List, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        content: JsonDict = {},\n        params: Optional[Dict[str, str]] = None,\n    ) -> Tuple[str, EventBase, RoomVersion]:\n",
        "source_code_len": 126,
        "target_code": "        content: JsonDict = {},\n        params: Optional[Dict[str, Union[str, Iterable[str]]]] = None,\n    ) -> Tuple[str, EventBase, RoomVersion]:\n",
        "target_code_len": 148,
        "diff_format": "@@ -1606,3 +1612,3 @@\n         content: JsonDict = {},\n-        params: Optional[Dict[str, str]] = None,\n+        params: Optional[Dict[str, Union[str, Iterable[str]]]] = None,\n     ) -> Tuple[str, EventBase, RoomVersion]:\n",
        "source_code_with_indent": "        content: JsonDict = {},\n        params: Optional[Dict[str, str]] = None,\n    ) -> Tuple[str, EventBase, RoomVersion]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        content: JsonDict = {},\n        params: Optional[Dict[str, Union[str, Iterable[str]]]] = None,\n    ) -> Tuple[str, EventBase, RoomVersion]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]