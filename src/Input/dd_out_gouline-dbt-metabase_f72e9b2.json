[
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/__init__.py:78:8 Incompatible parameter type [6]: Expected `str` for 2nd parameter `schema` to call `DbtManifestReader.read_models` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `schema` to call `DbtManifestReader.read_models` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "        schema=dbt_config.schema,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/__init__.py:83:8 Incompatible parameter type [6]: Expected `str` for 7th parameter `docs_url` to call `DbtManifestReader.read_models` but got `Optional[str]`.",
    "message": " Expected `str` for 7th parameter `docs_url` to call `DbtManifestReader.read_models` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 83,
    "warning_line": "        docs_url=dbt_docs_url,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/__init__.py:156:8 Incompatible parameter type [6]: Expected `str` for 2nd parameter `schema` to call `DbtManifestReader.read_models` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `schema` to call `DbtManifestReader.read_models` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "        schema=dbt_config.schema,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/__init__.py:178:8 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 5th parameter `collection_excludes` to call `MetabaseClient.extract_exposures` but got `Optional[Iterable[typing.Any]]`.",
    "message": " Expected `Iterable[typing.Any]` for 5th parameter `collection_excludes` to call `MetabaseClient.extract_exposures` but got `Optional[Iterable[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "        collection_excludes=collection_excludes,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/__init__.py:182:9 Incompatible variable type [9]: args is declared to have type `List[typing.Any]` but is used as type `None`.",
    "message": " args is declared to have type `List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 182,
    "warning_line": "def main(args: List = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(args: List = None):\n    logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(message)s\", level=logging.INFO\n    )\n\n    parser = argparse.ArgumentParser(\n        prog=\"PROG\", description=\"Model synchronization from dbt to Metabase.\"\n    )\n\n    parser.add_argument(\n        \"--version\",\n        action=\"version\",\n        version=f\"%(prog)s {__version__}\",\n    )\n\n    # Commands\n    parser.add_argument(\n        \"command\", choices=[\"models\", \"exposures\"], help=\"Command to execute\"\n    )\n\n    parser_dbt = parser.add_argument_group(\"dbt Parser\")\n    parser_metabase = parser.add_argument_group(\"Metabase Client\")\n    parser_models = parser.add_argument_group(\"`models` optional arguments\")\n    parser_exposures = parser.add_argument_group(\"`exposures` optional arguments\")\n\n    # dbt arguments\n    parser_dbt.add_argument(\n        \"--dbt_database\",\n        metavar=\"DB\",\n        required=True,\n        help=\"Target database name as specified in dbt\",\n    )\n    group = parser_dbt.add_mutually_exclusive_group()\n    group.add_argument(\n        \"--dbt_path\",\n        help=\"Path to dbt project. Cannot be specified with --dbt_manifest_path\",\n    )\n    group.add_argument(\n        \"--dbt_manifest_path\",\n        help=\"Path to dbt manifest.json (typically located in the /target/ directory of the dbt project directory). Cannot be specified with --dbt_path\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_schema\",\n        help=\"Target schema. Should be passed if using folder parser\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_schema_excludes\",\n        nargs=\"*\",\n        default=[],\n        help=\"Target schemas to exclude. Ignored in folder parser\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_includes\",\n        metavar=\"MODELS\",\n        nargs=\"*\",\n        default=[],\n        help=\"Model names to limit processing to\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_excludes\",\n        metavar=\"MODELS\",\n        nargs=\"*\",\n        default=[],\n        help=\"Model names to exclude\",\n    )\n\n    # Metabase arguments\n    parser_metabase.add_argument(\n        \"--metabase_database\",\n        metavar=\"DB\",\n        required=True,\n        help=\"Target database name as set in Metabase (typically aliased)\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_host\", metavar=\"HOST\", required=True, help=\"Metabase hostname\"\n    )\n    parser_metabase.add_argument(\n        \"--metabase_user\", metavar=\"USER\", required=True, help=\"Metabase username\"\n    )\n    parser_metabase.add_argument(\n        \"--metabase_password\", metavar=\"PASS\", required=True, help=\"Metabase password\"\n    )\n    parser_metabase.add_argument(\n        \"--metabase_use_http\",\n        action=\"store_true\",\n        help=\"use HTTP to connect to Metabase instead of HTTPS\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_verify\",\n        metavar=\"CERT\",\n        help=\"Path to certificate bundle used by Metabase client\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_sync_skip\",\n        action=\"store_true\",\n        help=\"Skip synchronizing Metabase database before export\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_sync_timeout\",\n        metavar=\"SECS\",\n        type=int,\n        help=\"Synchronization timeout (in secs). If set, we will fail hard on synchronization failure; if not set, we will proceed after attempting sync regardless of success\",\n    )\n\n    # Models specific args\n    parser_models.add_argument(\n        \"--dbt_docs_url\",\n        metavar=\"URL\",\n        help=\"Pass in URL to dbt docs site. Appends dbt docs URL for each model to Metabase table description (default None)\",\n    )\n    parser_models.add_argument(\n        \"--dbt_include_tags\",\n        action=\"store_true\",\n        default=False,\n        help=\"Append tags to Table descriptions in Metabase (default False)\",\n    )\n\n    # Exposures specific args\n    parser_exposures.add_argument(\n        \"--output_path\",\n        default=\"./\",\n        help=\"Path where generated YAML will be outputted (default local dir)\",\n    )\n    parser_exposures.add_argument(\n        \"--output_name\",\n        default=\"metabase_exposures\",\n        help=\"Used in Exposure extractor, name of generated YAML file (default metabase_exposures)\",\n    )\n    parser_exposures.add_argument(\n        \"--include_personal_collections\",\n        action=\"store_true\",\n        default=False,\n        help=\"Include personal collections in exposure extraction (default False)\",\n    )\n    parser_exposures.add_argument(\n        \"--collection_excludes\",\n        nargs=\"*\",\n        default=[],\n        help=\"Exclude a list of collections from exposure parsing (default [])\",\n    )\n\n    # Common/misc arguments\n    parser.add_argument(\n        \"--verbose\",\n        action=\"store_true\",\n        default=False,\n        help=\"Verbose output\",\n    )\n\n    parsed = parser.parse_args(args=args)\n\n    if parsed.verbose:\n        logger = logging.getLogger()\n        logger.addHandler(logging.StreamHandler(sys.stdout))\n        logger.setLevel(logging.DEBUG)\n\n    # These args drive loading the Metabase client and dbt models and are prerequisites to any functionality of dbt-metabase\n    metabase_config = MetabaseConfig(\n        host=parsed.metabase_host,\n        user=parsed.metabase_user,\n        password=parsed.metabase_password,\n        use_http=parsed.metabase_use_http,\n        verify=parsed.metabase_verify,\n        database=parsed.metabase_database,\n        sync_skip=parsed.metabase_sync_skip,\n        sync_timeout=parsed.metabase_sync_timeout,\n    )\n    dbt_config = DbtConfig(\n        path=parsed.dbt_path,\n        manifest_path=parsed.dbt_manifest_path,\n        database=parsed.dbt_database,\n        schema=parsed.dbt_schema,\n        schema_excludes=parsed.dbt_schema_excludes,\n        includes=parsed.dbt_includes,\n        excludes=parsed.dbt_excludes,\n    )\n\n    if parsed.command == \"models\":\n        models(\n            metabase_config,\n            dbt_config,\n            dbt_docs_url=parsed.dbt_docs_url,\n            dbt_include_tags=parsed.dbt_include_tags,\n        )\n    elif parsed.command == \"exposures\":\n        exposures(\n            metabase_config,\n            dbt_config,\n            output_path=parsed.output_path,\n            output_name=parsed.output_name,\n            include_personal_collections=parsed.include_personal_collections,\n            collection_excludes=parsed.collection_excludes,\n        )\n    else:\n        logging.error(\"Invalid command. Must be one of either 'models' or 'exposures'.\")\n",
        "source_code_len": 6511,
        "target_code": "\ndef main():\n    # Valid kwarg\n    cli(max_content_width=600)  # pylint: disable=unexpected-keyword-arg\n",
        "target_code_len": 104,
        "diff_format": "@@ -181,196 +717,4 @@\n \n-def main(args: List = None):\n-    logging.basicConfig(\n-        format=\"%(asctime)s - %(levelname)s - %(message)s\", level=logging.INFO\n-    )\n-\n-    parser = argparse.ArgumentParser(\n-        prog=\"PROG\", description=\"Model synchronization from dbt to Metabase.\"\n-    )\n-\n-    parser.add_argument(\n-        \"--version\",\n-        action=\"version\",\n-        version=f\"%(prog)s {__version__}\",\n-    )\n-\n-    # Commands\n-    parser.add_argument(\n-        \"command\", choices=[\"models\", \"exposures\"], help=\"Command to execute\"\n-    )\n-\n-    parser_dbt = parser.add_argument_group(\"dbt Parser\")\n-    parser_metabase = parser.add_argument_group(\"Metabase Client\")\n-    parser_models = parser.add_argument_group(\"`models` optional arguments\")\n-    parser_exposures = parser.add_argument_group(\"`exposures` optional arguments\")\n-\n-    # dbt arguments\n-    parser_dbt.add_argument(\n-        \"--dbt_database\",\n-        metavar=\"DB\",\n-        required=True,\n-        help=\"Target database name as specified in dbt\",\n-    )\n-    group = parser_dbt.add_mutually_exclusive_group()\n-    group.add_argument(\n-        \"--dbt_path\",\n-        help=\"Path to dbt project. Cannot be specified with --dbt_manifest_path\",\n-    )\n-    group.add_argument(\n-        \"--dbt_manifest_path\",\n-        help=\"Path to dbt manifest.json (typically located in the /target/ directory of the dbt project directory). Cannot be specified with --dbt_path\",\n-    )\n-    parser_dbt.add_argument(\n-        \"--dbt_schema\",\n-        help=\"Target schema. Should be passed if using folder parser\",\n-    )\n-    parser_dbt.add_argument(\n-        \"--dbt_schema_excludes\",\n-        nargs=\"*\",\n-        default=[],\n-        help=\"Target schemas to exclude. Ignored in folder parser\",\n-    )\n-    parser_dbt.add_argument(\n-        \"--dbt_includes\",\n-        metavar=\"MODELS\",\n-        nargs=\"*\",\n-        default=[],\n-        help=\"Model names to limit processing to\",\n-    )\n-    parser_dbt.add_argument(\n-        \"--dbt_excludes\",\n-        metavar=\"MODELS\",\n-        nargs=\"*\",\n-        default=[],\n-        help=\"Model names to exclude\",\n-    )\n-\n-    # Metabase arguments\n-    parser_metabase.add_argument(\n-        \"--metabase_database\",\n-        metavar=\"DB\",\n-        required=True,\n-        help=\"Target database name as set in Metabase (typically aliased)\",\n-    )\n-    parser_metabase.add_argument(\n-        \"--metabase_host\", metavar=\"HOST\", required=True, help=\"Metabase hostname\"\n-    )\n-    parser_metabase.add_argument(\n-        \"--metabase_user\", metavar=\"USER\", required=True, help=\"Metabase username\"\n-    )\n-    parser_metabase.add_argument(\n-        \"--metabase_password\", metavar=\"PASS\", required=True, help=\"Metabase password\"\n-    )\n-    parser_metabase.add_argument(\n-        \"--metabase_use_http\",\n-        action=\"store_true\",\n-        help=\"use HTTP to connect to Metabase instead of HTTPS\",\n-    )\n-    parser_metabase.add_argument(\n-        \"--metabase_verify\",\n-        metavar=\"CERT\",\n-        help=\"Path to certificate bundle used by Metabase client\",\n-    )\n-    parser_metabase.add_argument(\n-        \"--metabase_sync_skip\",\n-        action=\"store_true\",\n-        help=\"Skip synchronizing Metabase database before export\",\n-    )\n-    parser_metabase.add_argument(\n-        \"--metabase_sync_timeout\",\n-        metavar=\"SECS\",\n-        type=int,\n-        help=\"Synchronization timeout (in secs). If set, we will fail hard on synchronization failure; if not set, we will proceed after attempting sync regardless of success\",\n-    )\n-\n-    # Models specific args\n-    parser_models.add_argument(\n-        \"--dbt_docs_url\",\n-        metavar=\"URL\",\n-        help=\"Pass in URL to dbt docs site. Appends dbt docs URL for each model to Metabase table description (default None)\",\n-    )\n-    parser_models.add_argument(\n-        \"--dbt_include_tags\",\n-        action=\"store_true\",\n-        default=False,\n-        help=\"Append tags to Table descriptions in Metabase (default False)\",\n-    )\n-\n-    # Exposures specific args\n-    parser_exposures.add_argument(\n-        \"--output_path\",\n-        default=\"./\",\n-        help=\"Path where generated YAML will be outputted (default local dir)\",\n-    )\n-    parser_exposures.add_argument(\n-        \"--output_name\",\n-        default=\"metabase_exposures\",\n-        help=\"Used in Exposure extractor, name of generated YAML file (default metabase_exposures)\",\n-    )\n-    parser_exposures.add_argument(\n-        \"--include_personal_collections\",\n-        action=\"store_true\",\n-        default=False,\n-        help=\"Include personal collections in exposure extraction (default False)\",\n-    )\n-    parser_exposures.add_argument(\n-        \"--collection_excludes\",\n-        nargs=\"*\",\n-        default=[],\n-        help=\"Exclude a list of collections from exposure parsing (default [])\",\n-    )\n-\n-    # Common/misc arguments\n-    parser.add_argument(\n-        \"--verbose\",\n-        action=\"store_true\",\n-        default=False,\n-        help=\"Verbose output\",\n-    )\n-\n-    parsed = parser.parse_args(args=args)\n-\n-    if parsed.verbose:\n-        logger = logging.getLogger()\n-        logger.addHandler(logging.StreamHandler(sys.stdout))\n-        logger.setLevel(logging.DEBUG)\n-\n-    # These args drive loading the Metabase client and dbt models and are prerequisites to any functionality of dbt-metabase\n-    metabase_config = MetabaseConfig(\n-        host=parsed.metabase_host,\n-        user=parsed.metabase_user,\n-        password=parsed.metabase_password,\n-        use_http=parsed.metabase_use_http,\n-        verify=parsed.metabase_verify,\n-        database=parsed.metabase_database,\n-        sync_skip=parsed.metabase_sync_skip,\n-        sync_timeout=parsed.metabase_sync_timeout,\n-    )\n-    dbt_config = DbtConfig(\n-        path=parsed.dbt_path,\n-        manifest_path=parsed.dbt_manifest_path,\n-        database=parsed.dbt_database,\n-        schema=parsed.dbt_schema,\n-        schema_excludes=parsed.dbt_schema_excludes,\n-        includes=parsed.dbt_includes,\n-        excludes=parsed.dbt_excludes,\n-    )\n-\n-    if parsed.command == \"models\":\n-        models(\n-            metabase_config,\n-            dbt_config,\n-            dbt_docs_url=parsed.dbt_docs_url,\n-            dbt_include_tags=parsed.dbt_include_tags,\n-        )\n-    elif parsed.command == \"exposures\":\n-        exposures(\n-            metabase_config,\n-            dbt_config,\n-            output_path=parsed.output_path,\n-            output_name=parsed.output_name,\n-            include_personal_collections=parsed.include_personal_collections,\n-            collection_excludes=parsed.collection_excludes,\n-        )\n-    else:\n-        logging.error(\"Invalid command. Must be one of either 'models' or 'exposures'.\")\n+def main():\n+    # Valid kwarg\n+    cli(max_content_width=600)  # pylint: disable=unexpected-keyword-arg\n",
        "source_code_with_indent": "\n<DED>def main(args: List = None):\n    <IND>logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(message)s\", level=logging.INFO\n    )\n\n    parser = argparse.ArgumentParser(\n        prog=\"PROG\", description=\"Model synchronization from dbt to Metabase.\"\n    )\n\n    parser.add_argument(\n        \"--version\",\n        action=\"version\",\n        version=f\"%(prog)s {__version__}\",\n    )\n\n    # Commands\n    parser.add_argument(\n        \"command\", choices=[\"models\", \"exposures\"], help=\"Command to execute\"\n    )\n\n    parser_dbt = parser.add_argument_group(\"dbt Parser\")\n    parser_metabase = parser.add_argument_group(\"Metabase Client\")\n    parser_models = parser.add_argument_group(\"`models` optional arguments\")\n    parser_exposures = parser.add_argument_group(\"`exposures` optional arguments\")\n\n    # dbt arguments\n    parser_dbt.add_argument(\n        \"--dbt_database\",\n        metavar=\"DB\",\n        required=True,\n        help=\"Target database name as specified in dbt\",\n    )\n    group = parser_dbt.add_mutually_exclusive_group()\n    group.add_argument(\n        \"--dbt_path\",\n        help=\"Path to dbt project. Cannot be specified with --dbt_manifest_path\",\n    )\n    group.add_argument(\n        \"--dbt_manifest_path\",\n        help=\"Path to dbt manifest.json (typically located in the /target/ directory of the dbt project directory). Cannot be specified with --dbt_path\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_schema\",\n        help=\"Target schema. Should be passed if using folder parser\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_schema_excludes\",\n        nargs=\"*\",\n        default=[],\n        help=\"Target schemas to exclude. Ignored in folder parser\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_includes\",\n        metavar=\"MODELS\",\n        nargs=\"*\",\n        default=[],\n        help=\"Model names to limit processing to\",\n    )\n    parser_dbt.add_argument(\n        \"--dbt_excludes\",\n        metavar=\"MODELS\",\n        nargs=\"*\",\n        default=[],\n        help=\"Model names to exclude\",\n    )\n\n    # Metabase arguments\n    parser_metabase.add_argument(\n        \"--metabase_database\",\n        metavar=\"DB\",\n        required=True,\n        help=\"Target database name as set in Metabase (typically aliased)\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_host\", metavar=\"HOST\", required=True, help=\"Metabase hostname\"\n    )\n    parser_metabase.add_argument(\n        \"--metabase_user\", metavar=\"USER\", required=True, help=\"Metabase username\"\n    )\n    parser_metabase.add_argument(\n        \"--metabase_password\", metavar=\"PASS\", required=True, help=\"Metabase password\"\n    )\n    parser_metabase.add_argument(\n        \"--metabase_use_http\",\n        action=\"store_true\",\n        help=\"use HTTP to connect to Metabase instead of HTTPS\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_verify\",\n        metavar=\"CERT\",\n        help=\"Path to certificate bundle used by Metabase client\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_sync_skip\",\n        action=\"store_true\",\n        help=\"Skip synchronizing Metabase database before export\",\n    )\n    parser_metabase.add_argument(\n        \"--metabase_sync_timeout\",\n        metavar=\"SECS\",\n        type=int,\n        help=\"Synchronization timeout (in secs). If set, we will fail hard on synchronization failure; if not set, we will proceed after attempting sync regardless of success\",\n    )\n\n    # Models specific args\n    parser_models.add_argument(\n        \"--dbt_docs_url\",\n        metavar=\"URL\",\n        help=\"Pass in URL to dbt docs site. Appends dbt docs URL for each model to Metabase table description (default None)\",\n    )\n    parser_models.add_argument(\n        \"--dbt_include_tags\",\n        action=\"store_true\",\n        default=False,\n        help=\"Append tags to Table descriptions in Metabase (default False)\",\n    )\n\n    # Exposures specific args\n    parser_exposures.add_argument(\n        \"--output_path\",\n        default=\"./\",\n        help=\"Path where generated YAML will be outputted (default local dir)\",\n    )\n    parser_exposures.add_argument(\n        \"--output_name\",\n        default=\"metabase_exposures\",\n        help=\"Used in Exposure extractor, name of generated YAML file (default metabase_exposures)\",\n    )\n    parser_exposures.add_argument(\n        \"--include_personal_collections\",\n        action=\"store_true\",\n        default=False,\n        help=\"Include personal collections in exposure extraction (default False)\",\n    )\n    parser_exposures.add_argument(\n        \"--collection_excludes\",\n        nargs=\"*\",\n        default=[],\n        help=\"Exclude a list of collections from exposure parsing (default [])\",\n    )\n\n    # Common/misc arguments\n    parser.add_argument(\n        \"--verbose\",\n        action=\"store_true\",\n        default=False,\n        help=\"Verbose output\",\n    )\n\n    parsed = parser.parse_args(args=args)\n\n    if parsed.verbose:\n        <IND>logger = logging.getLogger()\n        logger.addHandler(logging.StreamHandler(sys.stdout))\n        logger.setLevel(logging.DEBUG)\n\n    # These args drive loading the Metabase client and dbt models and are prerequisites to any functionality of dbt-metabase\n    <DED>metabase_config = MetabaseConfig(\n        host=parsed.metabase_host,\n        user=parsed.metabase_user,\n        password=parsed.metabase_password,\n        use_http=parsed.metabase_use_http,\n        verify=parsed.metabase_verify,\n        database=parsed.metabase_database,\n        sync_skip=parsed.metabase_sync_skip,\n        sync_timeout=parsed.metabase_sync_timeout,\n    )\n    dbt_config = DbtConfig(\n        path=parsed.dbt_path,\n        manifest_path=parsed.dbt_manifest_path,\n        database=parsed.dbt_database,\n        schema=parsed.dbt_schema,\n        schema_excludes=parsed.dbt_schema_excludes,\n        includes=parsed.dbt_includes,\n        excludes=parsed.dbt_excludes,\n    )\n\n    if parsed.command == \"models\":\n        <IND>models(\n            metabase_config,\n            dbt_config,\n            dbt_docs_url=parsed.dbt_docs_url,\n            dbt_include_tags=parsed.dbt_include_tags,\n        )\n    <DED>elif parsed.command == \"exposures\":\n        <IND>exposures(\n            metabase_config,\n            dbt_config,\n            output_path=parsed.output_path,\n            output_name=parsed.output_name,\n            include_personal_collections=parsed.include_personal_collections,\n            collection_excludes=parsed.collection_excludes,\n        )\n    <DED>else:\n        <IND>logging.error(\"Invalid command. Must be one of either 'models' or 'exposures'.\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main():\n    # Valid kwarg\n    <IND>cli(max_content_width=600)  # pylint: disable=unexpected-keyword-arg\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_folder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_folder.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_folder.py:31:8 Incompatible variable type [9]: schema_excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "message": " schema_excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "        schema_excludes: Iterable = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_folder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_folder.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_folder.py:32:8 Incompatible variable type [9]: includes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "message": " includes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "        includes: Iterable = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_folder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_folder.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_folder.py:33:8 Incompatible variable type [9]: excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "message": " excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 33,
    "warning_line": "        excludes: Iterable = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_folder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_folder.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_folder.py:116:8 Incompatible variable type [9]: source is declared to have type `str` but is used as type `None`.",
    "message": " source is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 116,
    "warning_line": "        source: str = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_manifest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_manifest.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_manifest.py:29:8 Incompatible variable type [9]: schema is declared to have type `str` but is used as type `None`.",
    "message": " schema is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 29,
    "warning_line": "        schema: str = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_manifest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_manifest.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_manifest.py:30:8 Incompatible variable type [9]: schema_excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "message": " schema_excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 30,
    "warning_line": "        schema_excludes: Iterable = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_manifest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_manifest.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_manifest.py:31:8 Incompatible variable type [9]: includes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "message": " includes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "        includes: Iterable = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_manifest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_manifest.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_manifest.py:32:8 Incompatible variable type [9]: excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "message": " excludes is declared to have type `Iterable[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "        excludes: Iterable = None,"
  },
  {
    "project": "gouline/dbt-metabase",
    "commit": "f72e9b221f27715e0da54f95c15995ee4a253c9f",
    "filename": "dbtmetabase/parsers/dbt_manifest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gouline-dbt-metabase/dbtmetabase/parsers/dbt_manifest.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dbtmetabase/parsers/dbt_manifest.py:34:8 Incompatible variable type [9]: docs_url is declared to have type `str` but is used as type `None`.",
    "message": " docs_url is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "        docs_url: str = None,"
  }
]