[
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:458:16 Incompatible return type [7]: Expected `str` but got `bool`.",
    "message": " Expected `str` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 458,
    "warning_line": "                return True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> str:\n        \"\"\"Send control command to Tello and wait for its response.\n",
        "source_code_len": 159,
        "target_code": "\n    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> bool:\n        \"\"\"Send control command to Tello and wait for its response.\n",
        "target_code_len": 160,
        "diff_format": "@@ -448,3 +448,3 @@\n \n-    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> str:\n+    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> bool:\n         \"\"\"Send control command to Tello and wait for its response.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:462:8 Incompatible return type [7]: Expected `str` but got `bool`.",
    "message": " Expected `str` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 462,
    "warning_line": "        return self.raise_result_error(command, response)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> str:\n        \"\"\"Send control command to Tello and wait for its response.\n",
        "source_code_len": 159,
        "target_code": "\n    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> bool:\n        \"\"\"Send control command to Tello and wait for its response.\n",
        "target_code_len": 160,
        "diff_format": "@@ -448,3 +448,3 @@\n \n-    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> str:\n+    def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> bool:\n         \"\"\"Send control command to Tello and wait for its response.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def send_control_command(self, command: str, timeout: int = RESPONSE_TIMEOUT) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:479:16 Incompatible return type [7]: Expected `str` but got `int`.",
    "message": " Expected `str` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 479,
    "warning_line": "                return int(response)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            if response.isdigit():\n",
        "source_code_len": 133,
        "target_code": "        if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            return response\n            if response.isdigit():\n",
        "target_code_len": 161,
        "diff_format": "@@ -477,2 +478,3 @@\n         if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n+            return response\n             if response.isdigit():\n",
        "source_code_with_indent": "        <DED>if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            <IND>if response.isdigit():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            <IND>return response\n            if response.isdigit():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:482:20 Incompatible return type [7]: Expected `str` but got `float`.",
    "message": " Expected `str` but got `float`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 482,
    "warning_line": "                    return float(response)  # isdigit() is False when the number is a float(barometer)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            if response.isdigit():\n",
        "source_code_len": 133,
        "target_code": "        if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            return response\n            if response.isdigit():\n",
        "target_code_len": 161,
        "diff_format": "@@ -477,2 +478,3 @@\n         if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n+            return response\n             if response.isdigit():\n",
        "source_code_with_indent": "        <DED>if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            <IND>if response.isdigit():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if ('error' not in response) and ('ERROR' not in response) and ('False' not in response):\n            <IND>return response\n            if response.isdigit():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:486:12 Incompatible return type [7]: Expected `str` but got `bool`.",
    "message": " Expected `str` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 486,
    "warning_line": "            return self.raise_result_error(command, response)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:772:8 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 772,
    "warning_line": "        return self.send_read_command('speed?')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.send_read_command('speed?')\n\n",
        "source_code_len": 61,
        "target_code": "        \"\"\"\n        return self.send_read_command_int('speed?')\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -771,3 +789,3 @@\n         \"\"\"\n-        return self.send_read_command('speed?')\n+        return self.send_read_command_int('speed?')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.send_read_command('speed?')\n\n",
        "target_code_with_indent": "\n        return self.send_read_command_int('speed?')\n\n"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:780:8 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 780,
    "warning_line": "        return self.send_read_command('battery?')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.send_read_command('battery?')\n\n",
        "source_code_len": 63,
        "target_code": "        \"\"\"\n        return self.send_read_command_int('battery?')\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -779,3 +797,3 @@\n         \"\"\"\n-        return self.send_read_command('battery?')\n+        return self.send_read_command_int('battery?')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.send_read_command('battery?')\n\n",
        "target_code_with_indent": "\n        return self.send_read_command_int('battery?')\n\n"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:788:8 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 788,
    "warning_line": "        return self.send_read_command('time?')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.send_read_command('time?')\n\n",
        "source_code_len": 60,
        "target_code": "        \"\"\"\n        return self.send_read_command_int('time?')\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -787,3 +805,3 @@\n         \"\"\"\n-        return self.send_read_command('time?')\n+        return self.send_read_command_int('time?')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.send_read_command('time?')\n\n",
        "target_code_with_indent": "\n        return self.send_read_command_int('time?')\n\n"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:796:8 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 796,
    "warning_line": "        return self.send_read_command('height?')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.send_read_command('height?')\n\n",
        "source_code_len": 62,
        "target_code": "        \"\"\"\n        return self.send_read_command_int('height?')\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -795,3 +813,3 @@\n         \"\"\"\n-        return self.send_read_command('height?')\n+        return self.send_read_command_int('height?')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.send_read_command('height?')\n\n",
        "target_code_with_indent": "\n        return self.send_read_command_int('height?')\n\n"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:804:8 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 804,
    "warning_line": "        return self.send_read_command('temp?')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.send_read_command('temp?')\n\n",
        "source_code_len": 60,
        "target_code": "        \"\"\"\n        return self.send_read_command_int('temp?')\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -803,3 +821,3 @@\n         \"\"\"\n-        return self.send_read_command('temp?')\n+        return self.send_read_command_int('temp?')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.send_read_command('temp?')\n\n",
        "target_code_with_indent": "\n        return self.send_read_command_int('temp?')\n\n"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:821:8 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 821,
    "warning_line": "        return self.send_read_command('baro?') * 100",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.send_read_command('baro?') * 100\n\n    def query_distance_tof(self) -> int:\n        \"\"\"Get distance value from TOF (cm)\n",
        "source_code_len": 151,
        "target_code": "        \"\"\"\n        return self.send_read_command_int('baro?') * 100\n\n    def query_distance_tof(self) -> float:\n        \"\"\"Get distance value from TOF (cm)\n",
        "target_code_len": 157,
        "diff_format": "@@ -820,5 +838,5 @@\n         \"\"\"\n-        return self.send_read_command('baro?') * 100\n-\n-    def query_distance_tof(self) -> int:\n+        return self.send_read_command_int('baro?') * 100\n+\n+    def query_distance_tof(self) -> float:\n         \"\"\"Get distance value from TOF (cm)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.send_read_command('baro?') * 100\n\n    <DED>def query_distance_tof(self) -> int:\n        <IND>",
        "target_code_with_indent": "\n        return self.send_read_command_int('baro?') * 100\n\n    <DED>def query_distance_tof(self) -> float:\n        <IND>"
      }
    ]
  },
  {
    "project": "damiafuentes/DJITelloPy",
    "commit": "ec4ff7bf0208ffb650ef20262a4d8e02aa8e5d3a",
    "filename": "djitellopy/tello.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/damiafuentes-DJITelloPy/djitellopy/tello.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "djitellopy/tello.py:830:8 Incompatible return type [7]: Expected `int` but got `float`.",
    "message": " Expected `int` but got `float`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 830,
    "warning_line": "        return int(self.send_read_command('tof?')[:-2]) / 10",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return self.raise_result_error(command, response)\n\n    def raise_result_error(self, command: str, response: any) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_len": 242,
        "target_code": "        else:\n            self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    def send_read_command_int(self, command: str) -> int:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    def send_read_command_float(self, command: str) -> float:\n        \"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    def raise_result_error(self, command: str, response: str) -> bool:\n        raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_len": 955,
        "diff_format": "@@ -485,5 +487,22 @@\n         else:\n-            return self.raise_result_error(command, response)\n-\n-    def raise_result_error(self, command: str, response: any) -> bool:\n+            self.raise_result_error(command, response)\n+            return \"error: this code should never be reached\"\n+\n+    def send_read_command_int(self, command: str) -> int:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return int(response)\n+\n+    def send_read_command_float(self, command: str) -> float:\n+        \"\"\"Send given command to Tello and wait for its response.\n+        Parses the response to an integer\n+        Internal method, you normally wouldn't call this yourself.\n+        \"\"\"\n+        response = self.send_read_command(command)\n+        return float(response)\n+\n+    def raise_result_error(self, command: str, response: str) -> bool:\n         raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent": "        <DED><DED><DED>else:\n            <IND>return self.raise_result_error(command, response)\n\n    <DED><DED>def raise_result_error(self, command: str, response: any) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>else:\n            <IND>self.raise_result_error(command, response)\n            return \"error: this code should never be reached\"\n\n    <DED><DED>def send_read_command_int(self, command: str) -> int:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return int(response)\n\n    <DED>def send_read_command_float(self, command: str) -> float:\n        <IND>\"\"\"Send given command to Tello and wait for its response.\n        Parses the response to an integer\n        Internal method, you normally wouldn't call this yourself.\n        \"\"\"\n        response = self.send_read_command(command)\n        return float(response)\n\n    <DED>def raise_result_error(self, command: str, response: str) -> bool:\n        <IND>raise Exception('Command {} was unsuccessful. Message: {}'.format(command, response))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.send_read_command('baro?') * 100\n\n    def query_distance_tof(self) -> int:\n        \"\"\"Get distance value from TOF (cm)\n",
        "source_code_len": 151,
        "target_code": "        \"\"\"\n        return self.send_read_command_int('baro?') * 100\n\n    def query_distance_tof(self) -> float:\n        \"\"\"Get distance value from TOF (cm)\n",
        "target_code_len": 157,
        "diff_format": "@@ -820,5 +838,5 @@\n         \"\"\"\n-        return self.send_read_command('baro?') * 100\n-\n-    def query_distance_tof(self) -> int:\n+        return self.send_read_command_int('baro?') * 100\n+\n+    def query_distance_tof(self) -> float:\n         \"\"\"Get distance value from TOF (cm)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.send_read_command('baro?') * 100\n\n    <DED>def query_distance_tof(self) -> int:\n        <IND>",
        "target_code_with_indent": "\n        return self.send_read_command_int('baro?') * 100\n\n    <DED>def query_distance_tof(self) -> float:\n        <IND>"
      }
    ]
  }
]