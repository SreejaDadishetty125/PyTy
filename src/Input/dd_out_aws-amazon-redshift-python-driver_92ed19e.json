[
  {
    "project": "aws/amazon-redshift-python-driver",
    "commit": "92ed19e0cf45245cb0baf3f76332bbc0c07692a4",
    "filename": "setup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-amazon-redshift-python-driver/setup.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "setup.py:92:12 Unbound name [10]: Name `__version__` is used but not defined in the current scope.",
    "message": " Name `__version__` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 92,
    "warning_line": "    version=__version__,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    name=\"redshift_connector\",\n    version=__version__,\n    description=\"Redshift interface library\",\n",
        "source_code_len": 102,
        "target_code": "    name=\"redshift_connector\",\n    version=__version__,  # type: ignore\n    description=\"Redshift interface library\",\n",
        "target_code_len": 118,
        "diff_format": "@@ -91,3 +92,3 @@\n     name=\"redshift_connector\",\n-    version=__version__,\n+    version=__version__,  # type: ignore\n     description=\"Redshift interface library\",\n",
        "source_code_with_indent": "    name=\"redshift_connector\",\n    version=__version__,\n    description=\"Redshift interface library\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    name=\"redshift_connector\",\n    version=__version__,  # type: ignore\n    description=\"Redshift interface library\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws/amazon-redshift-python-driver",
    "commit": "92ed19e0cf45245cb0baf3f76332bbc0c07692a4",
    "filename": "test/integration/datatype/_generate_test_datatype_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-amazon-redshift-python-driver/test/integration/datatype/_generate_test_datatype_tables.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/integration/datatype/_generate_test_datatype_tables.py:55:0 Incompatible variable type [9]: test_data is declared to have type `typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]]` but is used as type `typing.Dict[str, typing.Union[typing.Tuple[typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool]], typing.Tuple[typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date]], typing.Tuple[typing.Tuple[str, str, datetime], typing.Tuple[str, str, datetime], typing.Tuple[str, str, datetime], typing.Tuple[str, str, datetime]], typing.Tuple[typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time]], typing.Tuple[typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time]], typing.Tuple[typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]]], typing.Tuple[typing.Tuple[str, str], ...]]]`.",
    "message": " test_data is declared to have type `typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]]` but is used as type `typing.Dict[str, typing.Union[typing.Tuple[typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int], typing.Tuple[str, float], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int], typing.Tuple[str, int]], typing.Tuple[typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool], typing.Tuple[str, str, bool]], typing.Tuple[typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date], typing.Tuple[str, str, date]], typing.Tuple[typing.Tuple[str, str, datetime], typing.Tuple[str, str, datetime], typing.Tuple[str, str, datetime], typing.Tuple[str, str, datetime]], typing.Tuple[typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time]], typing.Tuple[typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time], typing.Tuple[str, str, time]], typing.Tuple[typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]], typing.Union[typing.Tuple[str, int], typing.Tuple[str, int, Decimal]]], typing.Tuple[typing.Tuple[str, str], ...]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 55,
    "warning_line": "test_data: typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]] = {",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ntest_data: typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "source_code_len": 121,
        "target_code": "\ntest_data: typing.Dict[str, typing.Tuple[typing.Tuple[typing.Any, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "target_code_len": 122,
        "diff_format": "@@ -54,3 +54,3 @@\n \n-test_data: typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]] = {\n+test_data: typing.Dict[str, typing.Tuple[typing.Tuple[typing.Any, ...], ...]] = {\n     Datatypes.int2.name: (  # smallint\n",
        "source_code_with_indent": "\ntest_data: typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ntest_data: typing.Dict[str, typing.Tuple[typing.Tuple[typing.Any, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws/amazon-redshift-python-driver",
    "commit": "92ed19e0cf45245cb0baf3f76332bbc0c07692a4",
    "filename": "test/integration/datatype/_generate_test_datatype_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-amazon-redshift-python-driver/test/integration/datatype/_generate_test_datatype_tables.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/integration/datatype/_generate_test_datatype_tables.py:266:25 Incompatible parameter type [6]: Expected `Datatypes` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `Datatypes` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 266,
    "warning_line": "    for row in test_data[dt.name]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ntest_data: typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "source_code_len": 121,
        "target_code": "\ntest_data: typing.Dict[str, typing.Tuple[typing.Tuple[typing.Any, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "target_code_len": 122,
        "diff_format": "@@ -54,3 +54,3 @@\n \n-test_data: typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]] = {\n+test_data: typing.Dict[str, typing.Tuple[typing.Tuple[typing.Any, ...], ...]] = {\n     Datatypes.int2.name: (  # smallint\n",
        "source_code_with_indent": "\ntest_data: typing.Dict[Datatypes, typing.Tuple[typing.Tuple[str, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ntest_data: typing.Dict[str, typing.Tuple[typing.Tuple[typing.Any, ...], ...]] = {\n    Datatypes.int2.name: (  # smallint\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws/amazon-redshift-python-driver",
    "commit": "92ed19e0cf45245cb0baf3f76332bbc0c07692a4",
    "filename": "test/integration/metadata/test_list_catalog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-amazon-redshift-python-driver/test/integration/metadata/test_list_catalog.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/integration/metadata/test_list_catalog.py:79:4 Incompatible attribute type [8]: Attribute `test_table_types` declared in class `TestListCatalog` has type `typing.Tuple[str]` but is used as type `typing.Tuple[str, str, str, str]`.",
    "message": " Attribute `test_table_types` declared in class `TestListCatalog` has type `typing.Tuple[str]` but is used as type `typing.Tuple[str, str, str, str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 79,
    "warning_line": "    test_table_types: typing.Tuple[str] = (\"TABLE\", \"SHARED TABLE\", \"VIEW\", \"EXTERNAL TABLE\")",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    test_cross_db_column_pattern: str = \"c%\"\n    test_table_types: typing.Tuple[str] = (\"TABLE\", \"SHARED TABLE\", \"VIEW\", \"EXTERNAL TABLE\")\n\n",
        "source_code_len": 140,
        "target_code": "    test_cross_db_column_pattern: str = \"c%\"\n    test_table_types: typing.Tuple[str, ...] = (\"TABLE\", \"SHARED TABLE\", \"VIEW\", \"EXTERNAL TABLE\")\n\n",
        "target_code_len": 145,
        "diff_format": "@@ -78,3 +78,3 @@\n     test_cross_db_column_pattern: str = \"c%\"\n-    test_table_types: typing.Tuple[str] = (\"TABLE\", \"SHARED TABLE\", \"VIEW\", \"EXTERNAL TABLE\")\n+    test_table_types: typing.Tuple[str, ...] = (\"TABLE\", \"SHARED TABLE\", \"VIEW\", \"EXTERNAL TABLE\")\n \n",
        "source_code_with_indent": "    test_cross_db_column_pattern: str = \"c%\"\n    test_table_types: typing.Tuple[str] = (\"TABLE\", \"SHARED TABLE\", \"VIEW\", \"EXTERNAL TABLE\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    test_cross_db_column_pattern: str = \"c%\"\n    test_table_types: typing.Tuple[str, ...] = (\"TABLE\", \"SHARED TABLE\", \"VIEW\", \"EXTERNAL TABLE\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_tables_test_data() -> typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]]:\n    result: typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]] = []\n    for flip in (True, False):\n        TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Optional[str]]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": []},\n            {\n",
        "source_code_len": 458,
        "target_code": "\ndef get_tables_test_data() -> typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]]:\n    result: typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]] = []\n    for flip in (True, False):\n        TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Any]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": tuple()},\n            {\n",
        "target_code_len": 467,
        "diff_format": "@@ -165,8 +165,8 @@\n \n-def get_tables_test_data() -> typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]]:\n-    result: typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]] = []\n+def get_tables_test_data() -> typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]]:\n+    result: typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]] = []\n     for flip in (True, False):\n         TestListCatalog.config_class_consts(flip)\n-        arg_data: typing.List[typing.Dict[str, typing.Optional[str]]] = [\n-            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": []},\n+        arg_data: typing.List[typing.Dict[str, typing.Any]] = [\n+            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": tuple()},\n             {\n",
        "source_code_with_indent": "\n<DED><DED><DED>def get_tables_test_data() -> typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]]:\n    <IND>result: typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]] = []\n    for flip in (True, False):\n        <IND>TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Optional[str]]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": []},\n            {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def get_tables_test_data() -> typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]]:\n    <IND>result: typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]] = []\n    for flip in (True, False):\n        <IND>TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Any]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": tuple()},\n            {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws/amazon-redshift-python-driver",
    "commit": "92ed19e0cf45245cb0baf3f76332bbc0c07692a4",
    "filename": "test/integration/metadata/test_list_catalog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-amazon-redshift-python-driver/test/integration/metadata/test_list_catalog.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/integration/metadata/test_list_catalog.py:170:8 Incompatible variable type [9]: arg_data is declared to have type `typing.List[typing.Dict[str, typing.Optional[str]]]` but is used as type `typing.List[typing.Dict[str, typing.Union[None, typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.Tuple[str], str]]]`.",
    "message": " arg_data is declared to have type `typing.List[typing.Dict[str, typing.Optional[str]]]` but is used as type `typing.List[typing.Dict[str, typing.Union[None, typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.List[Variable[_T]], typing.Tuple[str], str]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 170,
    "warning_line": "        arg_data: typing.List[typing.Dict[str, typing.Optional[str]]] = [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_tables_test_data() -> typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]]:\n    result: typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]] = []\n    for flip in (True, False):\n        TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Optional[str]]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": []},\n            {\n",
        "source_code_len": 458,
        "target_code": "\ndef get_tables_test_data() -> typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]]:\n    result: typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]] = []\n    for flip in (True, False):\n        TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Any]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": tuple()},\n            {\n",
        "target_code_len": 467,
        "diff_format": "@@ -165,8 +165,8 @@\n \n-def get_tables_test_data() -> typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]]:\n-    result: typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]] = []\n+def get_tables_test_data() -> typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]]:\n+    result: typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]] = []\n     for flip in (True, False):\n         TestListCatalog.config_class_consts(flip)\n-        arg_data: typing.List[typing.Dict[str, typing.Optional[str]]] = [\n-            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": []},\n+        arg_data: typing.List[typing.Dict[str, typing.Any]] = [\n+            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": tuple()},\n             {\n",
        "source_code_with_indent": "\n<DED><DED><DED>def get_tables_test_data() -> typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]]:\n    <IND>result: typing.List[typing.Tuple[bool, typing.Dict[str, typing.Optional[str]]]] = []\n    for flip in (True, False):\n        <IND>TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Optional[str]]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": []},\n            {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def get_tables_test_data() -> typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]]:\n    <IND>result: typing.List[typing.Optional[typing.Tuple[bool, typing.Dict[str, typing.Any]]]] = []\n    for flip in (True, False):\n        <IND>TestListCatalog.config_class_consts(flip)\n        arg_data: typing.List[typing.Dict[str, typing.Any]] = [\n            {\"catalog\": None, \"schema_pattern\": None, \"table_name_pattern\": None, \"types\": tuple()},\n            {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]