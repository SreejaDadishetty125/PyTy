[
  {
    "project": "irmen/Tale",
    "commit": "1586e5fd972bd4dd0e0c9d955183f28537e04c14",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:198:8 Incompatible return type [7]: Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "message": " Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 198,
    "warning_line": "        return [b'Error 405: Method Not Allowed']       # XXX bytes/str?",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']       # XXX bytes/str?\n\n    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']          # XXX bytes/str?\n\n    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[str]:\n        \"\"\"Called to do a redirect\"\"\"\n",
        "source_code_len": 685,
        "target_code": "\n    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']\n\n    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']\n\n    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[bytes]:\n        \"\"\"Called to do a redirect\"\"\"\n",
        "target_code_len": 642,
        "diff_format": "@@ -194,13 +195,13 @@\n \n-    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called if invalid http method.\"\"\"\n         start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n-        return [b'Error 405: Method Not Allowed']       # XXX bytes/str?\n-\n-    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+        return [b'Error 405: Method Not Allowed']\n+\n+    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called if Url not found.\"\"\"\n         start_response('404 Not Found', [('Content-Type', 'text/plain')])\n-        return [b'Error 404: Not Found']          # XXX bytes/str?\n-\n-    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[str]:\n+        return [b'Error 404: Not Found']\n+\n+    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[bytes]:\n         \"\"\"Called to do a redirect\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']       # XXX bytes/str?\n\n    <DED>def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']          # XXX bytes/str?\n\n    <DED>def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[str]:\n        <IND>\"\"\"Called to do a redirect\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']\n\n    <DED>def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']\n\n    <DED>def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[bytes]:\n        <IND>\"\"\"Called to do a redirect\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "1586e5fd972bd4dd0e0c9d955183f28537e04c14",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:203:8 Incompatible return type [7]: Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "message": " Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 203,
    "warning_line": "        return [b'Error 404: Not Found']          # XXX bytes/str?",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']       # XXX bytes/str?\n\n    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']          # XXX bytes/str?\n\n    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[str]:\n        \"\"\"Called to do a redirect\"\"\"\n",
        "source_code_len": 685,
        "target_code": "\n    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']\n\n    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']\n\n    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[bytes]:\n        \"\"\"Called to do a redirect\"\"\"\n",
        "target_code_len": 642,
        "diff_format": "@@ -194,13 +195,13 @@\n \n-    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+    def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called if invalid http method.\"\"\"\n         start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n-        return [b'Error 405: Method Not Allowed']       # XXX bytes/str?\n-\n-    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+        return [b'Error 405: Method Not Allowed']\n+\n+    def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called if Url not found.\"\"\"\n         start_response('404 Not Found', [('Content-Type', 'text/plain')])\n-        return [b'Error 404: Not Found']          # XXX bytes/str?\n-\n-    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[str]:\n+        return [b'Error 404: Not Found']\n+\n+    def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[bytes]:\n         \"\"\"Called to do a redirect\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']       # XXX bytes/str?\n\n    <DED>def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']          # XXX bytes/str?\n\n    <DED>def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[str]:\n        <IND>\"\"\"Called to do a redirect\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_invalid_request(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called if invalid http method.\"\"\"\n        start_response('405 Method Not Allowed', [('Content-Type', 'text/plain')])\n        return [b'Error 405: Method Not Allowed']\n\n    <DED>def wsgi_not_found(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called if Url not found.\"\"\"\n        start_response('404 Not Found', [('Content-Type', 'text/plain')])\n        return [b'Error 404: Not Found']\n\n    <DED>def wsgi_redirect(self, start_response: Callable, target: str) -> Iterable[bytes]:\n        <IND>\"\"\"Called to do a redirect\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "1586e5fd972bd4dd0e0c9d955183f28537e04c14",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:223:8 Incompatible return type [7]: Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "message": " Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 223,
    "warning_line": "        return [message.encode(\"utf-8\")]          # XXX bytes/str?",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_len": 153,
        "target_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -214,3 +215,3 @@\n \n-    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_len": 534,
        "target_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_len": 916,
        "diff_format": "@@ -219,9 +220,15 @@\n \n-    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n+    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n         \"\"\"Called when an internal server error occurred\"\"\"\n         start_response('500 Internal server error', [])\n-        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n+        return [message.encode(\"utf-8\")]\n+\n+    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n+        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n+        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n+        message = '{\"error\": \"%s\"}' % message\n+        return [message.encode(\"utf-8\")]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_len": 255,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_len": 257,
        "diff_format": "@@ -229,3 +236,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        license = \"The author hasn't provided any license information.\"\n",
        "source_code_len": 244,
        "target_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        license = \"The author hasn't provided any license information.\"\n",
        "target_code_len": 246,
        "diff_format": "@@ -322,3 +329,3 @@\n     def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                            start_response: WsgiStartResponseType) -> Iterable[str]:\n+                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_len": 253,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_len": 255,
        "diff_format": "@@ -403,3 +410,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_len": 369,
        "target_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_len": 351,
        "diff_format": "@@ -407,6 +414,6 @@\n         self.driver._stop_driver()\n-        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n+        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # about page\n",
        "source_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "1586e5fd972bd4dd0e0c9d955183f28537e04c14",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:283:8 Incompatible return type [7]: Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "message": " Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 283,
    "warning_line": "        return [json.dumps(response).encode(\"utf-8\")]           # XXX bytes/str?",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_len": 153,
        "target_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -214,3 +215,3 @@\n \n-    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_len": 534,
        "target_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_len": 916,
        "diff_format": "@@ -219,9 +220,15 @@\n \n-    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n+    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n         \"\"\"Called when an internal server error occurred\"\"\"\n         start_response('500 Internal server error', [])\n-        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n+        return [message.encode(\"utf-8\")]\n+\n+    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n+        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n+        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n+        message = '{\"error\": \"%s\"}' % message\n+        return [message.encode(\"utf-8\")]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_len": 255,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_len": 257,
        "diff_format": "@@ -229,3 +236,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                   story_author_email=self.driver.story.config.author_address)\n        return [txt.encode(\"utf-8\")]       # XXX bytes/str?\n\n    def wsgi_handle_text(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        session = environ[\"wsgi.session\"]\n",
        "source_code_len": 364,
        "target_code": "                                   story_author_email=self.driver.story.config.author_address)\n        return [txt.encode(\"utf-8\")]\n\n    def wsgi_handle_text(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        session = environ[\"wsgi.session\"]\n",
        "target_code_len": 343,
        "diff_format": "@@ -263,6 +270,6 @@\n                                    story_author_email=self.driver.story.config.author_address)\n-        return [txt.encode(\"utf-8\")]       # XXX bytes/str?\n+        return [txt.encode(\"utf-8\")]\n \n     def wsgi_handle_text(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         session = environ[\"wsgi.session\"]\n",
        "source_code_with_indent": "                                   story_author_email=self.driver.story.config.author_address)\n        return [txt.encode(\"utf-8\")]       # XXX bytes/str?\n\n    <DED>def wsgi_handle_text(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>session = environ[\"wsgi.session\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                   story_author_email=self.driver.story.config.author_address)\n        return [txt.encode(\"utf-8\")]\n\n    <DED>def wsgi_handle_text(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>session = environ[\"wsgi.session\"]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        license = \"The author hasn't provided any license information.\"\n",
        "source_code_len": 244,
        "target_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        license = \"The author hasn't provided any license information.\"\n",
        "target_code_len": 246,
        "diff_format": "@@ -322,3 +329,3 @@\n     def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                            start_response: WsgiStartResponseType) -> Iterable[str]:\n+                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_len": 253,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_len": 255,
        "diff_format": "@@ -403,3 +410,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_len": 369,
        "target_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_len": 351,
        "diff_format": "@@ -407,6 +414,6 @@\n         self.driver._stop_driver()\n-        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n+        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # about page\n",
        "source_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "1586e5fd972bd4dd0e0c9d955183f28537e04c14",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:295:8 Incompatible return type [7]: Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "message": " Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 295,
    "warning_line": "        return [json.dumps(conn.io.tab_complete(parameters[\"prefix\"], self.driver)).encode(\"utf-8\")]        # XXX bytes/str?",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_len": 153,
        "target_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -214,3 +215,3 @@\n \n-    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_len": 534,
        "target_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_len": 916,
        "diff_format": "@@ -219,9 +220,15 @@\n \n-    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n+    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n         \"\"\"Called when an internal server error occurred\"\"\"\n         start_response('500 Internal server error', [])\n-        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n+        return [message.encode(\"utf-8\")]\n+\n+    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n+        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n+        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n+        message = '{\"error\": \"%s\"}' % message\n+        return [message.encode(\"utf-8\")]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_len": 255,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_len": 257,
        "diff_format": "@@ -229,3 +236,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            response[\"special\"] = special\n        return [json.dumps(response).encode(\"utf-8\")]           # XXX bytes/str?\n\n    def wsgi_handle_tabcomplete(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                                start_response: WsgiStartResponseType) -> Iterable[str]:\n        session = environ[\"wsgi.session\"]\n",
        "source_code_len": 346,
        "target_code": "            response[\"special\"] = special\n        return [json.dumps(response).encode(\"utf-8\")]\n\n    def wsgi_handle_tabcomplete(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                                start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        session = environ[\"wsgi.session\"]\n",
        "target_code_len": 321,
        "diff_format": "@@ -282,6 +289,6 @@\n             response[\"special\"] = special\n-        return [json.dumps(response).encode(\"utf-8\")]           # XXX bytes/str?\n+        return [json.dumps(response).encode(\"utf-8\")]\n \n     def wsgi_handle_tabcomplete(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                                start_response: WsgiStartResponseType) -> Iterable[str]:\n+                                start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         session = environ[\"wsgi.session\"]\n",
        "source_code_with_indent": "            response[\"special\"] = special\n        <DED>return [json.dumps(response).encode(\"utf-8\")]           # XXX bytes/str?\n\n    <DED>def wsgi_handle_tabcomplete(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                                start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>session = environ[\"wsgi.session\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            response[\"special\"] = special\n        <DED>return [json.dumps(response).encode(\"utf-8\")]\n\n    <DED>def wsgi_handle_tabcomplete(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                                start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>session = environ[\"wsgi.session\"]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        license = \"The author hasn't provided any license information.\"\n",
        "source_code_len": 244,
        "target_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        license = \"The author hasn't provided any license information.\"\n",
        "target_code_len": 246,
        "diff_format": "@@ -322,3 +329,3 @@\n     def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                            start_response: WsgiStartResponseType) -> Iterable[str]:\n+                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_len": 253,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_len": 255,
        "diff_format": "@@ -403,3 +410,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_len": 369,
        "target_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_len": 351,
        "diff_format": "@@ -407,6 +414,6 @@\n         self.driver._stop_driver()\n-        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n+        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # about page\n",
        "source_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "1586e5fd972bd4dd0e0c9d955183f28537e04c14",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:408:8 Incompatible return type [7]: Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "message": " Expected `Iterable[str]` but got `Iterable[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 408,
    "warning_line": "        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_len": 153,
        "target_code": "\n    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -214,3 +215,3 @@\n \n-    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n+    def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         \"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_not_modified(self, start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>\"\"\"Called to signal that a resource wasn't modified\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_len": 534,
        "target_code": "\n    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_len": 916,
        "diff_format": "@@ -219,9 +220,15 @@\n \n-    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n+    def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n         \"\"\"Called when an internal server error occurred\"\"\"\n         start_response('500 Internal server error', [])\n-        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n+        return [message.encode(\"utf-8\")]\n+\n+    def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n+        \"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n+        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n+        message = '{\"error\": \"%s\"}' % message\n+        return [message.encode(\"utf-8\")]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[str]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]          # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def wsgi_internal_server_error(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred\"\"\"\n        start_response('500 Internal server error', [])\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_internal_server_error_json(self, start_response: Callable, message: str=\"\") -> Iterable[bytes]:\n        <IND>\"\"\"Called when an internal server error occurred, returns json response rather than html\"\"\"\n        start_response('500 Internal server error', [('Content-Type', 'application/json; charset=utf-8')])\n        message = '{\"error\": \"%s\"}' % message\n        return [message.encode(\"utf-8\")]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # about page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_len": 255,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_len": 257,
        "diff_format": "@@ -229,3 +236,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>raise NotImplementedError(\"implement this in subclass\")   # quit/logged out page\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        license = \"The author hasn't provided any license information.\"\n",
        "source_code_len": 244,
        "target_code": "    def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        license = \"The author hasn't provided any license information.\"\n",
        "target_code_len": 246,
        "diff_format": "@@ -322,3 +329,3 @@\n     def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                            start_response: WsgiStartResponseType) -> Iterable[str]:\n+                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[str]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_license(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                            start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        <IND>license = \"The author hasn't provided any license information.\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_len": 253,
        "target_code": "    def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_len": 255,
        "diff_format": "@@ -403,3 +410,3 @@\n     def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                         start_response: WsgiStartResponseType) -> Iterable[str]:\n+                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[str]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def wsgi_handle_quit(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                         start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # Quit/logged out page. For single player, simply close down the whole driver.\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_len": 369,
        "target_code": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_len": 351,
        "diff_format": "@@ -407,6 +414,6 @@\n         self.driver._stop_driver()\n-        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n+        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n \n     def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n-                          start_response: WsgiStartResponseType) -> Iterable[str]:\n+                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n         # about page\n",
        "source_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]    # XXX bytes/str?\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[str]:\n        # about page\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.driver._stop_driver()\n        return [b\"<html><body><script>window.close();</script>Session ended. You may close this window/tab.</body></html>\"]\n\n    <DED>def wsgi_handle_about(self, environ: Dict[str, Any], parameters: Dict[str, str],\n                          start_response: WsgiStartResponseType) -> Iterable[bytes]:\n        # about page\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]