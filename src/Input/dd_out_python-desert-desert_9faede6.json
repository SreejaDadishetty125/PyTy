[
  {
    "project": "python-desert/desert",
    "commit": "9faede6fabf77dd88bccc5126bebbe82533eb47f",
    "filename": "src/desert/_make.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-desert-desert/src/desert/_make.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/desert/_make.py:92:4 Incompatible variable type [9]: _cls is declared to have type `Type[typing.Any]` but is used as type `None`.",
    "message": " _cls is declared to have type `Type[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 92,
    "warning_line": "    _cls: type = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "NoneType = type(None)\n\n\n# _cls should never be specified by keyword, so start it with an\n# underscore.  The presence of _cls is used to detect if this\n# decorator is being called with parameters or not.\ndef dataclass(\n    _cls: type = None,\n    *,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n) -> type:\n    \"\"\"\n    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n    It adds a `.Schema` attribute to the class object\n    >>> @dataclass\n    ... class Artist:\n    ...    name: str\n    >>> Artist.Schema\n    <class 'marshmallow.schema.Artist'>\n    >>> from marshmallow import Schema\n    >>> @dataclass(order=True) # preserve field order\n    ... class Point:\n    ...   x:float\n    ...   y:float\n    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n    ...\n    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n    Point(x=0.0, y=0.0)\n    \"\"\"\n    dc = dataclasses.dataclass(\n        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n    )\n    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n\n",
        "source_code_len": 1171,
        "target_code": "NoneType = type(None)\n\n",
        "target_code_len": 23,
        "diff_format": "@@ -85,38 +85,2 @@\n NoneType = type(None)\n-\n-\n-# _cls should never be specified by keyword, so start it with an\n-# underscore.  The presence of _cls is used to detect if this\n-# decorator is being called with parameters or not.\n-def dataclass(\n-    _cls: type = None,\n-    *,\n-    repr=True,\n-    eq=True,\n-    order=False,\n-    unsafe_hash=False,\n-    frozen=False,\n-) -> type:\n-    \"\"\"\n-    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n-    It adds a `.Schema` attribute to the class object\n-    >>> @dataclass\n-    ... class Artist:\n-    ...    name: str\n-    >>> Artist.Schema\n-    <class 'marshmallow.schema.Artist'>\n-    >>> from marshmallow import Schema\n-    >>> @dataclass(order=True) # preserve field order\n-    ... class Point:\n-    ...   x:float\n-    ...   y:float\n-    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n-    ...\n-    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n-    Point(x=0.0, y=0.0)\n-    \"\"\"\n-    dc = dataclasses.dataclass(\n-        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n-    )\n-    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n \n",
        "source_code_with_indent": "NoneType = type(None)\n\n\n# _cls should never be specified by keyword, so start it with an\n# underscore.  The presence of _cls is used to detect if this\n# decorator is being called with parameters or not.\ndef dataclass(\n    _cls: type = None,\n    *,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n) -> type:\n    <IND>\"\"\"\n    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n    It adds a `.Schema` attribute to the class object\n    >>> @dataclass\n    ... class Artist:\n    ...    name: str\n    >>> Artist.Schema\n    <class 'marshmallow.schema.Artist'>\n    >>> from marshmallow import Schema\n    >>> @dataclass(order=True) # preserve field order\n    ... class Point:\n    ...   x:float\n    ...   y:float\n    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n    ...\n    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n    Point(x=0.0, y=0.0)\n    \"\"\"\n    dc = dataclasses.dataclass(\n        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n    )\n    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "NoneType = type(None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-desert/desert",
    "commit": "9faede6fabf77dd88bccc5126bebbe82533eb47f",
    "filename": "src/desert/_make.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-desert-desert/src/desert/_make.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/desert/_make.py:121:4 Incompatible return type [7]: Expected `Type[typing.Any]` but got `Union[typing.Callable[[Named(cls, typing.Any)], Type[typing.Any]], Type[typing.Any]]`.",
    "message": " Expected `Type[typing.Any]` but got `Union[typing.Callable[[Named(cls, typing.Any)], Type[typing.Any]], Type[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 121,
    "warning_line": "    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "NoneType = type(None)\n\n\n# _cls should never be specified by keyword, so start it with an\n# underscore.  The presence of _cls is used to detect if this\n# decorator is being called with parameters or not.\ndef dataclass(\n    _cls: type = None,\n    *,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n) -> type:\n    \"\"\"\n    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n    It adds a `.Schema` attribute to the class object\n    >>> @dataclass\n    ... class Artist:\n    ...    name: str\n    >>> Artist.Schema\n    <class 'marshmallow.schema.Artist'>\n    >>> from marshmallow import Schema\n    >>> @dataclass(order=True) # preserve field order\n    ... class Point:\n    ...   x:float\n    ...   y:float\n    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n    ...\n    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n    Point(x=0.0, y=0.0)\n    \"\"\"\n    dc = dataclasses.dataclass(\n        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n    )\n    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n\n",
        "source_code_len": 1171,
        "target_code": "NoneType = type(None)\n\n",
        "target_code_len": 23,
        "diff_format": "@@ -85,38 +85,2 @@\n NoneType = type(None)\n-\n-\n-# _cls should never be specified by keyword, so start it with an\n-# underscore.  The presence of _cls is used to detect if this\n-# decorator is being called with parameters or not.\n-def dataclass(\n-    _cls: type = None,\n-    *,\n-    repr=True,\n-    eq=True,\n-    order=False,\n-    unsafe_hash=False,\n-    frozen=False,\n-) -> type:\n-    \"\"\"\n-    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n-    It adds a `.Schema` attribute to the class object\n-    >>> @dataclass\n-    ... class Artist:\n-    ...    name: str\n-    >>> Artist.Schema\n-    <class 'marshmallow.schema.Artist'>\n-    >>> from marshmallow import Schema\n-    >>> @dataclass(order=True) # preserve field order\n-    ... class Point:\n-    ...   x:float\n-    ...   y:float\n-    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n-    ...\n-    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n-    Point(x=0.0, y=0.0)\n-    \"\"\"\n-    dc = dataclasses.dataclass(\n-        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n-    )\n-    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n \n",
        "source_code_with_indent": "NoneType = type(None)\n\n\n# _cls should never be specified by keyword, so start it with an\n# underscore.  The presence of _cls is used to detect if this\n# decorator is being called with parameters or not.\ndef dataclass(\n    _cls: type = None,\n    *,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n) -> type:\n    <IND>\"\"\"\n    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n    It adds a `.Schema` attribute to the class object\n    >>> @dataclass\n    ... class Artist:\n    ...    name: str\n    >>> Artist.Schema\n    <class 'marshmallow.schema.Artist'>\n    >>> from marshmallow import Schema\n    >>> @dataclass(order=True) # preserve field order\n    ... class Point:\n    ...   x:float\n    ...   y:float\n    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n    ...\n    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n    Point(x=0.0, y=0.0)\n    \"\"\"\n    dc = dataclasses.dataclass(\n        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n    )\n    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "NoneType = type(None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-desert/desert",
    "commit": "9faede6fabf77dd88bccc5126bebbe82533eb47f",
    "filename": "src/desert/_make.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-desert-desert/src/desert/_make.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/desert/_make.py:121:22 Incompatible parameter type [6]: Expected `Type[typing.Any]` for 1st positional only parameter to call `add_schema` but got `typing.Callable[[Type[typing.Any]], Type[typing.Any]]`.",
    "message": " Expected `Type[typing.Any]` for 1st positional only parameter to call `add_schema` but got `typing.Callable[[Type[typing.Any]], Type[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 121,
    "warning_line": "    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "NoneType = type(None)\n\n\n# _cls should never be specified by keyword, so start it with an\n# underscore.  The presence of _cls is used to detect if this\n# decorator is being called with parameters or not.\ndef dataclass(\n    _cls: type = None,\n    *,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n) -> type:\n    \"\"\"\n    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n    It adds a `.Schema` attribute to the class object\n    >>> @dataclass\n    ... class Artist:\n    ...    name: str\n    >>> Artist.Schema\n    <class 'marshmallow.schema.Artist'>\n    >>> from marshmallow import Schema\n    >>> @dataclass(order=True) # preserve field order\n    ... class Point:\n    ...   x:float\n    ...   y:float\n    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n    ...\n    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n    Point(x=0.0, y=0.0)\n    \"\"\"\n    dc = dataclasses.dataclass(\n        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n    )\n    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n\n",
        "source_code_len": 1171,
        "target_code": "NoneType = type(None)\n\n",
        "target_code_len": 23,
        "diff_format": "@@ -85,38 +85,2 @@\n NoneType = type(None)\n-\n-\n-# _cls should never be specified by keyword, so start it with an\n-# underscore.  The presence of _cls is used to detect if this\n-# decorator is being called with parameters or not.\n-def dataclass(\n-    _cls: type = None,\n-    *,\n-    repr=True,\n-    eq=True,\n-    order=False,\n-    unsafe_hash=False,\n-    frozen=False,\n-) -> type:\n-    \"\"\"\n-    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n-    It adds a `.Schema` attribute to the class object\n-    >>> @dataclass\n-    ... class Artist:\n-    ...    name: str\n-    >>> Artist.Schema\n-    <class 'marshmallow.schema.Artist'>\n-    >>> from marshmallow import Schema\n-    >>> @dataclass(order=True) # preserve field order\n-    ... class Point:\n-    ...   x:float\n-    ...   y:float\n-    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n-    ...\n-    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n-    Point(x=0.0, y=0.0)\n-    \"\"\"\n-    dc = dataclasses.dataclass(\n-        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n-    )\n-    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n \n",
        "source_code_with_indent": "NoneType = type(None)\n\n\n# _cls should never be specified by keyword, so start it with an\n# underscore.  The presence of _cls is used to detect if this\n# decorator is being called with parameters or not.\ndef dataclass(\n    _cls: type = None,\n    *,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n) -> type:\n    <IND>\"\"\"\n    This decorator does the same as dataclasses.dataclass, but also applies :func:`add_schema`.\n    It adds a `.Schema` attribute to the class object\n    >>> @dataclass\n    ... class Artist:\n    ...    name: str\n    >>> Artist.Schema\n    <class 'marshmallow.schema.Artist'>\n    >>> from marshmallow import Schema\n    >>> @dataclass(order=True) # preserve field order\n    ... class Point:\n    ...   x:float\n    ...   y:float\n    ...   Schema: ClassVar[Type[Schema]] = Schema # For the type checker\n    ...\n    >>> Point.Schema().load({'x':0, 'y':0}) # This line can be statically type checked\n    Point(x=0.0, y=0.0)\n    \"\"\"\n    dc = dataclasses.dataclass(\n        _cls, repr=repr, eq=eq, order=order, unsafe_hash=unsafe_hash, frozen=frozen\n    )\n    return add_schema(dc) if _cls else lambda cls: add_schema(dc(cls))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "NoneType = type(None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]