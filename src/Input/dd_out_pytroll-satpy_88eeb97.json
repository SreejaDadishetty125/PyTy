[
  {
    "project": "pytroll/satpy",
    "commit": "88eeb973954a71c1a6e4bfa64dcb522ba3ffab26",
    "filename": "satpy/readers/amsr2_l2_gaasp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytroll-satpy/satpy/readers/amsr2_l2_gaasp.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "satpy/readers/amsr2_l2_gaasp.py:247:4 Inconsistent override [15]: `x_dims` overrides attribute defined in `GAASPFileHandler` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str]`.",
    "message": " `x_dims` overrides attribute defined in `GAASPFileHandler` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 247,
    "warning_line": "    x_dims = (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    y_dims = (\n        'Number_of_Scans',\n    )\n    x_dims = (\n        'Number_of_hi_rez_FOVs',\n",
        "source_code_len": 97,
        "target_code": "\n    y_dims: tuple[str, ...] = (\n        'Number_of_Scans',\n    )\n    x_dims: tuple[str, ...] = (\n        'Number_of_hi_rez_FOVs',\n",
        "target_code_len": 131,
        "diff_format": "@@ -56,6 +56,6 @@\n \n-    y_dims = (\n+    y_dims: tuple[str, ...] = (\n         'Number_of_Scans',\n     )\n-    x_dims = (\n+    x_dims: tuple[str, ...] = (\n         'Number_of_hi_rez_FOVs',\n",
        "source_code_with_indent": "\n    y_dims = (\n        'Number_of_Scans',\n    )\n    x_dims = (\n        'Number_of_hi_rez_FOVs',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    y_dims: tuple[str, ...] = (\n        'Number_of_Scans',\n    )\n    x_dims: tuple[str, ...] = (\n        'Number_of_hi_rez_FOVs',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytroll/satpy",
    "commit": "88eeb973954a71c1a6e4bfa64dcb522ba3ffab26",
    "filename": "satpy/readers/amsr2_l2_gaasp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytroll-satpy/satpy/readers/amsr2_l2_gaasp.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "satpy/readers/amsr2_l2_gaasp.py:288:4 Inconsistent override [15]: `x_dims` overrides attribute defined in `GAASPFileHandler` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str]`.",
    "message": " `x_dims` overrides attribute defined in `GAASPFileHandler` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 288,
    "warning_line": "    x_dims = (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    y_dims = (\n        'Number_of_Scans',\n    )\n    x_dims = (\n        'Number_of_hi_rez_FOVs',\n",
        "source_code_len": 97,
        "target_code": "\n    y_dims: tuple[str, ...] = (\n        'Number_of_Scans',\n    )\n    x_dims: tuple[str, ...] = (\n        'Number_of_hi_rez_FOVs',\n",
        "target_code_len": 131,
        "diff_format": "@@ -56,6 +56,6 @@\n \n-    y_dims = (\n+    y_dims: tuple[str, ...] = (\n         'Number_of_Scans',\n     )\n-    x_dims = (\n+    x_dims: tuple[str, ...] = (\n         'Number_of_hi_rez_FOVs',\n",
        "source_code_with_indent": "\n    y_dims = (\n        'Number_of_Scans',\n    )\n    x_dims = (\n        'Number_of_hi_rez_FOVs',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    y_dims: tuple[str, ...] = (\n        'Number_of_Scans',\n    )\n    x_dims: tuple[str, ...] = (\n        'Number_of_hi_rez_FOVs',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytroll/satpy",
    "commit": "88eeb973954a71c1a6e4bfa64dcb522ba3ffab26",
    "filename": "satpy/readers/clavrx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytroll-satpy/satpy/readers/clavrx.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "satpy/readers/clavrx.py:90:12 Incompatible return type [7]: Expected `str` but got `int`.",
    "message": " Expected `str` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 90,
    "warning_line": "            return v",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -23,2 +23,3 @@\n from pathlib import Path\n+from typing import Optional\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_rows_per_scan(sensor: str) -> str:\n    \"\"\"Get number of rows per scan.\"\"\"\n",
        "source_code_len": 84,
        "target_code": "\ndef _get_rows_per_scan(sensor: str) -> Optional[int]:\n    \"\"\"Get number of rows per scan.\"\"\"\n",
        "target_code_len": 94,
        "diff_format": "@@ -85,3 +86,3 @@\n \n-def _get_rows_per_scan(sensor: str) -> str:\n+def _get_rows_per_scan(sensor: str) -> Optional[int]:\n     \"\"\"Get number of rows per scan.\"\"\"\n",
        "source_code_with_indent": "\n<DED>def _get_rows_per_scan(sensor: str) -> str:\n    <IND>\"\"\"Get number of rows per scan.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _get_rows_per_scan(sensor: str) -> Optional[int]:\n    <IND>\"\"\"Get number of rows per scan.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytroll/satpy",
    "commit": "88eeb973954a71c1a6e4bfa64dcb522ba3ffab26",
    "filename": "satpy/readers/clavrx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytroll-satpy/satpy/readers/clavrx.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "satpy/readers/clavrx.py:91:4 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 91,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -23,2 +23,3 @@\n from pathlib import Path\n+from typing import Optional\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_rows_per_scan(sensor: str) -> str:\n    \"\"\"Get number of rows per scan.\"\"\"\n",
        "source_code_len": 84,
        "target_code": "\ndef _get_rows_per_scan(sensor: str) -> Optional[int]:\n    \"\"\"Get number of rows per scan.\"\"\"\n",
        "target_code_len": 94,
        "diff_format": "@@ -85,3 +86,3 @@\n \n-def _get_rows_per_scan(sensor: str) -> str:\n+def _get_rows_per_scan(sensor: str) -> Optional[int]:\n     \"\"\"Get number of rows per scan.\"\"\"\n",
        "source_code_with_indent": "\n<DED>def _get_rows_per_scan(sensor: str) -> str:\n    <IND>\"\"\"Get number of rows per scan.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _get_rows_per_scan(sensor: str) -> Optional[int]:\n    <IND>\"\"\"Get number of rows per scan.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytroll/satpy",
    "commit": "88eeb973954a71c1a6e4bfa64dcb522ba3ffab26",
    "filename": "satpy/readers/clavrx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytroll-satpy/satpy/readers/clavrx.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "satpy/readers/clavrx.py:183:8 Incompatible variable type [9]: filename is declared to have type `str` but is used as type `Path`.",
    "message": " filename is declared to have type `str` but is used as type `Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 183,
    "warning_line": "        filename = Path(filename)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _find_input_nc(filename: str, l1b_base: str) -> str:\n        filename = Path(filename)\n        dirname = filename.parent\n        l1b_filenames = dirname.joinpath(l1b_base + '.nc')\n        if l1b_filenames.exists():\n            return l1b_filenames\n\n",
        "source_code_len": 257,
        "target_code": "    def _find_input_nc(filename: str, l1b_base: str) -> str:\n        file_path = Path(filename)\n        dirname = file_path.parent\n        l1b_filename = dirname.joinpath(l1b_base + '.nc')\n        if l1b_filename.exists():\n            return str(l1b_filename)\n\n",
        "target_code_len": 261,
        "diff_format": "@@ -182,7 +184,7 @@\n     def _find_input_nc(filename: str, l1b_base: str) -> str:\n-        filename = Path(filename)\n-        dirname = filename.parent\n-        l1b_filenames = dirname.joinpath(l1b_base + '.nc')\n-        if l1b_filenames.exists():\n-            return l1b_filenames\n+        file_path = Path(filename)\n+        dirname = file_path.parent\n+        l1b_filename = dirname.joinpath(l1b_base + '.nc')\n+        if l1b_filename.exists():\n+            return str(l1b_filename)\n \n",
        "source_code_with_indent": "    def _find_input_nc(filename: str, l1b_base: str) -> str:\n        <IND>filename = Path(filename)\n        dirname = filename.parent\n        l1b_filenames = dirname.joinpath(l1b_base + '.nc')\n        if l1b_filenames.exists():\n            <IND>return l1b_filenames\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _find_input_nc(filename: str, l1b_base: str) -> str:\n        <IND>file_path = Path(filename)\n        dirname = file_path.parent\n        l1b_filename = dirname.joinpath(l1b_base + '.nc')\n        if l1b_filename.exists():\n            <IND>return str(l1b_filename)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytroll/satpy",
    "commit": "88eeb973954a71c1a6e4bfa64dcb522ba3ffab26",
    "filename": "satpy/tests/reader_tests/_modis_fixtures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytroll-satpy/satpy/tests/reader_tests/_modis_fixtures.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "satpy/tests/reader_tests/_modis_fixtures.py:30:55 Unsupported operand [58]: `+` is not supported for operand types `typing.List[int]` and `typing.List[str]`.",
    "message": " `+` is not supported for operand types `typing.List[int]` and `typing.List[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 30,
    "warning_line": "AVAILABLE_1KM_VIS_PRODUCT_NAMES = list(range(8, 13)) + ['13lo', '13hi', '14lo', '14hi'] + list(range(15, 20))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nAVAILABLE_1KM_VIS_PRODUCT_NAMES = list(range(8, 13)) + ['13lo', '13hi', '14lo', '14hi'] + list(range(15, 20))\nAVAILABLE_1KM_VIS_PRODUCT_NAMES = [str(x) for x in AVAILABLE_1KM_VIS_PRODUCT_NAMES]\nAVAILABLE_1KM_IR_PRODUCT_NAMES = [str(x) for x in range(20, 37)]\nAVAILABLE_1KM_PRODUCT_NAMES = AVAILABLE_1KM_VIS_PRODUCT_NAMES + AVAILABLE_1KM_IR_PRODUCT_NAMES\nAVAILABLE_HKM_PRODUCT_NAMES = [str(x) for x in list(range(3, 8))]\nAVAILABLE_QKM_PRODUCT_NAMES = ['1', '2']\n",
        "source_code_len": 462,
        "target_code": "\nAVAILABLE_1KM_VIS_PRODUCT_NAMES = [str(x) for x in range(8, 13)]\nAVAILABLE_1KM_VIS_PRODUCT_NAMES += ['13lo', '13hi', '14lo', '14hi']\nAVAILABLE_1KM_VIS_PRODUCT_NAMES += [str(x) for x in range(15, 20)]\nAVAILABLE_1KM_IR_PRODUCT_NAMES = [str(x) for x in range(20, 37)]\nAVAILABLE_1KM_PRODUCT_NAMES = AVAILABLE_1KM_VIS_PRODUCT_NAMES + AVAILABLE_1KM_IR_PRODUCT_NAMES\nAVAILABLE_HKM_PRODUCT_NAMES = [str(x) for x in range(3, 8)]\nAVAILABLE_QKM_PRODUCT_NAMES = ['1', '2']\n",
        "target_code_len": 462,
        "diff_format": "@@ -29,7 +29,8 @@\n \n-AVAILABLE_1KM_VIS_PRODUCT_NAMES = list(range(8, 13)) + ['13lo', '13hi', '14lo', '14hi'] + list(range(15, 20))\n-AVAILABLE_1KM_VIS_PRODUCT_NAMES = [str(x) for x in AVAILABLE_1KM_VIS_PRODUCT_NAMES]\n+AVAILABLE_1KM_VIS_PRODUCT_NAMES = [str(x) for x in range(8, 13)]\n+AVAILABLE_1KM_VIS_PRODUCT_NAMES += ['13lo', '13hi', '14lo', '14hi']\n+AVAILABLE_1KM_VIS_PRODUCT_NAMES += [str(x) for x in range(15, 20)]\n AVAILABLE_1KM_IR_PRODUCT_NAMES = [str(x) for x in range(20, 37)]\n AVAILABLE_1KM_PRODUCT_NAMES = AVAILABLE_1KM_VIS_PRODUCT_NAMES + AVAILABLE_1KM_IR_PRODUCT_NAMES\n-AVAILABLE_HKM_PRODUCT_NAMES = [str(x) for x in list(range(3, 8))]\n+AVAILABLE_HKM_PRODUCT_NAMES = [str(x) for x in range(3, 8)]\n AVAILABLE_QKM_PRODUCT_NAMES = ['1', '2']\n",
        "source_code_with_indent": "\nAVAILABLE_1KM_VIS_PRODUCT_NAMES = list(range(8, 13)) + ['13lo', '13hi', '14lo', '14hi'] + list(range(15, 20))\nAVAILABLE_1KM_VIS_PRODUCT_NAMES = [str(x) for x in AVAILABLE_1KM_VIS_PRODUCT_NAMES]\nAVAILABLE_1KM_IR_PRODUCT_NAMES = [str(x) for x in range(20, 37)]\nAVAILABLE_1KM_PRODUCT_NAMES = AVAILABLE_1KM_VIS_PRODUCT_NAMES + AVAILABLE_1KM_IR_PRODUCT_NAMES\nAVAILABLE_HKM_PRODUCT_NAMES = [str(x) for x in list(range(3, 8))]\nAVAILABLE_QKM_PRODUCT_NAMES = ['1', '2']\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nAVAILABLE_1KM_VIS_PRODUCT_NAMES = [str(x) for x in range(8, 13)]\nAVAILABLE_1KM_VIS_PRODUCT_NAMES += ['13lo', '13hi', '14lo', '14hi']\nAVAILABLE_1KM_VIS_PRODUCT_NAMES += [str(x) for x in range(15, 20)]\nAVAILABLE_1KM_IR_PRODUCT_NAMES = [str(x) for x in range(20, 37)]\nAVAILABLE_1KM_PRODUCT_NAMES = AVAILABLE_1KM_VIS_PRODUCT_NAMES + AVAILABLE_1KM_IR_PRODUCT_NAMES\nAVAILABLE_HKM_PRODUCT_NAMES = [str(x) for x in range(3, 8)]\nAVAILABLE_QKM_PRODUCT_NAMES = ['1', '2']\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]