[
  {
    "project": "5j9/wikitextparser",
    "commit": "47b161457bbc093be3ce97afe61634d02365f46a",
    "filename": "wikitextparser/tag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/5j9-wikitextparser/wikitextparser/tag.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "wikitextparser/tag.py:128:4 Incompatible attribute type [8]: Attribute `_attrs_match` declared in class `SubWikiTextWithAttrs` has type `Match[typing.Any]` but is used as type `None`.",
    "message": " Attribute `_attrs_match` declared in class `SubWikiTextWithAttrs` has type `Match[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 128,
    "warning_line": "    _attrs_match = None  # type: Match",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Dict, Optional, Match, Union, Tuple, List\nfrom warnings import warn\n",
        "source_code_len": 88,
        "target_code": "\nfrom typing import (\n    Dict, Optional, Union, Tuple, List, MutableSequence, Any\n)\nfrom warnings import warn\n",
        "target_code_len": 111,
        "diff_format": "@@ -11,3 +11,5 @@\n \n-from typing import Dict, Optional, Match, Union, Tuple, List\n+from typing import (\n+    Dict, Optional, Union, Tuple, List, MutableSequence, Any\n+)\n from warnings import warn\n",
        "source_code_with_indent": "\nfrom typing import Dict, Optional, Match, Union, Tuple, List\nfrom warnings import warn\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import (\n    Dict, Optional, Union, Tuple, List, MutableSequence, Any\n)\nfrom warnings import warn\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    _attrs_match = None  # type: Match\n\n",
        "source_code_len": 41,
        "target_code": "\n    _attrs_match = None  # type: Any\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -127,3 +129,3 @@\n \n-    _attrs_match = None  # type: Match\n+    _attrs_match = None  # type: Any\n \n",
        "source_code_with_indent": "\n    _attrs_match = None  # type: Match\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    _attrs_match = None  # type: Any\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def _match(self) -> Match:\n        \"\"\"Return the match object for the current tag. Cache the result.\"\"\"\n",
        "source_code_len": 122,
        "target_code": "    @property\n    def _match(self) -> Any:\n        \"\"\"Return the match object for the current tag. Cache the result.\"\"\"\n",
        "target_code_len": 120,
        "diff_format": "@@ -242,3 +245,3 @@\n     @property\n-    def _match(self) -> Match:\n+    def _match(self) -> Any:\n         \"\"\"Return the match object for the current tag. Cache the result.\"\"\"\n",
        "source_code_with_indent": "    <DED>@property\n    def _match(self) -> Match:\n        <IND>\"\"\"Return the match object for the current tag. Cache the result.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def _match(self) -> Any:\n        <IND>\"\"\"Return the match object for the current tag. Cache the result.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "5j9/wikitextparser",
    "commit": "47b161457bbc093be3ce97afe61634d02365f46a",
    "filename": "wikitextparser/tag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/5j9-wikitextparser/wikitextparser/tag.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "wikitextparser/tag.py:317:8 Incompatible return type [7]: Expected `Dict[str, str]` but got implicit return value of `None`.",
    "message": " Expected `Dict[str, str]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 317,
    "warning_line": "        return dict(zip(captures('attr_name'), captures('attr_value')))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef attrs_parser(attrs: str, pos=0, endpos=-1) -> Dict[str, str]:\n    \"\"\"Return a dict of attribute names and values.\"\"\"\n",
        "source_code_len": 122,
        "target_code": "\ndef attrs_parser(attrs: str, pos=0, endpos=-1) -> Optional[Dict[str, str]]:\n    \"\"\"Return a dict of attribute names and values.\"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -311,3 +314,3 @@\n \n-def attrs_parser(attrs: str, pos=0, endpos=-1) -> Dict[str, str]:\n+def attrs_parser(attrs: str, pos=0, endpos=-1) -> Optional[Dict[str, str]]:\n     \"\"\"Return a dict of attribute names and values.\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED>def attrs_parser(attrs: str, pos=0, endpos=-1) -> Dict[str, str]:\n    <IND>\"\"\"Return a dict of attribute names and values.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def attrs_parser(attrs: str, pos=0, endpos=-1) -> Optional[Dict[str, str]]:\n    <IND>\"\"\"Return a dict of attribute names and values.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "5j9/wikitextparser",
    "commit": "47b161457bbc093be3ce97afe61634d02365f46a",
    "filename": "wikitextparser/template.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/5j9-wikitextparser/wikitextparser/template.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "wikitextparser/template.py:227:28 Incompatible parameter type [6]: Expected `Iterator[Argument]` for 2nd positional only parameter to call `get_arg` but got `List[Argument]`.",
    "message": " Expected `Iterator[Argument]` for 2nd positional only parameter to call `get_arg` but got `List[Argument]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 227,
    "warning_line": "        arg = get_arg(name, args)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import regex\nfrom typing import List, Optional, TypeVar, Iterator\n\n",
        "source_code_len": 67,
        "target_code": "import regex\nfrom typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -4,3 +4,3 @@\n import regex\n-from typing import List, Optional, TypeVar, Iterator\n+from typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n \n",
        "source_code_with_indent": "import regex\nfrom typing import List, Optional, TypeVar, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import regex\nfrom typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        names = []\n        for a in reversed(self.arguments):\n",
        "source_code_len": 74,
        "target_code": "        \"\"\"\n        names = set()  # type: set\n        for a in reversed(self.arguments):\n",
        "target_code_len": 90,
        "diff_format": "@@ -139,3 +139,3 @@\n         \"\"\"\n-        names = []\n+        names = set()  # type: set\n         for a in reversed(self.arguments):\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        names = []\n        for a in reversed(self.arguments):\n",
        "target_code_with_indent": "\n        names = set()  # type: set\n        for a in reversed(self.arguments):\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            else:\n                names.append(name)\n\n",
        "source_code_len": 54,
        "target_code": "            else:\n                names.add(name)\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -145,3 +145,3 @@\n             else:\n-                names.append(name)\n+                names.add(name)\n \n",
        "source_code_with_indent": "            <DED>else:\n                <IND>names.append(name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>names.add(name)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n    \"\"\"Return the first argument in the args that has the given name.\n",
        "source_code_len": 143,
        "target_code": "\ndef get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n    \"\"\"Return the first argument in the args that has the given name.\n",
        "target_code_len": 143,
        "diff_format": "@@ -350,3 +351,3 @@\n \n-def get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n+def get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n     \"\"\"Return the first argument in the args that has the given name.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n    <IND>"
      }
    ]
  },
  {
    "project": "5j9/wikitextparser",
    "commit": "47b161457bbc093be3ce97afe61634d02365f46a",
    "filename": "wikitextparser/template.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/5j9-wikitextparser/wikitextparser/template.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "wikitextparser/template.py:276:34 Incompatible parameter type [6]: Expected `Iterator[Argument]` for 2nd positional only parameter to call `get_arg` but got `List[Argument]`.",
    "message": " Expected `Iterator[Argument]` for 2nd positional only parameter to call `get_arg` but got `List[Argument]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 276,
    "warning_line": "            arg = get_arg(before, args)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import regex\nfrom typing import List, Optional, TypeVar, Iterator\n\n",
        "source_code_len": 67,
        "target_code": "import regex\nfrom typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -4,3 +4,3 @@\n import regex\n-from typing import List, Optional, TypeVar, Iterator\n+from typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n \n",
        "source_code_with_indent": "import regex\nfrom typing import List, Optional, TypeVar, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import regex\nfrom typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        names = []\n        for a in reversed(self.arguments):\n",
        "source_code_len": 74,
        "target_code": "        \"\"\"\n        names = set()  # type: set\n        for a in reversed(self.arguments):\n",
        "target_code_len": 90,
        "diff_format": "@@ -139,3 +139,3 @@\n         \"\"\"\n-        names = []\n+        names = set()  # type: set\n         for a in reversed(self.arguments):\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        names = []\n        for a in reversed(self.arguments):\n",
        "target_code_with_indent": "\n        names = set()  # type: set\n        for a in reversed(self.arguments):\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            else:\n                names.append(name)\n\n",
        "source_code_len": 54,
        "target_code": "            else:\n                names.add(name)\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -145,3 +145,3 @@\n             else:\n-                names.append(name)\n+                names.add(name)\n \n",
        "source_code_with_indent": "            <DED>else:\n                <IND>names.append(name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>names.add(name)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n    \"\"\"Return the first argument in the args that has the given name.\n",
        "source_code_len": 143,
        "target_code": "\ndef get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n    \"\"\"Return the first argument in the args that has the given name.\n",
        "target_code_len": 143,
        "diff_format": "@@ -350,3 +351,3 @@\n \n-def get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n+def get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n     \"\"\"Return the first argument in the args that has the given name.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n    <IND>"
      }
    ]
  },
  {
    "project": "5j9/wikitextparser",
    "commit": "47b161457bbc093be3ce97afe61634d02365f46a",
    "filename": "wikitextparser/template.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/5j9-wikitextparser/wikitextparser/template.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "wikitextparser/template.py:279:33 Incompatible parameter type [6]: Expected `Iterator[Argument]` for 2nd positional only parameter to call `get_arg` but got `List[Argument]`.",
    "message": " Expected `Iterator[Argument]` for 2nd positional only parameter to call `get_arg` but got `List[Argument]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 279,
    "warning_line": "            arg = get_arg(after, args)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import regex\nfrom typing import List, Optional, TypeVar, Iterator\n\n",
        "source_code_len": 67,
        "target_code": "import regex\nfrom typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -4,3 +4,3 @@\n import regex\n-from typing import List, Optional, TypeVar, Iterator\n+from typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n \n",
        "source_code_with_indent": "import regex\nfrom typing import List, Optional, TypeVar, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import regex\nfrom typing import List, Optional, TypeVar, Iterable, Dict, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        names = []\n        for a in reversed(self.arguments):\n",
        "source_code_len": 74,
        "target_code": "        \"\"\"\n        names = set()  # type: set\n        for a in reversed(self.arguments):\n",
        "target_code_len": 90,
        "diff_format": "@@ -139,3 +139,3 @@\n         \"\"\"\n-        names = []\n+        names = set()  # type: set\n         for a in reversed(self.arguments):\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        names = []\n        for a in reversed(self.arguments):\n",
        "target_code_with_indent": "\n        names = set()  # type: set\n        for a in reversed(self.arguments):\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            else:\n                names.append(name)\n\n",
        "source_code_len": 54,
        "target_code": "            else:\n                names.add(name)\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -145,3 +145,3 @@\n             else:\n-                names.append(name)\n+                names.add(name)\n \n",
        "source_code_with_indent": "            <DED>else:\n                <IND>names.append(name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>names.add(name)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n    \"\"\"Return the first argument in the args that has the given name.\n",
        "source_code_len": 143,
        "target_code": "\ndef get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n    \"\"\"Return the first argument in the args that has the given name.\n",
        "target_code_len": 143,
        "diff_format": "@@ -350,3 +351,3 @@\n \n-def get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n+def get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n     \"\"\"Return the first argument in the args that has the given name.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_arg(name: str, args: Iterator[Argument]) -> Optional[Argument]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]:\n    <IND>"
      }
    ]
  },
  {
    "project": "5j9/wikitextparser",
    "commit": "47b161457bbc093be3ce97afe61634d02365f46a",
    "filename": "wikitextparser/wikilink.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/5j9-wikitextparser/wikitextparser/wikilink.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "wikitextparser/wikilink.py:35:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 35,
    "warning_line": "            return tail[:-2]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def text(self) -> str:\n        \"\"\"Return display text of this WikiLink.\"\"\"\n",
        "source_code_len": 93,
        "target_code": "    @property\n    def text(self) -> Optional[str]:\n        \"\"\"Return display text of this WikiLink.\"\"\"\n",
        "target_code_len": 103,
        "diff_format": "@@ -30,3 +30,3 @@\n     @property\n-    def text(self) -> str:\n+    def text(self) -> Optional[str]:\n         \"\"\"Return display text of this WikiLink.\"\"\"\n",
        "source_code_with_indent": "    <DED>@property\n    def text(self) -> str:\n        <IND>\"\"\"Return display text of this WikiLink.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def text(self) -> Optional[str]:\n        <IND>\"\"\"Return display text of this WikiLink.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]