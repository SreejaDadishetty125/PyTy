[
  {
    "project": "mseg-dataset/mseg-semantic",
    "commit": "2100cdb2ebd4d02644105975f597b03b56f5880a",
    "filename": "mseg_semantic/tool/batched_inference_task.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mseg-dataset-mseg-semantic/mseg_semantic/tool/batched_inference_task.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mseg_semantic/tool/batched_inference_task.py:124:50 Unbound name [10]: Name `args` is used but not defined in the current scope.",
    "message": " Name `args` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 124,
    "warning_line": "\t\tlogits = self.scale_process_cuda_batched(batch, args.native_img_h,args.native_img_w)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\t\t# single-scale, do addition and argmax on CPU, interp back to native resolution\n\t\tlogits = self.scale_process_cuda_batched(batch, args.native_img_h,args.native_img_w)\n\t\tpredictions = torch.argmax(logits, axis=1)\n",
        "source_code_len": 214,
        "target_code": "\t\t# single-scale, do addition and argmax on CPU, interp back to native resolution\n\t\tlogits = self.scale_process_cuda_batched(batch, self.args.native_img_h, self.args.native_img_w)\n\t\tpredictions = torch.argmax(logits, axis=1)\n",
        "target_code_len": 225,
        "diff_format": "@@ -123,3 +123,3 @@\n \t\t# single-scale, do addition and argmax on CPU, interp back to native resolution\n-\t\tlogits = self.scale_process_cuda_batched(batch, args.native_img_h,args.native_img_w)\n+\t\tlogits = self.scale_process_cuda_batched(batch, self.args.native_img_h, self.args.native_img_w)\n \t\tpredictions = torch.argmax(logits, axis=1)\n",
        "source_code_with_indent": "  # single-scale, do addition and argmax on CPU, interp back to native resolution\n  logits = self.scale_process_cuda_batched(batch, args.native_img_h,args.native_img_w)\n  predictions = torch.argmax(logits, axis=1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  # single-scale, do addition and argmax on CPU, interp back to native resolution\n  logits = self.scale_process_cuda_batched(batch, self.args.native_img_h, self.args.native_img_w)\n  predictions = torch.argmax(logits, axis=1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]