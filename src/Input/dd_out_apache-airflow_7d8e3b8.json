[
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/baseoperator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/baseoperator.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/baseoperator.py:1328:40 Incompatible parameter type [6]: Expected `str` for 2nd parameter `run_id` to call `TaskInstance.__init__` but got `None`.",
    "message": " Expected `str` for 2nd parameter `run_id` to call `TaskInstance.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1328,
    "warning_line": "                ti = TaskInstance(self, run_id=None)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                )\n                ti = TaskInstance(self, run_id=None)\n                ti.dag_run = dr\n",
        "source_code_len": 103,
        "target_code": "                )\n                ti = TaskInstance(self, run_id=dr.run_id)\n                ti.dag_run = dr\n",
        "target_code_len": 108,
        "diff_format": "@@ -1327,3 +1337,3 @@\n                 )\n-                ti = TaskInstance(self, run_id=None)\n+                ti = TaskInstance(self, run_id=dr.run_id)\n                 ti.dag_run = dr\n",
        "source_code_with_indent": "                )\n                ti = TaskInstance(self, run_id=None)\n                ti.dag_run = dr\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                )\n                ti = TaskInstance(self, run_id=dr.run_id)\n                ti.dag_run = dr\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:359:8 Incompatible attribute type [8]: Attribute `params` declared in class `DAG` has type `ParamsDict` but is used as type `Union[Dict[typing.Any, typing.Any], Dict[Variable[_KT], Variable[_VT]]]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:672:12 Incompatible return type [7]: Expected `DataInterval` but got `DagRunInfo`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1344:16 Incompatible parameter type [6]: Expected `typing.Literal[]` for 10th parameter `as_pk_tuple` to call `DAG._get_task_instances` but got `bool`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1367:8 Incompatible variable type [9]: dag_bag is declared to have type `DagBag` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1369:8 Incompatible variable type [9]: max_recursion_depth is declared to have type `int` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1370:8 Incompatible variable type [9]: visited_external_tis is declared to have type `Set[Tuple[str, str, datetime]]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1386:21 Invalid type [31]: Expression `airflow.typing_compat.Literal[False]` is not a valid type.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1389:8 Incompatible variable type [9]: dag_bag is declared to have type `DagBag` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1391:8 Incompatible variable type [9]: max_recursion_depth is declared to have type `int` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1392:8 Incompatible variable type [9]: visited_external_tis is declared to have type `Set[Tuple[str, str, datetime]]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1410:8 Incompatible variable type [9]: dag_bag is declared to have type `DagBag` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1412:8 Incompatible variable type [9]: max_recursion_depth is declared to have type `int` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1413:8 Incompatible variable type [9]: visited_external_tis is declared to have type `Set[Tuple[str, str, datetime]]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1753:8 Incompatible variable type [9]: dag_ids is declared to have type `List[str]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:1859:12 Incompatible parameter type [6]: Expected `typing.Literal[]` for 9th parameter `as_pk_tuple` to call `DAG._get_task_instances` but got `bool`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:2473:43 Incompatible parameter type [6]: Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Optional[List[str]]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:2478:35 Incompatible parameter type [6]: Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Optional[List[str]]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:2628:12 Incompatible return type [7]: Expected `EdgeInfoType` but got `Union[Dict[Variable[_KT], Variable[_VT]], EdgeInfoType]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/dag.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/models/dag.py:2630:12 Incompatible return type [7]: Expected `EdgeInfoType` but got `Dict[Variable[_KT], Variable[_VT]]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/taskinstance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/taskinstance.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/taskinstance.py:127:8 Incompatible return type [7]: Expected `None` but got `typing.Generator[Context, None, None]`.",
    "message": " Expected `None` but got `typing.Generator[Context, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 127,
    "warning_line": "        yield context"
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/taskinstance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/taskinstance.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/taskinstance.py:407:63 Incompatible variable type [9]: run_id is declared to have type `str` but is used as type `None`.",
    "message": " run_id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 407,
    "warning_line": "        self, task, execution_date: Optional[datetime] = None, run_id: str = None, state: Optional[str] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, task, execution_date: Optional[datetime] = None, run_id: str = None, state: Optional[str] = None\n    ):\n",
        "source_code_len": 136,
        "target_code": "    def __init__(\n        self,\n        task: \"BaseOperator\",\n        execution_date: Optional[datetime] = None,\n        run_id: Optional[str] = None,\n        state: Optional[str] = None,\n    ):\n",
        "target_code_len": 195,
        "diff_format": "@@ -406,3 +420,7 @@\n     def __init__(\n-        self, task, execution_date: Optional[datetime] = None, run_id: str = None, state: Optional[str] = None\n+        self,\n+        task: \"BaseOperator\",\n+        execution_date: Optional[datetime] = None,\n+        run_id: Optional[str] = None,\n+        state: Optional[str] = None,\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, task, execution_date: Optional[datetime] = None, run_id: str = None, state: Optional[str] = None\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        task: \"BaseOperator\",\n        execution_date: Optional[datetime] = None,\n        run_id: Optional[str] = None,\n        state: Optional[str] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/taskinstance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/taskinstance.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/taskinstance.py:565:8 Incompatible variable type [9]: run_id is declared to have type `str` but is used as type `None`.",
    "message": " run_id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 565,
    "warning_line": "        run_id: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        task_id: str,\n        run_id: str = None,\n        mark_success: bool = False,\n",
        "source_code_len": 86,
        "target_code": "        task_id: str,\n        run_id: str,\n        mark_success: bool = False,\n",
        "target_code_len": 79,
        "diff_format": "@@ -564,3 +582,3 @@\n         task_id: str,\n-        run_id: str = None,\n+        run_id: str,\n         mark_success: bool = False,\n",
        "source_code_with_indent": "        task_id: str,\n        run_id: str = None,\n        mark_success: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        task_id: str,\n        run_id: str,\n        mark_success: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/taskinstance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/taskinstance.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/taskinstance.py:1801:8 Incompatible attribute type [8]: Attribute `params` declared in class `BaseOperator` has type `ParamsDict` but is used as type `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Attribute `params` declared in class `BaseOperator` has type `ParamsDict` but is used as type `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 1801,
    "warning_line": "        task.params = params.validate()"
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/taskinstance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/taskinstance.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/taskinstance.py:2009:12 Incompatible parameter type [6]: Expected `int` for 9th parameter `scheduler_job_id` to call `PodGenerator.construct_pod` but got `str`.",
    "message": " Expected `int` for 9th parameter `scheduler_job_id` to call `PodGenerator.construct_pod` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 2009,
    "warning_line": "            scheduler_job_id=\"worker-config\",",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            pod_override_object=PodGenerator.from_obj(self.executor_config),\n            scheduler_job_id=\"worker-config\",\n            namespace=kube_config.executor_namespace,\n",
        "source_code_len": 177,
        "target_code": "            pod_override_object=PodGenerator.from_obj(self.executor_config),\n            scheduler_job_id=0,\n            namespace=kube_config.executor_namespace,\n",
        "target_code_len": 163,
        "diff_format": "@@ -2008,3 +2030,3 @@\n             pod_override_object=PodGenerator.from_obj(self.executor_config),\n-            scheduler_job_id=\"worker-config\",\n+            scheduler_job_id=0,\n             namespace=kube_config.executor_namespace,\n",
        "source_code_with_indent": "            pod_override_object=PodGenerator.from_obj(self.executor_config),\n            scheduler_job_id=\"worker-config\",\n            namespace=kube_config.executor_namespace,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            pod_override_object=PodGenerator.from_obj(self.executor_config),\n            scheduler_job_id=0,\n            namespace=kube_config.executor_namespace,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/taskinstance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/taskinstance.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/taskinstance.py:2320:8 Incompatible return type [7]: Expected `str` but got `datetime`.",
    "message": " Expected `str` but got `datetime`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 2320,
    "warning_line": "        return self._run_id",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._task_id: str = ti.task_id\n        self._run_id: datetime = ti.run_id\n        self._start_date: datetime = ti.start_date\n",
        "source_code_len": 134,
        "target_code": "        self._task_id: str = ti.task_id\n        self._run_id: str = ti.run_id\n        self._start_date: datetime = ti.start_date\n",
        "target_code_len": 129,
        "diff_format": "@@ -2293,3 +2315,3 @@\n         self._task_id: str = ti.task_id\n-        self._run_id: datetime = ti.run_id\n+        self._run_id: str = ti.run_id\n         self._start_date: datetime = ti.start_date\n",
        "source_code_with_indent": "        self._task_id: str = ti.task_id\n        self._run_id: datetime = ti.run_id\n        self._start_date: datetime = ti.start_date\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._task_id: str = ti.task_id\n        self._run_id: str = ti.run_id\n        self._start_date: datetime = ti.start_date\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/models/variable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/models/variable.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/models/variable.py:156:8 Incompatible variable type [9]: description is declared to have type `str` but is used as type `None`.",
    "message": " description is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 156,
    "warning_line": "        description: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        value: Any,\n        description: str = None,\n        serialize_json: bool = False,\n",
        "source_code_len": 91,
        "target_code": "        value: Any,\n        description: Optional[str] = None,\n        serialize_json: bool = False,\n",
        "target_code_len": 101,
        "diff_format": "@@ -155,3 +155,3 @@\n         value: Any,\n-        description: str = None,\n+        description: Optional[str] = None,\n         serialize_json: bool = False,\n",
        "source_code_with_indent": "        value: Any,\n        description: str = None,\n        serialize_json: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        value: Any,\n        description: Optional[str] = None,\n        serialize_json: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/timetables/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/timetables/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/timetables/base.py:38:8 Incompatible return type [7]: Expected `DagRunInfo` but got `DataInterval`.",
    "message": " Expected `DagRunInfo` but got `DataInterval`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 38,
    "warning_line": "        return cls(start=at, end=at)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DagRunInfo\":\n        \"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DataInterval\":\n        \"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "target_code_len": 138,
        "diff_format": "@@ -35,3 +35,3 @@\n     @classmethod\n-    def exact(cls, at: DateTime) -> \"DagRunInfo\":\n+    def exact(cls, at: DateTime) -> \"DataInterval\":\n         \"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "source_code_with_indent": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DagRunInfo\":\n        <IND>\"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DataInterval\":\n        <IND>\"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/timetables/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/timetables/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/timetables/base.py:81:33 Incompatible parameter type [6]: Expected `DataInterval` for 2nd parameter `data_interval` to call `DagRunInfo.__init__` but got `DagRunInfo`.",
    "message": " Expected `DataInterval` for 2nd parameter `data_interval` to call `DagRunInfo.__init__` but got `DagRunInfo`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 81,
    "warning_line": "        return cls(run_after=at, data_interval=DataInterval.exact(at))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DagRunInfo\":\n        \"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DataInterval\":\n        \"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "target_code_len": 138,
        "diff_format": "@@ -35,3 +35,3 @@\n     @classmethod\n-    def exact(cls, at: DateTime) -> \"DagRunInfo\":\n+    def exact(cls, at: DateTime) -> \"DataInterval\":\n         \"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "source_code_with_indent": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DagRunInfo\":\n        <IND>\"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def exact(cls, at: DateTime) -> \"DataInterval\":\n        <IND>\"\"\"Represent an \"interval\" containing only an exact time.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "7d8e3b828af0ac90261c341f5cb0e57da75e6a83",
    "filename": "airflow/timetables/simple.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/timetables/simple.py:48:8 Incompatible return type [7]: Expected `DataInterval` but got `DagRunInfo`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]