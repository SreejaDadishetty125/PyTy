[
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/_config_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/_config_types.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/_config_types.py:23:22 Invalid type [31]: Expression `[pathlib.Path, str]` is not a valid type.",
    "message": " Expression `[pathlib.Path, str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 23,
    "warning_line": "        project_root: [Path, str] = \"./\",",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Dict, Optional\n\n",
        "source_code_len": 60,
        "target_code": "from pathlib import Path\nfrom typing import Dict, Optional, Union\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -2,3 +2,3 @@\n from pathlib import Path\n-from typing import Dict, Optional\n+from typing import Dict, Optional, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Dict, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Dict, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        regions: set = None,\n        project_root: [Path, str] = \"./\",\n        auth: dict = None,\n",
        "source_code_len": 98,
        "target_code": "        regions: set = None,\n        project_root: Union[Path, str] = \"./\",\n        auth: dict = None,\n",
        "target_code_len": 103,
        "diff_format": "@@ -22,3 +22,3 @@\n         regions: set = None,\n-        project_root: [Path, str] = \"./\",\n+        project_root: Union[Path, str] = \"./\",\n         auth: dict = None,\n",
        "source_code_with_indent": "        regions: set = None,\n        project_root: [Path, str] = \"./\",\n        auth: dict = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        regions: set = None,\n        project_root: Union[Path, str] = \"./\",\n        auth: dict = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/_config_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/_config_types.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/_config_types.py:40:29 Invalid type [31]: Expression `[taskcat.client_factory.ClientFactory, None]` is not a valid type.",
    "message": " Expression `[taskcat.client_factory.ClientFactory, None]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 40,
    "warning_line": "        self.client_factory: [ClientFactory, None] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        validate(self.parameters, \"overrides\")\n        self.regions = list(regions) if regions else []\n        self.auth: dict = auth\n        self.client_factory: [ClientFactory, None] = None\n        self.name: str = name\n",
        "source_code_len": 222,
        "target_code": "        validate(self.parameters, \"overrides\")\n        self.regions: set = set(regions) if regions else set()\n        self.auth: dict = auth\n        self.client_factory: ClientFactory = ClientFactory()\n        self.name: str = name\n",
        "target_code_len": 232,
        "diff_format": "@@ -37,5 +37,5 @@\n         validate(self.parameters, \"overrides\")\n-        self.regions = list(regions) if regions else []\n+        self.regions: set = set(regions) if regions else set()\n         self.auth: dict = auth\n-        self.client_factory: [ClientFactory, None] = None\n+        self.client_factory: ClientFactory = ClientFactory()\n         self.name: str = name\n",
        "source_code_with_indent": "        <DED>validate(self.parameters, \"overrides\")\n        self.regions = list(regions) if regions else []\n        self.auth: dict = auth\n        self.client_factory: [ClientFactory, None] = None\n        self.name: str = name\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>validate(self.parameters, \"overrides\")\n        self.regions: set = set(regions) if regions else set()\n        self.auth: dict = auth\n        self.client_factory: ClientFactory = ClientFactory()\n        self.name: str = name\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/cfn/stack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/cfn/stack.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/cfn/stack.py:284:35 Incompatible variable type [9]: stack_properties is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " stack_properties is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 284,
    "warning_line": "    def set_stack_properties(self, stack_properties: dict = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import List, Optional\nfrom uuid import UUID, uuid4\n",
        "source_code_len": 88,
        "target_code": "from pathlib import Path\nfrom typing import Any, Dict, List, Optional\nfrom uuid import UUID, uuid4\n",
        "target_code_len": 99,
        "diff_format": "@@ -7,3 +7,3 @@\n from pathlib import Path\n-from typing import List, Optional\n+from typing import Any, Dict, List, Optional\n from uuid import UUID, uuid4\n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional\nfrom uuid import UUID, uuid4\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Any, Dict, List, Optional\nfrom uuid import UUID, uuid4\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if properties:\n            self.set_stack_properties()\n        if events:\n",
        "source_code_len": 82,
        "target_code": "        if properties:\n            self.set_stack_properties({})\n        if events:\n",
        "target_code_len": 84,
        "diff_format": "@@ -275,3 +275,3 @@\n         if properties:\n-            self.set_stack_properties()\n+            self.set_stack_properties({})\n         if events:\n",
        "source_code_with_indent": "        <IND>if properties:\n            <IND>self.set_stack_properties()\n        <DED>if events:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if properties:\n            <IND>self.set_stack_properties({})\n        <DED>if events:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def set_stack_properties(self, stack_properties: dict = None) -> None:\n        if not stack_properties:\n",
        "source_code_len": 109,
        "target_code": "\n    def set_stack_properties(self, stack_properties: Dict[str, Any]) -> None:\n        if not stack_properties:\n",
        "target_code_len": 112,
        "diff_format": "@@ -283,3 +283,3 @@\n \n-    def set_stack_properties(self, stack_properties: dict = None) -> None:\n+    def set_stack_properties(self, stack_properties: Dict[str, Any]) -> None:\n         if not stack_properties:\n",
        "source_code_with_indent": "\n    <DED><DED>def set_stack_properties(self, stack_properties: dict = None) -> None:\n        <IND>if not stack_properties:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def set_stack_properties(self, stack_properties: Dict[str, Any]) -> None:\n        <IND>if not stack_properties:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/cfn/stack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/cfn/stack.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/cfn/stack.py:318:23 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 318,
    "warning_line": "        filter_status: [str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        filter_status: [str] = None,\n        refresh: bool = False,\n",
        "source_code_len": 82,
        "target_code": "        self,\n        filter_status: Optional[List[str]] = None,\n        refresh: bool = False,\n",
        "target_code_len": 96,
        "diff_format": "@@ -317,3 +317,3 @@\n         self,\n-        filter_status: [str] = None,\n+        filter_status: Optional[List[str]] = None,\n         refresh: bool = False,\n",
        "source_code_with_indent": "        self,\n        filter_status: [str] = None,\n        refresh: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        filter_status: Optional[List[str]] = None,\n        refresh: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/cfn/stack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/cfn/stack.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/cfn/stack.py:350:29 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 350,
    "warning_line": "        self, filter_status: [str] = None, refresh: bool = False",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def resources(\n        self, filter_status: [str] = None, refresh: bool = False\n    ) -> List[Resource]:\n",
        "source_code_len": 109,
        "target_code": "    def resources(\n        self, filter_status: Optional[str] = None, refresh: bool = False\n    ) -> List[Resource]:\n",
        "target_code_len": 117,
        "diff_format": "@@ -349,3 +349,3 @@\n     def resources(\n-        self, filter_status: [str] = None, refresh: bool = False\n+        self, filter_status: Optional[str] = None, refresh: bool = False\n     ) -> List[Resource]:\n",
        "source_code_with_indent": "    <DED>def resources(\n        self, filter_status: [str] = None, refresh: bool = False\n    ) -> List[Resource]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def resources(\n        self, filter_status: Optional[str] = None, refresh: bool = False\n    ) -> List[Resource]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/cfn/stack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/cfn/stack.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/cfn/stack.py:397:72 Invalid type [31]: Expression `[taskcat.cfn.stack.Stack]` is not a valid type.",
    "message": " Expression `[taskcat.cfn.stack.Stack]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 397,
    "warning_line": "        def recurse(stack: Stack, descendants: List[\"Stack\"] = None) -> [\"Stack\"]:"
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/cfn/stack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/cfn/stack.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/cfn/stack.py:409:9 Invalid type [31]: Expression `[taskcat.cfn.stack.Event]` is not a valid type.",
    "message": " Expression `[taskcat.cfn.stack.Event]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 409,
    "warning_line": "    ) -> [Event]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, recurse: bool = True, include_generic: bool = False, refresh=False\n    ) -> [Event]:\n        errors = []\n        stacks = [self]\n",
        "source_code_len": 143,
        "target_code": "        self, recurse: bool = True, include_generic: bool = False, refresh=False\n    ) -> List[Event]:\n        errors: list = []\n        stacks = [self]\n",
        "target_code_len": 153,
        "diff_format": "@@ -408,4 +408,4 @@\n         self, recurse: bool = True, include_generic: bool = False, refresh=False\n-    ) -> [Event]:\n-        errors = []\n+    ) -> List[Event]:\n+        errors: list = []\n         stacks = [self]\n",
        "source_code_with_indent": "        self, recurse: bool = True, include_generic: bool = False, refresh=False\n    ) -> [Event]:\n        <IND>errors = []\n        stacks = [self]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, recurse: bool = True, include_generic: bool = False, refresh=False\n    ) -> List[Event]:\n        <IND>errors: list = []\n        stacks = [self]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/cfn/template.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/cfn/template.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/cfn/template.py:27:8 Incompatible variable type [9]: project_root is declared to have type `str` but is used as type `typing.Union[Path, str]`.",
    "message": " project_root is declared to have type `str` but is used as type `typing.Union[Path, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "        project_root = (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import List, Optional, Set\n\n",
        "source_code_len": 65,
        "target_code": "from pathlib import Path\nfrom typing import List, Optional, Set, Union\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -4,3 +4,3 @@\n from pathlib import Path\n-from typing import List, Optional, Set\n+from typing import List, Optional, Set, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional, Set, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        template_path: str,\n        project_root: str = \"\",\n        url: str = \"\",\n",
        "source_code_len": 97,
        "target_code": "        self,\n        template_path: Union[str, Path],\n        project_root: Union[str, Path] = \"\",\n        url: str = \"\",\n",
        "target_code_len": 123,
        "diff_format": "@@ -17,4 +17,4 @@\n         self,\n-        template_path: str,\n-        project_root: str = \"\",\n+        template_path: Union[str, Path],\n+        project_root: Union[str, Path] = \"\",\n         url: str = \"\",\n",
        "source_code_with_indent": "        self,\n        template_path: str,\n        project_root: str = \"\",\n        url: str = \"\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        template_path: Union[str, Path],\n        project_root: Union[str, Path] = \"\",\n        url: str = \"\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/common_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/common_utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/common_utils.py:153:24 Invalid type [31]: Expression `[str, pathlib.Path]` is not a valid type.",
    "message": " Expression `[str, pathlib.Path]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 153,
    "warning_line": "def absolute_path(path: [str, Path]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nfrom typing import Optional, Union\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -6,2 +6,3 @@\n from pathlib import Path\n+from typing import Optional, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef absolute_path(path: [str, Path]):\n    if path is None:\n",
        "source_code_len": 60,
        "target_code": "\ndef absolute_path(path: Optional[Union[str, Path]]):\n    if path is None:\n",
        "target_code_len": 75,
        "diff_format": "@@ -152,3 +153,3 @@\n \n-def absolute_path(path: [str, Path]):\n+def absolute_path(path: Optional[Union[str, Path]]):\n     if path is None:\n",
        "source_code_with_indent": "\n<DED>def absolute_path(path: [str, Path]):\n    <IND>if path is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def absolute_path(path: Optional[Union[str, Path]]):\n    <IND>if path is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/config.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/config.py:40:8 Incompatible variable type [9]: args is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " args is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "        args: dict = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        args: dict = None,\n        global_config_path: str = \"~/.taskcat.yml\",\n",
        "source_code_len": 93,
        "target_code": "        self,\n        args: Optional[dict] = None,\n        global_config_path: str = \"~/.taskcat.yml\",\n",
        "target_code_len": 103,
        "diff_format": "@@ -39,3 +39,3 @@\n         self,\n-        args: dict = None,\n+        args: Optional[dict] = None,\n         global_config_path: str = \"~/.taskcat.yml\",\n",
        "source_code_with_indent": "        self,\n        args: dict = None,\n        global_config_path: str = \"~/.taskcat.yml\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        args: Optional[dict] = None,\n        global_config_path: str = \"~/.taskcat.yml\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/config.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/config.py:51:27 Invalid type [31]: Expression `[pathlib.Path, None]` is not a valid type.",
    "message": " Expression `[pathlib.Path, None]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 51,
    "warning_line": "        self.project_root: [Path, None] = absolute_path(project_root)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_len": 71,
        "target_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -3,3 +3,3 @@\n from pathlib import Path\n-from typing import Dict, List, Optional, Set\n+from typing import Dict, List, Optional, Set, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_len": 405,
        "target_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_len": 421,
        "diff_format": "@@ -50,6 +50,6 @@\n             project_root = absolute_path(project_config_path).parent / project_root\n-        self.project_root: [Path, None] = absolute_path(project_root)\n+        self.project_root: Union[Path, str] = absolute_path(project_root)\n         self.args: dict = args if args else {}\n-        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n-        self.override_file: Path = self._absolute_path(override_file)\n+        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n+        self.override_file: Optional[Path] = self._absolute_path(override_file)\n         self._client_factory_class = client_factory\n",
        "source_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/config.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/config.py:53:33 Invalid type [31]: Expression `[pathlib.Path, None]` is not a valid type.",
    "message": " Expression `[pathlib.Path, None]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 53,
    "warning_line": "        self.global_config_path: [Path, None] = absolute_path(global_config_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_len": 71,
        "target_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -3,3 +3,3 @@\n from pathlib import Path\n-from typing import Dict, List, Optional, Set\n+from typing import Dict, List, Optional, Set, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_len": 405,
        "target_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_len": 421,
        "diff_format": "@@ -50,6 +50,6 @@\n             project_root = absolute_path(project_config_path).parent / project_root\n-        self.project_root: [Path, None] = absolute_path(project_root)\n+        self.project_root: Union[Path, str] = absolute_path(project_root)\n         self.args: dict = args if args else {}\n-        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n-        self.override_file: Path = self._absolute_path(override_file)\n+        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n+        self.override_file: Optional[Path] = self._absolute_path(override_file)\n         self._client_factory_class = client_factory\n",
        "source_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/config.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/config.py:178:35 Invalid type [31]: Expression `[str, pathlib.Path]` is not a valid type.",
    "message": " Expression `[str, pathlib.Path]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 178,
    "warning_line": "    def _absolute_path(self, path: [str, Path]) -> [Path, None]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_len": 71,
        "target_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -3,3 +3,3 @@\n from pathlib import Path\n-from typing import Dict, List, Optional, Set\n+from typing import Dict, List, Optional, Set, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_len": 405,
        "target_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_len": 421,
        "diff_format": "@@ -50,6 +50,6 @@\n             project_root = absolute_path(project_config_path).parent / project_root\n-        self.project_root: [Path, None] = absolute_path(project_root)\n+        self.project_root: Union[Path, str] = absolute_path(project_root)\n         self.args: dict = args if args else {}\n-        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n-        self.override_file: Path = self._absolute_path(override_file)\n+        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n+        self.override_file: Optional[Path] = self._absolute_path(override_file)\n         self._client_factory_class = client_factory\n",
        "source_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _absolute_path(self, path: [str, Path]) -> [Path, None]:\n        if path is None:\n",
        "source_code_len": 91,
        "target_code": "\n    def _absolute_path(self, path: Optional[Union[str, Path]]) -> Optional[Path]:\n        if path is None:\n",
        "target_code_len": 108,
        "diff_format": "@@ -177,3 +177,3 @@\n \n-    def _absolute_path(self, path: [str, Path]) -> [Path, None]:\n+    def _absolute_path(self, path: Optional[Union[str, Path]]) -> Optional[Path]:\n         if path is None:\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED>def _absolute_path(self, path: [str, Path]) -> [Path, None]:\n        <IND>if path is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED>def _absolute_path(self, path: Optional[Union[str, Path]]) -> Optional[Path]:\n        <IND>if path is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/config.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/config.py:178:51 Invalid type [31]: Expression `[pathlib.Path, None]` is not a valid type.",
    "message": " Expression `[pathlib.Path, None]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 178,
    "warning_line": "    def _absolute_path(self, path: [str, Path]) -> [Path, None]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_len": 71,
        "target_code": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -3,3 +3,3 @@\n from pathlib import Path\n-from typing import Dict, List, Optional, Set\n+from typing import Dict, List, Optional, Set, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Dict, List, Optional, Set, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_len": 405,
        "target_code": "            project_root = absolute_path(project_config_path).parent / project_root\n        self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_len": 421,
        "diff_format": "@@ -50,6 +50,6 @@\n             project_root = absolute_path(project_config_path).parent / project_root\n-        self.project_root: [Path, None] = absolute_path(project_root)\n+        self.project_root: Union[Path, str] = absolute_path(project_root)\n         self.args: dict = args if args else {}\n-        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n-        self.override_file: Path = self._absolute_path(override_file)\n+        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n+        self.override_file: Optional[Path] = self._absolute_path(override_file)\n         self._client_factory_class = client_factory\n",
        "source_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: [Path, None] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: [Path, None] = absolute_path(global_config_path)\n        self.override_file: Path = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>project_root = absolute_path(project_config_path).parent / project_root\n        <DED>self.project_root: Union[Path, str] = absolute_path(project_root)\n        self.args: dict = args if args else {}\n        self.global_config_path: Optional[Path] = absolute_path(global_config_path)\n        self.override_file: Optional[Path] = self._absolute_path(override_file)\n        self._client_factory_class = client_factory\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _absolute_path(self, path: [str, Path]) -> [Path, None]:\n        if path is None:\n",
        "source_code_len": 91,
        "target_code": "\n    def _absolute_path(self, path: Optional[Union[str, Path]]) -> Optional[Path]:\n        if path is None:\n",
        "target_code_len": 108,
        "diff_format": "@@ -177,3 +177,3 @@\n \n-    def _absolute_path(self, path: [str, Path]) -> [Path, None]:\n+    def _absolute_path(self, path: Optional[Union[str, Path]]) -> Optional[Path]:\n         if path is None:\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED>def _absolute_path(self, path: [str, Path]) -> [Path, None]:\n        <IND>if path is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED>def _absolute_path(self, path: Optional[Union[str, Path]]) -> Optional[Path]:\n        <IND>if path is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aws-ia/taskcat",
    "commit": "5279c4e8be22a46e71e8b60b6d25de793e800741",
    "filename": "taskcat/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-ia-taskcat/taskcat/config.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "taskcat/config.py:240:51 Invalid type [31]: Expression `[None, Exception]` is not a valid type.",
    "message": " Expression `[None, Exception]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 240,
    "warning_line": "    def _process_legacy_project(self, instance) -> [None, Exception]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _process_legacy_project(self, instance) -> [None, Exception]:\n        validate(instance, \"legacy_project_config\")\n",
        "source_code_len": 123,
        "target_code": "\n    def _process_legacy_project(self, instance) -> Optional[Exception]:\n        validate(instance, \"legacy_project_config\")\n",
        "target_code_len": 125,
        "diff_format": "@@ -239,3 +242,3 @@\n \n-    def _process_legacy_project(self, instance) -> [None, Exception]:\n+    def _process_legacy_project(self, instance) -> Optional[Exception]:\n         validate(instance, \"legacy_project_config\")\n",
        "source_code_with_indent": "\n    <DED>def _process_legacy_project(self, instance) -> [None, Exception]:\n        <IND>validate(instance, \"legacy_project_config\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _process_legacy_project(self, instance) -> Optional[Exception]:\n        <IND>validate(instance, \"legacy_project_config\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]