[
  {
    "project": "Neuraxio/Neuraxle",
    "commit": "83dacaea79505fc9e978a1d489836a619eb44d1d",
    "filename": "neuraxle/steps/data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Neuraxio-Neuraxle/neuraxle/steps/data.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "neuraxle/steps/data.py:127:4 Inconsistent override [15]: `neuraxle.steps.data.EpochRepeater.fit_transform` overrides method defined in `neuraxle.base.ForceHandleMixin` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[HandleOnlyMixin, Iterable[typing.Any]]`.",
    "message": " `neuraxle.steps.data.EpochRepeater.fit_transform` overrides method defined in `neuraxle.base.ForceHandleMixin` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[HandleOnlyMixin, Iterable[typing.Any]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 127,
    "warning_line": "    def fit_transform(self, data_inputs, expected_outputs=None) -> ('BaseStep', Iterable):"
  },
  {
    "project": "Neuraxio/Neuraxle",
    "commit": "83dacaea79505fc9e978a1d489836a619eb44d1d",
    "filename": "neuraxle/steps/data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Neuraxio-Neuraxle/neuraxle/steps/data.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "neuraxle/steps/data.py:160:4 Inconsistent override [15]: `neuraxle.steps.data.EpochRepeater.fit` overrides method defined in `neuraxle.base.ForceHandleMixin` inconsistently. Returned type `BaseStep` is not a subtype of the overridden return `HandleOnlyMixin`.",
    "message": " `neuraxle.steps.data.EpochRepeater.fit` overrides method defined in `neuraxle.base.ForceHandleMixin` inconsistently. Returned type `BaseStep` is not a subtype of the overridden return `HandleOnlyMixin`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 160,
    "warning_line": "    def fit(self, data_inputs, expected_outputs=None) -> 'BaseStep':"
  },
  {
    "project": "Neuraxio/Neuraxle",
    "commit": "83dacaea79505fc9e978a1d489836a619eb44d1d",
    "filename": "neuraxle/steps/data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Neuraxio-Neuraxle/neuraxle/steps/data.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "neuraxle/steps/data.py:237:106 Invalid type [31]: Expression `(neuraxle.base.BaseStep, neuraxle.data_container.DataContainer)` is not a valid type.",
    "message": " Expression `(neuraxle.base.BaseStep, neuraxle.data_container.DataContainer)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 237,
    "warning_line": "    def _fit_transform_data_container(self, data_container: DataContainer, context: ExecutionContext) -> ('BaseStep', DataContainer):"
  },
  {
    "project": "Neuraxio/Neuraxle",
    "commit": "83dacaea79505fc9e978a1d489836a619eb44d1d",
    "filename": "neuraxle/steps/data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Neuraxio-Neuraxle/neuraxle/steps/data.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "neuraxle/steps/data.py:343:106 Invalid type [31]: Expression `(neuraxle.base.BaseStep, neuraxle.data_container.DataContainer)` is not a valid type.",
    "message": " Expression `(neuraxle.base.BaseStep, neuraxle.data_container.DataContainer)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 343,
    "warning_line": "    def _fit_transform_data_container(self, data_container: DataContainer, context: ExecutionContext) -> ('BaseStep', DataContainer):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, sub_data_container_names=None):\n        BaseStep.__init__(self)\n        NonTransformableMixin.__init__(self)\n\n        self.data_sources = sub_data_container_names\n\n    def _fit_transform_data_container(self, data_container: DataContainer, context: ExecutionContext) -> ('BaseStep', DataContainer):\n        \"\"\"\n        Merge sub data containers into the current data container.\n\n        :param data_container: data container to zip\n        :type data_container: DataContainer\n        :param context: execution context\n        :type context: ExecutionContext\n        :return: base step, data container\n        :rtype: Tuple[BaseStep, DataContainer]\n        \"\"\"\n        return self, self._batch_zip_sub_data_containers(data_container)\n\n",
        "source_code_len": 756,
        "target_code": "    def __init__(self, sub_data_container_names=None):\n        TransformerStep.__init__(self)\n        ForceHandleOnlyMixin.__init__(self)\n\n        self.data_sources = sub_data_container_names\n\n",
        "target_code_len": 193,
        "diff_format": "@@ -337,19 +336,6 @@\n     def __init__(self, sub_data_container_names=None):\n-        BaseStep.__init__(self)\n-        NonTransformableMixin.__init__(self)\n+        TransformerStep.__init__(self)\n+        ForceHandleOnlyMixin.__init__(self)\n \n         self.data_sources = sub_data_container_names\n-\n-    def _fit_transform_data_container(self, data_container: DataContainer, context: ExecutionContext) -> ('BaseStep', DataContainer):\n-        \"\"\"\n-        Merge sub data containers into the current data container.\n-\n-        :param data_container: data container to zip\n-        :type data_container: DataContainer\n-        :param context: execution context\n-        :type context: ExecutionContext\n-        :return: base step, data container\n-        :rtype: Tuple[BaseStep, DataContainer]\n-        \"\"\"\n-        return self, self._batch_zip_sub_data_containers(data_container)\n \n",
        "source_code_with_indent": "    def __init__(self, sub_data_container_names=None):\n        <IND>BaseStep.__init__(self)\n        NonTransformableMixin.__init__(self)\n\n        self.data_sources = sub_data_container_names\n\n    <DED>def _fit_transform_data_container(self, data_container: DataContainer, context: ExecutionContext) -> ('BaseStep', DataContainer):\n        <IND>\"\"\"\n        Merge sub data containers into the current data container.\n\n        :param data_container: data container to zip\n        :type data_container: DataContainer\n        :param context: execution context\n        :type context: ExecutionContext\n        :return: base step, data container\n        :rtype: Tuple[BaseStep, DataContainer]\n        \"\"\"\n        return self, self._batch_zip_sub_data_containers(data_container)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, sub_data_container_names=None):\n        <IND>TransformerStep.__init__(self)\n        ForceHandleOnlyMixin.__init__(self)\n\n        self.data_sources = sub_data_container_names\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]