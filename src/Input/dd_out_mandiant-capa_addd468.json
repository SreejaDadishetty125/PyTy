[
  {
    "project": "mandiant/capa",
    "commit": "addd4683cab76d053b9284a31f451c8de4d1f157",
    "filename": "capa/features/extractors/viv/indirect_calls.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mandiant-capa/capa/features/extractors/viv/indirect_calls.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "capa/features/extractors/viv/indirect_calls.py:164:4 Incompatible return type [7]: Expected `Tuple[int, int]` but got `Tuple[int, Optional[int]]`.",
    "message": " Expected `Tuple[int, int]` but got `Tuple[int, Optional[int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 164,
    "warning_line": "    return find_definition(vw, va, insn.opers[0].reg)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef resolve_indirect_call(vw: VivWorkspace, va: int, insn: Optional[\"InstructionHandle\"] = None) -> Tuple[int, int]:\n    \"\"\"\n",
        "source_code_len": 126,
        "target_code": "\ndef resolve_indirect_call(\n    vw: VivWorkspace, va: int, insn: Optional[\"InstructionHandle\"] = None\n) -> Tuple[int, Optional[int]]:\n    \"\"\"\n",
        "target_code_len": 142,
        "diff_format": "@@ -144,3 +144,5 @@\n \n-def resolve_indirect_call(vw: VivWorkspace, va: int, insn: Optional[\"InstructionHandle\"] = None) -> Tuple[int, int]:\n+def resolve_indirect_call(\n+    vw: VivWorkspace, va: int, insn: Optional[\"InstructionHandle\"] = None\n+) -> Tuple[int, Optional[int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def resolve_indirect_call(vw: VivWorkspace, va: int, insn: Optional[\"InstructionHandle\"] = None) -> Tuple[int, int]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def resolve_indirect_call(\n    vw: VivWorkspace, va: int, insn: Optional[\"InstructionHandle\"] = None\n) -> Tuple[int, Optional[int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "mandiant/capa",
    "commit": "addd4683cab76d053b9284a31f451c8de4d1f157",
    "filename": "capa/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mandiant-capa/capa/main.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "capa/main.py:159:38 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "            meta[\"library_functions\"][function_address] = function_name",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import collections\nfrom typing import Any, List, Tuple\n\n",
        "source_code_len": 56,
        "target_code": "import collections\nfrom typing import Any, Dict, List, Tuple\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -23,3 +23,3 @@\n import collections\n-from typing import Any, List, Tuple\n+from typing import Any, Dict, List, Tuple\n \n",
        "source_code_with_indent": "import collections\nfrom typing import Any, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import collections\nfrom typing import Any, Dict, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"library_functions\": {},\n    }\n\n",
        "source_code_len": 40,
        "target_code": "        \"library_functions\": {},\n    }  # type: Dict[str, Any]\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -140,3 +140,3 @@\n         \"library_functions\": {},\n-    }\n+    }  # type: Dict[str, Any]\n \n",
        "source_code_with_indent": "        \"library_functions\": {},\n    }\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        \"library_functions\": {},\n    }  # type: Dict[str, Any]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mandiant/capa",
    "commit": "addd4683cab76d053b9284a31f451c8de4d1f157",
    "filename": "capa/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mandiant-capa/capa/main.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "capa/main.py:159:58 Incompatible parameter type [6]: Expected `typing.Union[typing.Dict[typing.Any, typing.Any], int]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Union[typing.Dict[typing.Any, typing.Any], int]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "            meta[\"library_functions\"][function_address] = function_name",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import collections\nfrom typing import Any, List, Tuple\n\n",
        "source_code_len": 56,
        "target_code": "import collections\nfrom typing import Any, Dict, List, Tuple\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -23,3 +23,3 @@\n import collections\n-from typing import Any, List, Tuple\n+from typing import Any, Dict, List, Tuple\n \n",
        "source_code_with_indent": "import collections\nfrom typing import Any, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import collections\nfrom typing import Any, Dict, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"library_functions\": {},\n    }\n\n",
        "source_code_len": 40,
        "target_code": "        \"library_functions\": {},\n    }  # type: Dict[str, Any]\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -140,3 +140,3 @@\n         \"library_functions\": {},\n-    }\n+    }  # type: Dict[str, Any]\n \n",
        "source_code_with_indent": "        \"library_functions\": {},\n    }\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        \"library_functions\": {},\n    }  # type: Dict[str, Any]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]