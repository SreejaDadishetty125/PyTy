[
  {
    "project": "aws/chalice",
    "commit": "b99bafe70032d7ee06172e68e1382e6235eebe7d",
    "filename": "chalice/analyzer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aws-chalice/chalice/analyzer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "chalice/analyzer.py:646:8 Incompatible return type [7]: Expected `symtable.SymbolTable` but got `None`.",
    "message": " Expected `symtable.SymbolTable` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 646,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_matching_sub_namespace(self, name, lineno):\n        # type: (str, int) -> symtable.SymbolTable\n        namespaces = [t for t in self._symbol_table.get_sub_namespaces()\n",
        "source_code_len": 181,
        "target_code": "    def _get_matching_sub_namespace(self, name, lineno):\n        # type: (str, int) -> Optional[symtable.SymbolTable]\n        namespaces = [t for t in self._symbol_table.get_sub_namespaces()\n",
        "target_code_len": 191,
        "diff_format": "@@ -635,3 +640,3 @@\n     def _get_matching_sub_namespace(self, name, lineno):\n-        # type: (str, int) -> symtable.SymbolTable\n+        # type: (str, int) -> Optional[symtable.SymbolTable]\n         namespaces = [t for t in self._symbol_table.get_sub_namespaces()\n",
        "source_code_with_indent": "    <DED>def _get_matching_sub_namespace(self, name, lineno):\n        # type: (str, int) -> symtable.SymbolTable\n        <IND>namespaces = [t for t in self._symbol_table.get_sub_namespaces()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_matching_sub_namespace(self, name, lineno):\n        # type: (str, int) -> Optional[symtable.SymbolTable]\n        <IND>namespaces = [t for t in self._symbol_table.get_sub_namespaces()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]