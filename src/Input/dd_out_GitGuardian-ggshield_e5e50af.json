[
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/install.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/install.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/install.py:43:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 43,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\n\n",
        "source_code_len": 12,
        "target_code": "import sys\nfrom typing import Optional\n\n",
        "target_code_len": 40,
        "diff_format": "@@ -3,2 +3,3 @@\n import sys\n+from typing import Optional\n \n",
        "source_code_with_indent": "import sys\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_global_hook_dir_path() -> str:\n    \"\"\" Return the default hooks path (if it exists). \"\"\"\n",
        "source_code_len": 98,
        "target_code": "\ndef get_global_hook_dir_path() -> Optional[str]:\n    \"\"\" Return the default hooks path (if it exists). \"\"\"\n",
        "target_code_len": 108,
        "diff_format": "@@ -36,3 +37,3 @@\n \n-def get_global_hook_dir_path() -> str:\n+def get_global_hook_dir_path() -> Optional[str]:\n     \"\"\" Return the default hooks path (if it exists). \"\"\"\n",
        "source_code_with_indent": "\n<DED>def get_global_hook_dir_path() -> str:\n    <IND>\"\"\" Return the default hooks path (if it exists). \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_global_hook_dir_path() -> Optional[str]:\n    <IND>\"\"\" Return the default hooks path (if it exists). \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/path.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/path.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/path.py:31:30 Incompatible parameter type [6]: Expected `Union[List[typing.Any], str]` for 1st positional only parameter to call `get_filepaths` but got `Union[Path, str]`.",
    "message": " Expected `Union[List[typing.Any], str]` for 1st positional only parameter to call `get_filepaths` but got `Union[Path, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 31,
    "warning_line": "    filepaths = get_filepaths(paths, paths_ignore, recursive)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_files_from_paths(\n    paths: Union[Path, str],\n    paths_ignore: List[str],\n",
        "source_code_len": 84,
        "target_code": "def get_files_from_paths(\n    paths: List[str],\n    paths_ignore: List[str],\n",
        "target_code_len": 77,
        "diff_format": "@@ -15,3 +15,3 @@\n def get_files_from_paths(\n-    paths: Union[Path, str],\n+    paths: List[str],\n     paths_ignore: List[str],\n",
        "source_code_with_indent": "def get_files_from_paths(\n    paths: Union[Path, str],\n    paths_ignore: List[str],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def get_files_from_paths(\n    paths: List[str],\n    paths_ignore: List[str],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/path.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/path.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/path.py:32:43 Incompatible parameter type [6]: Expected `Iterable[str]` for 1st positional only parameter to call `generate_files_from_paths` but got `Set[Path]`.",
    "message": " Expected `Iterable[str]` for 1st positional only parameter to call `generate_files_from_paths` but got `Set[Path]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 32,
    "warning_line": "    files = list(generate_files_from_paths(filepaths, verbose))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    paths: Union[List, str], paths_ignore: Iterable[str], recursive: bool\n) -> Set[Path]:\n    \"\"\"\n",
        "source_code_len": 98,
        "target_code": "    paths: Union[List, str], paths_ignore: Iterable[str], recursive: bool\n) -> Set[str]:\n    \"\"\"\n",
        "target_code_len": 97,
        "diff_format": "@@ -48,3 +48,3 @@\n     paths: Union[List, str], paths_ignore: Iterable[str], recursive: bool\n-) -> Set[Path]:\n+) -> Set[str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    paths: Union[List, str], paths_ignore: Iterable[str], recursive: bool\n) -> Set[Path]:\n    <IND>",
        "target_code_with_indent": "    paths: Union[List, str], paths_ignore: Iterable[str], recursive: bool\n) -> Set[str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/path.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/path.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/path.py:44:17 Incompatible parameter type [6]: Expected `List[File]` for 1st positional only parameter to call `Files.__init__` but got `List[Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `List[File]` for 1st positional only parameter to call `Files.__init__` but got `List[Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 44,
    "warning_line": "    return Files(files)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[Dict]:\n    \"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "source_code_len": 158,
        "target_code": "\ndef generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[File]:\n    \"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "target_code_len": 158,
        "diff_format": "@@ -72,3 +72,3 @@\n \n-def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[Dict]:\n+def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[File]:\n     \"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "source_code_with_indent": "\n<DED>def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[Dict]:\n    <IND>\"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[File]:\n    <IND>\"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/path.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/path.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/path.py:92:20 Incompatible return type [7]: Expected `Iterable[Dict[typing.Any, typing.Any]]` but got `typing.Generator[File, None, None]`.",
    "message": " Expected `Iterable[Dict[typing.Any, typing.Any]]` but got `typing.Generator[File, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 92,
    "warning_line": "                    yield File(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[Dict]:\n    \"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "source_code_len": 158,
        "target_code": "\ndef generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[File]:\n    \"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "target_code_len": 158,
        "diff_format": "@@ -72,3 +72,3 @@\n \n-def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[Dict]:\n+def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[File]:\n     \"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "source_code_with_indent": "\n<DED>def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[Dict]:\n    <IND>\"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def generate_files_from_paths(paths: Iterable[str], verbose: bool) -> Iterable[File]:\n    <IND>\"\"\"Generate a list of scannable files from a list of filepaths.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/scan.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/scan.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/scan.py:60:8 Incompatible parameter type [6]: Expected `Union[Path, str]` for 1st parameter `paths` to call `get_files_from_paths` but got `Union[List[typing.Any], str]`.",
    "message": " Expected `Union[Path, str]` for 1st parameter `paths` to call `get_files_from_paths` but got `Union[List[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 60,
    "warning_line": "        paths=paths,"
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/scan.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/scan.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/scan.py:327:4 Incompatible return type [7]: Expected `int` but got implicit return value of `None`.",
    "message": " Expected `int` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 327,
    "warning_line": "    with tempfile.TemporaryDirectory() as tmpdirname:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        with cd(tmpdirname):\n            scan_commit_range(\n                client=client,\n",
        "source_code_len": 91,
        "target_code": "        with cd(tmpdirname):\n            return scan_commit_range(\n                client=client,\n",
        "target_code_len": 98,
        "diff_format": "@@ -329,3 +329,3 @@\n         with cd(tmpdirname):\n-            scan_commit_range(\n+            return scan_commit_range(\n                 client=client,\n",
        "source_code_with_indent": "        with cd(tmpdirname):\n            <IND>scan_commit_range(\n                client=client,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        with cd(tmpdirname):\n            <IND>return scan_commit_range(\n                client=client,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/scannable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/scannable.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/scannable.py:101:28 Incompatible parameter type [6]: Expected `Filemode` for 3rd parameter `filemode` to call `Result.__init__` but got `str`.",
    "message": " Expected `Filemode` for 3rd parameter `filemode` to call `Result.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 101,
    "warning_line": "                            filemode=chunk[index][\"filemode\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict, Iterable, List, NamedTuple, Optional, Set\n\n",
        "source_code_len": 78,
        "target_code": "import re\nfrom typing import Any, Dict, Iterable, List, NamedTuple, Optional, Set\n\n",
        "target_code_len": 83,
        "diff_format": "@@ -2,3 +2,3 @@\n import re\n-from typing import Dict, Iterable, List, NamedTuple, Optional, Set\n+from typing import Any, Dict, Iterable, List, NamedTuple, Optional, Set\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict, Iterable, List, NamedTuple, Optional, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Any, Dict, Iterable, List, NamedTuple, Optional, Set\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def scannable_list(self) -> List[Dict[str, str]]:\n        return [entry.scan_dict for entry in self.files.values()]\n",
        "source_code_len": 134,
        "target_code": "    @property\n    def scannable_list(self) -> List[Dict[str, Any]]:\n        return [entry.scan_dict for entry in self.files.values()]\n",
        "target_code_len": 134,
        "diff_format": "@@ -75,3 +75,3 @@\n     @property\n-    def scannable_list(self) -> List[Dict[str, str]]:\n+    def scannable_list(self) -> List[Dict[str, Any]]:\n         return [entry.scan_dict for entry in self.files.values()]\n",
        "source_code_with_indent": "    <DED>@property\n    def scannable_list(self) -> List[Dict[str, str]]:\n        <IND>return [entry.scan_dict for entry in self.files.values()]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def scannable_list(self) -> List[Dict[str, Any]]:\n        <IND>return [entry.scan_dict for entry in self.files.values()]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/scannable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/scannable.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/scannable.py:114:50 Incompatible variable type [9]: filter_set is declared to have type `Optional[Set[str]]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " filter_set is declared to have type `Optional[Set[str]]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 114,
    "warning_line": "    def __init__(self, sha: Optional[str] = None, filter_set: Optional[Set[str]] = {}):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Optional[Set[str]] = {}):\n        self.sha = sha\n        self._patch = None\n        self._files = None\n        self.filter_set = filter_set\n",
        "source_code_len": 203,
        "target_code": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Set[str] = set()):\n        self.sha = sha\n        self._patch = None\n        self._files = {}\n        self.filter_set = filter_set\n",
        "target_code_len": 194,
        "diff_format": "@@ -113,6 +113,6 @@\n \n-    def __init__(self, sha: Optional[str] = None, filter_set: Optional[Set[str]] = {}):\n+    def __init__(self, sha: Optional[str] = None, filter_set: Set[str] = set()):\n         self.sha = sha\n         self._patch = None\n-        self._files = None\n+        self._files = {}\n         self.filter_set = filter_set\n",
        "source_code_with_indent": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Optional[Set[str]] = {}):\n        <IND>self.sha = sha\n        self._patch = None\n        self._files = None\n        self.filter_set = filter_set\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Set[str] = set()):\n        <IND>self.sha = sha\n        self._patch = None\n        self._files = {}\n        self.filter_set = filter_set\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GitGuardian/ggshield",
    "commit": "e5e50af7da39f4f87134e47d5c764ca64b6db53f",
    "filename": "ggshield/scannable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GitGuardian-ggshield/ggshield/scannable.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ggshield/scannable.py:187:15 Unsupported operand [58]: `in` is not supported for right operand type `Optional[Set[str]]`.",
    "message": " `in` is not supported for right operand type `Optional[Set[str]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 187,
    "warning_line": "            if os.path.join(work_dir, filename) in self.filter_set:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Optional[Set[str]] = {}):\n        self.sha = sha\n        self._patch = None\n        self._files = None\n        self.filter_set = filter_set\n",
        "source_code_len": 203,
        "target_code": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Set[str] = set()):\n        self.sha = sha\n        self._patch = None\n        self._files = {}\n        self.filter_set = filter_set\n",
        "target_code_len": 194,
        "diff_format": "@@ -113,6 +113,6 @@\n \n-    def __init__(self, sha: Optional[str] = None, filter_set: Optional[Set[str]] = {}):\n+    def __init__(self, sha: Optional[str] = None, filter_set: Set[str] = set()):\n         self.sha = sha\n         self._patch = None\n-        self._files = None\n+        self._files = {}\n         self.filter_set = filter_set\n",
        "source_code_with_indent": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Optional[Set[str]] = {}):\n        <IND>self.sha = sha\n        self._patch = None\n        self._files = None\n        self.filter_set = filter_set\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, sha: Optional[str] = None, filter_set: Set[str] = set()):\n        <IND>self.sha = sha\n        self._patch = None\n        self._files = {}\n        self.filter_set = filter_set\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]