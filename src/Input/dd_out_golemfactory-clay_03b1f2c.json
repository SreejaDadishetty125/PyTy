[
  {
    "project": "golemfactory/clay",
    "commit": "03b1f2cd9d0cb53fb6d447755432ebd5e63323bc",
    "filename": "apps/core/task/coretask.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/golemfactory-clay/apps/core/task/coretask.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "apps/core/task/coretask.py:492:21 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `TaskClient.start` but got `typing.Optional[bytes]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `TaskClient.start` but got `typing.Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 492,
    "warning_line": "        client.start(wtct_hash, num_subtasks)"
  },
  {
    "project": "golemfactory/clay",
    "commit": "03b1f2cd9d0cb53fb6d447755432ebd5e63323bc",
    "filename": "golem/task/tasksession.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/golemfactory-clay/golem/task/tasksession.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "golem/task/tasksession.py:412:16 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `TaskManager.get_next_subtask` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `TaskManager.get_next_subtask` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 412,
    "warning_line": "                self.key_id, msg.task_id, msg.perf_index, msg.price, wtct_hash)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ):\n        node_name_id = common.short_node_id(self.key_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "source_code_len": 120,
        "target_code": "    ):\n        if self.key_id is None:\n            logger.warning(\"Provider handshake required\")\n            return\n        node_id: str = str(self.key_id)\n        node_name_id = common.short_node_id(node_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "target_code_len": 265,
        "diff_format": "@@ -389,3 +389,7 @@\n     ):\n-        node_name_id = common.short_node_id(self.key_id)\n+        if self.key_id is None:\n+            logger.warning(\"Provider handshake required\")\n+            return\n+        node_id: str = str(self.key_id)\n+        node_name_id = common.short_node_id(node_id)\n         reasons = message.tasks.CannotAssignTask.REASON\n",
        "source_code_with_indent": "    ):\n        <IND>node_name_id = common.short_node_id(self.key_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ):\n        <IND>if self.key_id is None:\n            <IND>logger.warning(\"Provider handshake required\")\n            return\n        <DED>node_id: str = str(self.key_id)\n        node_name_id = common.short_node_id(node_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ctd = self.task_manager.get_next_subtask(\n                self.key_id, msg.task_id, msg.perf_index, msg.price, wtct_hash)\n\n",
        "source_code_len": 135,
        "target_code": "            ctd = self.task_manager.get_next_subtask(\n                node_id, msg.task_id, msg.perf_index, msg.price, wtct_hash)\n\n",
        "target_code_len": 131,
        "diff_format": "@@ -411,3 +415,3 @@\n             ctd = self.task_manager.get_next_subtask(\n-                self.key_id, msg.task_id, msg.perf_index, msg.price, wtct_hash)\n+                node_id, msg.task_id, msg.perf_index, msg.price, wtct_hash)\n \n",
        "source_code_with_indent": "            <IND>ctd = self.task_manager.get_next_subtask(\n                self.key_id, msg.task_id, msg.perf_index, msg.price, wtct_hash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>ctd = self.task_manager.get_next_subtask(\n                node_id, msg.task_id, msg.perf_index, msg.price, wtct_hash)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "golemfactory/clay",
    "commit": "03b1f2cd9d0cb53fb6d447755432ebd5e63323bc",
    "filename": "golem/task/tasksession.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/golemfactory-clay/golem/task/tasksession.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "golem/task/tasksession.py:425:31 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `golem.task.taskbase.Task.accept_client` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `golem.task.taskbase.Task.accept_client` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 425,
    "warning_line": "            task.accept_client(self.key_id, wtct_hash, msg.num_subtasks)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ):\n        node_name_id = common.short_node_id(self.key_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "source_code_len": 120,
        "target_code": "    ):\n        if self.key_id is None:\n            logger.warning(\"Provider handshake required\")\n            return\n        node_id: str = str(self.key_id)\n        node_name_id = common.short_node_id(node_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "target_code_len": 265,
        "diff_format": "@@ -389,3 +389,7 @@\n     ):\n-        node_name_id = common.short_node_id(self.key_id)\n+        if self.key_id is None:\n+            logger.warning(\"Provider handshake required\")\n+            return\n+        node_id: str = str(self.key_id)\n+        node_name_id = common.short_node_id(node_id)\n         reasons = message.tasks.CannotAssignTask.REASON\n",
        "source_code_with_indent": "    ):\n        <IND>node_name_id = common.short_node_id(self.key_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ):\n        <IND>if self.key_id is None:\n            <IND>logger.warning(\"Provider handshake required\")\n            return\n        <DED>node_id: str = str(self.key_id)\n        node_name_id = common.short_node_id(node_id)\n        reasons = message.tasks.CannotAssignTask.REASON\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            task.accept_client(self.key_id, wtct_hash, msg.num_subtasks)\n\n",
        "source_code_len": 75,
        "target_code": "\n            task.accept_client(node_id, wtct_hash, msg.num_subtasks)\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -424,3 +428,3 @@\n \n-            task.accept_client(self.key_id, wtct_hash, msg.num_subtasks)\n+            task.accept_client(node_id, wtct_hash, msg.num_subtasks)\n \n",
        "source_code_with_indent": "\n            <DED>task.accept_client(self.key_id, wtct_hash, msg.num_subtasks)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            <DED>task.accept_client(node_id, wtct_hash, msg.num_subtasks)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]