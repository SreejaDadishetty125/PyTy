[
  {
    "project": "typeddjango/django-stubs",
    "commit": "4c218556415099118bf751923e7dc5f648df9700",
    "filename": "mypy_django_plugin/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/typeddjango-django-stubs/mypy_django_plugin/main.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mypy_django_plugin/main.py:57:16 Incompatible parameter type [6]: Expected `typing.Union[os.PathLike[str], typing.Iterable[typing.Union[os.PathLike[str], str]], str]` for 1st positional only parameter to call `configparser.RawConfigParser.read` but got `Optional[str]`.",
    "message": " Expected `typing.Union[os.PathLike[str], typing.Iterable[typing.Union[os.PathLike[str], str]], str]` for 1st positional only parameter to call `configparser.RawConfigParser.read` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "    parser.read(config_file_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    parser = configparser.ConfigParser()\n    parser.read(config_file_path)\n\n",
        "source_code_len": 76,
        "target_code": "    parser = configparser.ConfigParser()\n    parser.read(config_file_path)  # type: ignore\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -56,3 +56,3 @@\n     parser = configparser.ConfigParser()\n-    parser.read(config_file_path)\n+    parser.read(config_file_path)  # type: ignore\n \n",
        "source_code_with_indent": "    <DED>parser = configparser.ConfigParser()\n    parser.read(config_file_path)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>parser = configparser.ConfigParser()\n    parser.read(config_file_path)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "typeddjango/django-stubs",
    "commit": "4c218556415099118bf751923e7dc5f648df9700",
    "filename": "mypy_django_plugin/transformers/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/typeddjango-django-stubs/mypy_django_plugin/transformers/fields.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy_django_plugin/transformers/fields.py:72:78 Incompatible parameter type [6]: Expected `bool` for 2nd positional only parameter to call `get_field_descriptor_types` but got `Optional[bool]`.",
    "message": " Expected `bool` for 2nd positional only parameter to call `get_field_descriptor_types` but got `Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "    set_type, get_type = get_field_descriptor_types(default_return_type.type, is_nullable)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    default_return_type = cast(Instance, ctx.default_return_type)\n    is_nullable = helpers.parse_bool(helpers.get_call_argument_by_name(ctx, 'null'))\n    set_type, get_type = get_field_descriptor_types(default_return_type.type, is_nullable)\n",
        "source_code_len": 242,
        "target_code": "    default_return_type = cast(Instance, ctx.default_return_type)\n\n    is_nullable = False\n    null_expr = helpers.get_call_argument_by_name(ctx, 'null')\n    if null_expr is not None:\n        is_nullable = helpers.parse_bool(null_expr) or False\n\n    set_type, get_type = get_field_descriptor_types(default_return_type.type, is_nullable)\n",
        "target_code_len": 337,
        "diff_format": "@@ -70,3 +76,8 @@\n     default_return_type = cast(Instance, ctx.default_return_type)\n-    is_nullable = helpers.parse_bool(helpers.get_call_argument_by_name(ctx, 'null'))\n+\n+    is_nullable = False\n+    null_expr = helpers.get_call_argument_by_name(ctx, 'null')\n+    if null_expr is not None:\n+        is_nullable = helpers.parse_bool(null_expr) or False\n+\n     set_type, get_type = get_field_descriptor_types(default_return_type.type, is_nullable)\n",
        "source_code_with_indent": "    <IND>default_return_type = cast(Instance, ctx.default_return_type)\n    is_nullable = helpers.parse_bool(helpers.get_call_argument_by_name(ctx, 'null'))\n    set_type, get_type = get_field_descriptor_types(default_return_type.type, is_nullable)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>default_return_type = cast(Instance, ctx.default_return_type)\n\n    is_nullable = False\n    null_expr = helpers.get_call_argument_by_name(ctx, 'null')\n    if null_expr is not None:\n        <IND>is_nullable = helpers.parse_bool(null_expr) or False\n\n    <DED>set_type, get_type = get_field_descriptor_types(default_return_type.type, is_nullable)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "typeddjango/django-stubs",
    "commit": "4c218556415099118bf751923e7dc5f648df9700",
    "filename": "mypy_django_plugin/transformers/querysets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/typeddjango-django-stubs/mypy_django_plugin/transformers/querysets.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy_django_plugin/transformers/querysets.py:137:40 Incompatible parameter type [6]: Expected `bool` for 4th parameter `flat` to call `get_values_list_row_type` but got `Optional[bool]`.",
    "message": " Expected `bool` for 4th parameter `flat` to call `get_values_list_row_type` but got `Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "                                        flat=flat, named=named)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "source_code_len": 73,
        "target_code": "\n    # account for possible None\n    flat = flat or False\n    named = named or False\n\n    row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "target_code_len": 158,
        "diff_format": "@@ -135,2 +118,6 @@\n \n+    # account for possible None\n+    flat = flat or False\n+    named = named or False\n+\n     row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "source_code_with_indent": "\n    <DED>row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # account for possible None\n    <DED>flat = flat or False\n    named = named or False\n\n    row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "typeddjango/django-stubs",
    "commit": "4c218556415099118bf751923e7dc5f648df9700",
    "filename": "mypy_django_plugin/transformers/querysets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/typeddjango-django-stubs/mypy_django_plugin/transformers/querysets.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy_django_plugin/transformers/querysets.py:137:51 Incompatible parameter type [6]: Expected `bool` for 5th parameter `named` to call `get_values_list_row_type` but got `Optional[bool]`.",
    "message": " Expected `bool` for 5th parameter `named` to call `get_values_list_row_type` but got `Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "                                        flat=flat, named=named)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "source_code_len": 73,
        "target_code": "\n    # account for possible None\n    flat = flat or False\n    named = named or False\n\n    row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "target_code_len": 158,
        "diff_format": "@@ -135,2 +118,6 @@\n \n+    # account for possible None\n+    flat = flat or False\n+    named = named or False\n+\n     row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "source_code_with_indent": "\n    <DED>row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # account for possible None\n    <DED>flat = flat or False\n    named = named or False\n\n    row_type = get_values_list_row_type(ctx, django_context, model_cls,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]