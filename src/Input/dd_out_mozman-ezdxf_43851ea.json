[
  {
    "project": "mozman/ezdxf",
    "commit": "43851ea5898667de023ab966bd3683f381963519",
    "filename": "src/ezdxf/entities/ltype.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/ltype.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/entities/ltype.py:187:47 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Linetype._setup_complex_pattern` but got `Union[Iterable[float], str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Linetype._setup_complex_pattern` but got `Union[Iterable[float], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 187,
    "warning_line": "            tags = self._setup_complex_pattern(pattern, length)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if complex_line_type:  # a .lin like line type definition string\n            tags = self._setup_complex_pattern(pattern, length)\n        else:\n",
        "source_code_len": 151,
        "target_code": "        if complex_line_type:  # a .lin like line type definition string\n            tags = self._setup_complex_pattern(pattern, length)  # type: ignore\n        else:\n",
        "target_code_len": 167,
        "diff_format": "@@ -186,3 +202,3 @@\n         if complex_line_type:  # a .lin like line type definition string\n-            tags = self._setup_complex_pattern(pattern, length)\n+            tags = self._setup_complex_pattern(pattern, length)  # type: ignore\n         else:\n",
        "source_code_with_indent": "        if complex_line_type:  # a .lin like line type definition string\n            <IND>tags = self._setup_complex_pattern(pattern, length)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if complex_line_type:  # a .lin like line type definition string\n            <IND>tags = self._setup_complex_pattern(pattern, length)  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "43851ea5898667de023ab966bd3683f381963519",
    "filename": "src/ezdxf/entities/ltype.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/ltype.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/ltype.py:193:31 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Iterable[float], str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Iterable[float], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 193,
    "warning_line": "                DXFTag(73, len(pattern) - 1),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def setup_pattern(self, pattern: Union[Iterable[float], str],\n                      length: float = 0) -> None:\n        # The new() function gets no doc reference, therefore complex linetype\n",
        "source_code_len": 196,
        "target_code": "\n    def setup_pattern(\n        self, pattern: Union[Sequence[float], str], length: float = 0\n    ) -> None:\n        # The new() function gets no doc reference, therefore complex linetype\n",
        "target_code_len": 188,
        "diff_format": "@@ -180,4 +195,5 @@\n \n-    def setup_pattern(self, pattern: Union[Iterable[float], str],\n-                      length: float = 0) -> None:\n+    def setup_pattern(\n+        self, pattern: Union[Sequence[float], str], length: float = 0\n+    ) -> None:\n         # The new() function gets no doc reference, therefore complex linetype\n",
        "source_code_with_indent": "\n    <DED><DED>def setup_pattern(self, pattern: Union[Iterable[float], str],\n                      length: float = 0) -> None:\n        # The new() function gets no doc reference, therefore complex linetype\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def setup_pattern(\n        self, pattern: Union[Sequence[float], str], length: float = 0\n    ) -> None:\n        # The new() function gets no doc reference, therefore complex linetype\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if complex_line_type:  # a .lin like line type definition string\n            tags = self._setup_complex_pattern(pattern, length)\n        else:\n",
        "source_code_len": 151,
        "target_code": "        if complex_line_type:  # a .lin like line type definition string\n            tags = self._setup_complex_pattern(pattern, length)  # type: ignore\n        else:\n",
        "target_code_len": 167,
        "diff_format": "@@ -186,3 +202,3 @@\n         if complex_line_type:  # a .lin like line type definition string\n-            tags = self._setup_complex_pattern(pattern, length)\n+            tags = self._setup_complex_pattern(pattern, length)  # type: ignore\n         else:\n",
        "source_code_with_indent": "        if complex_line_type:  # a .lin like line type definition string\n            <IND>tags = self._setup_complex_pattern(pattern, length)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if complex_line_type:  # a .lin like line type definition string\n            <IND>tags = self._setup_complex_pattern(pattern, length)  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]