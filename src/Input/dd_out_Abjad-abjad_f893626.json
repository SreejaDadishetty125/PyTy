[
  {
    "project": "Abjad/abjad",
    "commit": "f893626d3f755ffef67572d66ad8690942aafd37",
    "filename": "abjad/tools/indicatortools/SystemBreak.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Abjad-abjad/abjad/tools/indicatortools/LineBreak.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "abjad/tools/indicatortools/SystemBreak.py:37:24 Unbound name [10]: Name `Right` is used but not defined in the current scope.",
    "message": " Name `Right` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 37,
    "warning_line": "    _time_orientation = Right",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        ..  docs::\n\n",
        "source_code_len": 21,
        "target_code": "\n        >>> abjad.f(staff)\n        \\new Staff {\n            c'4\n            d'4\n            e'4\n            f'4\n            \\break\n        }\n\n    '''\n\n    ### CLASS VARIABLES ###\n\n    __slots__ = (\n        '_context',\n        '_format_slot',\n        )\n\n    _time_orientation = Right\n\n    ### INITIALIZER ##\n\n    def __init__(self, format_slot='closing'):\n        self._context = 'Score'\n        assert isinstance(format_slot, str), repr(format_slot)\n        self._format_slot = format_slot\n\n    ### PRIVATE METHODS ###\n\n    def _get_lilypond_format(self):\n        return r'\\break'\n\n    def _get_lilypond_format_bundle(self, component=None):\n        import abjad\n        bundle = abjad.LilyPondFormatBundle()\n        slot = bundle.get(self.format_slot)\n        slot.commands.append(self._get_lilypond_format())\n        return bundle\n\n    ### PUBLIC PROPERTIES ###\n\n    @property\n    def context(self):\n        r'''Gets line break default context.\n\n        ..  container:: example\n\n            Defaults to score:\n\n            >>> break_ = abjad.LineBreak()\n            >>> break_.context\n            'Score'\n\n        Returns context or string.\n        '''\n        return self._context\n\n    @property\n    def format_slot(self):\n        r'''Gets format slot.\n\n        ..  container:: example\n\n            Defaults to closing:\n\n            >>> staff = abjad.Staff(\"c'4 d'4 e'4 f'4\")\n            >>> break_ = abjad.LineBreak()\n            >>> abjad.attach(break_, staff[-1])\n            >>> abjad.show(staff) # doctest: +SKIP\n\n",
        "target_code_len": 1522,
        "diff_format": "@@ -15,3 +15,71 @@\n \n-        ..  docs::\n+        >>> abjad.f(staff)\n+        \\new Staff {\n+            c'4\n+            d'4\n+            e'4\n+            f'4\n+            \\break\n+        }\n+\n+    '''\n+\n+    ### CLASS VARIABLES ###\n+\n+    __slots__ = (\n+        '_context',\n+        '_format_slot',\n+        )\n+\n+    _time_orientation = Right\n+\n+    ### INITIALIZER ##\n+\n+    def __init__(self, format_slot='closing'):\n+        self._context = 'Score'\n+        assert isinstance(format_slot, str), repr(format_slot)\n+        self._format_slot = format_slot\n+\n+    ### PRIVATE METHODS ###\n+\n+    def _get_lilypond_format(self):\n+        return r'\\break'\n+\n+    def _get_lilypond_format_bundle(self, component=None):\n+        import abjad\n+        bundle = abjad.LilyPondFormatBundle()\n+        slot = bundle.get(self.format_slot)\n+        slot.commands.append(self._get_lilypond_format())\n+        return bundle\n+\n+    ### PUBLIC PROPERTIES ###\n+\n+    @property\n+    def context(self):\n+        r'''Gets line break default context.\n+\n+        ..  container:: example\n+\n+            Defaults to score:\n+\n+            >>> break_ = abjad.LineBreak()\n+            >>> break_.context\n+            'Score'\n+\n+        Returns context or string.\n+        '''\n+        return self._context\n+\n+    @property\n+    def format_slot(self):\n+        r'''Gets format slot.\n+\n+        ..  container:: example\n+\n+            Defaults to closing:\n+\n+            >>> staff = abjad.Staff(\"c'4 d'4 e'4 f'4\")\n+            >>> break_ = abjad.LineBreak()\n+            >>> abjad.attach(break_, staff[-1])\n+            >>> abjad.show(staff) # doctest: +SKIP\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "",
        "target_code_with_indent": "\n\n    ### CLASS VARIABLES ###\n\n    __slots__ = (\n        '_context',\n        '_format_slot',\n        )\n\n    _time_orientation = Right\n\n    ### INITIALIZER ##\n\n    def __init__(self, format_slot='closing'):\n        <IND>self._context = 'Score'\n        assert isinstance(format_slot, str), repr(format_slot)\n        self._format_slot = format_slot\n\n    ### PRIVATE METHODS ###\n\n    <DED>def _get_lilypond_format(self):\n        <IND>return r'\\break'\n\n    <DED>def _get_lilypond_format_bundle(self, component=None):\n        <IND>import abjad\n        bundle = abjad.LilyPondFormatBundle()\n        slot = bundle.get(self.format_slot)\n        slot.commands.append(self._get_lilypond_format())\n        return bundle\n\n    ### PUBLIC PROPERTIES ###\n\n    <DED>@property\n    def context(self):\n        <IND>r'''Gets line break default context.\n\n        ..  container:: example\n\n            Defaults to score:\n\n            >>> break_ = abjad.LineBreak()\n            >>> break_.context\n            'Score'\n\n        Returns context or string.\n        '''\n        return self._context\n\n    <DED>@property\n    def format_slot(self):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    '''\n\n    ### CLASS VARIABLES ###\n\n    __slots__ = (\n        '_context',\n        )\n\n    _format_slot = 'closing'\n\n    _time_orientation = Right\n\n    ### INITIALIZER ##\n\n    def __init__(self):\n        self._context = 'Staff'\n\n    ### PRIVATE METHODS ###\n\n    def _get_lilypond_format(self):\n        return r'\\break'\n\n    def _get_lilypond_format_bundle(self, component=None):\n        import abjad\n        bundle = abjad.LilyPondFormatBundle()\n        bundle.after.commands.append(self._get_lilypond_format())\n        return bundle\n\n    ### PUBLIC PROPERTIES ###\n\n    @property\n    def context(self):\n        r'''Gets default context of system break indicator.\n\n        ..  container:: example\n\n            Default system break:\n\n            >>> break_ = abjad.SystemBreak()\n            >>> break_.context\n            'Staff'\n\n        ..  todo:: Make system breaks score-contexted.\n\n        Returns staff (but should return score).\n\n        Returns context or string.\n        '''\n        return self._context\n",
        "source_code_len": 1012,
        "target_code": "\n        ..  container:: example\n\n            Formats before leaf like this:\n\n            >>> staff = abjad.Staff(\"c'4 d'4 e'4 f'4\")\n            >>> break_ = abjad.LineBreak(format_slot='before')\n            >>> abjad.attach(break_, staff[0])\n            >>> abjad.show(staff) # doctest: +SKIP\n\n            >>> abjad.f(staff)\n            \\new Staff {\n                \\break\n                c'4\n                d'4\n                e'4\n                f'4\n            }\n\n        '''\n        return self._format_slot\n",
        "target_code_len": 514,
        "diff_format": "@@ -26,50 +94,21 @@\n \n-    '''\n-\n-    ### CLASS VARIABLES ###\n-\n-    __slots__ = (\n-        '_context',\n-        )\n-\n-    _format_slot = 'closing'\n-\n-    _time_orientation = Right\n-\n-    ### INITIALIZER ##\n-\n-    def __init__(self):\n-        self._context = 'Staff'\n-\n-    ### PRIVATE METHODS ###\n-\n-    def _get_lilypond_format(self):\n-        return r'\\break'\n-\n-    def _get_lilypond_format_bundle(self, component=None):\n-        import abjad\n-        bundle = abjad.LilyPondFormatBundle()\n-        bundle.after.commands.append(self._get_lilypond_format())\n-        return bundle\n-\n-    ### PUBLIC PROPERTIES ###\n-\n-    @property\n-    def context(self):\n-        r'''Gets default context of system break indicator.\n-\n         ..  container:: example\n \n-            Default system break:\n+            Formats before leaf like this:\n \n-            >>> break_ = abjad.SystemBreak()\n-            >>> break_.context\n-            'Staff'\n+            >>> staff = abjad.Staff(\"c'4 d'4 e'4 f'4\")\n+            >>> break_ = abjad.LineBreak(format_slot='before')\n+            >>> abjad.attach(break_, staff[0])\n+            >>> abjad.show(staff) # doctest: +SKIP\n \n-        ..  todo:: Make system breaks score-contexted.\n+            >>> abjad.f(staff)\n+            \\new Staff {\n+                \\break\n+                c'4\n+                d'4\n+                e'4\n+                f'4\n+            }\n \n-        Returns staff (but should return score).\n-\n-        Returns context or string.\n         '''\n-        return self._context\n+        return self._format_slot\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n    ### CLASS VARIABLES ###\n\n    __slots__ = (\n        '_context',\n        )\n\n    _format_slot = 'closing'\n\n    _time_orientation = Right\n\n    ### INITIALIZER ##\n\n    def __init__(self):\n        <IND>self._context = 'Staff'\n\n    ### PRIVATE METHODS ###\n\n    <DED>def _get_lilypond_format(self):\n        <IND>return r'\\break'\n\n    <DED>def _get_lilypond_format_bundle(self, component=None):\n        <IND>import abjad\n        bundle = abjad.LilyPondFormatBundle()\n        bundle.after.commands.append(self._get_lilypond_format())\n        return bundle\n\n    ### PUBLIC PROPERTIES ###\n\n    <DED>@property\n    def context(self):\n        <IND>r'''Gets default context of system break indicator.\n\n        ..  container:: example\n\n            Default system break:\n\n            >>> break_ = abjad.SystemBreak()\n            >>> break_.context\n            'Staff'\n\n        ..  todo:: Make system breaks score-contexted.\n\n        Returns staff (but should return score).\n\n        Returns context or string.\n        '''\n        return self._context\n",
        "target_code_with_indent": "\n        return self._format_slot\n"
      }
    ]
  }
]