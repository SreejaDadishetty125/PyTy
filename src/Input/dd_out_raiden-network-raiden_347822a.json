[
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:535:12 Incompatible parameter type [6]: Expected `HashTimeLockState` for 2nd parameter `lock` to call `is_lock_expired` but got `typing.Union[HashTimeLockState, UnlockPartialProofState]`.",
    "message": " Expected `HashTimeLockState` for 2nd parameter `lock` to call `is_lock_expired` but got `typing.Union[HashTimeLockState, UnlockPartialProofState]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 535,
    "warning_line": "            lock=lock,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if not lock:\n        lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n\n",
        "source_code_len": 107,
        "target_code": "    if not lock:\n        partial_lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n        if partial_lock:\n            lock = partial_lock.lock\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -490,3 +493,5 @@\n     if not lock:\n-        lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n+        partial_lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n+        if partial_lock:\n+            lock = partial_lock.lock\n \n",
        "source_code_with_indent": "    if not lock:\n        <IND>lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if not lock:\n        <IND>partial_lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n        if partial_lock:\n            <IND>lock = partial_lock.lock\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:537:72 Incompatible parameter type [6]: Expected `HashTimeLockState` for 1st positional only parameter to call `get_receiver_expiration_threshold` but got `typing.Union[HashTimeLockState, UnlockPartialProofState]`.",
    "message": " Expected `HashTimeLockState` for 1st positional only parameter to call `get_receiver_expiration_threshold` but got `typing.Union[HashTimeLockState, UnlockPartialProofState]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 537,
    "warning_line": "            lock_expiration_threshold=get_receiver_expiration_threshold(lock),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if not lock:\n        lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n\n",
        "source_code_len": 107,
        "target_code": "    if not lock:\n        partial_lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n        if partial_lock:\n            lock = partial_lock.lock\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -490,3 +493,5 @@\n     if not lock:\n-        lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n+        partial_lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n+        if partial_lock:\n+            lock = partial_lock.lock\n \n",
        "source_code_with_indent": "    if not lock:\n        <IND>lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if not lock:\n        <IND>partial_lock = channel_state.partner_state.secrethashes_to_unlockedlocks.get(secrethash)\n        if partial_lock:\n            <IND>lock = partial_lock.lock\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:837:4 Incompatible return type [7]: Expected `TokenAmount` but got `typing.Union[PaymentWithFeeAmount, int]`.",
    "message": " Expected `TokenAmount` but got `typing.Union[PaymentWithFeeAmount, int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 837,
    "warning_line": "    return sum(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_amount_unclaimed_onchain(end_state: NettingChannelEndState) -> TokenAmount:\n    return sum(\n        unlock.lock.amount\n        for unlock in end_state.secrethashes_to_onchain_unlockedlocks.values()\n    )\n\n",
        "source_code_len": 213,
        "target_code": "def get_amount_unclaimed_onchain(end_state: NettingChannelEndState) -> TokenAmount:\n    return TokenAmount(sum(\n        unlock.lock.amount\n        for unlock in end_state.secrethashes_to_onchain_unlockedlocks.values()\n    ))\n\n",
        "target_code_len": 226,
        "diff_format": "@@ -836,6 +841,6 @@\n def get_amount_unclaimed_onchain(end_state: NettingChannelEndState) -> TokenAmount:\n-    return sum(\n+    return TokenAmount(sum(\n         unlock.lock.amount\n         for unlock in end_state.secrethashes_to_onchain_unlockedlocks.values()\n-    )\n+    ))\n \n",
        "source_code_with_indent": "<DED>def get_amount_unclaimed_onchain(end_state: NettingChannelEndState) -> TokenAmount:\n    <IND>return sum(\n        unlock.lock.amount\n        for unlock in end_state.secrethashes_to_onchain_unlockedlocks.values()\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def get_amount_unclaimed_onchain(end_state: NettingChannelEndState) -> TokenAmount:\n    <IND>return TokenAmount(sum(\n        unlock.lock.amount\n        for unlock in end_state.secrethashes_to_onchain_unlockedlocks.values()\n    ))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:961:4 Incompatible return type [7]: Expected `TokenAmount` but got `int`.",
    "message": " Expected `TokenAmount` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 961,
    "warning_line": "    return min(overflow_limit, distributable)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    return min(overflow_limit, distributable)\n\n",
        "source_code_len": 48,
        "target_code": "\n    return TokenAmount(min(overflow_limit, distributable))\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -960,3 +966,3 @@\n \n-    return min(overflow_limit, distributable)\n+    return TokenAmount(min(overflow_limit, distributable))\n \n",
        "source_code_with_indent": "\n    return min(overflow_limit, distributable)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    return TokenAmount(min(overflow_limit, distributable))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:974:8 Incompatible return type [7]: Expected `MerkleTreeLeaves` but got `None`.",
    "message": " Expected `MerkleTreeLeaves` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 974,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    InitiatorAddress,\n    List,\n",
        "source_code_len": 32,
        "target_code": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_len": 47,
        "diff_format": "@@ -91,2 +91,3 @@\n     InitiatorAddress,\n+    Keccak256,\n     List,\n",
        "source_code_with_indent": "    InitiatorAddress,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Tuple,\n)\n",
        "source_code_len": 13,
        "target_code": "    Tuple,\n    cast,\n)\n",
        "target_code_len": 23,
        "diff_format": "@@ -109,2 +109,3 @@\n     Tuple,\n+    cast,\n )\n",
        "source_code_with_indent": "    Tuple,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Tuple,\n    cast,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        end_state: NettingChannelEndState,\n) -> MerkleTreeLeaves:\n    \"\"\" Unlock proof for an entire merkle tree of pending locks\n",
        "source_code_len": 130,
        "target_code": "        end_state: NettingChannelEndState,\n) -> Optional[MerkleTreeLeaves]:\n    \"\"\" Unlock proof for an entire merkle tree of pending locks\n",
        "target_code_len": 140,
        "diff_format": "@@ -965,3 +971,3 @@\n         end_state: NettingChannelEndState,\n-) -> MerkleTreeLeaves:\n+) -> Optional[MerkleTreeLeaves]:\n     \"\"\" Unlock proof for an entire merkle tree of pending locks\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        end_state: NettingChannelEndState,\n) -> MerkleTreeLeaves:\n    <IND>",
        "target_code_with_indent": "        end_state: NettingChannelEndState,\n) -> Optional[MerkleTreeLeaves]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    return ordered_locks\n\n",
        "source_code_len": 27,
        "target_code": "\n    # Not sure why the cast is needed here. The error was:\n    # Incompatible return value type\n    # (got \"List[HashTimeLockState]\", expected \"Optional[MerkleTreeLeaves]\")\n    return cast(MerkleTreeLeaves, ordered_locks)\n\n",
        "target_code_len": 224,
        "diff_format": "@@ -994,3 +1000,6 @@\n \n-    return ordered_locks\n+    # Not sure why the cast is needed here. The error was:\n+    # Incompatible return value type\n+    # (got \"List[HashTimeLockState]\", expected \"Optional[MerkleTreeLeaves]\")\n+    return cast(MerkleTreeLeaves, ordered_locks)\n \n",
        "source_code_with_indent": "\n    return ordered_locks\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # Not sure why the cast is needed here. The error was:\n    # Incompatible return value type\n    # (got \"List[HashTimeLockState]\", expected \"Optional[MerkleTreeLeaves]\")\n    return cast(MerkleTreeLeaves, ordered_locks)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_len": 150,
        "target_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -1150,3 +1159,3 @@\n     # forcing bytes because ethereum.abi doesn't work with bytearray\n-    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n+    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n \n",
        "source_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_len": 119,
        "target_code": "        leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_len": 130,
        "diff_format": "@@ -1170,3 +1179,3 @@\n         leaves = list(leaves)\n-        leaves.append(lockhash)\n+        leaves.append(Keccak256(lockhash))\n         result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_len": 63,
        "target_code": "        leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -1186,3 +1195,3 @@\n         leaves = list(leaves)\n-        leaves.remove(lockhash)\n+        leaves.remove(Keccak256(lockhash))\n \n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:995:4 Incompatible return type [7]: Expected `MerkleTreeLeaves` but got `typing.List[typing.Any]`.",
    "message": " Expected `MerkleTreeLeaves` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 995,
    "warning_line": "    return ordered_locks",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    InitiatorAddress,\n    List,\n",
        "source_code_len": 32,
        "target_code": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_len": 47,
        "diff_format": "@@ -91,2 +91,3 @@\n     InitiatorAddress,\n+    Keccak256,\n     List,\n",
        "source_code_with_indent": "    InitiatorAddress,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Tuple,\n)\n",
        "source_code_len": 13,
        "target_code": "    Tuple,\n    cast,\n)\n",
        "target_code_len": 23,
        "diff_format": "@@ -109,2 +109,3 @@\n     Tuple,\n+    cast,\n )\n",
        "source_code_with_indent": "    Tuple,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Tuple,\n    cast,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    return ordered_locks\n\n",
        "source_code_len": 27,
        "target_code": "\n    # Not sure why the cast is needed here. The error was:\n    # Incompatible return value type\n    # (got \"List[HashTimeLockState]\", expected \"Optional[MerkleTreeLeaves]\")\n    return cast(MerkleTreeLeaves, ordered_locks)\n\n",
        "target_code_len": 224,
        "diff_format": "@@ -994,3 +1000,6 @@\n \n-    return ordered_locks\n+    # Not sure why the cast is needed here. The error was:\n+    # Incompatible return value type\n+    # (got \"List[HashTimeLockState]\", expected \"Optional[MerkleTreeLeaves]\")\n+    return cast(MerkleTreeLeaves, ordered_locks)\n \n",
        "source_code_with_indent": "\n    return ordered_locks\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # Not sure why the cast is needed here. The error was:\n    # Incompatible return value type\n    # (got \"List[HashTimeLockState]\", expected \"Optional[MerkleTreeLeaves]\")\n    return cast(MerkleTreeLeaves, ordered_locks)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_len": 150,
        "target_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -1150,3 +1159,3 @@\n     # forcing bytes because ethereum.abi doesn't work with bytearray\n-    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n+    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n \n",
        "source_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_len": 119,
        "target_code": "        leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_len": 130,
        "diff_format": "@@ -1170,3 +1179,3 @@\n         leaves = list(leaves)\n-        leaves.append(lockhash)\n+        leaves.append(Keccak256(lockhash))\n         result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_len": 63,
        "target_code": "        leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -1186,3 +1195,3 @@\n         leaves = list(leaves)\n-        leaves.remove(lockhash)\n+        leaves.remove(Keccak256(lockhash))\n \n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1151:65 Incompatible parameter type [6]: Expected `raiden.utils.typing.Keccak256` for 2nd positional only parameter to call `compute_merkleproof_for` but got `LockHash`.",
    "message": " Expected `raiden.utils.typing.Keccak256` for 2nd positional only parameter to call `compute_merkleproof_for` but got `LockHash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1151,
    "warning_line": "    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    InitiatorAddress,\n    List,\n",
        "source_code_len": 32,
        "target_code": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_len": 47,
        "diff_format": "@@ -91,2 +91,3 @@\n     InitiatorAddress,\n+    Keccak256,\n     List,\n",
        "source_code_with_indent": "    InitiatorAddress,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_len": 150,
        "target_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -1150,3 +1159,3 @@\n     # forcing bytes because ethereum.abi doesn't work with bytearray\n-    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n+    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n \n",
        "source_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_len": 119,
        "target_code": "        leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_len": 130,
        "diff_format": "@@ -1170,3 +1179,3 @@\n         leaves = list(leaves)\n-        leaves.append(lockhash)\n+        leaves.append(Keccak256(lockhash))\n         result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_len": 63,
        "target_code": "        leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -1186,3 +1195,3 @@\n         leaves = list(leaves)\n-        leaves.remove(lockhash)\n+        leaves.remove(Keccak256(lockhash))\n \n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1171:22 Incompatible parameter type [6]: Expected `raiden.utils.typing.Keccak256` for 1st positional only parameter to call `list.append` but got `LockHash`.",
    "message": " Expected `raiden.utils.typing.Keccak256` for 1st positional only parameter to call `list.append` but got `LockHash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1171,
    "warning_line": "        leaves.append(lockhash)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    InitiatorAddress,\n    List,\n",
        "source_code_len": 32,
        "target_code": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_len": 47,
        "diff_format": "@@ -91,2 +91,3 @@\n     InitiatorAddress,\n+    Keccak256,\n     List,\n",
        "source_code_with_indent": "    InitiatorAddress,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_len": 150,
        "target_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -1150,3 +1159,3 @@\n     # forcing bytes because ethereum.abi doesn't work with bytearray\n-    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n+    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n \n",
        "source_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_len": 119,
        "target_code": "        leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_len": 130,
        "diff_format": "@@ -1170,3 +1179,3 @@\n         leaves = list(leaves)\n-        leaves.append(lockhash)\n+        leaves.append(Keccak256(lockhash))\n         result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_len": 63,
        "target_code": "        leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -1186,3 +1195,3 @@\n         leaves = list(leaves)\n-        leaves.remove(lockhash)\n+        leaves.remove(Keccak256(lockhash))\n \n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1187:22 Incompatible parameter type [6]: Expected `raiden.utils.typing.Keccak256` for 1st positional only parameter to call `list.remove` but got `LockHash`.",
    "message": " Expected `raiden.utils.typing.Keccak256` for 1st positional only parameter to call `list.remove` but got `LockHash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1187,
    "warning_line": "        leaves.remove(lockhash)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    InitiatorAddress,\n    List,\n",
        "source_code_len": 32,
        "target_code": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_len": 47,
        "diff_format": "@@ -91,2 +91,3 @@\n     InitiatorAddress,\n+    Keccak256,\n     List,\n",
        "source_code_with_indent": "    InitiatorAddress,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    InitiatorAddress,\n    Keccak256,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_len": 150,
        "target_code": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -1150,3 +1159,3 @@\n     # forcing bytes because ethereum.abi doesn't work with bytearray\n-    merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n+    merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n \n",
        "source_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, lock.lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # forcing bytes because ethereum.abi doesn't work with bytearray\n    <IND>merkle_proof = compute_merkleproof_for(end_state.merkletree, Keccak256(lock.lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_len": 119,
        "target_code": "        leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_len": 130,
        "diff_format": "@@ -1170,3 +1179,3 @@\n         leaves = list(leaves)\n-        leaves.append(lockhash)\n+        leaves.append(Keccak256(lockhash))\n         result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(lockhash)\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.append(Keccak256(lockhash))\n        result = MerkleTreeState(compute_layers(leaves))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_len": 63,
        "target_code": "        leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -1186,3 +1195,3 @@\n         leaves = list(leaves)\n-        leaves.remove(lockhash)\n+        leaves.remove(Keccak256(lockhash))\n \n",
        "source_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(lockhash)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>leaves = list(leaves)\n        leaves.remove(Keccak256(lockhash))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1248:8 Incompatible parameter type [6]: Expected `TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `int`.",
    "message": " Expected `TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1248,
    "warning_line": "        transferred_amount=transferred_amount,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        transferred_amount = 0\n\n",
        "source_code_len": 42,
        "target_code": "    else:\n        transferred_amount = TokenAmount(0)\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -1234,3 +1243,3 @@\n     else:\n-        transferred_amount = 0\n+        transferred_amount = TokenAmount(0)\n \n",
        "source_code_with_indent": "    <DED>else:\n        <IND>transferred_amount = 0\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>transferred_amount = TokenAmount(0)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1311:8 Incompatible parameter type [6]: Expected `TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `typing.Union[PaymentWithFeeAmount, TokenAmount]`.",
    "message": " Expected `TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `typing.Union[PaymentWithFeeAmount, TokenAmount]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1311,
    "warning_line": "        transferred_amount=transferred_amount,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if our_balance_proof:\n        transferred_amount: TokenAmount = lock.amount + our_balance_proof.transferred_amount\n    else:\n        transferred_amount = lock.amount\n\n",
        "source_code_len": 171,
        "target_code": "    if our_balance_proof:\n        transferred_amount = TokenAmount(lock.amount + our_balance_proof.transferred_amount)\n    else:\n        transferred_amount = TokenAmount(lock.amount)\n\n",
        "target_code_len": 184,
        "diff_format": "@@ -1289,5 +1298,5 @@\n     if our_balance_proof:\n-        transferred_amount: TokenAmount = lock.amount + our_balance_proof.transferred_amount\n+        transferred_amount = TokenAmount(lock.amount + our_balance_proof.transferred_amount)\n     else:\n-        transferred_amount = lock.amount\n+        transferred_amount = TokenAmount(lock.amount)\n \n",
        "source_code_with_indent": "    if our_balance_proof:\n        <IND>transferred_amount: TokenAmount = lock.amount + our_balance_proof.transferred_amount\n    <DED>else:\n        <IND>transferred_amount = lock.amount\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if our_balance_proof:\n        <IND>transferred_amount = TokenAmount(lock.amount + our_balance_proof.transferred_amount)\n    <DED>else:\n        <IND>transferred_amount = TokenAmount(lock.amount)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1380:8 Incompatible parameter type [6]: Expected `PaymentWithFeeAmount` for 4th positional only parameter to call `create_sendlockedtransfer` but got `PaymentAmount`.",
    "message": " Expected `PaymentWithFeeAmount` for 4th positional only parameter to call `create_sendlockedtransfer` but got `PaymentAmount`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1380,
    "warning_line": "        amount,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        target: TargetAddress,\n        amount: PaymentAmount,\n        message_identifier: MessageID,\n",
        "source_code_len": 101,
        "target_code": "        target: TargetAddress,\n        amount: PaymentWithFeeAmount,\n        message_identifier: MessageID,\n",
        "target_code_len": 108,
        "diff_format": "@@ -1363,3 +1372,3 @@\n         target: TargetAddress,\n-        amount: PaymentAmount,\n+        amount: PaymentWithFeeAmount,\n         message_identifier: MessageID,\n",
        "source_code_with_indent": "        target: TargetAddress,\n        amount: PaymentAmount,\n        message_identifier: MessageID,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        target: TargetAddress,\n        amount: PaymentWithFeeAmount,\n        message_identifier: MessageID,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1681:12 Incompatible parameter type [6]: Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedTransferRefund.__init__` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedTransferRefund.__init__` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1681,
    "warning_line": "            reason=msg,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        invalid_refund = EventInvalidReceivedTransferRefund(\n",
        "source_code_len": 71,
        "target_code": "    else:\n        assert msg, 'is_valid_refund should return error msg if not valid'\n        invalid_refund = EventInvalidReceivedTransferRefund(\n",
        "target_code_len": 146,
        "diff_format": "@@ -1678,2 +1690,3 @@\n     else:\n+        assert msg, 'is_valid_refund should return error msg if not valid'\n         invalid_refund = EventInvalidReceivedTransferRefund(\n",
        "source_code_with_indent": "    <DED>else:\n        <IND>invalid_refund = EventInvalidReceivedTransferRefund(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>assert msg, 'is_valid_refund should return error msg if not valid'\n        invalid_refund = EventInvalidReceivedTransferRefund(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1685:4 Incompatible return type [7]: Expected `typing.Tuple[bool, typing.List[Event], typing.Any]` but got `typing.Tuple[bool, typing.Union[typing.List[EventInvalidReceivedTransferRefund], typing.List[SendProcessed]], typing.Optional[str]]`.",
    "message": " Expected `typing.Tuple[bool, typing.List[Event], typing.Any]` but got `typing.Tuple[bool, typing.Union[typing.List[EventInvalidReceivedTransferRefund], typing.List[SendProcessed]], typing.Optional[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1685,
    "warning_line": "    return is_valid, events, msg",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ") -> EventsOrError:\n    is_valid, msg, merkletree = is_valid_refund(\n",
        "source_code_len": 69,
        "target_code": ") -> EventsOrError:\n    events: List[Event]\n    is_valid, msg, merkletree = is_valid_refund(\n",
        "target_code_len": 93,
        "diff_format": "@@ -1657,2 +1667,3 @@\n ) -> EventsOrError:\n+    events: List[Event]\n     is_valid, msg, merkletree = is_valid_refund(\n",
        "source_code_with_indent": ") -> EventsOrError:\n    <IND>is_valid, msg, merkletree = is_valid_refund(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> EventsOrError:\n    <IND>events: List[Event]\n    is_valid, msg, merkletree = is_valid_refund(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1718:12 Incompatible parameter type [6]: Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedLockExpired.__init__` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedLockExpired.__init__` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1718,
    "warning_line": "            reason=msg,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        invalid_lock_expired = EventInvalidReceivedLockExpired(\n",
        "source_code_len": 74,
        "target_code": "    else:\n        assert msg, 'is_valid_lock_expired should return error msg if not valid'\n        invalid_lock_expired = EventInvalidReceivedLockExpired(\n",
        "target_code_len": 155,
        "diff_format": "@@ -1715,2 +1729,3 @@\n     else:\n+        assert msg, 'is_valid_lock_expired should return error msg if not valid'\n         invalid_lock_expired = EventInvalidReceivedLockExpired(\n",
        "source_code_with_indent": "    <DED>else:\n        <IND>invalid_lock_expired = EventInvalidReceivedLockExpired(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>assert msg, 'is_valid_lock_expired should return error msg if not valid'\n        invalid_lock_expired = EventInvalidReceivedLockExpired(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1722:43 Incompatible parameter type [6]: Expected `typing.List[Event]` for 2nd positional only parameter to call `TransitionResult.__init__` but got `typing.Union[typing.List[EventInvalidReceivedLockExpired], typing.List[SendProcessed]]`.",
    "message": " Expected `typing.List[Event]` for 2nd positional only parameter to call `TransitionResult.__init__` but got `typing.Union[typing.List[EventInvalidReceivedLockExpired], typing.List[SendProcessed]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1722,
    "warning_line": "    return TransitionResult(channel_state, events)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    events = list()\n    if is_valid:\n        channel_state.partner_state.balance_proof = state_change.balance_proof\n",
        "source_code_len": 117,
        "target_code": "\n    events: List[Event] = list()\n    if is_valid:\n        assert merkletree, 'is_valid_lock_expired should return merkletree if valid'\n        channel_state.partner_state.balance_proof = state_change.balance_proof\n",
        "target_code_len": 215,
        "diff_format": "@@ -1701,4 +1714,5 @@\n \n-    events = list()\n+    events: List[Event] = list()\n     if is_valid:\n+        assert merkletree, 'is_valid_lock_expired should return merkletree if valid'\n         channel_state.partner_state.balance_proof = state_change.balance_proof\n",
        "source_code_with_indent": "\n    events = list()\n    if is_valid:\n        <IND>channel_state.partner_state.balance_proof = state_change.balance_proof\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    events: List[Event] = list()\n    if is_valid:\n        <IND>assert merkletree, 'is_valid_lock_expired should return merkletree if valid'\n        channel_state.partner_state.balance_proof = state_change.balance_proof\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1759:12 Incompatible parameter type [6]: Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedLockedTransfer.__init__` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedLockedTransfer.__init__` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1759,
    "warning_line": "            reason=msg,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        invalid_locked = EventInvalidReceivedLockedTransfer(\n",
        "source_code_len": 71,
        "target_code": "    else:\n        assert msg, 'is_valid_lock_expired should return error msg if not valid'\n        invalid_locked = EventInvalidReceivedLockedTransfer(\n",
        "target_code_len": 152,
        "diff_format": "@@ -1756,2 +1773,3 @@\n     else:\n+        assert msg, 'is_valid_lock_expired should return error msg if not valid'\n         invalid_locked = EventInvalidReceivedLockedTransfer(\n",
        "source_code_with_indent": "    <DED>else:\n        <IND>invalid_locked = EventInvalidReceivedLockedTransfer(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>assert msg, 'is_valid_lock_expired should return error msg if not valid'\n        invalid_locked = EventInvalidReceivedLockedTransfer(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1763:4 Incompatible return type [7]: Expected `typing.Tuple[bool, typing.List[Event], typing.Any]` but got `typing.Tuple[bool, typing.Union[typing.List[EventInvalidReceivedLockedTransfer], typing.List[SendProcessed]], typing.Optional[str]]`.",
    "message": " Expected `typing.Tuple[bool, typing.List[Event], typing.Any]` but got `typing.Tuple[bool, typing.Union[typing.List[EventInvalidReceivedLockedTransfer], typing.List[SendProcessed]], typing.Optional[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1763,
    "warning_line": "    return is_valid, events, msg",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    is_valid, msg, merkletree = is_valid_lockedtransfer(\n",
        "source_code_len": 65,
        "target_code": "    \"\"\"\n    events: List[Event]\n    is_valid, msg, merkletree = is_valid_lockedtransfer(\n",
        "target_code_len": 89,
        "diff_format": "@@ -1735,2 +1750,3 @@\n     \"\"\"\n+    events: List[Event]\n     is_valid, msg, merkletree = is_valid_lockedtransfer(\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    is_valid, msg, merkletree = is_valid_lockedtransfer(\n",
        "target_code_with_indent": "\n    events: List[Event]\n    is_valid, msg, merkletree = is_valid_lockedtransfer(\n"
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1795:12 Incompatible parameter type [6]: Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedUnlock.__init__` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `reason` to call `EventInvalidReceivedUnlock.__init__` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1795,
    "warning_line": "            reason=msg,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        invalid_unlock = EventInvalidReceivedUnlock(\n",
        "source_code_len": 63,
        "target_code": "    else:\n        assert msg, 'is_valid_unlock should return error msg if not valid'\n        invalid_unlock = EventInvalidReceivedUnlock(\n",
        "target_code_len": 138,
        "diff_format": "@@ -1792,2 +1811,3 @@\n     else:\n+        assert msg, 'is_valid_unlock should return error msg if not valid'\n         invalid_unlock = EventInvalidReceivedUnlock(\n",
        "source_code_with_indent": "    <DED>else:\n        <IND>invalid_unlock = EventInvalidReceivedUnlock(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>assert msg, 'is_valid_unlock should return error msg if not valid'\n        invalid_unlock = EventInvalidReceivedUnlock(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1816:25 Unsupported operand [58]: `+` is not supported for operand types `typing.Optional[BlockNumber]` and `raiden.utils.typing.BlockTimeout`.",
    "message": " `+` is not supported for operand types `typing.Optional[BlockNumber]` and `raiden.utils.typing.BlockTimeout`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1816,
    "warning_line": "        settlement_end = closed_block_number + channel_state.settle_timeout",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        assert channel_state.close_transaction, msg\n\n",
        "source_code_len": 53,
        "target_code": "        assert channel_state.close_transaction, msg\n        msg = 'channel get_status is STATE_CLOSED, but close_transaction block number is missing'\n        assert channel_state.close_transaction.finished_block_number, msg\n\n",
        "target_code_len": 225,
        "diff_format": "@@ -1813,2 +1833,4 @@\n         assert channel_state.close_transaction, msg\n+        msg = 'channel get_status is STATE_CLOSED, but close_transaction block number is missing'\n+        assert channel_state.close_transaction.finished_block_number, msg\n \n",
        "source_code_with_indent": "        assert channel_state.close_transaction, msg\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        assert channel_state.close_transaction, msg\n        msg = 'channel get_status is STATE_CLOSED, but close_transaction block number is missing'\n        assert channel_state.close_transaction.finished_block_number, msg\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1959:57 Incompatible parameter type [6]: Expected `Balance` for 2nd positional only parameter to call `update_contract_balance` but got `TokenAmount`.",
    "message": " Expected `Balance` for 2nd positional only parameter to call `update_contract_balance` but got `TokenAmount`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1959,
    "warning_line": "        update_contract_balance(channel_state.our_state, contract_balance)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    participant_address = deposit_transaction.participant_address\n    contract_balance = deposit_transaction.contract_balance\n\n",
        "source_code_len": 127,
        "target_code": "    participant_address = deposit_transaction.participant_address\n    contract_balance = Balance(deposit_transaction.contract_balance)\n\n",
        "target_code_len": 136,
        "diff_format": "@@ -1955,3 +1977,3 @@\n     participant_address = deposit_transaction.participant_address\n-    contract_balance = deposit_transaction.contract_balance\n+    contract_balance = Balance(deposit_transaction.contract_balance)\n \n",
        "source_code_with_indent": "    <IND>participant_address = deposit_transaction.participant_address\n    contract_balance = deposit_transaction.contract_balance\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>participant_address = deposit_transaction.participant_address\n    contract_balance = Balance(deposit_transaction.contract_balance)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1961:61 Incompatible parameter type [6]: Expected `Balance` for 2nd positional only parameter to call `update_contract_balance` but got `TokenAmount`.",
    "message": " Expected `Balance` for 2nd positional only parameter to call `update_contract_balance` but got `TokenAmount`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1961,
    "warning_line": "        update_contract_balance(channel_state.partner_state, contract_balance)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    participant_address = deposit_transaction.participant_address\n    contract_balance = deposit_transaction.contract_balance\n\n",
        "source_code_len": 127,
        "target_code": "    participant_address = deposit_transaction.participant_address\n    contract_balance = Balance(deposit_transaction.contract_balance)\n\n",
        "target_code_len": 136,
        "diff_format": "@@ -1955,3 +1977,3 @@\n     participant_address = deposit_transaction.participant_address\n-    contract_balance = deposit_transaction.contract_balance\n+    contract_balance = Balance(deposit_transaction.contract_balance)\n \n",
        "source_code_with_indent": "    <IND>participant_address = deposit_transaction.participant_address\n    contract_balance = deposit_transaction.contract_balance\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>participant_address = deposit_transaction.participant_address\n    contract_balance = Balance(deposit_transaction.contract_balance)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1976:12 Incompatible variable type [9]: channel_state is declared to have type `NettingChannelState` but is used as type `None`.",
    "message": " channel_state is declared to have type `NettingChannelState` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1976,
    "warning_line": "            channel_state = None"
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 46,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:2046:4 Incompatible return type [7]: Expected `TransitionResult[]` but got `TransitionResult`.",
    "message": " Expected `TransitionResult[]` but got `TransitionResult`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 2046,
    "warning_line": "    return iteration"
  },
  {
    "project": "raiden-network/raiden",
    "commit": "347822a32090ea30c59fe4dc437e17795bd69c22",
    "filename": "raiden/transfer/mediated_transfer/mediator.py",
    "min_patch_found": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/mediator.py:536:12 Incompatible parameter type [6]: Expected `PaymentAmount` for 4th parameter `amount` to call `channel.send_refundtransfer` but got `PaymentWithFeeAmount`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]