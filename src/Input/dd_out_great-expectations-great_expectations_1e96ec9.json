[
  {
    "project": "great-expectations/great_expectations",
    "commit": "1e96ec9c8b8be4802ff5c5a98013806881e7d37c",
    "filename": "great_expectations/data_context/types/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/data_context/types/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/data_context/types/base.py:2297:8 Incompatible attribute type [8]: Attribute `template` declared in class `RenderedAtomicValue` has type `str` but is used as type `Optional[str]`.",
    "message": " Attribute `template` declared in class `RenderedAtomicValue` has type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 2297,
    "warning_line": "        self.template: str = template",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass RenderedAtomicValueSchema(Schema):\n    class Meta:\n        unknown = INCLUDE\n\n    # for StringType\n    template = fields.String(required=False, allow_none=True)\n    params = fields.Dict(required=False, allow_none=True)\n    schema = fields.Dict(required=False, allow_none=True)\n\n    # TODO enable TableType\n    # header = fields.List(fields.Str(), required=False, allow_none=True)\n    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n\n    # TODO add VegaGraph\n\n    @post_load()\n    def create_value_obj(self, data, **kwargs):\n        return RenderedAtomicValue(**data)\n\n\nclass RenderedAtomicValue(DictDot):\n    def __init__(\n        self,\n        template: Optional[str] = None,\n        params: Optional[dict] = None,\n        schema: Optional[dict] = None,\n        # header: list = None,\n        # header_row: str = None,\n        # table: list = None,\n    ):\n        # StringType\n        self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n        # TODO enable TableType\n        # self.header: list = header\n        # self.header_row: str = header_row\n        # self.table: list = table\n\n        # TODO add VegaGraph\n\n\ndataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_len": 1337,
        "target_code": "\ndataContextConfigSchema = DataContextConfigSchema()\n",
        "target_code_len": 53,
        "diff_format": "@@ -2264,46 +2262,2 @@\n \n-class RenderedAtomicValueSchema(Schema):\n-    class Meta:\n-        unknown = INCLUDE\n-\n-    # for StringType\n-    template = fields.String(required=False, allow_none=True)\n-    params = fields.Dict(required=False, allow_none=True)\n-    schema = fields.Dict(required=False, allow_none=True)\n-\n-    # TODO enable TableType\n-    # header = fields.List(fields.Str(), required=False, allow_none=True)\n-    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n-    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n-\n-    # TODO add VegaGraph\n-\n-    @post_load()\n-    def create_value_obj(self, data, **kwargs):\n-        return RenderedAtomicValue(**data)\n-\n-\n-class RenderedAtomicValue(DictDot):\n-    def __init__(\n-        self,\n-        template: Optional[str] = None,\n-        params: Optional[dict] = None,\n-        schema: Optional[dict] = None,\n-        # header: list = None,\n-        # header_row: str = None,\n-        # table: list = None,\n-    ):\n-        # StringType\n-        self.template: str = template\n-        self.params: dict = params\n-        self.schema: dict = schema\n-\n-        # TODO enable TableType\n-        # self.header: list = header\n-        # self.header_row: str = header_row\n-        # self.table: list = table\n-\n-        # TODO add VegaGraph\n-\n-\n dataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_with_indent": "\n<DED>class RenderedAtomicValueSchema(Schema):\n    <IND>class Meta:\n        <IND>unknown = INCLUDE\n\n    # for StringType\n    <DED>template = fields.String(required=False, allow_none=True)\n    params = fields.Dict(required=False, allow_none=True)\n    schema = fields.Dict(required=False, allow_none=True)\n\n    # TODO enable TableType\n    # header = fields.List(fields.Str(), required=False, allow_none=True)\n    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n\n    # TODO add VegaGraph\n\n    @post_load()\n    def create_value_obj(self, data, **kwargs):\n        <IND>return RenderedAtomicValue(**data)\n\n\n<DED><DED>class RenderedAtomicValue(DictDot):\n    <IND>def __init__(\n        self,\n        template: Optional[str] = None,\n        params: Optional[dict] = None,\n        schema: Optional[dict] = None,\n        # header: list = None,\n        # header_row: str = None,\n        # table: list = None,\n    ):\n        # StringType\n        <IND>self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n        # TODO enable TableType\n        # self.header: list = header\n        # self.header_row: str = header_row\n        # self.table: list = table\n\n        # TODO add VegaGraph\n\n\n<DED><DED>dataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>dataContextConfigSchema = DataContextConfigSchema()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "concurrencyConfigSchema = ConcurrencyConfigSchema()\nrenderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_len": 108,
        "target_code": "concurrencyConfigSchema = ConcurrencyConfigSchema()\n",
        "target_code_len": 52,
        "diff_format": "@@ -2317,2 +2271,1 @@\n concurrencyConfigSchema = ConcurrencyConfigSchema()\n-renderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_with_indent": "concurrencyConfigSchema = ConcurrencyConfigSchema()\nrenderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "concurrencyConfigSchema = ConcurrencyConfigSchema()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "1e96ec9c8b8be4802ff5c5a98013806881e7d37c",
    "filename": "great_expectations/data_context/types/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/data_context/types/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/data_context/types/base.py:2298:8 Incompatible attribute type [8]: Attribute `params` declared in class `RenderedAtomicValue` has type `Dict[typing.Any, typing.Any]` but is used as type `Optional[Dict[typing.Any, typing.Any]]`.",
    "message": " Attribute `params` declared in class `RenderedAtomicValue` has type `Dict[typing.Any, typing.Any]` but is used as type `Optional[Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 2298,
    "warning_line": "        self.params: dict = params",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass RenderedAtomicValueSchema(Schema):\n    class Meta:\n        unknown = INCLUDE\n\n    # for StringType\n    template = fields.String(required=False, allow_none=True)\n    params = fields.Dict(required=False, allow_none=True)\n    schema = fields.Dict(required=False, allow_none=True)\n\n    # TODO enable TableType\n    # header = fields.List(fields.Str(), required=False, allow_none=True)\n    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n\n    # TODO add VegaGraph\n\n    @post_load()\n    def create_value_obj(self, data, **kwargs):\n        return RenderedAtomicValue(**data)\n\n\nclass RenderedAtomicValue(DictDot):\n    def __init__(\n        self,\n        template: Optional[str] = None,\n        params: Optional[dict] = None,\n        schema: Optional[dict] = None,\n        # header: list = None,\n        # header_row: str = None,\n        # table: list = None,\n    ):\n        # StringType\n        self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n        # TODO enable TableType\n        # self.header: list = header\n        # self.header_row: str = header_row\n        # self.table: list = table\n\n        # TODO add VegaGraph\n\n\ndataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_len": 1337,
        "target_code": "\ndataContextConfigSchema = DataContextConfigSchema()\n",
        "target_code_len": 53,
        "diff_format": "@@ -2264,46 +2262,2 @@\n \n-class RenderedAtomicValueSchema(Schema):\n-    class Meta:\n-        unknown = INCLUDE\n-\n-    # for StringType\n-    template = fields.String(required=False, allow_none=True)\n-    params = fields.Dict(required=False, allow_none=True)\n-    schema = fields.Dict(required=False, allow_none=True)\n-\n-    # TODO enable TableType\n-    # header = fields.List(fields.Str(), required=False, allow_none=True)\n-    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n-    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n-\n-    # TODO add VegaGraph\n-\n-    @post_load()\n-    def create_value_obj(self, data, **kwargs):\n-        return RenderedAtomicValue(**data)\n-\n-\n-class RenderedAtomicValue(DictDot):\n-    def __init__(\n-        self,\n-        template: Optional[str] = None,\n-        params: Optional[dict] = None,\n-        schema: Optional[dict] = None,\n-        # header: list = None,\n-        # header_row: str = None,\n-        # table: list = None,\n-    ):\n-        # StringType\n-        self.template: str = template\n-        self.params: dict = params\n-        self.schema: dict = schema\n-\n-        # TODO enable TableType\n-        # self.header: list = header\n-        # self.header_row: str = header_row\n-        # self.table: list = table\n-\n-        # TODO add VegaGraph\n-\n-\n dataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_with_indent": "\n<DED>class RenderedAtomicValueSchema(Schema):\n    <IND>class Meta:\n        <IND>unknown = INCLUDE\n\n    # for StringType\n    <DED>template = fields.String(required=False, allow_none=True)\n    params = fields.Dict(required=False, allow_none=True)\n    schema = fields.Dict(required=False, allow_none=True)\n\n    # TODO enable TableType\n    # header = fields.List(fields.Str(), required=False, allow_none=True)\n    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n\n    # TODO add VegaGraph\n\n    @post_load()\n    def create_value_obj(self, data, **kwargs):\n        <IND>return RenderedAtomicValue(**data)\n\n\n<DED><DED>class RenderedAtomicValue(DictDot):\n    <IND>def __init__(\n        self,\n        template: Optional[str] = None,\n        params: Optional[dict] = None,\n        schema: Optional[dict] = None,\n        # header: list = None,\n        # header_row: str = None,\n        # table: list = None,\n    ):\n        # StringType\n        <IND>self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n        # TODO enable TableType\n        # self.header: list = header\n        # self.header_row: str = header_row\n        # self.table: list = table\n\n        # TODO add VegaGraph\n\n\n<DED><DED>dataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>dataContextConfigSchema = DataContextConfigSchema()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "concurrencyConfigSchema = ConcurrencyConfigSchema()\nrenderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_len": 108,
        "target_code": "concurrencyConfigSchema = ConcurrencyConfigSchema()\n",
        "target_code_len": 52,
        "diff_format": "@@ -2317,2 +2271,1 @@\n concurrencyConfigSchema = ConcurrencyConfigSchema()\n-renderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_with_indent": "concurrencyConfigSchema = ConcurrencyConfigSchema()\nrenderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "concurrencyConfigSchema = ConcurrencyConfigSchema()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "1e96ec9c8b8be4802ff5c5a98013806881e7d37c",
    "filename": "great_expectations/data_context/types/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/data_context/types/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/data_context/types/base.py:2299:8 Incompatible attribute type [8]: Attribute `schema` declared in class `RenderedAtomicValue` has type `Dict[typing.Any, typing.Any]` but is used as type `Optional[Dict[typing.Any, typing.Any]]`.",
    "message": " Attribute `schema` declared in class `RenderedAtomicValue` has type `Dict[typing.Any, typing.Any]` but is used as type `Optional[Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 2299,
    "warning_line": "        self.schema: dict = schema",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass RenderedAtomicValueSchema(Schema):\n    class Meta:\n        unknown = INCLUDE\n\n    # for StringType\n    template = fields.String(required=False, allow_none=True)\n    params = fields.Dict(required=False, allow_none=True)\n    schema = fields.Dict(required=False, allow_none=True)\n\n    # TODO enable TableType\n    # header = fields.List(fields.Str(), required=False, allow_none=True)\n    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n\n    # TODO add VegaGraph\n\n    @post_load()\n    def create_value_obj(self, data, **kwargs):\n        return RenderedAtomicValue(**data)\n\n\nclass RenderedAtomicValue(DictDot):\n    def __init__(\n        self,\n        template: Optional[str] = None,\n        params: Optional[dict] = None,\n        schema: Optional[dict] = None,\n        # header: list = None,\n        # header_row: str = None,\n        # table: list = None,\n    ):\n        # StringType\n        self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n        # TODO enable TableType\n        # self.header: list = header\n        # self.header_row: str = header_row\n        # self.table: list = table\n\n        # TODO add VegaGraph\n\n\ndataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_len": 1337,
        "target_code": "\ndataContextConfigSchema = DataContextConfigSchema()\n",
        "target_code_len": 53,
        "diff_format": "@@ -2264,46 +2262,2 @@\n \n-class RenderedAtomicValueSchema(Schema):\n-    class Meta:\n-        unknown = INCLUDE\n-\n-    # for StringType\n-    template = fields.String(required=False, allow_none=True)\n-    params = fields.Dict(required=False, allow_none=True)\n-    schema = fields.Dict(required=False, allow_none=True)\n-\n-    # TODO enable TableType\n-    # header = fields.List(fields.Str(), required=False, allow_none=True)\n-    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n-    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n-\n-    # TODO add VegaGraph\n-\n-    @post_load()\n-    def create_value_obj(self, data, **kwargs):\n-        return RenderedAtomicValue(**data)\n-\n-\n-class RenderedAtomicValue(DictDot):\n-    def __init__(\n-        self,\n-        template: Optional[str] = None,\n-        params: Optional[dict] = None,\n-        schema: Optional[dict] = None,\n-        # header: list = None,\n-        # header_row: str = None,\n-        # table: list = None,\n-    ):\n-        # StringType\n-        self.template: str = template\n-        self.params: dict = params\n-        self.schema: dict = schema\n-\n-        # TODO enable TableType\n-        # self.header: list = header\n-        # self.header_row: str = header_row\n-        # self.table: list = table\n-\n-        # TODO add VegaGraph\n-\n-\n dataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_with_indent": "\n<DED>class RenderedAtomicValueSchema(Schema):\n    <IND>class Meta:\n        <IND>unknown = INCLUDE\n\n    # for StringType\n    <DED>template = fields.String(required=False, allow_none=True)\n    params = fields.Dict(required=False, allow_none=True)\n    schema = fields.Dict(required=False, allow_none=True)\n\n    # TODO enable TableType\n    # header = fields.List(fields.Str(), required=False, allow_none=True)\n    # header_row = fields.List(fields.Str(), required=False, allow_none=True)\n    # table: fields.List(fields.List(fields.Str()), required=False, allow_none=True)\n\n    # TODO add VegaGraph\n\n    @post_load()\n    def create_value_obj(self, data, **kwargs):\n        <IND>return RenderedAtomicValue(**data)\n\n\n<DED><DED>class RenderedAtomicValue(DictDot):\n    <IND>def __init__(\n        self,\n        template: Optional[str] = None,\n        params: Optional[dict] = None,\n        schema: Optional[dict] = None,\n        # header: list = None,\n        # header_row: str = None,\n        # table: list = None,\n    ):\n        # StringType\n        <IND>self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n        # TODO enable TableType\n        # self.header: list = header\n        # self.header_row: str = header_row\n        # self.table: list = table\n\n        # TODO add VegaGraph\n\n\n<DED><DED>dataContextConfigSchema = DataContextConfigSchema()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>dataContextConfigSchema = DataContextConfigSchema()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "concurrencyConfigSchema = ConcurrencyConfigSchema()\nrenderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_len": 108,
        "target_code": "concurrencyConfigSchema = ConcurrencyConfigSchema()\n",
        "target_code_len": 52,
        "diff_format": "@@ -2317,2 +2271,1 @@\n concurrencyConfigSchema = ConcurrencyConfigSchema()\n-renderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_with_indent": "concurrencyConfigSchema = ConcurrencyConfigSchema()\nrenderedAtomicValueSchema = RenderedAtomicValueSchema()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "concurrencyConfigSchema = ConcurrencyConfigSchema()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]