[
  {
    "project": "napari/napari",
    "commit": "0b4231c6ba3c2989375ba237e62677ddf6f3a28f",
    "filename": "napari/utils/settings/_defaults.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/napari-napari/napari/utils/settings/_defaults.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "napari/utils/settings/_defaults.py:48:4 Incompatible attribute type [8]: Attribute `font_plain_family` declared in class `ApplicationSettings` has type `str` but is used as type `None`.",
    "message": " Attribute `font_plain_family` declared in class `ApplicationSettings` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 48,
    "warning_line": "    font_plain_family: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..notifications import NotificationSeverity\n\n",
        "source_code_len": 50,
        "target_code": "from ..notifications import NotificationSeverity\nfrom ..theme import available_themes\n\n\nclass Theme(str):\n    \"\"\"\n    Custom theme type to dynamically load all installed themes.\n    \"\"\"\n\n    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n\n    @classmethod\n    def __get_validators__(cls):\n        yield cls.validate\n\n    @classmethod\n    def __modify_schema__(cls, field_schema):\n        field_schema.update(enum=available_themes())\n\n    @classmethod\n    def validate(cls, v):\n        if not isinstance(v, str):\n            raise ValueError('must be a string')\n\n        value = v.lower()\n        themes = available_themes()\n        if value not in available_themes():\n            raise ValueError(f'must be one of {\", \".join(themes)}')\n\n        return value\n\n",
        "target_code_len": 781,
        "diff_format": "@@ -10,2 +10,31 @@\n from ..notifications import NotificationSeverity\n+from ..theme import available_themes\n+\n+\n+class Theme(str):\n+    \"\"\"\n+    Custom theme type to dynamically load all installed themes.\n+    \"\"\"\n+\n+    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n+\n+    @classmethod\n+    def __get_validators__(cls):\n+        yield cls.validate\n+\n+    @classmethod\n+    def __modify_schema__(cls, field_schema):\n+        field_schema.update(enum=available_themes())\n+\n+    @classmethod\n+    def validate(cls, v):\n+        if not isinstance(v, str):\n+            raise ValueError('must be a string')\n+\n+        value = v.lower()\n+        themes = available_themes()\n+        if value not in available_themes():\n+            raise ValueError(f'must be one of {\", \".join(themes)}')\n+\n+        return value\n \n",
        "source_code_with_indent": "from ..notifications import NotificationSeverity\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..notifications import NotificationSeverity\nfrom ..theme import available_themes\n\n\nclass Theme(str):\n    <IND>\"\"\"\n    Custom theme type to dynamically load all installed themes.\n    \"\"\"\n\n    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n\n    @classmethod\n    def __get_validators__(cls):\n        <IND>yield cls.validate\n\n    <DED>@classmethod\n    def __modify_schema__(cls, field_schema):\n        <IND>field_schema.update(enum=available_themes())\n\n    <DED>@classmethod\n    def validate(cls, v):\n        <IND>if not isinstance(v, str):\n            <IND>raise ValueError('must be a string')\n\n        <DED>value = v.lower()\n        themes = available_themes()\n        if value not in available_themes():\n            <IND>raise ValueError(f'must be one of {\", \".join(themes)}')\n\n        <DED>return value\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # 3. You don't need to touch this value if you're just adding a new option\n    schema_version = (0, 1, 0)\n    # Python\n    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n    # UI Elements\n    highlight_thickness: int = 1\n    theme: ThemeChoice = ThemeChoice.dark\n    # Startup\n    opt_in_telemetry: bool = Field(\n        False, description=\"Check to enable telemetry measurements\"\n    )\n    first_time: bool = True\n    # Fonts\n    font_plain_family: str = None\n    font_plain_size: int = None\n    font_rich_family: str = None\n    font_rich_size: int = 12\n    # Window state, geometry and position\n",
        "source_code_len": 608,
        "target_code": "    # 3. You don't need to touch this value if you're just adding a new option\n\n    schema_version = (0, 1, 0)\n\n    theme: Theme = Field(\n        \"dark\",\n        description=\"Theme selection.\",\n    )\n\n    first_time: bool = True\n\n    # Window state, geometry and position\n",
        "target_code_len": 272,
        "diff_format": "@@ -35,18 +57,12 @@\n     # 3. You don't need to touch this value if you're just adding a new option\n+\n     schema_version = (0, 1, 0)\n-    # Python\n-    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n-    # UI Elements\n-    highlight_thickness: int = 1\n-    theme: ThemeChoice = ThemeChoice.dark\n-    # Startup\n-    opt_in_telemetry: bool = Field(\n-        False, description=\"Check to enable telemetry measurements\"\n+\n+    theme: Theme = Field(\n+        \"dark\",\n+        description=\"Theme selection.\",\n     )\n+\n     first_time: bool = True\n-    # Fonts\n-    font_plain_family: str = None\n-    font_plain_size: int = None\n-    font_rich_family: str = None\n-    font_rich_size: int = 12\n+\n     # Window state, geometry and position\n",
        "source_code_with_indent": "    # 3. You don't need to touch this value if you're just adding a new option\n    schema_version = (0, 1, 0)\n    # Python\n    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n    # UI Elements\n    highlight_thickness: int = 1\n    theme: ThemeChoice = ThemeChoice.dark\n    # Startup\n    opt_in_telemetry: bool = Field(\n        False, description=\"Check to enable telemetry measurements\"\n    )\n    first_time: bool = True\n    # Fonts\n    font_plain_family: str = None\n    font_plain_size: int = None\n    font_rich_family: str = None\n    font_rich_size: int = 12\n    # Window state, geometry and position\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # 3. You don't need to touch this value if you're just adding a new option\n\n    schema_version = (0, 1, 0)\n\n    theme: Theme = Field(\n        \"dark\",\n        description=\"Theme selection.\",\n    )\n\n    first_time: bool = True\n\n    # Window state, geometry and position\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "napari/napari",
    "commit": "0b4231c6ba3c2989375ba237e62677ddf6f3a28f",
    "filename": "napari/utils/settings/_defaults.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/napari-napari/napari/utils/settings/_defaults.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "napari/utils/settings/_defaults.py:49:4 Incompatible attribute type [8]: Attribute `font_plain_size` declared in class `ApplicationSettings` has type `int` but is used as type `None`.",
    "message": " Attribute `font_plain_size` declared in class `ApplicationSettings` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 49,
    "warning_line": "    font_plain_size: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..notifications import NotificationSeverity\n\n",
        "source_code_len": 50,
        "target_code": "from ..notifications import NotificationSeverity\nfrom ..theme import available_themes\n\n\nclass Theme(str):\n    \"\"\"\n    Custom theme type to dynamically load all installed themes.\n    \"\"\"\n\n    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n\n    @classmethod\n    def __get_validators__(cls):\n        yield cls.validate\n\n    @classmethod\n    def __modify_schema__(cls, field_schema):\n        field_schema.update(enum=available_themes())\n\n    @classmethod\n    def validate(cls, v):\n        if not isinstance(v, str):\n            raise ValueError('must be a string')\n\n        value = v.lower()\n        themes = available_themes()\n        if value not in available_themes():\n            raise ValueError(f'must be one of {\", \".join(themes)}')\n\n        return value\n\n",
        "target_code_len": 781,
        "diff_format": "@@ -10,2 +10,31 @@\n from ..notifications import NotificationSeverity\n+from ..theme import available_themes\n+\n+\n+class Theme(str):\n+    \"\"\"\n+    Custom theme type to dynamically load all installed themes.\n+    \"\"\"\n+\n+    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n+\n+    @classmethod\n+    def __get_validators__(cls):\n+        yield cls.validate\n+\n+    @classmethod\n+    def __modify_schema__(cls, field_schema):\n+        field_schema.update(enum=available_themes())\n+\n+    @classmethod\n+    def validate(cls, v):\n+        if not isinstance(v, str):\n+            raise ValueError('must be a string')\n+\n+        value = v.lower()\n+        themes = available_themes()\n+        if value not in available_themes():\n+            raise ValueError(f'must be one of {\", \".join(themes)}')\n+\n+        return value\n \n",
        "source_code_with_indent": "from ..notifications import NotificationSeverity\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..notifications import NotificationSeverity\nfrom ..theme import available_themes\n\n\nclass Theme(str):\n    <IND>\"\"\"\n    Custom theme type to dynamically load all installed themes.\n    \"\"\"\n\n    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n\n    @classmethod\n    def __get_validators__(cls):\n        <IND>yield cls.validate\n\n    <DED>@classmethod\n    def __modify_schema__(cls, field_schema):\n        <IND>field_schema.update(enum=available_themes())\n\n    <DED>@classmethod\n    def validate(cls, v):\n        <IND>if not isinstance(v, str):\n            <IND>raise ValueError('must be a string')\n\n        <DED>value = v.lower()\n        themes = available_themes()\n        if value not in available_themes():\n            <IND>raise ValueError(f'must be one of {\", \".join(themes)}')\n\n        <DED>return value\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # 3. You don't need to touch this value if you're just adding a new option\n    schema_version = (0, 1, 0)\n    # Python\n    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n    # UI Elements\n    highlight_thickness: int = 1\n    theme: ThemeChoice = ThemeChoice.dark\n    # Startup\n    opt_in_telemetry: bool = Field(\n        False, description=\"Check to enable telemetry measurements\"\n    )\n    first_time: bool = True\n    # Fonts\n    font_plain_family: str = None\n    font_plain_size: int = None\n    font_rich_family: str = None\n    font_rich_size: int = 12\n    # Window state, geometry and position\n",
        "source_code_len": 608,
        "target_code": "    # 3. You don't need to touch this value if you're just adding a new option\n\n    schema_version = (0, 1, 0)\n\n    theme: Theme = Field(\n        \"dark\",\n        description=\"Theme selection.\",\n    )\n\n    first_time: bool = True\n\n    # Window state, geometry and position\n",
        "target_code_len": 272,
        "diff_format": "@@ -35,18 +57,12 @@\n     # 3. You don't need to touch this value if you're just adding a new option\n+\n     schema_version = (0, 1, 0)\n-    # Python\n-    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n-    # UI Elements\n-    highlight_thickness: int = 1\n-    theme: ThemeChoice = ThemeChoice.dark\n-    # Startup\n-    opt_in_telemetry: bool = Field(\n-        False, description=\"Check to enable telemetry measurements\"\n+\n+    theme: Theme = Field(\n+        \"dark\",\n+        description=\"Theme selection.\",\n     )\n+\n     first_time: bool = True\n-    # Fonts\n-    font_plain_family: str = None\n-    font_plain_size: int = None\n-    font_rich_family: str = None\n-    font_rich_size: int = 12\n+\n     # Window state, geometry and position\n",
        "source_code_with_indent": "    # 3. You don't need to touch this value if you're just adding a new option\n    schema_version = (0, 1, 0)\n    # Python\n    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n    # UI Elements\n    highlight_thickness: int = 1\n    theme: ThemeChoice = ThemeChoice.dark\n    # Startup\n    opt_in_telemetry: bool = Field(\n        False, description=\"Check to enable telemetry measurements\"\n    )\n    first_time: bool = True\n    # Fonts\n    font_plain_family: str = None\n    font_plain_size: int = None\n    font_rich_family: str = None\n    font_rich_size: int = 12\n    # Window state, geometry and position\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # 3. You don't need to touch this value if you're just adding a new option\n\n    schema_version = (0, 1, 0)\n\n    theme: Theme = Field(\n        \"dark\",\n        description=\"Theme selection.\",\n    )\n\n    first_time: bool = True\n\n    # Window state, geometry and position\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "napari/napari",
    "commit": "0b4231c6ba3c2989375ba237e62677ddf6f3a28f",
    "filename": "napari/utils/settings/_defaults.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/napari-napari/napari/utils/settings/_defaults.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "napari/utils/settings/_defaults.py:50:4 Incompatible attribute type [8]: Attribute `font_rich_family` declared in class `ApplicationSettings` has type `str` but is used as type `None`.",
    "message": " Attribute `font_rich_family` declared in class `ApplicationSettings` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 50,
    "warning_line": "    font_rich_family: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..notifications import NotificationSeverity\n\n",
        "source_code_len": 50,
        "target_code": "from ..notifications import NotificationSeverity\nfrom ..theme import available_themes\n\n\nclass Theme(str):\n    \"\"\"\n    Custom theme type to dynamically load all installed themes.\n    \"\"\"\n\n    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n\n    @classmethod\n    def __get_validators__(cls):\n        yield cls.validate\n\n    @classmethod\n    def __modify_schema__(cls, field_schema):\n        field_schema.update(enum=available_themes())\n\n    @classmethod\n    def validate(cls, v):\n        if not isinstance(v, str):\n            raise ValueError('must be a string')\n\n        value = v.lower()\n        themes = available_themes()\n        if value not in available_themes():\n            raise ValueError(f'must be one of {\", \".join(themes)}')\n\n        return value\n\n",
        "target_code_len": 781,
        "diff_format": "@@ -10,2 +10,31 @@\n from ..notifications import NotificationSeverity\n+from ..theme import available_themes\n+\n+\n+class Theme(str):\n+    \"\"\"\n+    Custom theme type to dynamically load all installed themes.\n+    \"\"\"\n+\n+    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n+\n+    @classmethod\n+    def __get_validators__(cls):\n+        yield cls.validate\n+\n+    @classmethod\n+    def __modify_schema__(cls, field_schema):\n+        field_schema.update(enum=available_themes())\n+\n+    @classmethod\n+    def validate(cls, v):\n+        if not isinstance(v, str):\n+            raise ValueError('must be a string')\n+\n+        value = v.lower()\n+        themes = available_themes()\n+        if value not in available_themes():\n+            raise ValueError(f'must be one of {\", \".join(themes)}')\n+\n+        return value\n \n",
        "source_code_with_indent": "from ..notifications import NotificationSeverity\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..notifications import NotificationSeverity\nfrom ..theme import available_themes\n\n\nclass Theme(str):\n    <IND>\"\"\"\n    Custom theme type to dynamically load all installed themes.\n    \"\"\"\n\n    # https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types\n\n    @classmethod\n    def __get_validators__(cls):\n        <IND>yield cls.validate\n\n    <DED>@classmethod\n    def __modify_schema__(cls, field_schema):\n        <IND>field_schema.update(enum=available_themes())\n\n    <DED>@classmethod\n    def validate(cls, v):\n        <IND>if not isinstance(v, str):\n            <IND>raise ValueError('must be a string')\n\n        <DED>value = v.lower()\n        themes = available_themes()\n        if value not in available_themes():\n            <IND>raise ValueError(f'must be one of {\", \".join(themes)}')\n\n        <DED>return value\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # 3. You don't need to touch this value if you're just adding a new option\n    schema_version = (0, 1, 0)\n    # Python\n    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n    # UI Elements\n    highlight_thickness: int = 1\n    theme: ThemeChoice = ThemeChoice.dark\n    # Startup\n    opt_in_telemetry: bool = Field(\n        False, description=\"Check to enable telemetry measurements\"\n    )\n    first_time: bool = True\n    # Fonts\n    font_plain_family: str = None\n    font_plain_size: int = None\n    font_rich_family: str = None\n    font_rich_size: int = 12\n    # Window state, geometry and position\n",
        "source_code_len": 608,
        "target_code": "    # 3. You don't need to touch this value if you're just adding a new option\n\n    schema_version = (0, 1, 0)\n\n    theme: Theme = Field(\n        \"dark\",\n        description=\"Theme selection.\",\n    )\n\n    first_time: bool = True\n\n    # Window state, geometry and position\n",
        "target_code_len": 272,
        "diff_format": "@@ -35,18 +57,12 @@\n     # 3. You don't need to touch this value if you're just adding a new option\n+\n     schema_version = (0, 1, 0)\n-    # Python\n-    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n-    # UI Elements\n-    highlight_thickness: int = 1\n-    theme: ThemeChoice = ThemeChoice.dark\n-    # Startup\n-    opt_in_telemetry: bool = Field(\n-        False, description=\"Check to enable telemetry measurements\"\n+\n+    theme: Theme = Field(\n+        \"dark\",\n+        description=\"Theme selection.\",\n     )\n+\n     first_time: bool = True\n-    # Fonts\n-    font_plain_family: str = None\n-    font_plain_size: int = None\n-    font_rich_family: str = None\n-    font_rich_size: int = 12\n+\n     # Window state, geometry and position\n",
        "source_code_with_indent": "    # 3. You don't need to touch this value if you're just adding a new option\n    schema_version = (0, 1, 0)\n    # Python\n    qt_binding: QtBindingChoice = QtBindingChoice.pyside2\n    # UI Elements\n    highlight_thickness: int = 1\n    theme: ThemeChoice = ThemeChoice.dark\n    # Startup\n    opt_in_telemetry: bool = Field(\n        False, description=\"Check to enable telemetry measurements\"\n    )\n    first_time: bool = True\n    # Fonts\n    font_plain_family: str = None\n    font_plain_size: int = None\n    font_rich_family: str = None\n    font_rich_size: int = 12\n    # Window state, geometry and position\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # 3. You don't need to touch this value if you're just adding a new option\n\n    schema_version = (0, 1, 0)\n\n    theme: Theme = Field(\n        \"dark\",\n        description=\"Theme selection.\",\n    )\n\n    first_time: bool = True\n\n    # Window state, geometry and position\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]