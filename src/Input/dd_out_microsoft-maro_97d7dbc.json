[
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "examples/cim/gnn/components/actor_critic.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/cim/gnn/components/actor_critic.py:42:4 Inconsistent override [14]: `examples.cim.gnn.components.actor_critic.ActorCritic.choose_action` overrides method defined in `maro.rl.algorithms.abs_algorithm.AbsAlgorithm` inconsistently. Could not find parameter `epsilon` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/actor/abs_actor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/actor/abs_actor.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/actor/abs_actor.py:27:48 Incompatible variable type [9]: epsilon_dict is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " epsilon_dict is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "    def roll_out(self, model_dict: dict = None, epsilon_dict: dict = None, done: bool = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/agent/simple_agent_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/simple_agent_manager.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/agent/simple_agent_manager.py:45:4 Inconsistent override [14]: `maro.rl.agent.simple_agent_manager.SimpleAgentManager.choose_action` overrides method defined in `AbsAgentManager` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `maro.rl.agent.simple_agent_manager.SimpleAgentManager.choose_action` overrides method defined in `AbsAgentManager` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 45,
    "warning_line": "    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n        self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(\n            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n        )\n        self._transition_cache = {\n",
        "source_code_len": 391,
        "target_code": "\n    def choose_action(self, decision_event, snapshot_list):\n        self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(model_state)\n        self._transition_cache = {\n",
        "target_code_len": 292,
        "diff_format": "@@ -44,8 +44,6 @@\n \n-    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n+    def choose_action(self, decision_event, snapshot_list):\n         self._assert_inference_mode()\n         agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n-        model_action = self.agent_dict[agent_id].choose_action(\n-            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n-        )\n+        model_action = self.agent_dict[agent_id].choose_action(model_state)\n         self._transition_cache = {\n",
        "source_code_with_indent": "\n    <DED>def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n        <IND>self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(\n            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n        )\n        self._transition_cache = {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def choose_action(self, decision_event, snapshot_list):\n        <IND>self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(model_state)\n        self._transition_cache = {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/agent/simple_agent_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/simple_agent_manager.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/agent/simple_agent_manager.py:45:4 Inconsistent override [14]: `maro.rl.agent.simple_agent_manager.SimpleAgentManager.choose_action` overrides method defined in `AbsAgentManager` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `maro.rl.agent.simple_agent_manager.SimpleAgentManager.choose_action` overrides method defined in `AbsAgentManager` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 45,
    "warning_line": "    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n        self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(\n            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n        )\n        self._transition_cache = {\n",
        "source_code_len": 391,
        "target_code": "\n    def choose_action(self, decision_event, snapshot_list):\n        self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(model_state)\n        self._transition_cache = {\n",
        "target_code_len": 292,
        "diff_format": "@@ -44,8 +44,6 @@\n \n-    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n+    def choose_action(self, decision_event, snapshot_list):\n         self._assert_inference_mode()\n         agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n-        model_action = self.agent_dict[agent_id].choose_action(\n-            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n-        )\n+        model_action = self.agent_dict[agent_id].choose_action(model_state)\n         self._transition_cache = {\n",
        "source_code_with_indent": "\n    <DED>def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n        <IND>self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(\n            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n        )\n        self._transition_cache = {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def choose_action(self, decision_event, snapshot_list):\n        <IND>self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(model_state)\n        self._transition_cache = {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/agent/simple_agent_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/agent/simple_agent_manager.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/agent/simple_agent_manager.py:45:59 Incompatible variable type [9]: epsilon_dict is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " epsilon_dict is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 45,
    "warning_line": "    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n        self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(\n            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n        )\n        self._transition_cache = {\n",
        "source_code_len": 391,
        "target_code": "\n    def choose_action(self, decision_event, snapshot_list):\n        self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(model_state)\n        self._transition_cache = {\n",
        "target_code_len": 292,
        "diff_format": "@@ -44,8 +44,6 @@\n \n-    def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n+    def choose_action(self, decision_event, snapshot_list):\n         self._assert_inference_mode()\n         agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n-        model_action = self.agent_dict[agent_id].choose_action(\n-            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n-        )\n+        model_action = self.agent_dict[agent_id].choose_action(model_state)\n         self._transition_cache = {\n",
        "source_code_with_indent": "\n    <DED>def choose_action(self, decision_event, snapshot_list, epsilon_dict: dict = None):\n        <IND>self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(\n            model_state, epsilon_dict[agent_id] if epsilon_dict else None\n        )\n        self._transition_cache = {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def choose_action(self, decision_event, snapshot_list):\n        <IND>self._assert_inference_mode()\n        agent_id, model_state = self._state_shaper(decision_event, snapshot_list)\n        model_action = self.agent_dict[agent_id].choose_action(model_state)\n        self._transition_cache = {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/algorithms/abs_algorithm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/algorithms/abs_algorithm.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/abs_algorithm.py:18:35 Incompatible variable type [9]: epsilon is declared to have type `float` but is used as type `None`.",
    "message": " epsilon is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 18,
    "warning_line": "    def choose_action(self, state, epsilon: float = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abstractmethod\n    def choose_action(self, state, epsilon: float = None):\n        \"\"\"This method uses the underlying model(s) to compute an action from a shaped state.\n",
        "source_code_len": 173,
        "target_code": "    @abstractmethod\n    def choose_action(self, state):\n        \"\"\"This method uses the underlying model(s) to compute an action from a shaped state.\n",
        "target_code_len": 150,
        "diff_format": "@@ -17,3 +17,3 @@\n     @abstractmethod\n-    def choose_action(self, state, epsilon: float = None):\n+    def choose_action(self, state):\n         \"\"\"This method uses the underlying model(s) to compute an action from a shaped state.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@abstractmethod\n    def choose_action(self, state, epsilon: float = None):\n        <IND>",
        "target_code_with_indent": "    <DED>@abstractmethod\n    def choose_action(self, state):\n        <IND>"
      }
    ]
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/algorithms/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/algorithms/dqn.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/algorithms/dqn.py:85:47 Incompatible variable type [9]: epsilon is declared to have type `float` but is used as type `None`.",
    "message": " epsilon is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 85,
    "warning_line": "    def choose_action(self, state: np.ndarray, epsilon: float = None):"
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/dist_topologies/single_learner_multi_actor_sync_mode.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/dist_topologies/single_learner_multi_actor_sync_mode.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/dist_topologies/single_learner_multi_actor_sync_mode.py:31:39 Incompatible variable type [9]: epsilon_dict is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " epsilon_dict is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "        self, model_dict: dict = None, epsilon_dict: dict = None, done: bool = False, return_details: bool = True"
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/learner/simple_learner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/learner/simple_learner.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/learner/simple_learner.py:32:8 Incompatible variable type [9]: explorer is declared to have type `Union[typing.Dict[typing.Any, typing.Any], AbsExplorer]` but is used as type `None`.",
    "message": " explorer is declared to have type `Union[typing.Dict[typing.Any, typing.Any], AbsExplorer]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "        explorer: Union[dict, AbsExplorer] = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/learner/simple_learner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/learner/simple_learner.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/learner/simple_learner.py:64:4 Inconsistent override [14]: `maro.rl.learner.simple_learner.SimpleLearner.train` overrides method defined in `AbsLearner` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `maro.rl.learner.simple_learner.SimpleLearner.train` overrides method defined in `AbsLearner` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 64,
    "warning_line": "    def train("
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/learner/simple_learner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/learner/simple_learner.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/learner/simple_learner.py:64:4 Inconsistent override [14]: `maro.rl.learner.simple_learner.SimpleLearner.train` overrides method defined in `AbsLearner` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `maro.rl.learner.simple_learner.SimpleLearner.train` overrides method defined in `AbsLearner` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 64,
    "warning_line": "    def train("
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/learner/simple_learner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/learner/simple_learner.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/learner/simple_learner.py:65:32 Incompatible variable type [9]: early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " early_stopping_checker is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 65,
    "warning_line": "        self, max_episode: int, early_stopping_checker: Callable = None, warmup_ep: int = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/learner/simple_learner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/learner/simple_learner.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/learner/simple_learner.py:65:73 Incompatible variable type [9]: warmup_ep is declared to have type `int` but is used as type `None`.",
    "message": " warmup_ep is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 65,
    "warning_line": "        self, max_episode: int, early_stopping_checker: Callable = None, warmup_ep: int = None,"
  },
  {
    "project": "microsoft/maro",
    "commit": "97d7dbc513878fdd3c504358685bca97e2566022",
    "filename": "maro/rl/learner/simple_learner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-maro/maro/rl/learner/simple_learner.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maro/rl/learner/simple_learner.py:66:8 Incompatible variable type [9]: early_stopping_metric_func is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " early_stopping_metric_func is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "        early_stopping_metric_func: Callable = None"
  }
]