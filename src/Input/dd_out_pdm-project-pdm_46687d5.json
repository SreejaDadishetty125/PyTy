[
  {
    "project": "pdm-project/pdm",
    "commit": "46687d586ec05222fc3d2cd12d9f4ca534f3f27d",
    "filename": "pdm/models/specifiers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pdm-project-pdm/pdm/models/specifiers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pdm/models/specifiers.py:338:52 Incompatible parameter type [6]: Expected `Union[Tuple[int], Tuple[int, int]]` for 1st positional only parameter to call `dict.__getitem__` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Union[Tuple[int], Tuple[int, int]]` for 1st positional only parameter to call `dict.__getitem__` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 338,
    "warning_line": "                current_max = self.MAX_PY_VERSIONS[(*prev[:2],)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import lru_cache\nfrom typing import Iterable, List, Set, Tuple, Union\n\n",
        "source_code_len": 86,
        "target_code": "from functools import lru_cache\nfrom typing import Iterable, List, Set, Tuple, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1,3 +1,3 @@\n from functools import lru_cache\n-from typing import Iterable, List, Set, Tuple, Union\n+from typing import Iterable, List, Set, Tuple, Union, cast\n \n",
        "source_code_with_indent": "from functools import lru_cache\nfrom typing import Iterable, List, Set, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import lru_cache\nfrom typing import Iterable, List, Set, Tuple, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # TODO: fetch from python.org and cache\n    MAX_PY_VERSIONS = {\n        (2,): 7,\n        (2, 0): 1,\n        (2, 1): 3,\n        (2, 2): 3,\n        (2, 3): 7,\n        (2, 4): 6,\n        (2, 5): 6,\n        (2, 6): 9,\n        (2, 7): 18,\n        (3, 0): 1,\n        (3, 1): 5,\n        (3, 2): 6,\n        (3, 3): 7,\n        (3, 4): 10,\n        (3, 5): 10,\n        (3, 6): 13,\n        (3, 7): 10,\n        (3, 8): 8,\n        (3, 9): 2,\n    }\n",
        "source_code_len": 438,
        "target_code": "    # TODO: fetch from python.org and cache\n    PY_MAX_MINOR_VERSION = {\n        Version(\"2\"): 7,\n        Version(\"2.0\"): 1,\n        Version(\"2.1\"): 3,\n        Version(\"2.2\"): 3,\n        Version(\"2.3\"): 7,\n        Version(\"2.4\"): 6,\n        Version(\"2.5\"): 6,\n        Version(\"2.6\"): 9,\n        Version(\"2.7\"): 18,\n        Version(\"3.0\"): 1,\n        Version(\"3.1\"): 5,\n        Version(\"3.2\"): 6,\n        Version(\"3.3\"): 7,\n        Version(\"3.4\"): 10,\n        Version(\"3.5\"): 10,\n        Version(\"3.6\"): 13,\n        Version(\"3.7\"): 10,\n        Version(\"3.8\"): 8,\n        Version(\"3.9\"): 2,\n    }\n",
        "target_code_len": 595,
        "diff_format": "@@ -47,22 +47,22 @@\n     # TODO: fetch from python.org and cache\n-    MAX_PY_VERSIONS = {\n-        (2,): 7,\n-        (2, 0): 1,\n-        (2, 1): 3,\n-        (2, 2): 3,\n-        (2, 3): 7,\n-        (2, 4): 6,\n-        (2, 5): 6,\n-        (2, 6): 9,\n-        (2, 7): 18,\n-        (3, 0): 1,\n-        (3, 1): 5,\n-        (3, 2): 6,\n-        (3, 3): 7,\n-        (3, 4): 10,\n-        (3, 5): 10,\n-        (3, 6): 13,\n-        (3, 7): 10,\n-        (3, 8): 8,\n-        (3, 9): 2,\n+    PY_MAX_MINOR_VERSION = {\n+        Version(\"2\"): 7,\n+        Version(\"2.0\"): 1,\n+        Version(\"2.1\"): 3,\n+        Version(\"2.2\"): 3,\n+        Version(\"2.3\"): 7,\n+        Version(\"2.4\"): 6,\n+        Version(\"2.5\"): 6,\n+        Version(\"2.6\"): 9,\n+        Version(\"2.7\"): 18,\n+        Version(\"3.0\"): 1,\n+        Version(\"3.1\"): 5,\n+        Version(\"3.2\"): 6,\n+        Version(\"3.3\"): 7,\n+        Version(\"3.4\"): 10,\n+        Version(\"3.5\"): 10,\n+        Version(\"3.6\"): 13,\n+        Version(\"3.7\"): 10,\n+        Version(\"3.8\"): 8,\n+        Version(\"3.9\"): 2,\n     }\n",
        "source_code_with_indent": "    # TODO: fetch from python.org and cache\n    MAX_PY_VERSIONS = {\n        (2,): 7,\n        (2, 0): 1,\n        (2, 1): 3,\n        (2, 2): 3,\n        (2, 3): 7,\n        (2, 4): 6,\n        (2, 5): 6,\n        (2, 6): 9,\n        (2, 7): 18,\n        (3, 0): 1,\n        (3, 1): 5,\n        (3, 2): 6,\n        (3, 3): 7,\n        (3, 4): 10,\n        (3, 5): 10,\n        (3, 6): 13,\n        (3, 7): 10,\n        (3, 8): 8,\n        (3, 9): 2,\n    }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # TODO: fetch from python.org and cache\n    PY_MAX_MINOR_VERSION = {\n        Version(\"2\"): 7,\n        Version(\"2.0\"): 1,\n        Version(\"2.1\"): 3,\n        Version(\"2.2\"): 3,\n        Version(\"2.3\"): 7,\n        Version(\"2.4\"): 6,\n        Version(\"2.5\"): 6,\n        Version(\"2.6\"): 9,\n        Version(\"2.7\"): 18,\n        Version(\"3.0\"): 1,\n        Version(\"3.1\"): 5,\n        Version(\"3.2\"): 6,\n        Version(\"3.3\"): 7,\n        Version(\"3.4\"): 10,\n        Version(\"3.5\"): 10,\n        Version(\"3.6\"): 13,\n        Version(\"3.7\"): 10,\n        Version(\"3.8\"): 8,\n        Version(\"3.9\"): 2,\n    }\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        prev.bump(0)\n                        if cur.is_py2 and cur[1] > self.MAX_PY_VERSIONS[(cur[0],)]\n                        else cur\n",
        "source_code_len": 153,
        "target_code": "                        prev.bump(0)\n                        if cur.is_py2\n                        and cast(int, cur[1]) > self.PY_MAX_MINOR_VERSION[cur[:1]]\n                        else cur\n",
        "target_code_len": 191,
        "diff_format": "@@ -325,3 +325,4 @@\n                         prev.bump(0)\n-                        if cur.is_py2 and cur[1] > self.MAX_PY_VERSIONS[(cur[0],)]\n+                        if cur.is_py2\n+                        and cast(int, cur[1]) > self.PY_MAX_MINOR_VERSION[cur[:1]]\n                         else cur\n",
        "source_code_with_indent": "                        prev.bump(0)\n                        if cur.is_py2 and cur[1] > self.MAX_PY_VERSIONS[(cur[0],)]\n                        else cur\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        prev.bump(0)\n                        if cur.is_py2\n                        and cast(int, cur[1]) > self.PY_MAX_MINOR_VERSION[cur[:1]]\n                        else cur\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if cur <= upper:  # X.Y+1.0 is still within the range\n                current_max = self.MAX_PY_VERSIONS[(*prev[:2],)]\n                for z in range(prev[2], current_max + 1):\n                    yield prev[:2].complete(z)\n",
        "source_code_len": 236,
        "target_code": "            if cur <= upper:  # X.Y+1.0 is still within the range\n                current_max = self.PY_MAX_MINOR_VERSION[prev[:2]]\n                for z in range(cast(int, prev[2]), current_max + 1):\n                    yield prev[:2].complete(z)\n",
        "target_code_len": 248,
        "diff_format": "@@ -337,4 +338,4 @@\n             if cur <= upper:  # X.Y+1.0 is still within the range\n-                current_max = self.MAX_PY_VERSIONS[(*prev[:2],)]\n-                for z in range(prev[2], current_max + 1):\n+                current_max = self.PY_MAX_MINOR_VERSION[prev[:2]]\n+                for z in range(cast(int, prev[2]), current_max + 1):\n                     yield prev[:2].complete(z)\n",
        "source_code_with_indent": "            if cur <= upper:  # X.Y+1.0 is still within the range\n                <IND>current_max = self.MAX_PY_VERSIONS[(*prev[:2],)]\n                for z in range(prev[2], current_max + 1):\n                    <IND>yield prev[:2].complete(z)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if cur <= upper:  # X.Y+1.0 is still within the range\n                <IND>current_max = self.PY_MAX_MINOR_VERSION[prev[:2]]\n                for z in range(cast(int, prev[2]), current_max + 1):\n                    <IND>yield prev[:2].complete(z)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    prev.bump(0)\n                    if cur.is_py2 and cur[1] > self.MAX_PY_VERSIONS[(cur[0],)]\n                    else cur\n",
        "source_code_len": 141,
        "target_code": "                    prev.bump(0)\n                    if cur.is_py2\n                    and cast(int, cur[1]) > self.PY_MAX_MINOR_VERSION[cur[:1]]\n                    else cur\n",
        "target_code_len": 175,
        "diff_format": "@@ -342,3 +343,4 @@\n                     prev.bump(0)\n-                    if cur.is_py2 and cur[1] > self.MAX_PY_VERSIONS[(cur[0],)]\n+                    if cur.is_py2\n+                    and cast(int, cur[1]) > self.PY_MAX_MINOR_VERSION[cur[:1]]\n                     else cur\n",
        "source_code_with_indent": "                    prev.bump(0)\n                    if cur.is_py2 and cur[1] > self.MAX_PY_VERSIONS[(cur[0],)]\n                    else cur\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    prev.bump(0)\n                    if cur.is_py2\n                    and cast(int, cur[1]) > self.PY_MAX_MINOR_VERSION[cur[:1]]\n                    else cur\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]