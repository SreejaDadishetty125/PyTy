[
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/cli/json_output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/cli/json_output.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "sslyze/cli/json_output.py:74:23 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "message": " Name `unicode` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 74,
    "warning_line": "            json_out = unicode(json_out)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if IS_PYTHON_2:\n            json_out = unicode(json_out)\n        self._file_to.write(json_out)\n",
        "source_code_len": 103,
        "target_code": "        if IS_PYTHON_2:\n            json_out = unicode(json_out)  # type: ignore\n        self._file_to.write(json_out)\n",
        "target_code_len": 119,
        "diff_format": "@@ -73,3 +77,3 @@\n         if IS_PYTHON_2:\n-            json_out = unicode(json_out)\n+            json_out = unicode(json_out)  # type: ignore\n         self._file_to.write(json_out)\n",
        "source_code_with_indent": "        if IS_PYTHON_2:\n            <IND>json_out = unicode(json_out)\n        <DED>self._file_to.write(json_out)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if IS_PYTHON_2:\n            <IND>json_out = unicode(json_out)  # type: ignore\n        <DED>self._file_to.write(json_out)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/concurrent_scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/concurrent_scanner.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/concurrent_scanner.py:111:50 Unsupported operand [58]: `<` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 111,
    "warning_line": "            if self._get_current_processes_nb() < self._max_processes_nb:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_len": 267,
        "target_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "target_code_len": 227,
        "diff_format": "@@ -57,3 +57,3 @@\n                  max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n-        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n+        # type: (int, int, int, int) -> None\n         \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        <IND>",
        "target_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        <IND>"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/concurrent_scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/concurrent_scanner.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/concurrent_scanner.py:116:94 Incompatible parameter type [6]: Expected `int` for 4th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 4th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "                process = WorkerProcess(hostname_queue, self._task_queue, self._result_queue, self._network_retries,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_len": 267,
        "target_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "target_code_len": 227,
        "diff_format": "@@ -57,3 +57,3 @@\n                  max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n-        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n+        # type: (int, int, int, int) -> None\n         \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        <IND>",
        "target_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        <IND>"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/concurrent_scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/concurrent_scanner.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/concurrent_scanner.py:117:40 Incompatible parameter type [6]: Expected `int` for 5th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 5th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 117,
    "warning_line": "                                        self._network_timeout)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_len": 267,
        "target_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "target_code_len": 227,
        "diff_format": "@@ -57,3 +57,3 @@\n                  max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n-        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n+        # type: (int, int, int, int) -> None\n         \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        <IND>",
        "target_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        <IND>"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/concurrent_scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/concurrent_scanner.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/concurrent_scanner.py:128:53 Unsupported operand [58]: `<` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 128,
    "warning_line": "            if len(self._processes_dict[hostname]) < self._max_processes_per_hostname_nb \\",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_len": 267,
        "target_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "target_code_len": 227,
        "diff_format": "@@ -57,3 +57,3 @@\n                  max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n-        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n+        # type: (int, int, int, int) -> None\n         \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        <IND>",
        "target_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        <IND>"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/concurrent_scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/concurrent_scanner.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/concurrent_scanner.py:129:59 Unsupported operand [58]: `<` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 129,
    "warning_line": "                    and self._get_current_processes_nb() < self._max_processes_nb:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_len": 267,
        "target_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "target_code_len": 227,
        "diff_format": "@@ -57,3 +57,3 @@\n                  max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n-        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n+        # type: (int, int, int, int) -> None\n         \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        <IND>",
        "target_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        <IND>"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/concurrent_scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/concurrent_scanner.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/concurrent_scanner.py:132:40 Incompatible parameter type [6]: Expected `int` for 4th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 4th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 132,
    "warning_line": "                                        self._network_retries, self._network_timeout)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_len": 267,
        "target_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "target_code_len": 227,
        "diff_format": "@@ -57,3 +57,3 @@\n                  max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n-        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n+        # type: (int, int, int, int) -> None\n         \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        <IND>",
        "target_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        <IND>"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/concurrent_scanner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/concurrent_scanner.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/concurrent_scanner.py:132:63 Incompatible parameter type [6]: Expected `int` for 5th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 5th positional only parameter to call `WorkerProcess.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 132,
    "warning_line": "                                        self._network_retries, self._network_timeout)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_len": 267,
        "target_code": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "target_code_len": 227,
        "diff_format": "@@ -57,3 +57,3 @@\n                  max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n-        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n+        # type: (int, int, int, int) -> None\n         \"\"\"Create a scanner for running scanning commands concurrently using a pool of processes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (Optional[int], Optional[int], Optional[int], Optional[int]) -> None\n        <IND>",
        "target_code_with_indent": "                 max_processes_per_hostname_nb=_DEFAULT_PROCESSES_PER_HOSTNAME_NB):\n        # type: (int, int, int, int) -> None\n        <IND>"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/certificate_info_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/certificate_info_plugin.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/certificate_info_plugin.py:118:4 Inconsistent override [14]: `sslyze.plugins.certificate_info_plugin.CertificateInfoPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `CertificateInfoScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "message": " `sslyze.plugins.certificate_info_plugin.CertificateInfoPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `CertificateInfoScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 118,
    "warning_line": "    def process_task(self, server_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/certificate_info_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/certificate_info_plugin.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/certificate_info_plugin.py:124:53 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `TrustStore.__init__` but got `Optional[bool]`.",
    "message": " Expected `str` for 1st positional only parameter to call `TrustStore.__init__` but got `Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "            final_trust_store_list.append(TrustStore(scan_command.custom_ca_file, 'Custom --ca_file', 'N/A'))"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/compression_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/compression_plugin.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/compression_plugin.py:34:4 Inconsistent override [14]: `sslyze.plugins.compression_plugin.CompressionPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `CompressionScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "message": " `sslyze.plugins.compression_plugin.CompressionPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `CompressionScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 34,
    "warning_line": "    def process_task(self, server_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/fallback_scsv_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/fallback_scsv_plugin.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/fallback_scsv_plugin.py:35:4 Inconsistent override [14]: `sslyze.plugins.fallback_scsv_plugin.FallbackScsvPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `FallbackScsvScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "message": " `sslyze.plugins.fallback_scsv_plugin.FallbackScsvPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `FallbackScsvScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 35,
    "warning_line": "    def process_task(self, server_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/heartbleed_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/heartbleed_plugin.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/heartbleed_plugin.py:43:4 Inconsistent override [14]: `sslyze.plugins.heartbleed_plugin.HeartbleedPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `HeartbleedScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "message": " `sslyze.plugins.heartbleed_plugin.HeartbleedPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `HeartbleedScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 43,
    "warning_line": "    def process_task(self, server_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/http_headers_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/http_headers_plugin.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/http_headers_plugin.py:46:4 Inconsistent override [14]: `sslyze.plugins.http_headers_plugin.HttpHeadersPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `HttpHeadersScanCommand` is not a supertype of the overridden parameter `plugin_base.PluginScanCommand`.",
    "message": " `sslyze.plugins.http_headers_plugin.HttpHeadersPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `HttpHeadersScanCommand` is not a supertype of the overridden parameter `plugin_base.PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 46,
    "warning_line": "    def process_task(self, server_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/openssl_ccs_injection_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/openssl_ccs_injection_plugin.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/openssl_ccs_injection_plugin.py:43:4 Inconsistent override [14]: `sslyze.plugins.openssl_ccs_injection_plugin.OpenSslCcsInjectionPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `OpenSslCcsInjectionScanCommand` is not a supertype of the overridden parameter `plugin_base.PluginScanCommand`.",
    "message": " `sslyze.plugins.openssl_ccs_injection_plugin.OpenSslCcsInjectionPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `OpenSslCcsInjectionScanCommand` is not a supertype of the overridden parameter `plugin_base.PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 43,
    "warning_line": "    def process_task(self, server_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/openssl_cipher_suites_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/openssl_cipher_suites_plugin.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/openssl_cipher_suites_plugin.py:143:4 Inconsistent override [14]: `sslyze.plugins.openssl_cipher_suites_plugin.OpenSslCipherSuitesPlugin.process_task` overrides method defined in `Plugin` inconsistently. Parameter of type `CipherSuiteScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "message": " `sslyze.plugins.openssl_cipher_suites_plugin.OpenSslCipherSuitesPlugin.process_task` overrides method defined in `Plugin` inconsistently. Parameter of type `CipherSuiteScanCommand` is not a supertype of the overridden parameter `PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 143,
    "warning_line": "    def process_task(self, server_connectivity_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/openssl_cipher_suites_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/openssl_cipher_suites_plugin.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/openssl_cipher_suites_plugin.py:212:86 Incompatible parameter type [6]: Expected `AcceptedCipherSuite` for 3rd positional only parameter to call `CipherSuiteScanResult.__init__` but got `Optional[AcceptedCipherSuite]`.",
    "message": " Expected `AcceptedCipherSuite` for 3rd positional only parameter to call `CipherSuiteScanResult.__init__` but got `Optional[AcceptedCipherSuite]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 212,
    "warning_line": "        plugin_result = CipherSuiteScanResult(server_connectivity_info, scan_command, preferred_cipher,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            scan_command,          # type: CipherSuiteScanCommand\n            preferred_cipher,      # type: AcceptedCipherSuite\n            accepted_cipher_list,  # type: List[AcceptedCipherSuite]\n",
        "source_code_len": 198,
        "target_code": "            scan_command,          # type: CipherSuiteScanCommand\n            preferred_cipher,      # type: Optional[AcceptedCipherSuite]\n            accepted_cipher_list,  # type: List[AcceptedCipherSuite]\n",
        "target_code_len": 208,
        "diff_format": "@@ -428,3 +432,3 @@\n             scan_command,          # type: CipherSuiteScanCommand\n-            preferred_cipher,      # type: AcceptedCipherSuite\n+            preferred_cipher,      # type: Optional[AcceptedCipherSuite]\n             accepted_cipher_list,  # type: List[AcceptedCipherSuite]\n",
        "source_code_with_indent": "            scan_command,          # type: CipherSuiteScanCommand\n            preferred_cipher,      # type: AcceptedCipherSuite\n            accepted_cipher_list,  # type: List[AcceptedCipherSuite]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            scan_command,          # type: CipherSuiteScanCommand\n            preferred_cipher,      # type: Optional[AcceptedCipherSuite]\n            accepted_cipher_list,  # type: List[AcceptedCipherSuite]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/openssl_cipher_suites_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/openssl_cipher_suites_plugin.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/openssl_cipher_suites_plugin.py:240:82 Incompatible parameter type [6]: Expected `bytes` for 3rd positional only parameter to call `RejectedCipherSuite.__init__` but got `str`.",
    "message": " Expected `bytes` for 3rd positional only parameter to call `RejectedCipherSuite.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 240,
    "warning_line": "            cipher_result = RejectedCipherSuite(openssl_cipher_name, ssl_version, str(e))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, openssl_name, ssl_version, handshake_error_message):\n        # type: (Text, OpenSslVersionEnum, bytes) -> None\n        super(RejectedCipherSuite, self).__init__(openssl_name, ssl_version)\n",
        "source_code_len": 211,
        "target_code": "    def __init__(self, openssl_name, ssl_version, handshake_error_message):\n        # type: (Text, OpenSslVersionEnum, Text) -> None\n        super(RejectedCipherSuite, self).__init__(openssl_name, ssl_version)\n",
        "target_code_len": 210,
        "diff_format": "@@ -387,3 +391,3 @@\n     def __init__(self, openssl_name, ssl_version, handshake_error_message):\n-        # type: (Text, OpenSslVersionEnum, bytes) -> None\n+        # type: (Text, OpenSslVersionEnum, Text) -> None\n         super(RejectedCipherSuite, self).__init__(openssl_name, ssl_version)\n",
        "source_code_with_indent": "    def __init__(self, openssl_name, ssl_version, handshake_error_message):\n        # type: (Text, OpenSslVersionEnum, bytes) -> None\n        <IND>super(RejectedCipherSuite, self).__init__(openssl_name, ssl_version)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, openssl_name, ssl_version, handshake_error_message):\n        # type: (Text, OpenSslVersionEnum, Text) -> None\n        <IND>super(RejectedCipherSuite, self).__init__(openssl_name, ssl_version)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/session_renegotiation_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/session_renegotiation_plugin.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/session_renegotiation_plugin.py:37:4 Inconsistent override [14]: `sslyze.plugins.session_renegotiation_plugin.SessionRenegotiationPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `SessionRenegotiationScanCommand` is not a supertype of the overridden parameter `plugin_base.PluginScanCommand`.",
    "message": " `sslyze.plugins.session_renegotiation_plugin.SessionRenegotiationPlugin.process_task` overrides method defined in `plugin_base.Plugin` inconsistently. Parameter of type `SessionRenegotiationScanCommand` is not a supertype of the overridden parameter `plugin_base.PluginScanCommand`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 37,
    "warning_line": "    def process_task(self, server_info, scan_command):"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/session_resumption_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/session_resumption_plugin.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/session_resumption_plugin.py:87:69 Incompatible parameter type [6]: Expected `SessionResumptionRateScanCommand` for 2nd positional only parameter to call `SessionResumptionSupportScanResult.__init__` but got `plugin_base.PluginScanCommand`.",
    "message": " Expected `SessionResumptionRateScanCommand` for 2nd positional only parameter to call `SessionResumptionSupportScanResult.__init__` but got `plugin_base.PluginScanCommand`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 87,
    "warning_line": "            result = SessionResumptionSupportScanResult(server_info, scan_command, 5, successful_resumptions_nb,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # type: (ServerConnectivityInfo, plugin_base.PluginScanCommand) -> PluginScanResult\n        if scan_command.__class__ == SessionResumptionSupportScanCommand:\n            # Test Session ID support\n",
        "source_code_len": 204,
        "target_code": "        # type: (ServerConnectivityInfo, plugin_base.PluginScanCommand) -> PluginScanResult\n        if isinstance(scan_command, SessionResumptionSupportScanCommand):\n            # Test Session ID support\n",
        "target_code_len": 204,
        "diff_format": "@@ -67,3 +67,3 @@\n         # type: (ServerConnectivityInfo, plugin_base.PluginScanCommand) -> PluginScanResult\n-        if scan_command.__class__ == SessionResumptionSupportScanCommand:\n+        if isinstance(scan_command, SessionResumptionSupportScanCommand):\n             # Test Session ID support\n",
        "source_code_with_indent": "        # type: (ServerConnectivityInfo, plugin_base.PluginScanCommand) -> PluginScanResult\n        <IND>if scan_command.__class__ == SessionResumptionSupportScanCommand:\n            # Test Session ID support\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # type: (ServerConnectivityInfo, plugin_base.PluginScanCommand) -> PluginScanResult\n        <IND>if isinstance(scan_command, SessionResumptionSupportScanCommand):\n            # Test Session ID support\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            server_info,                            # type: ServerConnectivityInfo\n            scan_command,                           # type: SessionResumptionRateScanCommand\n            attempted_resum_nb,                     # type: int\n",
        "source_code_len": 240,
        "target_code": "            server_info,                            # type: ServerConnectivityInfo\n            scan_command,                           # type: SessionResumptionSupportScanCommand\n            attempted_resum_nb,                     # type: int\n",
        "target_code_len": 243,
        "diff_format": "@@ -333,3 +334,3 @@\n             server_info,                            # type: ServerConnectivityInfo\n-            scan_command,                           # type: SessionResumptionRateScanCommand\n+            scan_command,                           # type: SessionResumptionSupportScanCommand\n             attempted_resum_nb,                     # type: int\n",
        "source_code_with_indent": "            server_info,                            # type: ServerConnectivityInfo\n            scan_command,                           # type: SessionResumptionRateScanCommand\n            attempted_resum_nb,                     # type: int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            server_info,                            # type: ServerConnectivityInfo\n            scan_command,                           # type: SessionResumptionSupportScanCommand\n            attempted_resum_nb,                     # type: int\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # We use a SessionResumptionRateScanResult to re-use code in as_text() and as_xml()\n        self._rate_result = SessionResumptionRateScanResult(server_info, scan_command, attempted_resum_nb,\n                                                            successful_resum_nb, errored_resumptions_list)\n\n",
        "source_code_len": 307,
        "target_code": "        # We use a SessionResumptionRateScanResult to re-use code in as_text() and as_xml()\n        self._rate_result = SessionResumptionRateScanResult(server_info, scan_command,  # type: ignore\n                                                            attempted_resum_nb, successful_resum_nb,\n                                                            errored_resumptions_list)\n\n",
        "target_code_len": 383,
        "diff_format": "@@ -357,4 +359,5 @@\n         # We use a SessionResumptionRateScanResult to re-use code in as_text() and as_xml()\n-        self._rate_result = SessionResumptionRateScanResult(server_info, scan_command, attempted_resum_nb,\n-                                                            successful_resum_nb, errored_resumptions_list)\n+        self._rate_result = SessionResumptionRateScanResult(server_info, scan_command,  # type: ignore\n+                                                            attempted_resum_nb, successful_resum_nb,\n+                                                            errored_resumptions_list)\n \n",
        "source_code_with_indent": "        # We use a SessionResumptionRateScanResult to re-use code in as_text() and as_xml()\n        <DED>self._rate_result = SessionResumptionRateScanResult(server_info, scan_command, attempted_resum_nb,\n                                                            successful_resum_nb, errored_resumptions_list)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # We use a SessionResumptionRateScanResult to re-use code in as_text() and as_xml()\n        <DED>self._rate_result = SessionResumptionRateScanResult(server_info, scan_command,  # type: ignore\n                                                            attempted_resum_nb, successful_resum_nb,\n                                                            errored_resumptions_list)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/plugins/session_resumption_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/session_resumption_plugin.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "sslyze/plugins/session_resumption_plugin.py:93:66 Incompatible parameter type [6]: Expected `SessionResumptionRateScanCommand` for 2nd positional only parameter to call `SessionResumptionRateScanResult.__init__` but got `plugin_base.PluginScanCommand`.",
    "message": " Expected `SessionResumptionRateScanCommand` for 2nd positional only parameter to call `SessionResumptionRateScanResult.__init__` but got `plugin_base.PluginScanCommand`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 93,
    "warning_line": "            result = SessionResumptionRateScanResult(server_info, scan_command, 100, successful_resumptions_nb,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        elif scan_command.__class__ == SessionResumptionRateScanCommand:\n            successful_resumptions_nb, errored_resumptions_list = self._test_session_resumption_rate(server_info, 100)\n            result = SessionResumptionRateScanResult(server_info, scan_command, 100, successful_resumptions_nb,\n                                                     errored_resumptions_list)\n        else:\n",
        "source_code_len": 398,
        "target_code": "\n        elif isinstance(scan_command, SessionResumptionRateScanCommand):\n            successful_resumptions_nb, errored_resumptions_list = self._test_session_resumption_rate(server_info, 100)\n            result = SessionResumptionRateScanResult(server_info, scan_command, 100,  # type: ignore\n                                                     successful_resumptions_nb, errored_resumptions_list)\n        else:\n",
        "target_code_len": 414,
        "diff_format": "@@ -90,6 +90,6 @@\n \n-        elif scan_command.__class__ == SessionResumptionRateScanCommand:\n+        elif isinstance(scan_command, SessionResumptionRateScanCommand):\n             successful_resumptions_nb, errored_resumptions_list = self._test_session_resumption_rate(server_info, 100)\n-            result = SessionResumptionRateScanResult(server_info, scan_command, 100, successful_resumptions_nb,\n-                                                     errored_resumptions_list)\n+            result = SessionResumptionRateScanResult(server_info, scan_command, 100,  # type: ignore\n+                                                     successful_resumptions_nb, errored_resumptions_list)\n         else:\n",
        "source_code_with_indent": "\n        <DED>elif scan_command.__class__ == SessionResumptionRateScanCommand:\n            <IND>successful_resumptions_nb, errored_resumptions_list = self._test_session_resumption_rate(server_info, 100)\n            result = SessionResumptionRateScanResult(server_info, scan_command, 100, successful_resumptions_nb,\n                                                     errored_resumptions_list)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>elif isinstance(scan_command, SessionResumptionRateScanCommand):\n            <IND>successful_resumptions_nb, errored_resumptions_list = self._test_session_resumption_rate(server_info, 100)\n            result = SessionResumptionRateScanResult(server_info, scan_command, 100,  # type: ignore\n                                                     successful_resumptions_nb, errored_resumptions_list)\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/ssl_settings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/ssl_settings.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/ssl_settings.py:125:31 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `b64encode` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `b64encode` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "            header = b64encode('{0}:{1}'.format(quote(self.basic_auth_user), quote(self.basic_auth_password)))"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/ssl_settings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/ssl_settings.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/ssl_settings.py:125:83 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `quote` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `quote` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "            header = b64encode('{0}:{1}'.format(quote(self.basic_auth_user), quote(self.basic_auth_password)))"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/ssl_settings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/ssl_settings.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/ssl_settings.py:126:8 Incompatible return type [7]: Expected `str` but got `typing.Union[bytes, str]`.",
    "message": " Expected `str` but got `typing.Union[bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 126,
    "warning_line": "        return header"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/utils/ssl_connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/utils/ssl_connection.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/utils/ssl_connection.py:206:22 Incompatible variable type [9]: network_timeout is declared to have type `int` but is used as type `None`.",
    "message": " network_timeout is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 206,
    "warning_line": "    def connect(self, network_timeout=None, network_max_retries=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "source_code_len": 199,
        "target_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "target_code_len": 219,
        "diff_format": "@@ -206,3 +208,3 @@\n     def connect(self, network_timeout=None, network_max_retries=None):\n-        # type: (int, int) -> None\n+        # type: (Optional[int], Optional[int]) -> None\n         final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "source_code_with_indent": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/utils/ssl_connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/utils/ssl_connection.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/utils/ssl_connection.py:206:44 Incompatible variable type [9]: network_max_retries is declared to have type `int` but is used as type `None`.",
    "message": " network_max_retries is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 206,
    "warning_line": "    def connect(self, network_timeout=None, network_max_retries=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "source_code_len": 199,
        "target_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "target_code_len": 219,
        "diff_format": "@@ -206,3 +208,3 @@\n     def connect(self, network_timeout=None, network_max_retries=None):\n-        # type: (int, int) -> None\n+        # type: (Optional[int], Optional[int]) -> None\n         final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "source_code_with_indent": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/utils/ssl_connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/utils/ssl_connection.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/utils/ssl_connection.py:303:53 Incompatible parameter type [6]: Expected `socket.socket` for 1st positional only parameter to call `HttpResponseParser.parse` but got `HTTPSConnection`.",
    "message": " Expected `socket.socket` for 1st positional only parameter to call `HttpResponseParser.parse` but got `HTTPSConnection`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 303,
    "warning_line": "            http_response = HttpResponseParser.parse(self)"
  }
]