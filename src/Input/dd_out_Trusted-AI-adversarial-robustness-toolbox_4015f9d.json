[
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/GPy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/GPy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/GPy.py:85:4 Inconsistent override [14]: `art.classifiers.GPy.GPyGaussianProcessClassifier.class_gradient` overrides method defined in `art.classifiers.classifier.ClassifierGradients` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `art.classifiers.GPy.GPyGaussianProcessClassifier.class_gradient` overrides method defined in `art.classifiers.classifier.ClassifierGradients` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 85,
    "warning_line": "    def class_gradient(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # pylint: disable=W0221\n    def class_gradient(\n        self,\n",
        "source_code_len": 66,
        "target_code": "    # pylint: disable=W0221\n    def class_gradient(  # type: ignore\n        self,\n",
        "target_code_len": 82,
        "diff_format": "@@ -84,3 +84,3 @@\n     # pylint: disable=W0221\n-    def class_gradient(\n+    def class_gradient(  # type: ignore\n         self,\n",
        "source_code_with_indent": "    # pylint: disable=W0221\n    <DED>def class_gradient(\n        self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # pylint: disable=W0221\n    <DED>def class_gradient(  # type: ignore\n        self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/classifier.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/classifier.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/classifier.py:385:31 Unsupported operand [58]: `/` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 385,
    "warning_line": "            for _ in range(int(generator.size / generator.batch_size)):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        for _ in range(nb_epochs):\n            for _ in range(int(generator.size / generator.batch_size)):\n                x, y = generator.get_batch()\n",
        "source_code_len": 152,
        "target_code": "        for _ in range(nb_epochs):\n            for _ in range(int(generator.size / generator.batch_size)):  # type: ignore\n                x, y = generator.get_batch()\n",
        "target_code_len": 168,
        "diff_format": "@@ -384,3 +384,3 @@\n         for _ in range(nb_epochs):\n-            for _ in range(int(generator.size / generator.batch_size)):\n+            for _ in range(int(generator.size / generator.batch_size)):  # type: ignore\n                 x, y = generator.get_batch()\n",
        "source_code_with_indent": "        for _ in range(nb_epochs):\n            <IND>for _ in range(int(generator.size / generator.batch_size)):\n                <IND>x, y = generator.get_batch()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for _ in range(nb_epochs):\n            <IND>for _ in range(int(generator.size / generator.batch_size)):  # type: ignore\n                <IND>x, y = generator.get_batch()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/classifiers/scikitlearn.py:313:16 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "message": " Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 313,
    "warning_line": "                intervals={"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/classifiers/scikitlearn.py:318:16 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "message": " Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 318,
    "warning_line": "                intervals={"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/classifiers/scikitlearn.py:417:16 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "message": " Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 417,
    "warning_line": "                intervals={"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/classifiers/scikitlearn.py:422:16 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "message": " Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 422,
    "warning_line": "                intervals={"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/classifiers/scikitlearn.py:747:24 Incompatible parameter type [6]: Expected `int` for 1st parameter `class_id` to call `Tree.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 1st parameter `class_id` to call `Tree.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 747,
    "warning_line": "                        class_id=class_label,"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:927:11 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 927,
    "warning_line": "        if self.nb_classes() > 2:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        if self.nb_classes() > 2:\n            w_weighted = np.matmul(y_pred, weights)\n",
        "source_code_len": 87,
        "target_code": "\n        if self.nb_classes() > 2:  # type: ignore\n            w_weighted = np.matmul(y_pred, weights)\n",
        "target_code_len": 103,
        "diff_format": "@@ -926,3 +926,3 @@\n \n-        if self.nb_classes() > 2:\n+        if self.nb_classes() > 2:  # type: ignore\n             w_weighted = np.matmul(y_pred, weights)\n",
        "source_code_with_indent": "\n        if self.nb_classes() > 2:\n            <IND>w_weighted = np.matmul(y_pred, weights)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if self.nb_classes() > 2:  # type: ignore\n            <IND>w_weighted = np.matmul(y_pred, weights)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:945:33 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 945,
    "warning_line": "            for i_class in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n            for i_class in range(self.nb_classes()):\n                class_gradient = np.zeros(x.shape)\n",
        "source_code_len": 105,
        "target_code": "\n            for i_class in range(self.nb_classes()):  # type: ignore\n                class_gradient = np.zeros(x.shape)\n",
        "target_code_len": 121,
        "diff_format": "@@ -944,3 +944,3 @@\n \n-            for i_class in range(self.nb_classes()):\n+            for i_class in range(self.nb_classes()):  # type: ignore\n                 class_gradient = np.zeros(x.shape)\n",
        "source_code_with_indent": "\n            for i_class in range(self.nb_classes()):\n                <IND>class_gradient = np.zeros(x.shape)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            for i_class in range(self.nb_classes()):  # type: ignore\n                <IND>class_gradient = np.zeros(x.shape)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:1048:37 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1048,
    "warning_line": "                for i_class in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            for i_sample in range(num_samples):\n                for i_class in range(self.nb_classes()):\n                    gradients[i_sample, :] += (\n",
        "source_code_len": 153,
        "target_code": "            for i_sample in range(num_samples):\n                for i_class in range(self.nb_classes()):  # type: ignore\n                    gradients[i_sample, :] += (\n",
        "target_code_len": 169,
        "diff_format": "@@ -1047,3 +1047,3 @@\n             for i_sample in range(num_samples):\n-                for i_class in range(self.nb_classes()):\n+                for i_class in range(self.nb_classes()):  # type: ignore\n                     gradients[i_sample, :] += (\n",
        "source_code_with_indent": "            for i_sample in range(num_samples):\n                <IND>for i_class in range(self.nb_classes()):\n                    <IND>gradients[i_sample, :] += (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            for i_sample in range(num_samples):\n                <IND>for i_class in range(self.nb_classes()):  # type: ignore\n                    <IND>gradients[i_sample, :] += (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:1153:37 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1153,
    "warning_line": "                for i_label in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                for i_label in range(self.nb_classes()):\n                    for i_sample in range(num_samples):\n                        for not_label in range(self.nb_classes()):\n                            if i_label != not_label:\n",
        "source_code_len": 234,
        "target_code": "\n                for i_label in range(self.nb_classes()):  # type: ignore\n                    for i_sample in range(num_samples):\n                        for not_label in range(self.nb_classes()):  # type: ignore\n                            if i_label != not_label:\n",
        "target_code_len": 266,
        "diff_format": "@@ -1152,5 +1152,5 @@\n \n-                for i_label in range(self.nb_classes()):\n+                for i_label in range(self.nb_classes()):  # type: ignore\n                     for i_sample in range(num_samples):\n-                        for not_label in range(self.nb_classes()):\n+                        for not_label in range(self.nb_classes()):  # type: ignore\n                             if i_label != not_label:\n",
        "source_code_with_indent": "\n                for i_label in range(self.nb_classes()):\n                    <IND>for i_sample in range(num_samples):\n                        <IND>for not_label in range(self.nb_classes()):\n                            <IND>if i_label != not_label:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                for i_label in range(self.nb_classes()):  # type: ignore\n                    <IND>for i_sample in range(num_samples):\n                        <IND>for not_label in range(self.nb_classes()):  # type: ignore\n                            <IND>if i_label != not_label:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:1155:47 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1155,
    "warning_line": "                        for not_label in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                for i_label in range(self.nb_classes()):\n                    for i_sample in range(num_samples):\n                        for not_label in range(self.nb_classes()):\n                            if i_label != not_label:\n",
        "source_code_len": 234,
        "target_code": "\n                for i_label in range(self.nb_classes()):  # type: ignore\n                    for i_sample in range(num_samples):\n                        for not_label in range(self.nb_classes()):  # type: ignore\n                            if i_label != not_label:\n",
        "target_code_len": 266,
        "diff_format": "@@ -1152,5 +1152,5 @@\n \n-                for i_label in range(self.nb_classes()):\n+                for i_label in range(self.nb_classes()):  # type: ignore\n                     for i_sample in range(num_samples):\n-                        for not_label in range(self.nb_classes()):\n+                        for not_label in range(self.nb_classes()):  # type: ignore\n                             if i_label != not_label:\n",
        "source_code_with_indent": "\n                for i_label in range(self.nb_classes()):\n                    <IND>for i_sample in range(num_samples):\n                        <IND>for not_label in range(self.nb_classes()):\n                            <IND>if i_label != not_label:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                for i_label in range(self.nb_classes()):  # type: ignore\n                    <IND>for i_sample in range(num_samples):\n                        <IND>for not_label in range(self.nb_classes()):  # type: ignore\n                            <IND>if i_label != not_label:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:1200:43 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1200,
    "warning_line": "                    for not_label in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                for i_sample in range(num_samples):\n                    for not_label in range(self.nb_classes()):\n                        if label != not_label:\n",
        "source_code_len": 162,
        "target_code": "                for i_sample in range(num_samples):\n                    for not_label in range(self.nb_classes()):  # type: ignore\n                        if label != not_label:\n",
        "target_code_len": 178,
        "diff_format": "@@ -1199,3 +1199,3 @@\n                 for i_sample in range(num_samples):\n-                    for not_label in range(self.nb_classes()):\n+                    for not_label in range(self.nb_classes()):  # type: ignore\n                         if label != not_label:\n",
        "source_code_with_indent": "                for i_sample in range(num_samples):\n                    <IND>for not_label in range(self.nb_classes()):\n                        <IND>if label != not_label:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                for i_sample in range(num_samples):\n                    <IND>for not_label in range(self.nb_classes()):  # type: ignore\n                        <IND>if label != not_label:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:1246:43 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1246,
    "warning_line": "                    for not_label in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                for i_sample in range(num_samples):\n                    for not_label in range(self.nb_classes()):\n                        if label[i_sample] != not_label:\n",
        "source_code_len": 172,
        "target_code": "                for i_sample in range(num_samples):\n                    for not_label in range(self.nb_classes()):  # type: ignore\n                        if label[i_sample] != not_label:\n",
        "target_code_len": 188,
        "diff_format": "@@ -1245,3 +1245,3 @@\n                 for i_sample in range(num_samples):\n-                    for not_label in range(self.nb_classes()):\n+                    for not_label in range(self.nb_classes()):  # type: ignore\n                         if label[i_sample] != not_label:\n",
        "source_code_with_indent": "                for i_sample in range(num_samples):\n                    <IND>for not_label in range(self.nb_classes()):\n                        <IND>if label[i_sample] != not_label:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                for i_sample in range(num_samples):\n                    <IND>for not_label in range(self.nb_classes()):  # type: ignore\n                        <IND>if label[i_sample] != not_label:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:1307:31 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1307,
    "warning_line": "                for i in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                for i in range(self.nb_classes()):\n                    for i_sample in range(num_samples):\n",
        "source_code_len": 108,
        "target_code": "\n                for i in range(self.nb_classes()):  # type: ignore\n                    for i_sample in range(num_samples):\n",
        "target_code_len": 124,
        "diff_format": "@@ -1306,3 +1306,3 @@\n \n-                for i in range(self.nb_classes()):\n+                for i in range(self.nb_classes()):  # type: ignore\n                     for i_sample in range(num_samples):\n",
        "source_code_with_indent": "\n                for i in range(self.nb_classes()):\n                    <IND>for i_sample in range(num_samples):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                for i in range(self.nb_classes()):  # type: ignore\n                    <IND>for i_sample in range(num_samples):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/scikitlearn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/scikitlearn.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/scikitlearn.py:1438:41 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1438,
    "warning_line": "                for i_not_label in range(self.nb_classes()):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n                for i_not_label in range(self.nb_classes()):\n                    if i_label != i_not_label:\n",
        "source_code_len": 109,
        "target_code": "\n                for i_not_label in range(self.nb_classes()):  # type: ignore\n                    if i_label != i_not_label:\n",
        "target_code_len": 125,
        "diff_format": "@@ -1437,3 +1437,3 @@\n \n-                for i_not_label in range(self.nb_classes()):\n+                for i_not_label in range(self.nb_classes()):  # type: ignore\n                     if i_label != i_not_label:\n",
        "source_code_with_indent": "\n                for i_not_label in range(self.nb_classes()):\n                    <IND>if i_label != i_not_label:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                for i_not_label in range(self.nb_classes()):  # type: ignore\n                    <IND>if i_label != i_not_label:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/tensorflow.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/classifiers/tensorflow.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/classifiers/tensorflow.py:248:35 Unsupported operand [58]: `/` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 248,
    "warning_line": "                for _ in range(int(generator.size / generator.batch_size)):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            for _ in range(nb_epochs):\n                for _ in range(int(generator.size / generator.batch_size)):\n                    i_batch, o_batch = generator.get_batch()\n",
        "source_code_len": 176,
        "target_code": "            for _ in range(nb_epochs):\n                for _ in range(int(generator.size / generator.batch_size)):  # type: ignore\n                    i_batch, o_batch = generator.get_batch()\n",
        "target_code_len": 192,
        "diff_format": "@@ -247,3 +247,3 @@\n             for _ in range(nb_epochs):\n-                for _ in range(int(generator.size / generator.batch_size)):\n+                for _ in range(int(generator.size / generator.batch_size)):  # type: ignore\n                     i_batch, o_batch = generator.get_batch()\n",
        "source_code_with_indent": "            <IND>for _ in range(nb_epochs):\n                <IND>for _ in range(int(generator.size / generator.batch_size)):\n                    <IND>i_batch, o_batch = generator.get_batch()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>for _ in range(nb_epochs):\n                <IND>for _ in range(int(generator.size / generator.batch_size)):  # type: ignore\n                    <IND>i_batch, o_batch = generator.get_batch()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/xgboost.py",
    "min_patch_found": false,
    "full_warning_msg": "art/classifiers/xgboost.py:226:16 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/classifiers/xgboost.py",
    "min_patch_found": false,
    "full_warning_msg": "art/classifiers/xgboost.py:229:16 Incompatible parameter type [6]: Expected `Optional[typing.Dict[str, Interval]]` for 1st parameter `intervals` to call `Box.__init__` but got `typing.Dict[int, Interval]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/defences/trainer/adversarial_trainer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/trainer/adversarial_trainer.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/defences/trainer/adversarial_trainer.py:123:33 Unsupported operand [58]: `/` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 123,
    "warning_line": "        nb_batches = int(np.ceil(size / batch_size))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        batch_size = generator.batch_size\n        nb_batches = int(np.ceil(size / batch_size))\n        ind = np.arange(generator.size)\n",
        "source_code_len": 135,
        "target_code": "        batch_size = generator.batch_size\n        nb_batches = int(np.ceil(size / batch_size))  # type: ignore\n        ind = np.arange(generator.size)\n",
        "target_code_len": 151,
        "diff_format": "@@ -122,3 +122,3 @@\n         batch_size = generator.batch_size\n-        nb_batches = int(np.ceil(size / batch_size))\n+        nb_batches = int(np.ceil(size / batch_size))  # type: ignore\n         ind = np.arange(generator.size)\n",
        "source_code_with_indent": "        batch_size = generator.batch_size\n        nb_batches = int(np.ceil(size / batch_size))\n        ind = np.arange(generator.size)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        batch_size = generator.batch_size\n        nb_batches = int(np.ceil(size / batch_size))  # type: ignore\n        ind = np.arange(generator.size)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/defences/trainer/adversarial_trainer_madry_pgd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/trainer/adversarial_trainer_madry_pgd.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/trainer/adversarial_trainer_madry_pgd.py:78:57 Incompatible parameter type [6]: Expected `Classifier` for 1st parameter `classifier` to call `Trainer.__init__` but got `ClassifierGradients`.",
    "message": " Expected `Classifier` for 1st parameter `classifier` to call `Trainer.__init__` but got `ClassifierGradients`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "        super(AdversarialTrainerMadryPGD, self).__init__(classifier=classifier)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from art.classifiers.classifier import Classifier, ClassifierGradients\n\n",
        "source_code_len": 94,
        "target_code": "if TYPE_CHECKING:\n    from art.classifiers.classifier import Classifier, ClassifierGradientsType\n\n",
        "target_code_len": 98,
        "diff_format": "@@ -36,3 +36,3 @@\n if TYPE_CHECKING:\n-    from art.classifiers.classifier import Classifier, ClassifierGradients\n+    from art.classifiers.classifier import Classifier, ClassifierGradientsType\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from art.classifiers.classifier import Classifier, ClassifierGradients\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from art.classifiers.classifier import Classifier, ClassifierGradientsType\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        classifier: \"ClassifierGradients\",\n        nb_epochs: int = 391,\n",
        "source_code_len": 87,
        "target_code": "        self,\n        classifier: \"ClassifierGradientsType\",\n        nb_epochs: int = 391,\n",
        "target_code_len": 91,
        "diff_format": "@@ -55,3 +55,3 @@\n         self,\n-        classifier: \"ClassifierGradients\",\n+        classifier: \"ClassifierGradientsType\",\n         nb_epochs: int = 391,\n",
        "source_code_with_indent": "        self,\n        classifier: \"ClassifierGradients\",\n        nb_epochs: int = 391,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        classifier: \"ClassifierGradientsType\",\n        nb_epochs: int = 391,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/defences/trainer/adversarial_trainer_madry_pgd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/trainer/adversarial_trainer_madry_pgd.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/trainer/adversarial_trainer_madry_pgd.py:84:12 Incompatible parameter type [6]: Expected `art.classifiers.classifier.ClassifierGradientsType` for 1st positional only parameter to call `ProjectedGradientDescent.__init__` but got `ClassifierGradients`.",
    "message": " Expected `art.classifiers.classifier.ClassifierGradientsType` for 1st positional only parameter to call `ProjectedGradientDescent.__init__` but got `ClassifierGradients`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 84,
    "warning_line": "            classifier,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from art.classifiers.classifier import Classifier, ClassifierGradients\n\n",
        "source_code_len": 94,
        "target_code": "if TYPE_CHECKING:\n    from art.classifiers.classifier import Classifier, ClassifierGradientsType\n\n",
        "target_code_len": 98,
        "diff_format": "@@ -36,3 +36,3 @@\n if TYPE_CHECKING:\n-    from art.classifiers.classifier import Classifier, ClassifierGradients\n+    from art.classifiers.classifier import Classifier, ClassifierGradientsType\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from art.classifiers.classifier import Classifier, ClassifierGradients\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from art.classifiers.classifier import Classifier, ClassifierGradientsType\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        classifier: \"ClassifierGradients\",\n        nb_epochs: int = 391,\n",
        "source_code_len": 87,
        "target_code": "        self,\n        classifier: \"ClassifierGradientsType\",\n        nb_epochs: int = 391,\n",
        "target_code_len": 91,
        "diff_format": "@@ -55,3 +55,3 @@\n         self,\n-        classifier: \"ClassifierGradients\",\n+        classifier: \"ClassifierGradientsType\",\n         nb_epochs: int = 391,\n",
        "source_code_with_indent": "        self,\n        classifier: \"ClassifierGradients\",\n        nb_epochs: int = 391,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        classifier: \"ClassifierGradientsType\",\n        nb_epochs: int = 391,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/defences/trainer/adversarial_trainer_madry_pgd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/defences/trainer/adversarial_trainer_madry_pgd.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/defences/trainer/adversarial_trainer_madry_pgd.py:91:42 Incompatible parameter type [6]: Expected `Classifier` for 1st positional only parameter to call `AdversarialTrainer.__init__` but got `ClassifierGradients`.",
    "message": " Expected `Classifier` for 1st positional only parameter to call `AdversarialTrainer.__init__` but got `ClassifierGradients`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "        self.trainer = AdversarialTrainer(classifier, self.attack, ratio=1.0)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from art.classifiers.classifier import Classifier, ClassifierGradients\n\n",
        "source_code_len": 94,
        "target_code": "if TYPE_CHECKING:\n    from art.classifiers.classifier import Classifier, ClassifierGradientsType\n\n",
        "target_code_len": 98,
        "diff_format": "@@ -36,3 +36,3 @@\n if TYPE_CHECKING:\n-    from art.classifiers.classifier import Classifier, ClassifierGradients\n+    from art.classifiers.classifier import Classifier, ClassifierGradientsType\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from art.classifiers.classifier import Classifier, ClassifierGradients\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from art.classifiers.classifier import Classifier, ClassifierGradientsType\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        classifier: \"ClassifierGradients\",\n        nb_epochs: int = 391,\n",
        "source_code_len": 87,
        "target_code": "        self,\n        classifier: \"ClassifierGradientsType\",\n        nb_epochs: int = 391,\n",
        "target_code_len": 91,
        "diff_format": "@@ -55,3 +55,3 @@\n         self,\n-        classifier: \"ClassifierGradients\",\n+        classifier: \"ClassifierGradientsType\",\n         nb_epochs: int = 391,\n",
        "source_code_with_indent": "        self,\n        classifier: \"ClassifierGradients\",\n        nb_epochs: int = 391,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        classifier: \"ClassifierGradientsType\",\n        nb_epochs: int = 391,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/metrics/verification_decisions_trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/metrics/verification_decisions_trees.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/metrics/verification_decisions_trees.py:335:72 Incompatible parameter type [6]: Expected `Box` for 1st positional only parameter to call `Box.get_intersection` but got `Union[Box, float]`.",
    "message": " Expected `Box` for 1st positional only parameter to call `Box.get_intersection` but got `Union[Box, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 335,
    "warning_line": "                        leaf_box = accessible_leaf.box.get_intersection(clique[\"box\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    for accessible_leaf in accessible_leaves[i_tree]:\n                        leaf_box = accessible_leaf.box.get_intersection(clique[\"box\"])\n                        if leaf_box.intervals:\n",
        "source_code_len": 204,
        "target_code": "                    for accessible_leaf in accessible_leaves[i_tree]:\n                        leaf_box = accessible_leaf.box.get_intersection(clique[\"box\"])  # type: ignore\n                        if leaf_box.intervals:\n",
        "target_code_len": 220,
        "diff_format": "@@ -334,3 +334,3 @@\n                     for accessible_leaf in accessible_leaves[i_tree]:\n-                        leaf_box = accessible_leaf.box.get_intersection(clique[\"box\"])\n+                        leaf_box = accessible_leaf.box.get_intersection(clique[\"box\"])  # type: ignore\n                         if leaf_box.intervals:\n",
        "source_code_with_indent": "                    <IND>for accessible_leaf in accessible_leaves[i_tree]:\n                        <IND>leaf_box = accessible_leaf.box.get_intersection(clique[\"box\"])\n                        if leaf_box.intervals:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>for accessible_leaf in accessible_leaves[i_tree]:\n                        <IND>leaf_box = accessible_leaf.box.get_intersection(clique[\"box\"])  # type: ignore\n                        if leaf_box.intervals:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/metrics/verification_decisions_trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/metrics/verification_decisions_trees.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/metrics/verification_decisions_trees.py:348:62 Unsupported operand [58]: `+` is not supported for operand types `float` and `Union[Box, float]`.",
    "message": " `+` is not supported for operand types `float` and `Union[Box, float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 348,
    "warning_line": "                                    \"value\": new_leaf_value + clique[\"value\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                                    \"box\": leaf_box,\n                                    \"value\": new_leaf_value + clique[\"value\"],\n                                }\n",
        "source_code_len": 166,
        "target_code": "                                    \"box\": leaf_box,\n                                    \"value\": new_leaf_value + clique[\"value\"],  # type: ignore\n                                }\n",
        "target_code_len": 182,
        "diff_format": "@@ -347,3 +347,3 @@\n                                     \"box\": leaf_box,\n-                                    \"value\": new_leaf_value + clique[\"value\"],\n+                                    \"value\": new_leaf_value + clique[\"value\"],  # type: ignore\n                                 }\n",
        "source_code_with_indent": "                                    \"box\": leaf_box,\n                                    \"value\": new_leaf_value + clique[\"value\"],\n                                }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                    \"box\": leaf_box,\n                                    \"value\": new_leaf_value + clique[\"value\"],  # type: ignore\n                                }\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/metrics/verification_decisions_trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/metrics/verification_decisions_trees.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/metrics/verification_decisions_trees.py:363:24 Incompatible parameter type [6]: Expected `Box` for 4th parameter `box` to call `LeafNode.__init__` but got `Union[Box, float]`.",
    "message": " Expected `Box` for 4th parameter `box` to call `LeafNode.__init__` but got `Union[Box, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 363,
    "warning_line": "                        box=clique[\"box\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                        node_id=None,\n                        box=clique[\"box\"],\n                        value=clique[\"value\"],\n                    )\n",
        "source_code_len": 150,
        "target_code": "                        node_id=None,\n                        box=clique[\"box\"],  # type: ignore\n                        value=clique[\"value\"],  # type: ignore\n                    )\n",
        "target_code_len": 182,
        "diff_format": "@@ -362,4 +362,4 @@\n                         node_id=None,\n-                        box=clique[\"box\"],\n-                        value=clique[\"value\"],\n+                        box=clique[\"box\"],  # type: ignore\n+                        value=clique[\"value\"],  # type: ignore\n                     )\n",
        "source_code_with_indent": "                        node_id=None,\n                        box=clique[\"box\"],\n                        value=clique[\"value\"],\n                    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        node_id=None,\n                        box=clique[\"box\"],  # type: ignore\n                        value=clique[\"value\"],  # type: ignore\n                    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/metrics/verification_decisions_trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/metrics/verification_decisions_trees.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/metrics/verification_decisions_trees.py:364:24 Incompatible parameter type [6]: Expected `float` for 5th parameter `value` to call `LeafNode.__init__` but got `Union[Box, float]`.",
    "message": " Expected `float` for 5th parameter `value` to call `LeafNode.__init__` but got `Union[Box, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 364,
    "warning_line": "                        value=clique[\"value\"],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                        node_id=None,\n                        box=clique[\"box\"],\n                        value=clique[\"value\"],\n                    )\n",
        "source_code_len": 150,
        "target_code": "                        node_id=None,\n                        box=clique[\"box\"],  # type: ignore\n                        value=clique[\"value\"],  # type: ignore\n                    )\n",
        "target_code_len": 182,
        "diff_format": "@@ -362,4 +362,4 @@\n                         node_id=None,\n-                        box=clique[\"box\"],\n-                        value=clique[\"value\"],\n+                        box=clique[\"box\"],  # type: ignore\n+                        value=clique[\"value\"],  # type: ignore\n                     )\n",
        "source_code_with_indent": "                        node_id=None,\n                        box=clique[\"box\"],\n                        value=clique[\"value\"],\n                    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        node_id=None,\n                        box=clique[\"box\"],  # type: ignore\n                        value=clique[\"value\"],  # type: ignore\n                    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/metrics/verification_decisions_trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/metrics/verification_decisions_trees.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/metrics/verification_decisions_trees.py:372:53 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `max` but got `Union[Box, float]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `max` but got `Union[Box, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 372,
    "warning_line": "                        best_score = max(best_score, clique[\"value\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                if i == 0:\n                    best_score = clique[\"value\"]\n                else:\n                    if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        best_score = max(best_score, clique[\"value\"])\n                    else:\n                        best_score = min(best_score, clique[\"value\"])\n\n",
        "source_code_len": 340,
        "target_code": "                if i == 0:\n                    best_score = clique[\"value\"]  # type: ignore\n                else:\n                    if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        best_score = max(best_score, clique[\"value\"])  # type: ignore\n                    else:\n                        best_score = min(best_score, clique[\"value\"])  # type: ignore\n\n",
        "target_code_len": 388,
        "diff_format": "@@ -368,8 +368,8 @@\n                 if i == 0:\n-                    best_score = clique[\"value\"]\n+                    best_score = clique[\"value\"]  # type: ignore\n                 else:\n                     if label < 0.5 and self._classifier.nb_classes() <= 2:\n-                        best_score = max(best_score, clique[\"value\"])\n+                        best_score = max(best_score, clique[\"value\"])  # type: ignore\n                     else:\n-                        best_score = min(best_score, clique[\"value\"])\n+                        best_score = min(best_score, clique[\"value\"])  # type: ignore\n \n",
        "source_code_with_indent": "                if i == 0:\n                    <IND>best_score = clique[\"value\"]\n                <DED>else:\n                    <IND>if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        <IND>best_score = max(best_score, clique[\"value\"])\n                    <DED>else:\n                        <IND>best_score = min(best_score, clique[\"value\"])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if i == 0:\n                    <IND>best_score = clique[\"value\"]  # type: ignore\n                <DED>else:\n                    <IND>if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        <IND>best_score = max(best_score, clique[\"value\"])  # type: ignore\n                    <DED>else:\n                        <IND>best_score = min(best_score, clique[\"value\"])  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "4015f9d2543c4d81ef6b1c3e5da82916feaf3344",
    "filename": "art/metrics/verification_decisions_trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/metrics/verification_decisions_trees.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "art/metrics/verification_decisions_trees.py:374:53 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Union[Box, float]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Union[Box, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 374,
    "warning_line": "                        best_score = min(best_score, clique[\"value\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                if i == 0:\n                    best_score = clique[\"value\"]\n                else:\n                    if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        best_score = max(best_score, clique[\"value\"])\n                    else:\n                        best_score = min(best_score, clique[\"value\"])\n\n",
        "source_code_len": 340,
        "target_code": "                if i == 0:\n                    best_score = clique[\"value\"]  # type: ignore\n                else:\n                    if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        best_score = max(best_score, clique[\"value\"])  # type: ignore\n                    else:\n                        best_score = min(best_score, clique[\"value\"])  # type: ignore\n\n",
        "target_code_len": 388,
        "diff_format": "@@ -368,8 +368,8 @@\n                 if i == 0:\n-                    best_score = clique[\"value\"]\n+                    best_score = clique[\"value\"]  # type: ignore\n                 else:\n                     if label < 0.5 and self._classifier.nb_classes() <= 2:\n-                        best_score = max(best_score, clique[\"value\"])\n+                        best_score = max(best_score, clique[\"value\"])  # type: ignore\n                     else:\n-                        best_score = min(best_score, clique[\"value\"])\n+                        best_score = min(best_score, clique[\"value\"])  # type: ignore\n \n",
        "source_code_with_indent": "                if i == 0:\n                    <IND>best_score = clique[\"value\"]\n                <DED>else:\n                    <IND>if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        <IND>best_score = max(best_score, clique[\"value\"])\n                    <DED>else:\n                        <IND>best_score = min(best_score, clique[\"value\"])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if i == 0:\n                    <IND>best_score = clique[\"value\"]  # type: ignore\n                <DED>else:\n                    <IND>if label < 0.5 and self._classifier.nb_classes() <= 2:\n                        <IND>best_score = max(best_score, clique[\"value\"])  # type: ignore\n                    <DED>else:\n                        <IND>best_score = min(best_score, clique[\"value\"])  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]