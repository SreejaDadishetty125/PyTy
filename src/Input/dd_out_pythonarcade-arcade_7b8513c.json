[
  {
    "project": "pythonarcade/arcade",
    "commit": "7b8513cc355b1bdd2e7db57c5e586ee206ce6598",
    "filename": "arcade/tilemap/tilemap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/tilemap/tilemap.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/tilemap/tilemap.py:614:33 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `list.append` but got `Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `float` for 1st positional only parameter to call `list.append` but got `Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 614,
    "warning_line": "                    shape.append(point)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for cur_object in layer.tiled_objects:\n            shape: Optional[Union[Point, PointList, Rect]] = None\n            if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "source_code_len": 186,
        "target_code": "        for cur_object in layer.tiled_objects:\n            # shape: Optional[Union[Point, PointList, Rect]] = None\n            if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "target_code_len": 188,
        "diff_format": "@@ -508,3 +521,3 @@\n         for cur_object in layer.tiled_objects:\n-            shape: Optional[Union[Point, PointList, Rect]] = None\n+            # shape: Optional[Union[Point, PointList, Rect]] = None\n             if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "source_code_with_indent": "        for cur_object in layer.tiled_objects:\n            <IND>shape: Optional[Union[Point, PointList, Rect]] = None\n            if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for cur_object in layer.tiled_objects:\n            # shape: Optional[Union[Point, PointList, Rect]] = None\n            <IND>if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "7b8513cc355b1bdd2e7db57c5e586ee206ce6598",
    "filename": "arcade/tilemap/tilemap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/tilemap/tilemap.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/tilemap/tilemap.py:634:33 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `list.append` but got `List[float]`.",
    "message": " Expected `float` for 1st positional only parameter to call `list.append` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 634,
    "warning_line": "                    shape.append(point)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for cur_object in layer.tiled_objects:\n            shape: Optional[Union[Point, PointList, Rect]] = None\n            if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "source_code_len": 186,
        "target_code": "        for cur_object in layer.tiled_objects:\n            # shape: Optional[Union[Point, PointList, Rect]] = None\n            if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "target_code_len": 188,
        "diff_format": "@@ -508,3 +521,3 @@\n         for cur_object in layer.tiled_objects:\n-            shape: Optional[Union[Point, PointList, Rect]] = None\n+            # shape: Optional[Union[Point, PointList, Rect]] = None\n             if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "source_code_with_indent": "        for cur_object in layer.tiled_objects:\n            <IND>shape: Optional[Union[Point, PointList, Rect]] = None\n            if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for cur_object in layer.tiled_objects:\n            # shape: Optional[Union[Point, PointList, Rect]] = None\n            <IND>if isinstance(cur_object, pytiled_parser.tiled_object.Tile):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]