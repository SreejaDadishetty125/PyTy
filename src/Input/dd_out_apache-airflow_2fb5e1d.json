[
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/amazon/aws/hooks/glue_crawler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/amazon/aws/hooks/glue_crawler.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/amazon/aws/hooks/glue_crawler.py:94:12 Incompatible return type [7]: Expected `str` but got `bool`.",
    "message": " Expected `str` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 94,
    "warning_line": "            return True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update_crawler(self, **crawler_kwargs) -> str:\n        \"\"\"\n",
        "source_code_len": 68,
        "target_code": "\n    def update_crawler(self, **crawler_kwargs) -> bool:\n        \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -75,3 +75,3 @@\n \n-    def update_crawler(self, **crawler_kwargs) -> str:\n+    def update_crawler(self, **crawler_kwargs) -> bool:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def update_crawler(self, **crawler_kwargs) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def update_crawler(self, **crawler_kwargs) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/amazon/aws/hooks/glue_crawler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/amazon/aws/hooks/glue_crawler.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/amazon/aws/hooks/glue_crawler.py:96:12 Incompatible return type [7]: Expected `str` but got `bool`.",
    "message": " Expected `str` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 96,
    "warning_line": "            return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update_crawler(self, **crawler_kwargs) -> str:\n        \"\"\"\n",
        "source_code_len": 68,
        "target_code": "\n    def update_crawler(self, **crawler_kwargs) -> bool:\n        \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -75,3 +75,3 @@\n \n-    def update_crawler(self, **crawler_kwargs) -> str:\n+    def update_crawler(self, **crawler_kwargs) -> bool:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def update_crawler(self, **crawler_kwargs) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def update_crawler(self, **crawler_kwargs) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/amazon/aws/hooks/redshift.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/amazon/aws/hooks/redshift.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/amazon/aws/hooks/redshift.py:237:8 Incompatible return type [7]: Expected `List[str]` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `List[str]` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 237,
    "warning_line": "        return pk_columns or None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_table_primary_key(self, table: str, schema: Optional[str] = \"public\") -> List[str]:\n        \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\n    def get_table_primary_key(self, table: str, schema: Optional[str] = \"public\") -> Optional[List[str]]:\n        \"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -214,3 +214,3 @@\n \n-    def get_table_primary_key(self, table: str, schema: Optional[str] = \"public\") -> List[str]:\n+    def get_table_primary_key(self, table: str, schema: Optional[str] = \"public\") -> Optional[List[str]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_table_primary_key(self, table: str, schema: Optional[str] = \"public\") -> List[str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_table_primary_key(self, table: str, schema: Optional[str] = \"public\") -> Optional[List[str]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/amazon/aws/secrets/secrets_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/amazon/aws/secrets/secrets_manager.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/amazon/aws/secrets/secrets_manager.py:197:42 Incompatible parameter type [6]: Expected `typing.Union[_ast.AST, str]` for 1st positional only parameter to call `ast.literal_eval` but got `Optional[str]`.",
    "message": " Expected `typing.Union[_ast.AST, str]` for 1st positional only parameter to call `ast.literal_eval` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 197,
    "warning_line": "                secret = ast.literal_eval(secret_string)  # json.loads gives error",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                secret_string = self._get_secret(self.connections_prefix, conn_id)\n                secret = ast.literal_eval(secret_string)  # json.loads gives error\n            except ValueError:  # 'malformed node or string: ' error, for empty conns\n",
        "source_code_len": 252,
        "target_code": "                secret_string = self._get_secret(self.connections_prefix, conn_id)\n                # json.loads gives error\n                secret = ast.literal_eval(secret_string) if secret_string else None\n            except ValueError:  # 'malformed node or string: ' error, for empty conns\n",
        "target_code_len": 294,
        "diff_format": "@@ -196,3 +197,4 @@\n                 secret_string = self._get_secret(self.connections_prefix, conn_id)\n-                secret = ast.literal_eval(secret_string)  # json.loads gives error\n+                # json.loads gives error\n+                secret = ast.literal_eval(secret_string) if secret_string else None\n             except ValueError:  # 'malformed node or string: ' error, for empty conns\n",
        "source_code_with_indent": "                <IND>secret_string = self._get_secret(self.connections_prefix, conn_id)\n                secret = ast.literal_eval(secret_string)  # json.loads gives error\n            <DED>except ValueError:  # 'malformed node or string: ' error, for empty conns\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>secret_string = self._get_secret(self.connections_prefix, conn_id)\n                # json.loads gives error\n                secret = ast.literal_eval(secret_string) if secret_string else None\n            <DED>except ValueError:  # 'malformed node or string: ' error, for empty conns\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/google/cloud/hooks/automl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/automl.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/automl.py:341:8 Incompatible variable type [9]: field_mask is declared to have type `Union[Dict[typing.Any, typing.Any], FieldMask]` but is used as type `None`.",
    "message": " field_mask is declared to have type `Union[Dict[typing.Any, typing.Any], FieldMask]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 341,
    "warning_line": "        field_mask: Union[dict, FieldMask] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        project_id: str,\n        field_mask: Union[dict, FieldMask] = None,\n        filter_: Optional[str] = None,\n",
        "source_code_len": 115,
        "target_code": "        project_id: str,\n        field_mask: Optional[Union[dict, FieldMask]] = None,\n        filter_: Optional[str] = None,\n",
        "target_code_len": 125,
        "diff_format": "@@ -340,3 +349,3 @@\n         project_id: str,\n-        field_mask: Union[dict, FieldMask] = None,\n+        field_mask: Optional[Union[dict, FieldMask]] = None,\n         filter_: Optional[str] = None,\n",
        "source_code_with_indent": "        project_id: str,\n        field_mask: Union[dict, FieldMask] = None,\n        filter_: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        project_id: str,\n        field_mask: Optional[Union[dict, FieldMask]] = None,\n        filter_: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/google/cloud/hooks/automl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/automl.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/automl.py:476:8 Incompatible variable type [9]: update_mask is declared to have type `Union[Dict[typing.Any, typing.Any], FieldMask]` but is used as type `None`.",
    "message": " update_mask is declared to have type `Union[Dict[typing.Any, typing.Any], FieldMask]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 476,
    "warning_line": "        update_mask: Union[dict, FieldMask] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        dataset: Union[dict, Dataset],\n        update_mask: Union[dict, FieldMask] = None,\n        retry: Optional[Retry] = None,\n",
        "source_code_len": 130,
        "target_code": "        dataset: Union[dict, Dataset],\n        update_mask: Optional[Union[dict, FieldMask]] = None,\n        retry: Optional[Retry] = None,\n",
        "target_code_len": 140,
        "diff_format": "@@ -475,3 +490,3 @@\n         dataset: Union[dict, Dataset],\n-        update_mask: Union[dict, FieldMask] = None,\n+        update_mask: Optional[Union[dict, FieldMask]] = None,\n         retry: Optional[Retry] = None,\n",
        "source_code_with_indent": "        dataset: Union[dict, Dataset],\n        update_mask: Union[dict, FieldMask] = None,\n        retry: Optional[Retry] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        dataset: Union[dict, Dataset],\n        update_mask: Optional[Union[dict, FieldMask]] = None,\n        retry: Optional[Retry] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/google/cloud/log/stackdriver_task_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/log/stackdriver_task_handler.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/log/stackdriver_task_handler.py:212:46 Incompatible parameter type [6]: Expected `bool` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `bool` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 212,
    "warning_line": "            new_metadata['next_page_token'] = next_page_token",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Collection, Dict, List, Optional, Tuple, Type\nfrom urllib.parse import urlencode\n\ntry:\n    from functools import cached_property\nexcept ImportError:\n    from cached_property import cached_property\nfrom google.api_core.gapic_v1.client_info import ClientInfo\n",
        "source_code_len": 291,
        "target_code": "import logging\nimport sys\nfrom typing import Collection, Dict, List, Optional, Tuple, Type, Union\nfrom urllib.parse import urlencode\n\nif sys.version_info >= (3, 8):\n    from functools import cached_property\nelse:\n    from cached_property import cached_property\n\nfrom google.api_core.gapic_v1.client_info import ClientInfo\n",
        "target_code_len": 322,
        "diff_format": "@@ -18,9 +18,11 @@\n import logging\n-from typing import Collection, Dict, List, Optional, Tuple, Type\n+import sys\n+from typing import Collection, Dict, List, Optional, Tuple, Type, Union\n from urllib.parse import urlencode\n \n-try:\n+if sys.version_info >= (3, 8):\n     from functools import cached_property\n-except ImportError:\n+else:\n     from cached_property import cached_property\n+\n from google.api_core.gapic_v1.client_info import ClientInfo\n",
        "source_code_with_indent": "import logging\nfrom typing import Collection, Dict, List, Optional, Tuple, Type\nfrom urllib.parse import urlencode\n\ntry:\n    <IND>from functools import cached_property\n<DED>except ImportError:\n    <IND>from cached_property import cached_property\n<DED>from google.api_core.gapic_v1.client_info import ClientInfo\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport sys\nfrom typing import Collection, Dict, List, Optional, Tuple, Type, Union\nfrom urllib.parse import urlencode\n\nif sys.version_info >= (3, 8):\n    <IND>from functools import cached_property\n<DED>else:\n    <IND>from cached_property import cached_property\n\n<DED>from google.api_core.gapic_v1.client_info import ClientInfo\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]:\n        \"\"\"\n",
        "source_code_len": 189,
        "target_code": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, Union[str, bool]]]]:\n        \"\"\"\n",
        "target_code_len": 202,
        "diff_format": "@@ -172,3 +176,3 @@\n         self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n-    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]:\n+    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, Union[str, bool]]]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]:\n        <IND>",
        "target_code_with_indent": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, Union[str, bool]]]]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        new_metadata = {\"end_of_log\": end_of_log}\n\n",
        "source_code_len": 52,
        "target_code": "\n        new_metadata: Dict[str, Union[str, bool]] = {\"end_of_log\": end_of_log}\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -208,3 +212,3 @@\n \n-        new_metadata = {\"end_of_log\": end_of_log}\n+        new_metadata: Dict[str, Union[str, bool]] = {\"end_of_log\": end_of_log}\n \n",
        "source_code_with_indent": "\n        new_metadata = {\"end_of_log\": end_of_log}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        new_metadata: Dict[str, Union[str, bool]] = {\"end_of_log\": end_of_log}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "2fb5e1d0ec306839a3ff21d0bddbde1d022ee8c7",
    "filename": "airflow/providers/google/cloud/log/stackdriver_task_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/log/stackdriver_task_handler.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/log/stackdriver_task_handler.py:214:8 Incompatible return type [7]: Expected `Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]` but got `Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, bool]]]`.",
    "message": " Expected `Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]` but got `Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, bool]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 214,
    "warning_line": "        return [((self.task_instance_hostname, messages),)], [new_metadata]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Collection, Dict, List, Optional, Tuple, Type\nfrom urllib.parse import urlencode\n\ntry:\n    from functools import cached_property\nexcept ImportError:\n    from cached_property import cached_property\nfrom google.api_core.gapic_v1.client_info import ClientInfo\n",
        "source_code_len": 291,
        "target_code": "import logging\nimport sys\nfrom typing import Collection, Dict, List, Optional, Tuple, Type, Union\nfrom urllib.parse import urlencode\n\nif sys.version_info >= (3, 8):\n    from functools import cached_property\nelse:\n    from cached_property import cached_property\n\nfrom google.api_core.gapic_v1.client_info import ClientInfo\n",
        "target_code_len": 322,
        "diff_format": "@@ -18,9 +18,11 @@\n import logging\n-from typing import Collection, Dict, List, Optional, Tuple, Type\n+import sys\n+from typing import Collection, Dict, List, Optional, Tuple, Type, Union\n from urllib.parse import urlencode\n \n-try:\n+if sys.version_info >= (3, 8):\n     from functools import cached_property\n-except ImportError:\n+else:\n     from cached_property import cached_property\n+\n from google.api_core.gapic_v1.client_info import ClientInfo\n",
        "source_code_with_indent": "import logging\nfrom typing import Collection, Dict, List, Optional, Tuple, Type\nfrom urllib.parse import urlencode\n\ntry:\n    <IND>from functools import cached_property\n<DED>except ImportError:\n    <IND>from cached_property import cached_property\n<DED>from google.api_core.gapic_v1.client_info import ClientInfo\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport sys\nfrom typing import Collection, Dict, List, Optional, Tuple, Type, Union\nfrom urllib.parse import urlencode\n\nif sys.version_info >= (3, 8):\n    <IND>from functools import cached_property\n<DED>else:\n    <IND>from cached_property import cached_property\n\n<DED>from google.api_core.gapic_v1.client_info import ClientInfo\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]:\n        \"\"\"\n",
        "source_code_len": 189,
        "target_code": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, Union[str, bool]]]]:\n        \"\"\"\n",
        "target_code_len": 202,
        "diff_format": "@@ -172,3 +176,3 @@\n         self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n-    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]:\n+    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, Union[str, bool]]]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, str]]]:\n        <IND>",
        "target_code_with_indent": "        self, task_instance: TaskInstance, try_number: Optional[int] = None, metadata: Optional[Dict] = None\n    ) -> Tuple[List[Tuple[Tuple[str, str]]], List[Dict[str, Union[str, bool]]]]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        new_metadata = {\"end_of_log\": end_of_log}\n\n",
        "source_code_len": 52,
        "target_code": "\n        new_metadata: Dict[str, Union[str, bool]] = {\"end_of_log\": end_of_log}\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -208,3 +212,3 @@\n \n-        new_metadata = {\"end_of_log\": end_of_log}\n+        new_metadata: Dict[str, Union[str, bool]] = {\"end_of_log\": end_of_log}\n \n",
        "source_code_with_indent": "\n        new_metadata = {\"end_of_log\": end_of_log}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        new_metadata: Dict[str, Union[str, bool]] = {\"end_of_log\": end_of_log}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]