[
  {
    "project": "aio-libs/aiodocker",
    "commit": "1d555a844ee9893b2c52b11b346c0ff7ede3dfbe",
    "filename": "aiodocker/execs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aio-libs-aiodocker/aiodocker/execs.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiodocker/execs.py:82:16 Incompatible return type [7]: Expected `typing.Tuple[Variable[_T_co](covariant)]` but got `typing.Tuple[typing.Any, bytes, Optional[bool]]`.",
    "message": " Expected `typing.Tuple[Variable[_T_co](covariant)]` but got `typing.Tuple[typing.Any, bytes, Optional[bool]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 82,
    "warning_line": "                return ("
  },
  {
    "project": "aio-libs/aiodocker",
    "commit": "1d555a844ee9893b2c52b11b346c0ff7ede3dfbe",
    "filename": "aiodocker/images.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aio-libs-aiodocker/aiodocker/images.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiodocker/images.py:154:8 Incompatible variable type [9]: stream is declared to have type `typing_extensions.Literal[True]` but is used as type `typing_extensions.Literal[False]`.",
    "message": " stream is declared to have type `typing_extensions.Literal[True]` but is used as type `typing_extensions.Literal[False]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 154,
    "warning_line": "        stream: Literal[True] = False,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        tag: str = None,\n        stream: Literal[True] = False,\n    ) -> AsyncIterator[Dict[str, Any]]:\n",
        "source_code_len": 104,
        "target_code": "        tag: str = None,\n        stream: Literal[True],\n    ) -> AsyncIterator[Dict[str, Any]]:\n",
        "target_code_len": 96,
        "diff_format": "@@ -153,3 +153,3 @@\n         tag: str = None,\n-        stream: Literal[True] = False,\n+        stream: Literal[True],\n     ) -> AsyncIterator[Dict[str, Any]]:\n",
        "source_code_with_indent": "        tag: str = None,\n        stream: Literal[True] = False,\n    ) -> AsyncIterator[Dict[str, Any]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        tag: str = None,\n        stream: Literal[True],\n    ) -> AsyncIterator[Dict[str, Any]]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aio-libs/aiodocker",
    "commit": "1d555a844ee9893b2c52b11b346c0ff7ede3dfbe",
    "filename": "aiodocker/images.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aio-libs-aiodocker/aiodocker/images.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiodocker/images.py:273:8 Incompatible variable type [9]: stream is declared to have type `typing_extensions.Literal[True]` but is used as type `typing_extensions.Literal[False]`.",
    "message": " stream is declared to have type `typing_extensions.Literal[True]` but is used as type `typing_extensions.Literal[False]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 273,
    "warning_line": "        stream: Literal[True] = False,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        labels: Mapping = None,\n        stream: Literal[True] = False,\n        encoding: str = None,\n",
        "source_code_len": 101,
        "target_code": "        labels: Mapping = None,\n        stream: Literal[True],\n        encoding: str = None,\n",
        "target_code_len": 93,
        "diff_format": "@@ -272,3 +272,3 @@\n         labels: Mapping = None,\n-        stream: Literal[True] = False,\n+        stream: Literal[True],\n         encoding: str = None,\n",
        "source_code_with_indent": "        labels: Mapping = None,\n        stream: Literal[True] = False,\n        encoding: str = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        labels: Mapping = None,\n        stream: Literal[True],\n        encoding: str = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aio-libs/aiodocker",
    "commit": "1d555a844ee9893b2c52b11b346c0ff7ede3dfbe",
    "filename": "aiodocker/stream.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aio-libs-aiodocker/aiodocker/stream.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiodocker/stream.py:158:20 Incompatible return type [7]: Expected `None` but got `Tuple[bool, str]`.",
    "message": " Expected `None` but got `Tuple[bool, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 158,
    "warning_line": "                    return False, \"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def feed_data(self, data: bytes) -> None:\n        if self.tty:\n",
        "source_code_len": 68,
        "target_code": "\n    def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n        if self.tty:\n",
        "target_code_len": 82,
        "diff_format": "@@ -148,3 +152,3 @@\n \n-    def feed_data(self, data: bytes) -> None:\n+    def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n         if self.tty:\n",
        "source_code_with_indent": "\n    <DED>def feed_data(self, data: bytes) -> None:\n        <IND>if self.tty:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n        <IND>if self.tty:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if len(self._buf) < self.header_fmt.size:\n                    return False, \"\"\n                fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_len": 152,
        "target_code": "                if len(self._buf) < self.header_fmt.size:\n                    return False, b\"\"\n                fileno, msglen = self.header_fmt.unpack(\n",
        "target_code_len": 153,
        "diff_format": "@@ -157,3 +161,3 @@\n                 if len(self._buf) < self.header_fmt.size:\n-                    return False, \"\"\n+                    return False, b\"\"\n                 fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_with_indent": "                <IND>if len(self._buf) < self.header_fmt.size:\n                    <IND>return False, \"\"\n                <DED>fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>if len(self._buf) < self.header_fmt.size:\n                    <IND>return False, b\"\"\n                <DED>fileno, msglen = self.header_fmt.unpack(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if len(self._buf) < msg_and_header:\n                    return False, \"\"\n                msg = Message(\n",
        "source_code_len": 120,
        "target_code": "                if len(self._buf) < msg_and_header:\n                    return False, b\"\"\n                msg = Message(\n",
        "target_code_len": 121,
        "diff_format": "@@ -163,3 +167,3 @@\n                 if len(self._buf) < msg_and_header:\n-                    return False, \"\"\n+                    return False, b\"\"\n                 msg = Message(\n",
        "source_code_with_indent": "                if len(self._buf) < msg_and_header:\n                    <IND>return False, \"\"\n                <DED>msg = Message(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if len(self._buf) < msg_and_header:\n                    <IND>return False, b\"\"\n                <DED>msg = Message(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aio-libs/aiodocker",
    "commit": "1d555a844ee9893b2c52b11b346c0ff7ede3dfbe",
    "filename": "aiodocker/stream.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aio-libs-aiodocker/aiodocker/stream.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiodocker/stream.py:164:20 Incompatible return type [7]: Expected `None` but got `Tuple[bool, str]`.",
    "message": " Expected `None` but got `Tuple[bool, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 164,
    "warning_line": "                    return False, \"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def feed_data(self, data: bytes) -> None:\n        if self.tty:\n",
        "source_code_len": 68,
        "target_code": "\n    def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n        if self.tty:\n",
        "target_code_len": 82,
        "diff_format": "@@ -148,3 +152,3 @@\n \n-    def feed_data(self, data: bytes) -> None:\n+    def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n         if self.tty:\n",
        "source_code_with_indent": "\n    <DED>def feed_data(self, data: bytes) -> None:\n        <IND>if self.tty:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n        <IND>if self.tty:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if len(self._buf) < self.header_fmt.size:\n                    return False, \"\"\n                fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_len": 152,
        "target_code": "                if len(self._buf) < self.header_fmt.size:\n                    return False, b\"\"\n                fileno, msglen = self.header_fmt.unpack(\n",
        "target_code_len": 153,
        "diff_format": "@@ -157,3 +161,3 @@\n                 if len(self._buf) < self.header_fmt.size:\n-                    return False, \"\"\n+                    return False, b\"\"\n                 fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_with_indent": "                <IND>if len(self._buf) < self.header_fmt.size:\n                    <IND>return False, \"\"\n                <DED>fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>if len(self._buf) < self.header_fmt.size:\n                    <IND>return False, b\"\"\n                <DED>fileno, msglen = self.header_fmt.unpack(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if len(self._buf) < msg_and_header:\n                    return False, \"\"\n                msg = Message(\n",
        "source_code_len": 120,
        "target_code": "                if len(self._buf) < msg_and_header:\n                    return False, b\"\"\n                msg = Message(\n",
        "target_code_len": 121,
        "diff_format": "@@ -163,3 +167,3 @@\n                 if len(self._buf) < msg_and_header:\n-                    return False, \"\"\n+                    return False, b\"\"\n                 msg = Message(\n",
        "source_code_with_indent": "                if len(self._buf) < msg_and_header:\n                    <IND>return False, \"\"\n                <DED>msg = Message(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if len(self._buf) < msg_and_header:\n                    <IND>return False, b\"\"\n                <DED>msg = Message(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aio-libs/aiodocker",
    "commit": "1d555a844ee9893b2c52b11b346c0ff7ede3dfbe",
    "filename": "aiodocker/stream.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aio-libs-aiodocker/aiodocker/stream.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiodocker/stream.py:170:8 Incompatible return type [7]: Expected `None` but got `Tuple[bool, bytes]`.",
    "message": " Expected `None` but got `Tuple[bool, bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 170,
    "warning_line": "        return False, b\"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def feed_data(self, data: bytes) -> None:\n        if self.tty:\n",
        "source_code_len": 68,
        "target_code": "\n    def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n        if self.tty:\n",
        "target_code_len": 82,
        "diff_format": "@@ -148,3 +152,3 @@\n \n-    def feed_data(self, data: bytes) -> None:\n+    def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n         if self.tty:\n",
        "source_code_with_indent": "\n    <DED>def feed_data(self, data: bytes) -> None:\n        <IND>if self.tty:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def feed_data(self, data: bytes) -> Tuple[bool, bytes]:\n        <IND>if self.tty:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if len(self._buf) < self.header_fmt.size:\n                    return False, \"\"\n                fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_len": 152,
        "target_code": "                if len(self._buf) < self.header_fmt.size:\n                    return False, b\"\"\n                fileno, msglen = self.header_fmt.unpack(\n",
        "target_code_len": 153,
        "diff_format": "@@ -157,3 +161,3 @@\n                 if len(self._buf) < self.header_fmt.size:\n-                    return False, \"\"\n+                    return False, b\"\"\n                 fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_with_indent": "                <IND>if len(self._buf) < self.header_fmt.size:\n                    <IND>return False, \"\"\n                <DED>fileno, msglen = self.header_fmt.unpack(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>if len(self._buf) < self.header_fmt.size:\n                    <IND>return False, b\"\"\n                <DED>fileno, msglen = self.header_fmt.unpack(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if len(self._buf) < msg_and_header:\n                    return False, \"\"\n                msg = Message(\n",
        "source_code_len": 120,
        "target_code": "                if len(self._buf) < msg_and_header:\n                    return False, b\"\"\n                msg = Message(\n",
        "target_code_len": 121,
        "diff_format": "@@ -163,3 +167,3 @@\n                 if len(self._buf) < msg_and_header:\n-                    return False, \"\"\n+                    return False, b\"\"\n                 msg = Message(\n",
        "source_code_with_indent": "                if len(self._buf) < msg_and_header:\n                    <IND>return False, \"\"\n                <DED>msg = Message(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                if len(self._buf) < msg_and_header:\n                    <IND>return False, b\"\"\n                <DED>msg = Message(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]