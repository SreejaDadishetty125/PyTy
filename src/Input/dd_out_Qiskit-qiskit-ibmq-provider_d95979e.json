[
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "d95979e7dbb94d50c9e9e3bce8aab0c0b48d0e2e",
    "filename": "qiskit/providers/ibmq/api_v2/clients/account.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api_v2/clients/account.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api_v2/clients/account.py:235:47 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `qiskit.providers.ibmq.api_v2.rest.job.Job.get` but got `Optional[List[str]]`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `qiskit.providers.ibmq.api_v2.rest.job.Job.get` but got `Optional[List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 235,
    "warning_line": "        return self.client_api.job(job_id).get(excluded_fields,"
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "d95979e7dbb94d50c9e9e3bce8aab0c0b48d0e2e",
    "filename": "qiskit/providers/ibmq/api_v2/clients/account.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api_v2/clients/account.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api_v2/clients/account.py:236:47 Incompatible parameter type [6]: Expected `List[str]` for 2nd positional only parameter to call `qiskit.providers.ibmq.api_v2.rest.job.Job.get` but got `Optional[List[str]]`.",
    "message": " Expected `List[str]` for 2nd positional only parameter to call `qiskit.providers.ibmq.api_v2.rest.job.Job.get` but got `Optional[List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 236,
    "warning_line": "                                               included_fields)"
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "d95979e7dbb94d50c9e9e3bce8aab0c0b48d0e2e",
    "filename": "qiskit/providers/ibmq/api_v2/clients/auth.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api_v2/clients/auth.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api_v2/clients/auth.py:149:8 Incompatible return type [7]: Expected `str` but got `typing.Optional[str]`.",
    "message": " Expected `str` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 149,
    "warning_line": "        return self.client_auth.session.access_token",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Client for accessing authentication features of IBM Q Experience.\"\"\"\nfrom typing import Dict, List, Any\n\n",
        "source_code_len": 108,
        "target_code": "\"\"\"Client for accessing authentication features of IBM Q Experience.\"\"\"\nfrom typing import Dict, List, Optional, Any\n\n",
        "target_code_len": 118,
        "diff_format": "@@ -15,3 +15,3 @@\n \"\"\"Client for accessing authentication features of IBM Q Experience.\"\"\"\n-from typing import Dict, List, Any\n+from typing import Dict, List, Optional, Any\n \n",
        "source_code_with_indent": "\"\"\"Client for accessing authentication features of IBM Q Experience.\"\"\"\nfrom typing import Dict, List, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Client for accessing authentication features of IBM Q Experience.\"\"\"\nfrom typing import Dict, List, Optional, Any\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def current_access_token(self) -> str:\n        \"\"\"Return the current access token.\n",
        "source_code_len": 88,
        "target_code": "\n    def current_access_token(self) -> Optional[str]:\n        \"\"\"Return the current access token.\n",
        "target_code_len": 98,
        "diff_format": "@@ -142,3 +142,3 @@\n \n-    def current_access_token(self) -> str:\n+    def current_access_token(self) -> Optional[str]:\n         \"\"\"Return the current access token.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def current_access_token(self) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def current_access_token(self) -> Optional[str]:\n        <IND>"
      }
    ]
  }
]