[
  {
    "project": "lebrice/SimpleParsing",
    "commit": "82c3af4bc454f2087091c011377a1b9f363d4a6b",
    "filename": "examples/container_types/lists_example.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-SimpleParsing/examples/container_types/lists_example.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/container_types/lists_example.py:18:44 Incompatible parameter type [6]: Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[float]`.",
    "message": " Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 18,
    "warning_line": "    some_floats: List[float] = MutableField([3.14, 2.56])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom simple_parsing import ArgumentParser, MutableField\n\n",
        "source_code_len": 58,
        "target_code": "\nfrom simple_parsing import ArgumentParser\nfrom simple_parsing.utils import list_field\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -3,3 +3,4 @@\n \n-from simple_parsing import ArgumentParser, MutableField\n+from simple_parsing import ArgumentParser\n+from simple_parsing.utils import list_field\n \n",
        "source_code_with_indent": "\nfrom simple_parsing import ArgumentParser, MutableField\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom simple_parsing import ArgumentParser\nfrom simple_parsing.utils import list_field\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = MutableField([3.14, 2.56])\n\n    some_list_of_strings: List[str] = MutableField([\"default_1\", \"default_2\"])\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "source_code_len": 336,
        "target_code": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = list_field(3.14, 2.56)\n\n    some_list_of_strings: List[str] = list_field(\"default_1\", \"default_2\")\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "target_code_len": 328,
        "diff_format": "@@ -17,5 +18,5 @@\n     # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n-    some_floats: List[float] = MutableField([3.14, 2.56])\n+    some_floats: List[float] = list_field(3.14, 2.56)\n \n-    some_list_of_strings: List[str] = MutableField([\"default_1\", \"default_2\"])\n+    some_list_of_strings: List[str] = list_field(\"default_1\", \"default_2\")\n     \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "source_code_with_indent": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = MutableField([3.14, 2.56])\n\n    some_list_of_strings: List[str] = MutableField([\"default_1\", \"default_2\"])\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = list_field(3.14, 2.56)\n\n    some_list_of_strings: List[str] = list_field(\"default_1\", \"default_2\")\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/SimpleParsing",
    "commit": "82c3af4bc454f2087091c011377a1b9f363d4a6b",
    "filename": "examples/container_types/lists_example.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-SimpleParsing/examples/container_types/lists_example.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/container_types/lists_example.py:20:51 Incompatible parameter type [6]: Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[str]`.",
    "message": " Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 20,
    "warning_line": "    some_list_of_strings: List[str] = MutableField([\"default_1\", \"default_2\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom simple_parsing import ArgumentParser, MutableField\n\n",
        "source_code_len": 58,
        "target_code": "\nfrom simple_parsing import ArgumentParser\nfrom simple_parsing.utils import list_field\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -3,3 +3,4 @@\n \n-from simple_parsing import ArgumentParser, MutableField\n+from simple_parsing import ArgumentParser\n+from simple_parsing.utils import list_field\n \n",
        "source_code_with_indent": "\nfrom simple_parsing import ArgumentParser, MutableField\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom simple_parsing import ArgumentParser\nfrom simple_parsing.utils import list_field\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = MutableField([3.14, 2.56])\n\n    some_list_of_strings: List[str] = MutableField([\"default_1\", \"default_2\"])\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "source_code_len": 336,
        "target_code": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = list_field(3.14, 2.56)\n\n    some_list_of_strings: List[str] = list_field(\"default_1\", \"default_2\")\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "target_code_len": 328,
        "diff_format": "@@ -17,5 +18,5 @@\n     # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n-    some_floats: List[float] = MutableField([3.14, 2.56])\n+    some_floats: List[float] = list_field(3.14, 2.56)\n \n-    some_list_of_strings: List[str] = MutableField([\"default_1\", \"default_2\"])\n+    some_list_of_strings: List[str] = list_field(\"default_1\", \"default_2\")\n     \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "source_code_with_indent": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = MutableField([3.14, 2.56])\n\n    some_list_of_strings: List[str] = MutableField([\"default_1\", \"default_2\"])\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # To simplify this, you can use `MutableField(value)` which is just a shortcut for `field(default_factory=lambda: value)`.\n    some_floats: List[float] = list_field(3.14, 2.56)\n\n    some_list_of_strings: List[str] = list_field(\"default_1\", \"default_2\")\n    \"\"\"This list has a default value of [\"default_1\", \"default_2\"].\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/SimpleParsing",
    "commit": "82c3af4bc454f2087091c011377a1b9f363d4a6b",
    "filename": "examples/merging/multiple_lists_example.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-SimpleParsing/examples/merging/multiple_lists_example.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/merging/multiple_lists_example.py:24:43 Incompatible parameter type [6]: Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[int]`.",
    "message": " Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 24,
    "warning_line": "    kernel_sizes: List[int] = MutableField([7, 5, 5])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from dataclasses import dataclass, field, fields\nfrom typing import List\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\n\n@dataclass\n",
        "source_code_len": 162,
        "target_code": "from dataclasses import dataclass, field, fields\nfrom typing import List, Tuple\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\nfrom simple_parsing.utils import list_field\n@dataclass\n",
        "target_code_len": 212,
        "diff_format": "@@ -15,6 +15,6 @@\n from dataclasses import dataclass, field, fields\n-from typing import List\n+from typing import List, Tuple\n \n from simple_parsing import ArgumentParser, MutableField, ConflictResolution\n-\n+from simple_parsing.utils import list_field\n @dataclass\n",
        "source_code_with_indent": "from dataclasses import dataclass, field, fields\nfrom typing import List\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\n\n@dataclass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from dataclasses import dataclass, field, fields\nfrom typing import List, Tuple\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\nfrom simple_parsing.utils import list_field\n@dataclass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    num_layers: int = 3\n    kernel_sizes: List[int] = MutableField([7, 5, 5])\n    num_filters: List[int] = MutableField([32,64,64])\n\n",
        "source_code_len": 133,
        "target_code": "    num_layers: int = 3\n    kernel_sizes: Tuple[int,int,int] = (7, 5, 5)\n    num_filters: List[int] = list_field(32,64,64)\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -23,4 +23,4 @@\n     num_layers: int = 3\n-    kernel_sizes: List[int] = MutableField([7, 5, 5])\n-    num_filters: List[int] = MutableField([32,64,64])\n+    kernel_sizes: Tuple[int,int,int] = (7, 5, 5)\n+    num_filters: List[int] = list_field(32,64,64)\n \n",
        "source_code_with_indent": "    num_layers: int = 3\n    kernel_sizes: List[int] = MutableField([7, 5, 5])\n    num_filters: List[int] = MutableField([32,64,64])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    num_layers: int = 3\n    kernel_sizes: Tuple[int,int,int] = (7, 5, 5)\n    num_filters: List[int] = list_field(32,64,64)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/SimpleParsing",
    "commit": "82c3af4bc454f2087091c011377a1b9f363d4a6b",
    "filename": "examples/merging/multiple_lists_example.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-SimpleParsing/examples/merging/multiple_lists_example.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/merging/multiple_lists_example.py:25:42 Incompatible parameter type [6]: Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[int]`.",
    "message": " Expected `typing.Type[Variable[simple_parsing.utils.T]]` for 1st positional only parameter to call `simple_parsing.utils.MutableField` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "    num_filters: List[int] = MutableField([32,64,64])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from dataclasses import dataclass, field, fields\nfrom typing import List\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\n\n@dataclass\n",
        "source_code_len": 162,
        "target_code": "from dataclasses import dataclass, field, fields\nfrom typing import List, Tuple\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\nfrom simple_parsing.utils import list_field\n@dataclass\n",
        "target_code_len": 212,
        "diff_format": "@@ -15,6 +15,6 @@\n from dataclasses import dataclass, field, fields\n-from typing import List\n+from typing import List, Tuple\n \n from simple_parsing import ArgumentParser, MutableField, ConflictResolution\n-\n+from simple_parsing.utils import list_field\n @dataclass\n",
        "source_code_with_indent": "from dataclasses import dataclass, field, fields\nfrom typing import List\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\n\n@dataclass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from dataclasses import dataclass, field, fields\nfrom typing import List, Tuple\n\nfrom simple_parsing import ArgumentParser, MutableField, ConflictResolution\nfrom simple_parsing.utils import list_field\n@dataclass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    num_layers: int = 3\n    kernel_sizes: List[int] = MutableField([7, 5, 5])\n    num_filters: List[int] = MutableField([32,64,64])\n\n",
        "source_code_len": 133,
        "target_code": "    num_layers: int = 3\n    kernel_sizes: Tuple[int,int,int] = (7, 5, 5)\n    num_filters: List[int] = list_field(32,64,64)\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -23,4 +23,4 @@\n     num_layers: int = 3\n-    kernel_sizes: List[int] = MutableField([7, 5, 5])\n-    num_filters: List[int] = MutableField([32,64,64])\n+    kernel_sizes: Tuple[int,int,int] = (7, 5, 5)\n+    num_filters: List[int] = list_field(32,64,64)\n \n",
        "source_code_with_indent": "    num_layers: int = 3\n    kernel_sizes: List[int] = MutableField([7, 5, 5])\n    num_filters: List[int] = MutableField([32,64,64])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    num_layers: int = 3\n    kernel_sizes: Tuple[int,int,int] = (7, 5, 5)\n    num_filters: List[int] = list_field(32,64,64)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/SimpleParsing",
    "commit": "82c3af4bc454f2087091c011377a1b9f363d4a6b",
    "filename": "simple_parsing/docstring.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-SimpleParsing/simple_parsing/docstring.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "simple_parsing/docstring.py:156:4 Incompatible variable type [9]: token is declared to have type `str` but is used as type `None`.",
    "message": " token is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 156,
    "warning_line": "    token: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    end_line: int\n    token: str = None\n    triple_single = \"'''\"\n",
        "source_code_len": 66,
        "target_code": "    end_line: int\n    token: Optional[str] = None\n    triple_single = \"'''\"\n",
        "target_code_len": 76,
        "diff_format": "@@ -155,3 +155,3 @@\n     end_line: int\n-    token: str = None\n+    token: Optional[str] = None\n     triple_single = \"'''\"\n",
        "source_code_with_indent": "    end_line: int\n    token: str = None\n    triple_single = \"'''\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    end_line: int\n    token: Optional[str] = None\n    triple_single = \"'''\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/SimpleParsing",
    "commit": "82c3af4bc454f2087091c011377a1b9f363d4a6b",
    "filename": "simple_parsing/parsing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-SimpleParsing/simple_parsing/parsing.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "simple_parsing/parsing.py:53:8 Incompatible attribute type [8]: Attribute `_wrappers` declared in class `ArgumentParser` has type `typing.Dict[typing.Type[typing.Any], typing.Dict[str, typing.List[simple_parsing.wrappers.dataclass_wrapper.DataclassWrapper[typing.Any]]]]` but is used as type `typing.DefaultDict[Variable[collections._KT], typing.DefaultDict[Variable[collections._KT], typing.List[Variable[_T]]]]`.",
    "message": " Attribute `_wrappers` declared in class `ArgumentParser` has type `typing.Dict[typing.Type[typing.Any], typing.Dict[str, typing.List[simple_parsing.wrappers.dataclass_wrapper.DataclassWrapper[typing.Any]]]]` but is used as type `typing.DefaultDict[Variable[collections._KT], typing.DefaultDict[Variable[collections._KT], typing.List[Variable[_T]]]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 53,
    "warning_line": "        self._wrappers: Dict[DataclassType, Dict[str, List[DataclassWrapper]]] = defaultdict(lambda: defaultdict(list))"
  }
]