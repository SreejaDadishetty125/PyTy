[
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/installation/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/installation/executor.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/installation/executor.py:96:37 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Operation`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Operation`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 96,
    "warning_line": "        self._total_operations = len(operations)"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/installation/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/installation/executor.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/installation/executor.py:105:35 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[itertools._T1]]` for 1st positional only parameter to call `itertools.groupby.__new__` but got `Operation`.",
    "message": " Expected `typing.Iterable[Variable[itertools._T1]]` for 1st positional only parameter to call `itertools.groupby.__new__` but got `Operation`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 105,
    "warning_line": "        groups = itertools.groupby(operations, key=lambda o: -o.priority)"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/installation/operations/operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/installation/operations/operation.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/installation/operations/operation.py:22:8 Incompatible return type [7]: Expected `str` but got `typing.Optional[str]`.",
    "message": " Expected `str` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 22,
    "warning_line": "        return self._reason"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/failure.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/failure.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/failure.py:107:32 Incompatible parameter type [6]: Expected `Tuple[str, int]` for 1st positional only parameter to call `list.append` but got `Tuple[str, None]`.",
    "message": " Expected `Tuple[str, int]` for 1st positional only parameter to call `list.append` but got `Tuple[str, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "            self._lines.append((message, None))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List\nfrom typing import Tuple\n",
        "source_code_len": 49,
        "target_code": "from typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "target_code_len": 77,
        "diff_format": "@@ -2,2 +2,3 @@\n from typing import List\n+from typing import Optional\n from typing import Tuple\n",
        "source_code_with_indent": "from typing import List\nfrom typing import Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, int]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "source_code_len": 191,
        "target_code": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, Optional[int]]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "target_code_len": 201,
        "diff_format": "@@ -27,3 +28,3 @@\n         self._derivations = {}  # type: Dict[Incompatibility, int]\n-        self._lines = []  # type: List[Tuple[str, int]]\n+        self._lines = []  # type: List[Tuple[str, Optional[int]]]\n         self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "source_code_with_indent": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, int]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, Optional[int]]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/failure.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/failure.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/failure.py:116:8 Incompatible variable type [9]: cause is declared to have type `ConflictCause` but is used as type `poetry.mixology.incompatibility_cause.IncompatibilityCause`.",
    "message": " cause is declared to have type `ConflictCause` but is used as type `poetry.mixology.incompatibility_cause.IncompatibilityCause`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 116,
    "warning_line": "        cause = incompatibility.cause  # type: ConflictCause"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/failure.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/failure.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/failure.py:169:40 Incompatible parameter type [6]: Expected `Tuple[str, int]` for 1st positional only parameter to call `list.append` but got `Tuple[str, None]`.",
    "message": " Expected `Tuple[str, int]` for 1st positional only parameter to call `list.append` but got `Tuple[str, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 169,
    "warning_line": "                    self._lines.append((\"\", None))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List\nfrom typing import Tuple\n",
        "source_code_len": 49,
        "target_code": "from typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "target_code_len": 77,
        "diff_format": "@@ -2,2 +2,3 @@\n from typing import List\n+from typing import Optional\n from typing import Tuple\n",
        "source_code_with_indent": "from typing import List\nfrom typing import Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, int]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "source_code_len": 191,
        "target_code": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, Optional[int]]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "target_code_len": 201,
        "diff_format": "@@ -27,3 +28,3 @@\n         self._derivations = {}  # type: Dict[Incompatibility, int]\n-        self._lines = []  # type: List[Tuple[str, int]]\n+        self._lines = []  # type: List[Tuple[str, Optional[int]]]\n         self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "source_code_with_indent": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, int]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._derivations = {}  # type: Dict[Incompatibility, int]\n        self._lines = []  # type: List[Tuple[str, Optional[int]]]\n        self._line_numbers = {}  # type: Dict[Incompatibility, int]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/failure.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/failure.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/failure.py:258:8 Incompatible variable type [9]: cause is declared to have type `ConflictCause` but is used as type `poetry.mixology.incompatibility_cause.IncompatibilityCause`.",
    "message": " cause is declared to have type `ConflictCause` but is used as type `poetry.mixology.incompatibility_cause.IncompatibilityCause`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 258,
    "warning_line": "        cause = incompatibility.cause  # type: ConflictCause"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:53:34 Incompatible parameter type [6]: Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "message": " Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "                    by_ref[ref] = by_ref[ref].intersect(term)"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:244:26 Unsupported operand [58]: `+` is not supported for operand types `str` and `int`.",
    "message": " `+` is not supported for operand types `str` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 244,
    "warning_line": "            buffer.append(\" \" + this_line)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if this_line is not None:\n            buffer.append(\" \" + this_line)\n\n",
        "source_code_len": 78,
        "target_code": "        if this_line is not None:\n            buffer.append(\" \" + str(this_line))\n\n",
        "target_code_len": 83,
        "diff_format": "@@ -243,3 +249,3 @@\n         if this_line is not None:\n-            buffer.append(\" \" + this_line)\n+            buffer.append(\" \" + str(this_line))\n \n",
        "source_code_with_indent": "        if this_line is not None:\n            <IND>buffer.append(\" \" + this_line)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if this_line is not None:\n            <IND>buffer.append(\" \" + str(this_line))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:249:26 Unsupported operand [58]: `+` is not supported for operand types `str` and `int`.",
    "message": " `+` is not supported for operand types `str` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 249,
    "warning_line": "            buffer.append(\" \" + other_line)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if other_line is not None:\n            buffer.append(\" \" + other_line)\n\n",
        "source_code_len": 80,
        "target_code": "        if other_line is not None:\n            buffer.append(\" \" + str(other_line))\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -248,3 +254,3 @@\n         if other_line is not None:\n-            buffer.append(\" \" + other_line)\n+            buffer.append(\" \" + str(other_line))\n \n",
        "source_code_with_indent": "        if other_line is not None:\n            <IND>buffer.append(\" \" + other_line)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if other_line is not None:\n            <IND>buffer.append(\" \" + str(other_line))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:257:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 257,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:261:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 261,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:265:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 265,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:268:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 268,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:303:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 303,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:309:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 309,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:337:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 337,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:381:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 381,
    "warning_line": "            return None"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:396:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 396,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:399:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 399,
    "warning_line": "            return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:446:16 Incompatible return type [7]: Expected `Term` but got `None`.",
    "message": " Expected `Term` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 446,
    "warning_line": "                return"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/incompatibility.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/incompatibility.py:450:8 Incompatible return type [7]: Expected `Term` but got `typing.Optional[Term]`.",
    "message": " Expected `Term` but got `typing.Optional[Term]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 450,
    "warning_line": "        return found"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/partial_solution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/partial_solution.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/partial_solution.py:145:35 Incompatible parameter type [6]: Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "message": " Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "            self._positive[name] = old_positive.intersect(assignment)"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/partial_solution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/partial_solution.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/partial_solution.py:161:35 Incompatible parameter type [6]: Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "message": " Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 161,
    "warning_line": "            self._positive[name] = term"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/partial_solution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/partial_solution.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/partial_solution.py:166:40 Incompatible parameter type [6]: Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "message": " Expected `Term` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[Term]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 166,
    "warning_line": "            self._negative[name][ref] = term"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/partial_solution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/partial_solution.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/partial_solution.py:173:8 Incompatible variable type [9]: assigned_term is declared to have type `Term` but is used as type `None`.",
    "message": " assigned_term is declared to have type `Term` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 173,
    "warning_line": "        assigned_term = None  # type: Term"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/partial_solution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/partial_solution.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/partial_solution.py:193:16 Incompatible variable type [9]: assigned_term is declared to have type `Term` but is used as type `typing.Optional[Term]`.",
    "message": " assigned_term is declared to have type `Term` but is used as type `typing.Optional[Term]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 193,
    "warning_line": "                assigned_term = assigned_term.intersect(assignment)"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/partial_solution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/partial_solution.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/partial_solution.py:211:12 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 211,
    "warning_line": "            return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/partial_solution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/partial_solution.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/partial_solution.py:215:12 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 215,
    "warning_line": "            return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:60:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 60,
    "warning_line": "                    return SetRelation.DISJOINT"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:64:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 64,
    "warning_line": "                    return SetRelation.SUBSET"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:68:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 68,
    "warning_line": "                    return SetRelation.DISJOINT"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:70:16 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "                return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:73:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 73,
    "warning_line": "                    return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:77:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 77,
    "warning_line": "                    return SetRelation.DISJOINT"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:81:16 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 81,
    "warning_line": "                return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:85:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 85,
    "warning_line": "                    return SetRelation.SUBSET"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:89:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 89,
    "warning_line": "                    return SetRelation.SUBSET"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:93:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 93,
    "warning_line": "                    return SetRelation.DISJOINT"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:96:16 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 96,
    "warning_line": "                return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:99:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 99,
    "warning_line": "                    return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:103:20 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 103,
    "warning_line": "                    return SetRelation.SUBSET"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:107:16 Incompatible return type [7]: Expected `int` but got `str`.",
    "message": " Expected `int` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 107,
    "warning_line": "                return SetRelation.OVERLAPPING"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/term.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/term.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/term.py:148:8 Incompatible return type [7]: Expected `Term` but got `typing.Optional[Term]`.",
    "message": " Expected `Term` but got `typing.Optional[Term]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 148,
    "warning_line": "        return self.intersect(other.inverse)"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/version_solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/mixology/version_solver.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/mixology/version_solver.py:249:66 Incompatible parameter type [6]: Expected `Term` for 1st positional only parameter to call `Term.difference` but got `typing.Optional[Term]`.",
    "message": " Expected `Term` for 1st positional only parameter to call `Term.difference` but got `typing.Optional[Term]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 249,
    "warning_line": "                    difference = most_recent_satisfier.difference(most_recent_term)"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/publishing/publisher.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/publishing/publisher.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/publishing/publisher.py:97:12 Incompatible parameter type [6]: Expected `bool` for 4th parameter `dry_run` to call `Uploader.upload` but got `Optional[bool]`.",
    "message": " Expected `bool` for 4th parameter `dry_run` to call `Uploader.upload` but got `Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 97,
    "warning_line": "            dry_run=dry_run,"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/publishing/uploader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/publishing/uploader.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/publishing/uploader.py:283:24 Incompatible parameter type [6]: Expected `Union[ConnectionError, HTTPError]` for 1st positional only parameter to call `UploadError.__init__` but got `str`.",
    "message": " Expected `Union[ConnectionError, HTTPError]` for 1st positional only parameter to call `UploadError.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 283,
    "warning_line": "                        \"Redirects are not supported. \"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class UploadError(Exception):\n    def __init__(self, error):  # type: (Union[ConnectionError, HTTPError]) -> None\n        if isinstance(error, HTTPError):\n",
        "source_code_len": 155,
        "target_code": "class UploadError(Exception):\n    def __init__(self, error):  # type: (Union[ConnectionError, HTTPError, str]) -> None\n        if isinstance(error, HTTPError):\n",
        "target_code_len": 160,
        "diff_format": "@@ -32,3 +40,3 @@\n class UploadError(Exception):\n-    def __init__(self, error):  # type: (Union[ConnectionError, HTTPError]) -> None\n+    def __init__(self, error):  # type: (Union[ConnectionError, HTTPError, str]) -> None\n         if isinstance(error, HTTPError):\n",
        "source_code_with_indent": "class UploadError(Exception):\n    <IND>def __init__(self, error):  # type: (Union[ConnectionError, HTTPError]) -> None\n        <IND>if isinstance(error, HTTPError):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class UploadError(Exception):\n    <IND>def __init__(self, error):  # type: (Union[ConnectionError, HTTPError, str]) -> None\n        <IND>if isinstance(error, HTTPError):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/publishing/uploader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/publishing/uploader.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/publishing/uploader.py:297:8 Incompatible return type [7]: Expected `requests.models.Response` but got `Optional[requests.models.Response]`.",
    "message": " Expected `requests.models.Response` but got `Optional[requests.models.Response]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 297,
    "warning_line": "        return resp"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/repositories/legacy_repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/repositories/legacy_repository.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/repositories/legacy_repository.py:378:4 Inconsistent override [15]: `poetry.repositories.legacy_repository.LegacyRepository._get` overrides method defined in `PyPiRepository` inconsistently. Returned type `Optional[Page]` is not a subtype of the overridden return `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "message": " `poetry.repositories.legacy_repository.LegacyRepository._get` overrides method defined in `PyPiRepository` inconsistently. Returned type `Optional[Page]` is not a subtype of the overridden return `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 378,
    "warning_line": "    def _get(self, endpoint):  # type: (str) -> Union[Page, None]"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/repositories/pool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/repositories/pool.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/repositories/pool.py:42:8 Incompatible variable type [9]: name is declared to have type `str` but is used as type `Optional[str]`.",
    "message": " name is declared to have type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 42,
    "warning_line": "        name = name.lower() if name is not None else None"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/repositories/pool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/repositories/pool.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/repositories/pool.py:115:29 Incompatible variable type [9]: extras is declared to have type `List[str]` but is used as type `None`.",
    "message": " extras is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 115,
    "warning_line": "        self, name, version, extras=None, repository=None"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/repositories/pool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/repositories/pool.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/repositories/pool.py:115:42 Incompatible variable type [9]: repository is declared to have type `str` but is used as type `None`.",
    "message": " repository is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 115,
    "warning_line": "        self, name, version, extras=None, repository=None"
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/utils/setup_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/utils/setup_reader.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/utils/setup_reader.py:222:43 Incompatible parameter type [6]: Expected `_ast.Call` for 1st positional only parameter to call `SetupReader._find_in_dict` but got `_ast.Dict`.",
    "message": " Expected `_ast.Call` for 1st positional only parameter to call `SetupReader._find_in_dict` but got `_ast.Dict`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 222,
    "warning_line": "                value = self._find_in_dict(variable, \"install_requires\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n        for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_len": 140,
        "target_code": "\n    def _find_in_dict(\n        self, dict_, name\n    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n        for key, val in zip(dict_.keys, dict_.values):\n",
        "target_code_len": 171,
        "diff_format": "@@ -358,3 +358,5 @@\n \n-    def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n+    def _find_in_dict(\n+        self, dict_, name\n+    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n         for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED>def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n        <IND>for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED>def _find_in_dict(\n        self, dict_, name\n    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n        <IND>for key, val in zip(dict_.keys, dict_.values):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/utils/setup_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/utils/setup_reader.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/utils/setup_reader.py:264:43 Incompatible parameter type [6]: Expected `_ast.Call` for 1st positional only parameter to call `SetupReader._find_in_dict` but got `_ast.Dict`.",
    "message": " Expected `_ast.Call` for 1st positional only parameter to call `SetupReader._find_in_dict` but got `_ast.Dict`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 264,
    "warning_line": "                value = self._find_in_dict(variable, \"extras_require\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n        for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_len": 140,
        "target_code": "\n    def _find_in_dict(\n        self, dict_, name\n    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n        for key, val in zip(dict_.keys, dict_.values):\n",
        "target_code_len": 171,
        "diff_format": "@@ -358,3 +358,5 @@\n \n-    def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n+    def _find_in_dict(\n+        self, dict_, name\n+    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n         for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED>def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n        <IND>for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED>def _find_in_dict(\n        self, dict_, name\n    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n        <IND>for key, val in zip(dict_.keys, dict_.values):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/utils/setup_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/utils/setup_reader.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/utils/setup_reader.py:315:43 Incompatible parameter type [6]: Expected `_ast.Call` for 1st positional only parameter to call `SetupReader._find_in_dict` but got `_ast.Dict`.",
    "message": " Expected `_ast.Call` for 1st positional only parameter to call `SetupReader._find_in_dict` but got `_ast.Dict`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 315,
    "warning_line": "                value = self._find_in_dict(variable, name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n        for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_len": 140,
        "target_code": "\n    def _find_in_dict(\n        self, dict_, name\n    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n        for key, val in zip(dict_.keys, dict_.values):\n",
        "target_code_len": 171,
        "diff_format": "@@ -358,3 +358,5 @@\n \n-    def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n+    def _find_in_dict(\n+        self, dict_, name\n+    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n         for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_with_indent": "\n    <DED><DED><DED><DED>def _find_in_dict(self, dict_, name):  # type: (ast.Call, str) -> Optional[Any]\n        <IND>for key, val in zip(dict_.keys, dict_.values):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED><DED>def _find_in_dict(\n        self, dict_, name\n    ):  # type: (Union[ast.Dict, ast.Call], str) -> Optional[Any]\n        <IND>for key, val in zip(dict_.keys, dict_.values):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/version/version_selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/version/version_selector.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/version/version_selector.py:16:8 Incompatible variable type [9]: source is declared to have type `str` but is used as type `None`.",
    "message": " source is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 16,
    "warning_line": "        source=None,  # type: str"
  }
]