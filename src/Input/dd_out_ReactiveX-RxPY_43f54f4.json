[
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/observable/range.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/range.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/range.py:36:31 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 2nd positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 2nd positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        range_t = range(start, stop)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional\n",
        "source_code_len": 28,
        "target_code": "from sys import maxsize\nfrom typing import Optional\n",
        "target_code_len": 52,
        "diff_format": "@@ -1,1 +1,2 @@\n+from sys import maxsize\n from typing import Optional\n",
        "source_code_with_indent": "from typing import Optional\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from sys import maxsize\nfrom typing import Optional\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if step is None and stop is None:\n",
        "source_code_len": 39,
        "target_code": "\n    _stop: int = maxsize if stop is None else stop\n    _step: int = 1 if step is None else step\n\n    if step is None and stop is None:\n",
        "target_code_len": 136,
        "diff_format": "@@ -32,2 +33,5 @@\n \n+    _stop: int = maxsize if stop is None else stop\n+    _step: int = 1 if step is None else step\n+\n     if step is None and stop is None:\n",
        "source_code_with_indent": "\n    if step is None and stop is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    _stop: int = maxsize if stop is None else stop\n    _step: int = 1 if step is None else step\n\n    if step is None and stop is None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif step is None:\n        range_t = range(start, stop)\n    else:\n        range_t = range(start, stop, step)\n\n",
        "source_code_len": 114,
        "target_code": "    elif step is None:\n        range_t = range(start, _stop)\n    else:\n        range_t = range(start, _stop, _step)\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -35,5 +39,5 @@\n     elif step is None:\n-        range_t = range(start, stop)\n+        range_t = range(start, _stop)\n     else:\n-        range_t = range(start, stop, step)\n+        range_t = range(start, _stop, _step)\n \n",
        "source_code_with_indent": "    <DED>elif step is None:\n        <IND>range_t = range(start, stop)\n    <DED>else:\n        <IND>range_t = range(start, stop, step)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif step is None:\n        <IND>range_t = range(start, _stop)\n    <DED>else:\n        <IND>range_t = range(start, _stop, _step)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/observable/range.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/range.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/range.py:38:31 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 2nd positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 2nd positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 38,
    "warning_line": "        range_t = range(start, stop, step)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional\n",
        "source_code_len": 28,
        "target_code": "from sys import maxsize\nfrom typing import Optional\n",
        "target_code_len": 52,
        "diff_format": "@@ -1,1 +1,2 @@\n+from sys import maxsize\n from typing import Optional\n",
        "source_code_with_indent": "from typing import Optional\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from sys import maxsize\nfrom typing import Optional\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if step is None and stop is None:\n",
        "source_code_len": 39,
        "target_code": "\n    _stop: int = maxsize if stop is None else stop\n    _step: int = 1 if step is None else step\n\n    if step is None and stop is None:\n",
        "target_code_len": 136,
        "diff_format": "@@ -32,2 +33,5 @@\n \n+    _stop: int = maxsize if stop is None else stop\n+    _step: int = 1 if step is None else step\n+\n     if step is None and stop is None:\n",
        "source_code_with_indent": "\n    if step is None and stop is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    _stop: int = maxsize if stop is None else stop\n    _step: int = 1 if step is None else step\n\n    if step is None and stop is None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif step is None:\n        range_t = range(start, stop)\n    else:\n        range_t = range(start, stop, step)\n\n",
        "source_code_len": 114,
        "target_code": "    elif step is None:\n        range_t = range(start, _stop)\n    else:\n        range_t = range(start, _stop, _step)\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -35,5 +39,5 @@\n     elif step is None:\n-        range_t = range(start, stop)\n+        range_t = range(start, _stop)\n     else:\n-        range_t = range(start, stop, step)\n+        range_t = range(start, _stop, _step)\n \n",
        "source_code_with_indent": "    <DED>elif step is None:\n        <IND>range_t = range(start, stop)\n    <DED>else:\n        <IND>range_t = range(start, stop, step)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif step is None:\n        <IND>range_t = range(start, _stop)\n    <DED>else:\n        <IND>range_t = range(start, _stop, _step)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/last.py",
    "min_patch_found": false,
    "full_warning_msg": "rx/core/operators/last.py:35:8 Incompatible return type [7]: Expected `rx.core.observable.observable.Observable` but got `typing.Callable[[rx.core.observable.observable.Observable], rx.core.observable.observable.Observable]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/lastordefault.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/lastordefault.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/lastordefault.py:30:4 Incompatible return type [7]: Expected `typing.Callable[[rx.core.observable.observable.Observable], rx.core.observable.observable.Observable]` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `typing.Callable[[rx.core.observable.observable.Observable], rx.core.observable.observable.Observable]` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 30,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                          default_value: Any = None\n                          ) -> Callable[[Observable], Observable]:\n\n",
        "source_code_len": 120,
        "target_code": "                          default_value: Any = None\n                          ) -> Observable:\n\n",
        "target_code_len": 96,
        "diff_format": "@@ -11,3 +11,3 @@\n                           default_value: Any = None\n-                          ) -> Callable[[Observable], Observable]:\n+                          ) -> Observable:\n \n",
        "source_code_with_indent": "                          default_value: Any = None\n                          ) -> Callable[[Observable], Observable]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                          default_value: Any = None\n                          ) -> Observable:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/lastordefault.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/lastordefault.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/lastordefault.py:57:8 Incompatible return type [7]: Expected `rx.core.observable.observable.Observable` but got `typing.Callable[[rx.core.observable.observable.Observable], rx.core.observable.observable.Observable]`.",
    "message": " Expected `rx.core.observable.observable.Observable` but got `typing.Callable[[rx.core.observable.observable.Observable], rx.core.observable.observable.Observable]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 57,
    "warning_line": "        return last_or_default_async(source, True, default_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                          default_value: Any = None\n                          ) -> Callable[[Observable], Observable]:\n\n",
        "source_code_len": 120,
        "target_code": "                          default_value: Any = None\n                          ) -> Observable:\n\n",
        "target_code_len": 96,
        "diff_format": "@@ -11,3 +11,3 @@\n                           default_value: Any = None\n-                          ) -> Callable[[Observable], Observable]:\n+                          ) -> Observable:\n \n",
        "source_code_with_indent": "                          default_value: Any = None\n                          ) -> Callable[[Observable], Observable]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                          default_value: Any = None\n                          ) -> Observable:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/maxby.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/maxby.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/maxby.py:31:46 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Any, typing.Any], bool]` for 3rd positional only parameter to call `extrema_by` but got `Optional[typing.Callable[[typing.Any, typing.Any], bool]]`.",
    "message": " Expected `typing.Callable[[typing.Any, typing.Any], bool]` for 3rd positional only parameter to call `extrema_by` but got `Optional[typing.Callable[[typing.Any, typing.Any], bool]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 31,
    "warning_line": "        return extrema_by(source, key_mapper, comparer)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/minby.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/minby.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/minby.py:76:59 Call error [29]: `Optional[typing.Callable[[typing.Any, typing.Any], bool]]` is not a function.",
    "message": " `Optional[typing.Callable[[typing.Any, typing.Any], bool]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 76,
    "warning_line": "        return extrema_by(source, key_mapper, lambda x, y: comparer(x, y) * -1)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/skipuntil.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/skipuntil.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/skipuntil.py:23:27 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 23,
    "warning_line": "    other = rx.from_future(other) if is_future(other) else other",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\nimport rx\nfrom rx.core import Observable\n",
        "source_code_len": 70,
        "target_code": "from asyncio import Future\nfrom typing import cast, Callable, Union\n\nfrom rx import from_future\nfrom rx.core import Observable\n",
        "target_code_len": 127,
        "diff_format": "@@ -1,4 +1,5 @@\n-from typing import Callable\n+from asyncio import Future\n+from typing import cast, Callable, Union\n \n-import rx\n+from rx import from_future\n from rx.core import Observable\n",
        "source_code_with_indent": "from typing import Callable\n\nimport rx\nfrom rx.core import Observable\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio import Future\nfrom typing import cast, Callable, Union\n\nfrom rx import from_future\nfrom rx.core import Observable\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _skip_until(other: Observable) -> Callable[[Observable], Observable]:\n    \"\"\"Returns the values from the source observable sequence only after\n",
        "source_code_len": 148,
        "target_code": "\ndef _skip_until(other: Union[Observable, Future]) -> Callable[[Observable], Observable]:\n    \"\"\"Returns the values from the source observable sequence only after\n",
        "target_code_len": 163,
        "diff_format": "@@ -8,3 +9,3 @@\n \n-def _skip_until(other: Observable) -> Callable[[Observable], Observable]:\n+def _skip_until(other: Union[Observable, Future]) -> Callable[[Observable], Observable]:\n     \"\"\"Returns the values from the source observable sequence only after\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _skip_until(other: Observable) -> Callable[[Observable], Observable]:\n    <IND>",
        "target_code_with_indent": "\ndef _skip_until(other: Union[Observable, Future]) -> Callable[[Observable], Observable]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    other = rx.from_future(other) if is_future(other) else other\n\n",
        "source_code_len": 67,
        "target_code": "\n    if is_future(other):\n        obs = from_future(cast(Future, other))\n    else:\n        obs = cast(Observable, other)\n\n",
        "target_code_len": 122,
        "diff_format": "@@ -22,3 +23,6 @@\n \n-    other = rx.from_future(other) if is_future(other) else other\n+    if is_future(other):\n+        obs = from_future(cast(Future, other))\n+    else:\n+        obs = cast(Observable, other)\n \n",
        "source_code_with_indent": "\n    other = rx.from_future(other) if is_future(other) else other\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    if is_future(other):\n        <IND>obs = from_future(cast(Future, other))\n    <DED>else:\n        <IND>obs = cast(Observable, other)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/switchlatest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/switchlatest.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/switchlatest.py:40:43 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `from_future` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `from_future` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 40,
    "warning_line": "                inner_source = from_future(inner_source) if is_future(inner_source) else inner_source",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, Any\n\n",
        "source_code_len": 34,
        "target_code": "from asyncio import Future\nfrom typing import cast, Any, Callable, Union\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -1,2 +1,3 @@\n-from typing import Callable, Any\n+from asyncio import Future\n+from typing import cast, Any, Callable, Union\n \n",
        "source_code_with_indent": "from typing import Callable, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio import Future\nfrom typing import cast, Any, Callable, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            def on_next(inner_source: Observable):\n                nonlocal source\n",
        "source_code_len": 84,
        "target_code": "\n            def on_next(inner_source: Union[Observable, Future]):\n                nonlocal source\n",
        "target_code_len": 99,
        "diff_format": "@@ -28,3 +29,3 @@\n \n-            def on_next(inner_source: Observable):\n+            def on_next(inner_source: Union[Observable, Future]):\n                 nonlocal source\n",
        "source_code_with_indent": "\n            def on_next(inner_source: Observable):\n                <IND>nonlocal source\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            def on_next(inner_source: Union[Observable, Future]):\n                <IND>nonlocal source\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # Check if Future or Observable\n                inner_source = from_future(inner_source) if is_future(inner_source) else inner_source\n\n",
        "source_code_len": 151,
        "target_code": "                # Check if Future or Observable\n                if is_future(inner_source):\n                    obs = from_future(cast(Future, inner_source))\n                else:\n                    obs = cast(Observable, inner_source)\n\n",
        "target_code_len": 238,
        "diff_format": "@@ -39,3 +40,6 @@\n                 # Check if Future or Observable\n-                inner_source = from_future(inner_source) if is_future(inner_source) else inner_source\n+                if is_future(inner_source):\n+                    obs = from_future(cast(Future, inner_source))\n+                else:\n+                    obs = cast(Observable, inner_source)\n \n",
        "source_code_with_indent": "                # Check if Future or Observable\n                inner_source = from_future(inner_source) if is_future(inner_source) else inner_source\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Check if Future or Observable\n                if is_future(inner_source):\n                    <IND>obs = from_future(cast(Future, inner_source))\n                <DED>else:\n                    <IND>obs = cast(Observable, inner_source)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                d.disposable = inner_source.subscribe_(on_next, on_error, on_completed, scheduler=scheduler)\n\n",
        "source_code_len": 111,
        "target_code": "\n                d.disposable = obs.subscribe_(on_next, on_error, on_completed, scheduler=scheduler)\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -55,3 +59,3 @@\n \n-                d.disposable = inner_source.subscribe_(on_next, on_error, on_completed, scheduler=scheduler)\n+                d.disposable = obs.subscribe_(on_next, on_error, on_completed, scheduler=scheduler)\n \n",
        "source_code_with_indent": "\n                <DED><DED><DED>d.disposable = inner_source.subscribe_(on_next, on_error, on_completed, scheduler=scheduler)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                <DED><DED><DED>d.disposable = obs.subscribe_(on_next, on_error, on_completed, scheduler=scheduler)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/takeuntil.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/takeuntil.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/takeuntil.py:11:24 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `from_future` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `from_future` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 11,
    "warning_line": "    other = from_future(other) if is_future(other) else other",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from asyncio import Future\nfrom typing import cast, Callable, Union\n\n",
        "target_code_len": 69,
        "diff_format": "@@ -1,2 +1,3 @@\n-from typing import Callable\n+from asyncio import Future\n+from typing import cast, Callable, Union\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio import Future\nfrom typing import cast, Callable, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _take_until(other: Observable) -> Callable[[Observable], Observable]:\n    other = from_future(other) if is_future(other) else other\n\n",
        "source_code_len": 138,
        "target_code": "\ndef _take_until(other: Union[Observable, Future]) -> Callable[[Observable], Observable]:\n    if is_future(other):\n        obs = from_future(cast(Future, other))\n    else:\n        obs = cast(Observable, other)\n\n",
        "target_code_len": 211,
        "diff_format": "@@ -9,4 +10,7 @@\n \n-def _take_until(other: Observable) -> Callable[[Observable], Observable]:\n-    other = from_future(other) if is_future(other) else other\n+def _take_until(other: Union[Observable, Future]) -> Callable[[Observable], Observable]:\n+    if is_future(other):\n+        obs = from_future(cast(Future, other))\n+    else:\n+        obs = cast(Observable, other)\n \n",
        "source_code_with_indent": "\ndef _take_until(other: Observable) -> Callable[[Observable], Observable]:\n    <IND>other = from_future(other) if is_future(other) else other\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _take_until(other: Union[Observable, Future]) -> Callable[[Observable], Observable]:\n    <IND>if is_future(other):\n        <IND>obs = from_future(cast(Future, other))\n    <DED>else:\n        <IND>obs = cast(Observable, other)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/timeout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/timeout.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/timeout.py:15:24 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `from_future` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `from_future` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 15,
    "warning_line": "    other = from_future(other) if is_future(other) else other",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\nfrom typing import Callable, Optional\n\n",
        "source_code_len": 69,
        "target_code": "from asyncio import Future\nfrom datetime import datetime\nfrom typing import cast, Callable, Optional, Union\n\n",
        "target_code_len": 109,
        "diff_format": "@@ -1,3 +1,4 @@\n+from asyncio import Future\n from datetime import datetime\n-from typing import Callable, Optional\n+from typing import cast, Callable, Optional, Union\n \n",
        "source_code_with_indent": "from datetime import datetime\nfrom typing import Callable, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio import Future\nfrom datetime import datetime\nfrom typing import cast, Callable, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 179,
        "target_code": "\ndef _timeout(duetime: typing.AbsoluteTime,\n             other: Optional[Union[Observable, Future]] = None,\n             scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 220,
        "diff_format": "@@ -10,3 +11,5 @@\n \n-def _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n+def _timeout(duetime: typing.AbsoluteTime,\n+             other: Optional[Union[Observable, Future]] = None,\n+             scheduler: Optional[typing.Scheduler] = None\n              ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _timeout(duetime: typing.AbsoluteTime,\n             other: Optional[Union[Observable, Future]] = None,\n             scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    other = other or throw(Exception(\"Timeout\"))\n    other = from_future(other) if is_future(other) else other\n\n",
        "source_code_len": 112,
        "target_code": "    other = other or throw(Exception(\"Timeout\"))\n    if is_future(other):\n        obs = from_future(cast(Future, other))\n    else:\n        obs = cast(Observable, other)\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -14,3 +17,6 @@\n     other = other or throw(Exception(\"Timeout\"))\n-    other = from_future(other) if is_future(other) else other\n+    if is_future(other):\n+        obs = from_future(cast(Future, other))\n+    else:\n+        obs = cast(Observable, other)\n \n",
        "source_code_with_indent": "    <IND>other = other or throw(Exception(\"Timeout\"))\n    other = from_future(other) if is_future(other) else other\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>other = other or throw(Exception(\"Timeout\"))\n    if is_future(other):\n        <IND>obs = from_future(cast(Future, other))\n    <DED>else:\n        <IND>obs = cast(Observable, other)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/core/operators/whiledo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/whiledo.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/whiledo.py:23:32 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 23,
    "warning_line": "        source = rx.from_future(source) if is_future(source) else source",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, Any\nimport itertools\n",
        "source_code_len": 50,
        "target_code": "from asyncio import Future\nfrom typing import cast, Callable, Union\nimport itertools\n",
        "target_code_len": 85,
        "diff_format": "@@ -1,2 +1,3 @@\n-from typing import Callable, Any\n+from asyncio import Future\n+from typing import cast, Callable, Union\n import itertools\n",
        "source_code_with_indent": "from typing import Callable, Any\nimport itertools\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio import Future\nfrom typing import cast, Callable, Union\nimport itertools\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _while_do(condition: Predicate) -> Callable[[Observable], Observable]:\n    def while_do(source: Observable) -> Observable:\n        \"\"\"Repeats source as long as condition holds emulating a while\n",
        "source_code_len": 198,
        "target_code": "def _while_do(condition: Predicate) -> Callable[[Observable], Observable]:\n    def while_do(source: Union[Observable, Future]) -> Observable:\n        \"\"\"Repeats source as long as condition holds emulating a while\n",
        "target_code_len": 213,
        "diff_format": "@@ -10,3 +11,3 @@\n def _while_do(condition: Predicate) -> Callable[[Observable], Observable]:\n-    def while_do(source: Observable) -> Observable:\n+    def while_do(source: Union[Observable, Future]) -> Observable:\n         \"\"\"Repeats source as long as condition holds emulating a while\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def _while_do(condition: Predicate) -> Callable[[Observable], Observable]:\n    <IND>def while_do(source: Observable) -> Observable:\n        <IND>",
        "target_code_with_indent": "def _while_do(condition: Predicate) -> Callable[[Observable], Observable]:\n    <IND>def while_do(source: Union[Observable, Future]) -> Observable:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        source = rx.from_future(source) if is_future(source) else source\n        return rx.concat_with_iterable(itertools.takewhile(condition, (source for x in infinite())))\n    return while_do\n",
        "source_code_len": 206,
        "target_code": "        \"\"\"\n        if is_future(source):\n            obs = rx.from_future(cast(Future, source))\n        else:\n            obs = cast(Observable, source)\n        it = itertools.takewhile(condition, (obs for _ in infinite()))\n        return rx.concat_with_iterable(it)\n    return while_do\n",
        "target_code_len": 288,
        "diff_format": "@@ -22,4 +23,8 @@\n         \"\"\"\n-        source = rx.from_future(source) if is_future(source) else source\n-        return rx.concat_with_iterable(itertools.takewhile(condition, (source for x in infinite())))\n+        if is_future(source):\n+            obs = rx.from_future(cast(Future, source))\n+        else:\n+            obs = cast(Observable, source)\n+        it = itertools.takewhile(condition, (obs for _ in infinite()))\n+        return rx.concat_with_iterable(it)\n     return while_do\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        source = rx.from_future(source) if is_future(source) else source\n        return rx.concat_with_iterable(itertools.takewhile(condition, (source for x in infinite())))\n    <DED>return while_do\n",
        "target_code_with_indent": "\n        if is_future(source):\n            <IND>obs = rx.from_future(cast(Future, source))\n        <DED>else:\n            <IND>obs = cast(Observable, source)\n        <DED>it = itertools.takewhile(condition, (obs for _ in infinite()))\n        return rx.concat_with_iterable(it)\n    <DED>return while_do\n"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "43f54f4d4f1e6369cb3c2e0d9ed0359115a49847",
    "filename": "rx/testing/marbles.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/testing/marbles.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/testing/marbles.py:107:35 Incompatible parameter type [6]: Expected `List[typing.Tuple[typing.Any, ...]]` for 1st positional only parameter to call `messages_to_records` but got `List[Tuple[Union[datetime.timedelta, float], rx.core.notification.Notification]]`.",
    "message": " Expected `List[typing.Tuple[typing.Any, ...]]` for 1st positional only parameter to call `messages_to_records` but got `List[Tuple[Union[datetime.timedelta, float], rx.core.notification.Notification]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "        return messages_to_records(messages)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rx.core import Observable\nfrom rx.scheduler import NewThreadScheduler\nfrom rx.core.typing import Callable\nfrom rx.testing import TestScheduler, Recorded, ReactiveTest\n",
        "source_code_len": 172,
        "target_code": "from rx.core import Observable\nfrom rx.core.notification import Notification\nfrom rx.scheduler import NewThreadScheduler\nfrom rx.core.typing import Callable, RelativeTime\nfrom rx.testing import TestScheduler, Recorded, ReactiveTest\n",
        "target_code_len": 232,
        "diff_format": "@@ -7,4 +7,5 @@\n from rx.core import Observable\n+from rx.core.notification import Notification\n from rx.scheduler import NewThreadScheduler\n-from rx.core.typing import Callable\n+from rx.core.typing import Callable, RelativeTime\n from rx.testing import TestScheduler, Recorded, ReactiveTest\n",
        "source_code_with_indent": "from rx.core import Observable\nfrom rx.scheduler import NewThreadScheduler\nfrom rx.core.typing import Callable\nfrom rx.testing import TestScheduler, Recorded, ReactiveTest\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rx.core import Observable\nfrom rx.core.notification import Notification\nfrom rx.scheduler import NewThreadScheduler\nfrom rx.core.typing import Callable, RelativeTime\nfrom rx.testing import TestScheduler, Recorded, ReactiveTest\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef messages_to_records(messages: List[Tuple]) -> List[Recorded]:\n    \"\"\"\n",
        "source_code_len": 75,
        "target_code": "\ndef messages_to_records(messages: List[Tuple[RelativeTime, Notification]]\n                        ) -> List[Recorded]:\n    \"\"\"\n",
        "target_code_len": 128,
        "diff_format": "@@ -135,3 +136,4 @@\n \n-def messages_to_records(messages: List[Tuple]) -> List[Recorded]:\n+def messages_to_records(messages: List[Tuple[RelativeTime, Notification]]\n+                        ) -> List[Recorded]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def messages_to_records(messages: List[Tuple]) -> List[Recorded]:\n    <IND>",
        "target_code_with_indent": "\n<DED><DED>def messages_to_records(messages: List[Tuple[RelativeTime, Notification]]\n                        ) -> List[Recorded]:\n    <IND>"
      }
    ]
  }
]