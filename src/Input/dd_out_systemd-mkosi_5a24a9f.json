[
  {
    "project": "systemd/mkosi",
    "commit": "5a24a9fd9e9eea4c1a9cf2e9c1980697fd9b922b",
    "filename": "mkosi/backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/systemd-mkosi/mkosi/backend.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mkosi/backend.py:549:4 Incompatible variable type [9]: path is declared to have type `str` but is used as type `pathlib.Path`.",
    "message": " path is declared to have type `str` but is used as type `pathlib.Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 549,
    "warning_line": "    path = pathlib.Path(path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import uuid\nfrom types import FrameType\n",
        "source_code_len": 40,
        "target_code": "import uuid\nfrom pathlib import Path\nfrom types import FrameType\n",
        "target_code_len": 65,
        "diff_format": "@@ -14,2 +13,3 @@\n import uuid\n+from pathlib import Path\n from types import FrameType\n",
        "source_code_with_indent": "import uuid\nfrom types import FrameType\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import uuid\nfrom pathlib import Path\nfrom types import FrameType\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Optional,\n    Set,\n",
        "source_code_len": 23,
        "target_code": "    Optional,\n    Sequence,\n    Set,\n",
        "target_code_len": 37,
        "diff_format": "@@ -25,2 +25,3 @@\n     Optional,\n+    Sequence,\n     Set,\n",
        "source_code_with_indent": "    Optional,\n    Set,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Optional,\n    Sequence,\n    Set,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif sys.version_info >= (3, 8):\n    shell_join = shlex.join\nelse:\n\n    def shell_join(cmd: List[str]) -> str:\n        return \" \".join(shlex.quote(x) for x in cmd)\n\n",
        "source_code_len": 164,
        "target_code": "\nPathString = Union[Path, str]\n\n\ndef shell_join(cmd: Sequence[PathString]) -> str:\n    return \" \".join(shlex.quote(str(x)) for x in cmd)\n\n",
        "target_code_len": 138,
        "diff_format": "@@ -30,8 +31,7 @@\n \n-if sys.version_info >= (3, 8):\n-    shell_join = shlex.join\n-else:\n-\n-    def shell_join(cmd: List[str]) -> str:\n-        return \" \".join(shlex.quote(x) for x in cmd)\n+PathString = Union[Path, str]\n+\n+\n+def shell_join(cmd: Sequence[PathString]) -> str:\n+    return \" \".join(shlex.quote(str(x)) for x in cmd)\n \n",
        "source_code_with_indent": "\nif sys.version_info >= (3, 8):\n    <IND>shell_join = shlex.join\n<DED>else:\n\n    <IND>def shell_join(cmd: List[str]) -> str:\n        <IND>return \" \".join(shlex.quote(x) for x in cmd)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nPathString = Union[Path, str]\n\n\ndef shell_join(cmd: Sequence[PathString]) -> str:\n    <IND>return \" \".join(shlex.quote(str(x)) for x in cmd)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef workspace(root: str) -> str:\n    return os.path.dirname(root)\n\n\ndef var_tmp(root: str) -> str:\n    return mkdir_last(os.path.join(workspace(root), \"var-tmp\"))\n\n\ndef mkdir_last(path: str, mode: int = 0o777) -> str:\n    \"\"\"Create directory path\n",
        "source_code_len": 248,
        "target_code": "\ndef workspace(root: Path) -> Path:\n    return root.parent\n\n\ndef var_tmp(root: Path) -> Path:\n    return mkdir_last(workspace(root) / \"var-tmp\")\n\n\ndef mkdir_last(path: Path, mode: int = 0o777) -> Path:\n    \"\"\"Create directory path\n",
        "target_code_len": 231,
        "diff_format": "@@ -361,11 +361,11 @@\n \n-def workspace(root: str) -> str:\n-    return os.path.dirname(root)\n-\n-\n-def var_tmp(root: str) -> str:\n-    return mkdir_last(os.path.join(workspace(root), \"var-tmp\"))\n-\n-\n-def mkdir_last(path: str, mode: int = 0o777) -> str:\n+def workspace(root: Path) -> Path:\n+    return root.parent\n+\n+\n+def var_tmp(root: Path) -> Path:\n+    return mkdir_last(workspace(root) / \"var-tmp\")\n+\n+\n+def mkdir_last(path: Path, mode: int = 0o777) -> Path:\n     \"\"\"Create directory path\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def workspace(root: str) -> str:\n    <IND>return os.path.dirname(root)\n\n\n<DED>def var_tmp(root: str) -> str:\n    <IND>return mkdir_last(os.path.join(workspace(root), \"var-tmp\"))\n\n\n<DED>def mkdir_last(path: str, mode: int = 0o777) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def workspace(root: Path) -> Path:\n    <IND>return root.parent\n\n\n<DED>def var_tmp(root: Path) -> Path:\n    <IND>return mkdir_last(workspace(root) / \"var-tmp\")\n\n\n<DED>def mkdir_last(path: Path, mode: int = 0o777) -> Path:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef partition(loopdev: str, partno: int) -> str:\n    return loopdev + \"p\" + str(partno)\n\n\ndef nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: str) -> List[str]:\n    params = [\n",
        "source_code_len": 200,
        "target_code": "\ndef partition(loopdev: Path, partno: int) -> Path:\n    return Path(f\"{loopdev}p{partno}\")\n\n\ndef nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: Path) -> List[str]:\n    params = [\n",
        "target_code_len": 203,
        "diff_format": "@@ -382,7 +382,7 @@\n \n-def partition(loopdev: str, partno: int) -> str:\n-    return loopdev + \"p\" + str(partno)\n-\n-\n-def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: str) -> List[str]:\n+def partition(loopdev: Path, partno: int) -> Path:\n+    return Path(f\"{loopdev}p{partno}\")\n+\n+\n+def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: Path) -> List[str]:\n     params = [\n",
        "source_code_with_indent": "\n<DED>def partition(loopdev: str, partno: int) -> str:\n    <IND>return loopdev + \"p\" + str(partno)\n\n\n<DED>def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: str) -> List[str]:\n    <IND>params = [\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def partition(loopdev: Path, partno: int) -> Path:\n    <IND>return Path(f\"{loopdev}p{partno}\")\n\n\n<DED>def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: Path) -> List[str]:\n    <IND>params = [\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    args: CommandLineArguments,\n    root: str,\n    cmd: List[str],\n    network: bool = False,\n",
        "source_code_len": 94,
        "target_code": "    args: CommandLineArguments,\n    root: Path,\n    cmd: Sequence[PathString],\n    network: bool = False,\n",
        "target_code_len": 106,
        "diff_format": "@@ -407,4 +407,4 @@\n     args: CommandLineArguments,\n-    root: str,\n-    cmd: List[str],\n+    root: Path,\n+    cmd: Sequence[PathString],\n     network: bool = False,\n",
        "source_code_with_indent": "    args: CommandLineArguments,\n    root: str,\n    cmd: List[str],\n    network: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    args: CommandLineArguments,\n    root: Path,\n    cmd: Sequence[PathString],\n    network: bool = False,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ") -> None:\n    cmdline = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        \"--directory=\" + root,\n        \"--uuid=\" + args.machine_id,\n",
        "source_code_len": 140,
        "target_code": ") -> None:\n    nspawn = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        f\"--directory={root}\",\n        \"--uuid=\" + args.machine_id,\n",
        "target_code_len": 139,
        "diff_format": "@@ -413,6 +413,6 @@\n ) -> None:\n-    cmdline = [\n+    nspawn = [\n         \"systemd-nspawn\",\n         \"--quiet\",\n-        \"--directory=\" + root,\n+        f\"--directory={root}\",\n         \"--uuid=\" + args.machine_id,\n",
        "source_code_with_indent": ") -> None:\n    <IND>cmdline = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        \"--directory=\" + root,\n        \"--uuid=\" + args.machine_id,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> None:\n    <IND>nspawn = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        f\"--directory={root}\",\n        \"--uuid=\" + args.machine_id,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"--register=no\",\n        \"--bind=\" + var_tmp(root) + \":/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "source_code_len": 112,
        "target_code": "        \"--register=no\",\n        f\"--bind={var_tmp(root)}:/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "target_code_len": 107,
        "diff_format": "@@ -421,3 +421,3 @@\n         \"--register=no\",\n-        \"--bind=\" + var_tmp(root) + \":/var/tmp\",\n+        f\"--bind={var_tmp(root)}:/var/tmp\",\n         \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "source_code_with_indent": "        \"--register=no\",\n        \"--bind=\" + var_tmp(root) + \":/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        \"--register=no\",\n        f\"--bind={var_tmp(root)}:/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef tmp_dir() -> str:\n    return os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n\n\ndef patch_file(filepath: str, line_rewriter: Callable[[str], str]) -> None:\n    temp_new_filepath = filepath + \".tmp.new\"\n\n    with open(filepath, \"r\") as old:\n        with open(temp_new_filepath, \"w\") as new:\n            for line in old:\n                new.write(line_rewriter(line))\n\n",
        "source_code_len": 362,
        "target_code": "\ndef tmp_dir() -> Path:\n    path = os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n    return Path(path)\n\n\ndef patch_file(filepath: Path, line_rewriter: Callable[[str], str]) -> None:\n    temp_new_filepath = filepath.with_suffix(filepath.suffix + \".tmp.new\")\n\n    with filepath.open(\"r\") as old, temp_new_filepath.open(\"w\") as new:\n        for line in old:\n            new.write(line_rewriter(line))\n\n",
        "target_code_len": 392,
        "diff_format": "@@ -528,13 +530,13 @@\n \n-def tmp_dir() -> str:\n-    return os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n-\n-\n-def patch_file(filepath: str, line_rewriter: Callable[[str], str]) -> None:\n-    temp_new_filepath = filepath + \".tmp.new\"\n-\n-    with open(filepath, \"r\") as old:\n-        with open(temp_new_filepath, \"w\") as new:\n-            for line in old:\n-                new.write(line_rewriter(line))\n+def tmp_dir() -> Path:\n+    path = os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n+    return Path(path)\n+\n+\n+def patch_file(filepath: Path, line_rewriter: Callable[[str], str]) -> None:\n+    temp_new_filepath = filepath.with_suffix(filepath.suffix + \".tmp.new\")\n+\n+    with filepath.open(\"r\") as old, temp_new_filepath.open(\"w\") as new:\n+        for line in old:\n+            new.write(line_rewriter(line))\n \n",
        "source_code_with_indent": "\n<DED><DED>def tmp_dir() -> str:\n    <IND>return os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n\n\n<DED>def patch_file(filepath: str, line_rewriter: Callable[[str], str]) -> None:\n    <IND>temp_new_filepath = filepath + \".tmp.new\"\n\n    with open(filepath, \"r\") as old:\n        <IND>with open(temp_new_filepath, \"w\") as new:\n            <IND>for line in old:\n                <IND>new.write(line_rewriter(line))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def tmp_dir() -> Path:\n    <IND>path = os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n    return Path(path)\n\n\n<DED>def patch_file(filepath: Path, line_rewriter: Callable[[str], str]) -> None:\n    <IND>temp_new_filepath = filepath.with_suffix(filepath.suffix + \".tmp.new\")\n\n    with filepath.open(\"r\") as old, temp_new_filepath.open(\"w\") as new:\n        <IND>for line in old:\n            <IND>new.write(line_rewriter(line))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    os.remove(filepath)\n    shutil.move(temp_new_filepath, filepath)\n\n\ndef path_relative_to_cwd(path: str) -> pathlib.Path:\n    \"Return path as relative to $PWD if underneath, absolute path otherwise\"\n\n    path = pathlib.Path(path)\n    try:\n",
        "source_code_len": 241,
        "target_code": "    os.remove(filepath)\n    shutil.move(str(temp_new_filepath), filepath)\n\n\ndef path_relative_to_cwd(path: PathString) -> Path:\n    \"Return path as relative to $PWD if underneath, absolute path otherwise\"\n    path = Path(path)\n\n    try:\n",
        "target_code_len": 237,
        "diff_format": "@@ -542,9 +544,9 @@\n     os.remove(filepath)\n-    shutil.move(temp_new_filepath, filepath)\n-\n-\n-def path_relative_to_cwd(path: str) -> pathlib.Path:\n+    shutil.move(str(temp_new_filepath), filepath)\n+\n+\n+def path_relative_to_cwd(path: PathString) -> Path:\n     \"Return path as relative to $PWD if underneath, absolute path otherwise\"\n-\n-    path = pathlib.Path(path)\n+    path = Path(path)\n+\n     try:\n",
        "source_code_with_indent": "    os.remove(filepath)\n    shutil.move(temp_new_filepath, filepath)\n\n\n<DED>def path_relative_to_cwd(path: str) -> pathlib.Path:\n    <IND>\"Return path as relative to $PWD if underneath, absolute path otherwise\"\n\n    path = pathlib.Path(path)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    os.remove(filepath)\n    shutil.move(str(temp_new_filepath), filepath)\n\n\n<DED>def path_relative_to_cwd(path: PathString) -> Path:\n    <IND>\"Return path as relative to $PWD if underneath, absolute path otherwise\"\n    path = Path(path)\n\n    try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef write_grub_config(args: CommandLineArguments, root: str) -> None:\n    kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(os.path.join(root, \"etc/default\"), exist_ok=True, mode=0o755)\n    grub_config = os.path.join(root, \"etc/default/grub\")\n    if not os.path.exists(grub_config):\n        with open(grub_config, \"w+\") as f:\n            f.write(grub_cmdline)\n    else:\n",
        "source_code_len": 453,
        "target_code": "\ndef write_grub_config(args: CommandLineArguments, root: Path) -> None:\n    kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(root / \"etc/default\", exist_ok=True, mode=0o755)\n    grub_config = root / \"etc/default/grub\"\n    if not os.path.exists(grub_config):\n        grub_config.write_text(grub_cmdline)\n    else:\n",
        "target_code_len": 396,
        "diff_format": "@@ -555,10 +557,9 @@\n \n-def write_grub_config(args: CommandLineArguments, root: str) -> None:\n+def write_grub_config(args: CommandLineArguments, root: Path) -> None:\n     kernel_cmd_line = \" \".join(args.kernel_command_line)\n     grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n-    os.makedirs(os.path.join(root, \"etc/default\"), exist_ok=True, mode=0o755)\n-    grub_config = os.path.join(root, \"etc/default/grub\")\n+    os.makedirs(root / \"etc/default\", exist_ok=True, mode=0o755)\n+    grub_config = root / \"etc/default/grub\"\n     if not os.path.exists(grub_config):\n-        with open(grub_config, \"w+\") as f:\n-            f.write(grub_cmdline)\n+        grub_config.write_text(grub_cmdline)\n     else:\n",
        "source_code_with_indent": "\n<DED><DED>def write_grub_config(args: CommandLineArguments, root: str) -> None:\n    <IND>kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(os.path.join(root, \"etc/default\"), exist_ok=True, mode=0o755)\n    grub_config = os.path.join(root, \"etc/default/grub\")\n    if not os.path.exists(grub_config):\n        <IND>with open(grub_config, \"w+\") as f:\n            <IND>f.write(grub_cmdline)\n    <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def write_grub_config(args: CommandLineArguments, root: Path) -> None:\n    <IND>kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(root / \"etc/default\", exist_ok=True, mode=0o755)\n    grub_config = root / \"etc/default/grub\"\n    if not os.path.exists(grub_config):\n        <IND>grub_config.write_text(grub_cmdline)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef install_grub(args: CommandLineArguments, root: str, loopdev: str, grub: str) -> None:\n    if args.bios_partno is None:\n",
        "source_code_len": 124,
        "target_code": "\ndef install_grub(args: CommandLineArguments, root: Path, loopdev: Path, grub: str) -> None:\n    if args.bios_partno is None:\n",
        "target_code_len": 126,
        "diff_format": "@@ -582,3 +583,3 @@\n \n-def install_grub(args: CommandLineArguments, root: str, loopdev: str, grub: str) -> None:\n+def install_grub(args: CommandLineArguments, root: Path, loopdev: Path, grub: str) -> None:\n     if args.bios_partno is None:\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>def install_grub(args: CommandLineArguments, root: str, loopdev: str, grub: str) -> None:\n    <IND>if args.bios_partno is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>def install_grub(args: CommandLineArguments, root: Path, loopdev: Path, grub: str) -> None:\n    <IND>if args.bios_partno is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "systemd/mkosi",
    "commit": "5a24a9fd9e9eea4c1a9cf2e9c1980697fd9b922b",
    "filename": "mkosi/backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/systemd-mkosi/mkosi/backend.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mkosi/backend.py:553:8 Incompatible return type [7]: Expected `pathlib.Path` but got `str`.",
    "message": " Expected `pathlib.Path` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 553,
    "warning_line": "        return path",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import uuid\nfrom types import FrameType\n",
        "source_code_len": 40,
        "target_code": "import uuid\nfrom pathlib import Path\nfrom types import FrameType\n",
        "target_code_len": 65,
        "diff_format": "@@ -14,2 +13,3 @@\n import uuid\n+from pathlib import Path\n from types import FrameType\n",
        "source_code_with_indent": "import uuid\nfrom types import FrameType\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import uuid\nfrom pathlib import Path\nfrom types import FrameType\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Optional,\n    Set,\n",
        "source_code_len": 23,
        "target_code": "    Optional,\n    Sequence,\n    Set,\n",
        "target_code_len": 37,
        "diff_format": "@@ -25,2 +25,3 @@\n     Optional,\n+    Sequence,\n     Set,\n",
        "source_code_with_indent": "    Optional,\n    Set,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Optional,\n    Sequence,\n    Set,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif sys.version_info >= (3, 8):\n    shell_join = shlex.join\nelse:\n\n    def shell_join(cmd: List[str]) -> str:\n        return \" \".join(shlex.quote(x) for x in cmd)\n\n",
        "source_code_len": 164,
        "target_code": "\nPathString = Union[Path, str]\n\n\ndef shell_join(cmd: Sequence[PathString]) -> str:\n    return \" \".join(shlex.quote(str(x)) for x in cmd)\n\n",
        "target_code_len": 138,
        "diff_format": "@@ -30,8 +31,7 @@\n \n-if sys.version_info >= (3, 8):\n-    shell_join = shlex.join\n-else:\n-\n-    def shell_join(cmd: List[str]) -> str:\n-        return \" \".join(shlex.quote(x) for x in cmd)\n+PathString = Union[Path, str]\n+\n+\n+def shell_join(cmd: Sequence[PathString]) -> str:\n+    return \" \".join(shlex.quote(str(x)) for x in cmd)\n \n",
        "source_code_with_indent": "\nif sys.version_info >= (3, 8):\n    <IND>shell_join = shlex.join\n<DED>else:\n\n    <IND>def shell_join(cmd: List[str]) -> str:\n        <IND>return \" \".join(shlex.quote(x) for x in cmd)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nPathString = Union[Path, str]\n\n\ndef shell_join(cmd: Sequence[PathString]) -> str:\n    <IND>return \" \".join(shlex.quote(str(x)) for x in cmd)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef workspace(root: str) -> str:\n    return os.path.dirname(root)\n\n\ndef var_tmp(root: str) -> str:\n    return mkdir_last(os.path.join(workspace(root), \"var-tmp\"))\n\n\ndef mkdir_last(path: str, mode: int = 0o777) -> str:\n    \"\"\"Create directory path\n",
        "source_code_len": 248,
        "target_code": "\ndef workspace(root: Path) -> Path:\n    return root.parent\n\n\ndef var_tmp(root: Path) -> Path:\n    return mkdir_last(workspace(root) / \"var-tmp\")\n\n\ndef mkdir_last(path: Path, mode: int = 0o777) -> Path:\n    \"\"\"Create directory path\n",
        "target_code_len": 231,
        "diff_format": "@@ -361,11 +361,11 @@\n \n-def workspace(root: str) -> str:\n-    return os.path.dirname(root)\n-\n-\n-def var_tmp(root: str) -> str:\n-    return mkdir_last(os.path.join(workspace(root), \"var-tmp\"))\n-\n-\n-def mkdir_last(path: str, mode: int = 0o777) -> str:\n+def workspace(root: Path) -> Path:\n+    return root.parent\n+\n+\n+def var_tmp(root: Path) -> Path:\n+    return mkdir_last(workspace(root) / \"var-tmp\")\n+\n+\n+def mkdir_last(path: Path, mode: int = 0o777) -> Path:\n     \"\"\"Create directory path\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def workspace(root: str) -> str:\n    <IND>return os.path.dirname(root)\n\n\n<DED>def var_tmp(root: str) -> str:\n    <IND>return mkdir_last(os.path.join(workspace(root), \"var-tmp\"))\n\n\n<DED>def mkdir_last(path: str, mode: int = 0o777) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def workspace(root: Path) -> Path:\n    <IND>return root.parent\n\n\n<DED>def var_tmp(root: Path) -> Path:\n    <IND>return mkdir_last(workspace(root) / \"var-tmp\")\n\n\n<DED>def mkdir_last(path: Path, mode: int = 0o777) -> Path:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef partition(loopdev: str, partno: int) -> str:\n    return loopdev + \"p\" + str(partno)\n\n\ndef nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: str) -> List[str]:\n    params = [\n",
        "source_code_len": 200,
        "target_code": "\ndef partition(loopdev: Path, partno: int) -> Path:\n    return Path(f\"{loopdev}p{partno}\")\n\n\ndef nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: Path) -> List[str]:\n    params = [\n",
        "target_code_len": 203,
        "diff_format": "@@ -382,7 +382,7 @@\n \n-def partition(loopdev: str, partno: int) -> str:\n-    return loopdev + \"p\" + str(partno)\n-\n-\n-def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: str) -> List[str]:\n+def partition(loopdev: Path, partno: int) -> Path:\n+    return Path(f\"{loopdev}p{partno}\")\n+\n+\n+def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: Path) -> List[str]:\n     params = [\n",
        "source_code_with_indent": "\n<DED>def partition(loopdev: str, partno: int) -> str:\n    <IND>return loopdev + \"p\" + str(partno)\n\n\n<DED>def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: str) -> List[str]:\n    <IND>params = [\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def partition(loopdev: Path, partno: int) -> Path:\n    <IND>return Path(f\"{loopdev}p{partno}\")\n\n\n<DED>def nspawn_params_for_blockdev_access(args: CommandLineArguments, loopdev: Path) -> List[str]:\n    <IND>params = [\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    args: CommandLineArguments,\n    root: str,\n    cmd: List[str],\n    network: bool = False,\n",
        "source_code_len": 94,
        "target_code": "    args: CommandLineArguments,\n    root: Path,\n    cmd: Sequence[PathString],\n    network: bool = False,\n",
        "target_code_len": 106,
        "diff_format": "@@ -407,4 +407,4 @@\n     args: CommandLineArguments,\n-    root: str,\n-    cmd: List[str],\n+    root: Path,\n+    cmd: Sequence[PathString],\n     network: bool = False,\n",
        "source_code_with_indent": "    args: CommandLineArguments,\n    root: str,\n    cmd: List[str],\n    network: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    args: CommandLineArguments,\n    root: Path,\n    cmd: Sequence[PathString],\n    network: bool = False,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ") -> None:\n    cmdline = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        \"--directory=\" + root,\n        \"--uuid=\" + args.machine_id,\n",
        "source_code_len": 140,
        "target_code": ") -> None:\n    nspawn = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        f\"--directory={root}\",\n        \"--uuid=\" + args.machine_id,\n",
        "target_code_len": 139,
        "diff_format": "@@ -413,6 +413,6 @@\n ) -> None:\n-    cmdline = [\n+    nspawn = [\n         \"systemd-nspawn\",\n         \"--quiet\",\n-        \"--directory=\" + root,\n+        f\"--directory={root}\",\n         \"--uuid=\" + args.machine_id,\n",
        "source_code_with_indent": ") -> None:\n    <IND>cmdline = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        \"--directory=\" + root,\n        \"--uuid=\" + args.machine_id,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> None:\n    <IND>nspawn = [\n        \"systemd-nspawn\",\n        \"--quiet\",\n        f\"--directory={root}\",\n        \"--uuid=\" + args.machine_id,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"--register=no\",\n        \"--bind=\" + var_tmp(root) + \":/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "source_code_len": 112,
        "target_code": "        \"--register=no\",\n        f\"--bind={var_tmp(root)}:/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "target_code_len": 107,
        "diff_format": "@@ -421,3 +421,3 @@\n         \"--register=no\",\n-        \"--bind=\" + var_tmp(root) + \":/var/tmp\",\n+        f\"--bind={var_tmp(root)}:/var/tmp\",\n         \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "source_code_with_indent": "        \"--register=no\",\n        \"--bind=\" + var_tmp(root) + \":/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        \"--register=no\",\n        f\"--bind={var_tmp(root)}:/var/tmp\",\n        \"--setenv=SYSTEMD_OFFLINE=1\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef tmp_dir() -> str:\n    return os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n\n\ndef patch_file(filepath: str, line_rewriter: Callable[[str], str]) -> None:\n    temp_new_filepath = filepath + \".tmp.new\"\n\n    with open(filepath, \"r\") as old:\n        with open(temp_new_filepath, \"w\") as new:\n            for line in old:\n                new.write(line_rewriter(line))\n\n",
        "source_code_len": 362,
        "target_code": "\ndef tmp_dir() -> Path:\n    path = os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n    return Path(path)\n\n\ndef patch_file(filepath: Path, line_rewriter: Callable[[str], str]) -> None:\n    temp_new_filepath = filepath.with_suffix(filepath.suffix + \".tmp.new\")\n\n    with filepath.open(\"r\") as old, temp_new_filepath.open(\"w\") as new:\n        for line in old:\n            new.write(line_rewriter(line))\n\n",
        "target_code_len": 392,
        "diff_format": "@@ -528,13 +530,13 @@\n \n-def tmp_dir() -> str:\n-    return os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n-\n-\n-def patch_file(filepath: str, line_rewriter: Callable[[str], str]) -> None:\n-    temp_new_filepath = filepath + \".tmp.new\"\n-\n-    with open(filepath, \"r\") as old:\n-        with open(temp_new_filepath, \"w\") as new:\n-            for line in old:\n-                new.write(line_rewriter(line))\n+def tmp_dir() -> Path:\n+    path = os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n+    return Path(path)\n+\n+\n+def patch_file(filepath: Path, line_rewriter: Callable[[str], str]) -> None:\n+    temp_new_filepath = filepath.with_suffix(filepath.suffix + \".tmp.new\")\n+\n+    with filepath.open(\"r\") as old, temp_new_filepath.open(\"w\") as new:\n+        for line in old:\n+            new.write(line_rewriter(line))\n \n",
        "source_code_with_indent": "\n<DED><DED>def tmp_dir() -> str:\n    <IND>return os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n\n\n<DED>def patch_file(filepath: str, line_rewriter: Callable[[str], str]) -> None:\n    <IND>temp_new_filepath = filepath + \".tmp.new\"\n\n    with open(filepath, \"r\") as old:\n        <IND>with open(temp_new_filepath, \"w\") as new:\n            <IND>for line in old:\n                <IND>new.write(line_rewriter(line))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def tmp_dir() -> Path:\n    <IND>path = os.environ.get(\"TMPDIR\") or \"/var/tmp\"\n    return Path(path)\n\n\n<DED>def patch_file(filepath: Path, line_rewriter: Callable[[str], str]) -> None:\n    <IND>temp_new_filepath = filepath.with_suffix(filepath.suffix + \".tmp.new\")\n\n    with filepath.open(\"r\") as old, temp_new_filepath.open(\"w\") as new:\n        <IND>for line in old:\n            <IND>new.write(line_rewriter(line))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    os.remove(filepath)\n    shutil.move(temp_new_filepath, filepath)\n\n\ndef path_relative_to_cwd(path: str) -> pathlib.Path:\n    \"Return path as relative to $PWD if underneath, absolute path otherwise\"\n\n    path = pathlib.Path(path)\n    try:\n",
        "source_code_len": 241,
        "target_code": "    os.remove(filepath)\n    shutil.move(str(temp_new_filepath), filepath)\n\n\ndef path_relative_to_cwd(path: PathString) -> Path:\n    \"Return path as relative to $PWD if underneath, absolute path otherwise\"\n    path = Path(path)\n\n    try:\n",
        "target_code_len": 237,
        "diff_format": "@@ -542,9 +544,9 @@\n     os.remove(filepath)\n-    shutil.move(temp_new_filepath, filepath)\n-\n-\n-def path_relative_to_cwd(path: str) -> pathlib.Path:\n+    shutil.move(str(temp_new_filepath), filepath)\n+\n+\n+def path_relative_to_cwd(path: PathString) -> Path:\n     \"Return path as relative to $PWD if underneath, absolute path otherwise\"\n-\n-    path = pathlib.Path(path)\n+    path = Path(path)\n+\n     try:\n",
        "source_code_with_indent": "    os.remove(filepath)\n    shutil.move(temp_new_filepath, filepath)\n\n\n<DED>def path_relative_to_cwd(path: str) -> pathlib.Path:\n    <IND>\"Return path as relative to $PWD if underneath, absolute path otherwise\"\n\n    path = pathlib.Path(path)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    os.remove(filepath)\n    shutil.move(str(temp_new_filepath), filepath)\n\n\n<DED>def path_relative_to_cwd(path: PathString) -> Path:\n    <IND>\"Return path as relative to $PWD if underneath, absolute path otherwise\"\n    path = Path(path)\n\n    try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef write_grub_config(args: CommandLineArguments, root: str) -> None:\n    kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(os.path.join(root, \"etc/default\"), exist_ok=True, mode=0o755)\n    grub_config = os.path.join(root, \"etc/default/grub\")\n    if not os.path.exists(grub_config):\n        with open(grub_config, \"w+\") as f:\n            f.write(grub_cmdline)\n    else:\n",
        "source_code_len": 453,
        "target_code": "\ndef write_grub_config(args: CommandLineArguments, root: Path) -> None:\n    kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(root / \"etc/default\", exist_ok=True, mode=0o755)\n    grub_config = root / \"etc/default/grub\"\n    if not os.path.exists(grub_config):\n        grub_config.write_text(grub_cmdline)\n    else:\n",
        "target_code_len": 396,
        "diff_format": "@@ -555,10 +557,9 @@\n \n-def write_grub_config(args: CommandLineArguments, root: str) -> None:\n+def write_grub_config(args: CommandLineArguments, root: Path) -> None:\n     kernel_cmd_line = \" \".join(args.kernel_command_line)\n     grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n-    os.makedirs(os.path.join(root, \"etc/default\"), exist_ok=True, mode=0o755)\n-    grub_config = os.path.join(root, \"etc/default/grub\")\n+    os.makedirs(root / \"etc/default\", exist_ok=True, mode=0o755)\n+    grub_config = root / \"etc/default/grub\"\n     if not os.path.exists(grub_config):\n-        with open(grub_config, \"w+\") as f:\n-            f.write(grub_cmdline)\n+        grub_config.write_text(grub_cmdline)\n     else:\n",
        "source_code_with_indent": "\n<DED><DED>def write_grub_config(args: CommandLineArguments, root: str) -> None:\n    <IND>kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(os.path.join(root, \"etc/default\"), exist_ok=True, mode=0o755)\n    grub_config = os.path.join(root, \"etc/default/grub\")\n    if not os.path.exists(grub_config):\n        <IND>with open(grub_config, \"w+\") as f:\n            <IND>f.write(grub_cmdline)\n    <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def write_grub_config(args: CommandLineArguments, root: Path) -> None:\n    <IND>kernel_cmd_line = \" \".join(args.kernel_command_line)\n    grub_cmdline = f'GRUB_CMDLINE_LINUX=\"{kernel_cmd_line}\"\\n'\n    os.makedirs(root / \"etc/default\", exist_ok=True, mode=0o755)\n    grub_config = root / \"etc/default/grub\"\n    if not os.path.exists(grub_config):\n        <IND>grub_config.write_text(grub_cmdline)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef install_grub(args: CommandLineArguments, root: str, loopdev: str, grub: str) -> None:\n    if args.bios_partno is None:\n",
        "source_code_len": 124,
        "target_code": "\ndef install_grub(args: CommandLineArguments, root: Path, loopdev: Path, grub: str) -> None:\n    if args.bios_partno is None:\n",
        "target_code_len": 126,
        "diff_format": "@@ -582,3 +583,3 @@\n \n-def install_grub(args: CommandLineArguments, root: str, loopdev: str, grub: str) -> None:\n+def install_grub(args: CommandLineArguments, root: Path, loopdev: Path, grub: str) -> None:\n     if args.bios_partno is None:\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>def install_grub(args: CommandLineArguments, root: str, loopdev: str, grub: str) -> None:\n    <IND>if args.bios_partno is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>def install_grub(args: CommandLineArguments, root: Path, loopdev: Path, grub: str) -> None:\n    <IND>if args.bios_partno is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]