[
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/autodetect.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/autodetect.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/autodetect.py:64:37 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `shlex.quote` but got `typing.Union[str, streamer.configuration.Field]`.",
    "message": " Expected `str` for 1st positional only parameter to call `shlex.quote` but got `typing.Union[str, streamer.configuration.Field]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "  print('+ ' + ' '.join([shlex.quote(arg) for arg in args]))"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/autodetect.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/autodetect.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/autodetect.py:66:48 Incompatible parameter type [6]: Expected `typing.Union[typing.Sequence[typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, str]], bytes, str]` for 1st positional only parameter to call `subprocess.check_output` but got `typing.List[typing.Union[str, streamer.configuration.Field]]`.",
    "message": " Expected `typing.Union[typing.Sequence[typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, str]], bytes, str]` for 1st positional only parameter to call `subprocess.check_output` but got `typing.List[typing.Union[str, streamer.configuration.Field]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "  output_bytes: bytes = subprocess.check_output(args, stderr=subprocess.DEVNULL)"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/autodetect.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/autodetect.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/autodetect.py:146:6 Incompatible return type [7]: Expected `Optional[VideoResolution]` but got `streamer.configuration.Base`.",
    "message": " Expected `Optional[VideoResolution]` but got `streamer.configuration.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 146,
    "warning_line": "      return bucket",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if input_resolution <= resolution and input.frame_rate <= frame_rate:\n      return bucket\n\n",
        "source_code_len": 95,
        "target_code": "    if input_resolution <= resolution and input.frame_rate <= frame_rate:\n      return bucket #type: ignore\n\n",
        "target_code_len": 109,
        "diff_format": "@@ -145,3 +145,3 @@\n     if input_resolution <= resolution and input.frame_rate <= frame_rate:\n-      return bucket\n+      return bucket #type: ignore\n \n",
        "source_code_with_indent": "    if input_resolution <= resolution and input.frame_rate <= frame_rate:\n      <IND>return bucket\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if input_resolution <= resolution and input.frame_rate <= frame_rate:\n      <IND>return bucket #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/bitrate_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/bitrate_configuration.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/bitrate_configuration.py:147:11 Unsupported operand [58]: `<` is not supported for operand types `configuration.Field` and `configuration.Field`.",
    "message": " `<` is not supported for operand types `configuration.Field` and `configuration.Field`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 147,
    "warning_line": "    return self.max_channels < other.max_channels",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  def __lt__(self, other: 'AudioChannelLayout') -> bool:\n    return self.max_channels < other.max_channels\n\n",
        "source_code_len": 108,
        "target_code": "  def __lt__(self, other: 'AudioChannelLayout') -> bool:\n    return self.max_channels < other.max_channels # type: ignore\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -146,3 +146,3 @@\n   def __lt__(self, other: 'AudioChannelLayout') -> bool:\n-    return self.max_channels < other.max_channels\n+    return self.max_channels < other.max_channels # type: ignore\n \n",
        "source_code_with_indent": "  <DED>def __lt__(self, other: 'AudioChannelLayout') -> bool:\n    <IND>return self.max_channels < other.max_channels\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>def __lt__(self, other: 'AudioChannelLayout') -> bool:\n    <IND>return self.max_channels < other.max_channels # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/bitrate_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/bitrate_configuration.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/bitrate_configuration.py:179:51 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `float`.",
    "message": " Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 179,
    "warning_line": "  max_frame_rate = configuration.Field(type=float, default=math.inf)"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/bitrate_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/bitrate_configuration.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/bitrate_configuration.py:344:40 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `typing.Dict[str, AudioChannelLayout]`.",
    "message": " Expected `typing.Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `typing.Dict[str, AudioChannelLayout]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 344,
    "warning_line": "      dict, subtype=AudioChannelLayout, default=DEFAULT_AUDIO_CHANNEL_LAYOUTS)"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/bitrate_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/bitrate_configuration.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/bitrate_configuration.py:353:37 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `typing.Dict[str, VideoResolution]`.",
    "message": " Expected `typing.Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `typing.Dict[str, VideoResolution]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 353,
    "warning_line": "      dict, subtype=VideoResolution, default=DEFAULT_VIDEO_RESOLUTIONS)"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/cloud_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/cloud_node.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/cloud_node.py:155:2 Inconsistent override [14]: `streamer.cloud_node.CloudNode.stop` overrides method defined in `node_base.ThreadedNodeBase` inconsistently. Parameter of type `node_base.ProcessStatus` is not a supertype of the overridden parameter `typing.Optional[node_base.ProcessStatus]`.",
    "message": " `streamer.cloud_node.CloudNode.stop` overrides method defined in `node_base.ThreadedNodeBase` inconsistently. Parameter of type `node_base.ProcessStatus` is not a supertype of the overridden parameter `typing.Optional[node_base.ProcessStatus]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 155,
    "warning_line": "  def stop(self,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom . import node_base\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom streamer.node_base import ProcessStatus, ThreadedNodeBase\nfrom typing import Optional\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -21,3 +21,4 @@\n \n-from . import node_base\n+from streamer.node_base import ProcessStatus, ThreadedNodeBase\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom . import node_base\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom streamer.node_base import ProcessStatus, ThreadedNodeBase\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass CloudNode(node_base.ThreadedNodeBase):\n  def __init__(self,\n",
        "source_code_len": 67,
        "target_code": "\nclass CloudNode(ThreadedNodeBase):\n  def __init__(self,\n",
        "target_code_len": 57,
        "diff_format": "@@ -50,3 +51,3 @@\n \n-class CloudNode(node_base.ThreadedNodeBase):\n+class CloudNode(ThreadedNodeBase):\n   def __init__(self,\n",
        "source_code_with_indent": "\n<DED>class CloudNode(node_base.ThreadedNodeBase):\n  <IND>def __init__(self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class CloudNode(ThreadedNodeBase):\n  <IND>def __init__(self,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "      while (not contents and\n             self.check_status() == node_base.ProcessStatus.Running):\n        time.sleep(0.1)\n",
        "source_code_len": 124,
        "target_code": "      while (not contents and\n             self.check_status() == ProcessStatus.Running):\n        time.sleep(0.1)\n",
        "target_code_len": 114,
        "diff_format": "@@ -118,3 +119,3 @@\n       while (not contents and\n-             self.check_status() == node_base.ProcessStatus.Running):\n+             self.check_status() == ProcessStatus.Running):\n         time.sleep(0.1)\n",
        "source_code_with_indent": "      <DED>while (not contents and\n             self.check_status() == node_base.ProcessStatus.Running):\n        <IND>time.sleep(0.1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <DED>while (not contents and\n             self.check_status() == ProcessStatus.Running):\n        <IND>time.sleep(0.1)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def stop(self,\n           status: node_base.ProcessStatus) -> None:\n    super().stop(status)\n",
        "source_code_len": 95,
        "target_code": "  def stop(self,\n           status: Optional[ProcessStatus]) -> None:\n    super().stop(status)\n",
        "target_code_len": 95,
        "diff_format": "@@ -155,3 +156,3 @@\n   def stop(self,\n-           status: node_base.ProcessStatus) -> None:\n+           status: Optional[ProcessStatus]) -> None:\n     super().stop(status)\n",
        "source_code_with_indent": "  <DED>def stop(self,\n           status: node_base.ProcessStatus) -> None:\n    <IND>super().stop(status)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>def stop(self,\n           status: Optional[ProcessStatus]) -> None:\n    <IND>super().stop(status)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/controller_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/controller_node.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/controller_node.py:158:45 Incompatible parameter type [6]: Expected `Dict[str, streamer.configuration.Base]` for 1st positional only parameter to call `streamer.configuration.RuntimeMapType.set_map` but got `streamer.configuration.Field`.",
    "message": " Expected `Dict[str, streamer.configuration.Base]` for 1st positional only parameter to call `streamer.configuration.RuntimeMapType.set_map` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 158,
    "warning_line": "    bitrate_configuration.Resolution.set_map(bitrate_config.video_resolutions)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # can be validated accordingly.\n    bitrate_configuration.Resolution.set_map(bitrate_config.video_resolutions)\n    bitrate_configuration.ChannelLayout.set_map(\n        bitrate_config.audio_channel_layouts)\n\n",
        "source_code_len": 211,
        "target_code": "    # can be validated accordingly.\n    Resolution.set_map(bitrate_config.video_resolutions) #type: ignore\n    ChannelLayout.set_map(bitrate_config.audio_channel_layouts) #type: ignore\n\n",
        "target_code_len": 186,
        "diff_format": "@@ -157,5 +140,4 @@\n     # can be validated accordingly.\n-    bitrate_configuration.Resolution.set_map(bitrate_config.video_resolutions)\n-    bitrate_configuration.ChannelLayout.set_map(\n-        bitrate_config.audio_channel_layouts)\n+    Resolution.set_map(bitrate_config.video_resolutions) #type: ignore\n+    ChannelLayout.set_map(bitrate_config.audio_channel_layouts) #type: ignore\n \n",
        "source_code_with_indent": "    # can be validated accordingly.\n    bitrate_configuration.Resolution.set_map(bitrate_config.video_resolutions)\n    bitrate_configuration.ChannelLayout.set_map(\n        bitrate_config.audio_channel_layouts)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # can be validated accordingly.\n    Resolution.set_map(bitrate_config.video_resolutions) #type: ignore\n    ChannelLayout.set_map(bitrate_config.audio_channel_layouts) #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/controller_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/controller_node.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/controller_node.py:160:8 Incompatible parameter type [6]: Expected `Dict[str, streamer.configuration.Base]` for 1st positional only parameter to call `streamer.configuration.RuntimeMapType.set_map` but got `streamer.configuration.Field`.",
    "message": " Expected `Dict[str, streamer.configuration.Base]` for 1st positional only parameter to call `streamer.configuration.RuntimeMapType.set_map` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 160,
    "warning_line": "        bitrate_config.audio_channel_layouts)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # can be validated accordingly.\n    bitrate_configuration.Resolution.set_map(bitrate_config.video_resolutions)\n    bitrate_configuration.ChannelLayout.set_map(\n        bitrate_config.audio_channel_layouts)\n\n",
        "source_code_len": 211,
        "target_code": "    # can be validated accordingly.\n    Resolution.set_map(bitrate_config.video_resolutions) #type: ignore\n    ChannelLayout.set_map(bitrate_config.audio_channel_layouts) #type: ignore\n\n",
        "target_code_len": 186,
        "diff_format": "@@ -157,5 +140,4 @@\n     # can be validated accordingly.\n-    bitrate_configuration.Resolution.set_map(bitrate_config.video_resolutions)\n-    bitrate_configuration.ChannelLayout.set_map(\n-        bitrate_config.audio_channel_layouts)\n+    Resolution.set_map(bitrate_config.video_resolutions) #type: ignore\n+    ChannelLayout.set_map(bitrate_config.audio_channel_layouts) #type: ignore\n \n",
        "source_code_with_indent": "    # can be validated accordingly.\n    bitrate_configuration.Resolution.set_map(bitrate_config.video_resolutions)\n    bitrate_configuration.ChannelLayout.set_map(\n        bitrate_config.audio_channel_layouts)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # can be validated accordingly.\n    Resolution.set_map(bitrate_config.video_resolutions) #type: ignore\n    ChannelLayout.set_map(bitrate_config.audio_channel_layouts) #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/controller_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/controller_node.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/controller_node.py:184:43 Incompatible parameter type [6]: Expected `int` for 4th positional only parameter to call `output_stream.AudioOutputStream.__init__` but got `streamer.configuration.Field`.",
    "message": " Expected `int` for 4th positional only parameter to call `output_stream.AudioOutputStream.__init__` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 184,
    "warning_line": "                                           pipeline_config.channels))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                                           codec,\n                                           pipeline_config.channels))\n\n      elif input.media_type == MediaType.VIDEO:\n        for codec in pipeline_config.video_codecs:\n          for output_resolution in pipeline_config.resolutions:\n            # Only going to output lower or equal resolution videos.\n",
        "source_code_len": 353,
        "target_code": "                                           codec,\n                                           pipeline_config.channels)) #type: ignore\n\n      elif input.media_type == MediaType.VIDEO:\n        for codec in pipeline_config.video_codecs: #type: ignore\n          for output_resolution in pipeline_config.resolutions: #type: ignore\n            # Only going to output lower or equal resolution videos.\n",
        "target_code_len": 395,
        "diff_format": "@@ -183,7 +165,7 @@\n                                            codec,\n-                                           pipeline_config.channels))\n+                                           pipeline_config.channels)) #type: ignore\n \n       elif input.media_type == MediaType.VIDEO:\n-        for codec in pipeline_config.video_codecs:\n-          for output_resolution in pipeline_config.resolutions:\n+        for codec in pipeline_config.video_codecs: #type: ignore\n+          for output_resolution in pipeline_config.resolutions: #type: ignore\n             # Only going to output lower or equal resolution videos.\n",
        "source_code_with_indent": "                                           codec,\n                                           pipeline_config.channels))\n\n      <DED><DED>elif input.media_type == MediaType.VIDEO:\n        <IND>for codec in pipeline_config.video_codecs:\n          <IND>for output_resolution in pipeline_config.resolutions:\n            # Only going to output lower or equal resolution videos.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                           codec,\n                                           pipeline_config.channels)) #type: ignore\n\n      <DED><DED>elif input.media_type == MediaType.VIDEO:\n        <IND>for codec in pipeline_config.video_codecs: #type: ignore\n          <IND>for output_resolution in pipeline_config.resolutions: #type: ignore\n            # Only going to output lower or equal resolution videos.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/input_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/input_configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/input_configuration.py:76:46 Incompatible parameter type [6]: Expected `Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `InputType`.",
    "message": " Expected `Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `InputType`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 76,
    "warning_line": "  input_type = configuration.Field(InputType, default=InputType.FILE)"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/input_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/input_configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/input_configuration.py:101:46 Incompatible parameter type [6]: Expected `Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "message": " Expected `Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 101,
    "warning_line": "  extra_input_args = configuration.Field(str, default='')"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/input_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/input_configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/input_configuration.py:131:39 Incompatible parameter type [6]: Expected `Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "message": " Expected `Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "  track_num = configuration.Field(int, default=0)"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/input_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/input_configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/input_configuration.py:177:51 Incompatible parameter type [6]: Expected `Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `List[Variable[_T]]`.",
    "message": " Expected `Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 177,
    "warning_line": "  filters = configuration.Field(list, subtype=str, default=[])"
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/input_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/input_configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/input_configuration.py:252:4 Incompatible attribute type [8]: Attribute `extra_input_args` declared in class `Input` has type `configuration.Field` but is used as type `List[str]`.",
    "message": " Attribute `extra_input_args` declared in class `Input` has type `configuration.Field` but is used as type `List[str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 252,
    "warning_line": "    self.extra_input_args = shlex.split(self.extra_input_args)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # an empty string will produce an empty array.\n    self.extra_input_args = shlex.split(self.extra_input_args)\n\n",
        "source_code_len": 115,
        "target_code": "    # an empty string will produce an empty array.\n    self.extra_input_args = shlex.split(self.extra_input_args) #type: ignore\n\n",
        "target_code_len": 129,
        "diff_format": "@@ -251,3 +251,3 @@\n     # an empty string will produce an empty array.\n-    self.extra_input_args = shlex.split(self.extra_input_args)\n+    self.extra_input_args = shlex.split(self.extra_input_args) #type: ignore\n \n",
        "source_code_with_indent": "    # an empty string will produce an empty array.\n    <DED>self.extra_input_args = shlex.split(self.extra_input_args)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # an empty string will produce an empty array.\n    <DED>self.extra_input_args = shlex.split(self.extra_input_args) #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/input_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/input_configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/input_configuration.py:252:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `shlex.split` but got `configuration.Field`.",
    "message": " Expected `str` for 1st positional only parameter to call `shlex.split` but got `configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 252,
    "warning_line": "    self.extra_input_args = shlex.split(self.extra_input_args)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # an empty string will produce an empty array.\n    self.extra_input_args = shlex.split(self.extra_input_args)\n\n",
        "source_code_len": 115,
        "target_code": "    # an empty string will produce an empty array.\n    self.extra_input_args = shlex.split(self.extra_input_args) #type: ignore\n\n",
        "target_code_len": 129,
        "diff_format": "@@ -251,3 +251,3 @@\n     # an empty string will produce an empty array.\n-    self.extra_input_args = shlex.split(self.extra_input_args)\n+    self.extra_input_args = shlex.split(self.extra_input_args) #type: ignore\n \n",
        "source_code_with_indent": "    # an empty string will produce an empty array.\n    <DED>self.extra_input_args = shlex.split(self.extra_input_args)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # an empty string will produce an empty array.\n    <DED>self.extra_input_args = shlex.split(self.extra_input_args) #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/input_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/input_configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/input_configuration.py:272:4 Incompatible return type [7]: Expected `str` but got `typing.Union[configuration.Field, str]`.",
    "message": " Expected `str` but got `typing.Union[configuration.Field, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 272,
    "warning_line": "    return self._pipe or self.name",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    return self._pipe or self.name\n\n",
        "source_code_len": 37,
        "target_code": "\n    return self._pipe or self.name #type: ignore\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -271,3 +271,3 @@\n \n-    return self._pipe or self.name\n+    return self._pipe or self.name #type: ignore\n \n",
        "source_code_with_indent": "\n    return self._pipe or self.name\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    return self._pipe or self.name #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/packager_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/packager_node.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/packager_node.py:146:7 Unsupported operand [58]: `in` is not supported for right operand type `streamer.configuration.Field`.",
    "message": " `in` is not supported for right operand type `streamer.configuration.Field`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 146,
    "warning_line": "    if ManifestFormat.DASH in self._pipeline_config.manifest_format:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    args: List[str] = []\n    if ManifestFormat.DASH in self._pipeline_config.manifest_format:\n      if self._pipeline_config.streaming_mode == StreamingMode.VOD:\n",
        "source_code_len": 162,
        "target_code": "    args: List[str] = []\n    if ManifestFormat.DASH in self._pipeline_config.manifest_format: #type: ignore\n      if self._pipeline_config.streaming_mode == StreamingMode.VOD:\n",
        "target_code_len": 176,
        "diff_format": "@@ -145,3 +145,3 @@\n     args: List[str] = []\n-    if ManifestFormat.DASH in self._pipeline_config.manifest_format:\n+    if ManifestFormat.DASH in self._pipeline_config.manifest_format: #type: ignore\n       if self._pipeline_config.streaming_mode == StreamingMode.VOD:\n",
        "source_code_with_indent": "    <IND>args: List[str] = []\n    if ManifestFormat.DASH in self._pipeline_config.manifest_format:\n      <IND>if self._pipeline_config.streaming_mode == StreamingMode.VOD:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>args: List[str] = []\n    if ManifestFormat.DASH in self._pipeline_config.manifest_format: #type: ignore\n      <IND>if self._pipeline_config.streaming_mode == StreamingMode.VOD:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/packager_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/packager_node.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/packager_node.py:156:7 Unsupported operand [58]: `in` is not supported for right operand type `streamer.configuration.Field`.",
    "message": " `in` is not supported for right operand type `streamer.configuration.Field`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 156,
    "warning_line": "    if ManifestFormat.HLS in self._pipeline_config.manifest_format:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "          '--mpd_output',\n          os.path.join(self._output_dir, self._pipeline_config.dash_output),\n      ]\n    if ManifestFormat.HLS in self._pipeline_config.manifest_format:\n      if self._pipeline_config.streaming_mode == StreamingMode.LIVE:\n",
        "source_code_len": 248,
        "target_code": "          '--mpd_output',\n          os.path.join(self._output_dir, self._pipeline_config.dash_output), #type: ignore\n      ]\n    if ManifestFormat.HLS in self._pipeline_config.manifest_format: #type: ignore\n      if self._pipeline_config.streaming_mode == StreamingMode.LIVE:\n",
        "target_code_len": 276,
        "diff_format": "@@ -153,5 +153,5 @@\n           '--mpd_output',\n-          os.path.join(self._output_dir, self._pipeline_config.dash_output),\n+          os.path.join(self._output_dir, self._pipeline_config.dash_output), #type: ignore\n       ]\n-    if ManifestFormat.HLS in self._pipeline_config.manifest_format:\n+    if ManifestFormat.HLS in self._pipeline_config.manifest_format: #type: ignore\n       if self._pipeline_config.streaming_mode == StreamingMode.LIVE:\n",
        "source_code_with_indent": "          '--mpd_output',\n          os.path.join(self._output_dir, self._pipeline_config.dash_output),\n      ]\n    <DED>if ManifestFormat.HLS in self._pipeline_config.manifest_format:\n      <IND>if self._pipeline_config.streaming_mode == StreamingMode.LIVE:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "          '--mpd_output',\n          os.path.join(self._output_dir, self._pipeline_config.dash_output), #type: ignore\n      ]\n    <DED>if ManifestFormat.HLS in self._pipeline_config.manifest_format: #type: ignore\n      <IND>if self._pipeline_config.streaming_mode == StreamingMode.LIVE:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:67:37 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `bool`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:80:44 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:87:36 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:94:31 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:101:31 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:108:42 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `ProtectionScheme`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:111:40 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:121:36 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `bool`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:127:41 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `bool`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:135:41 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:154:38 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:159:6 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `typing.List[bitrate_configuration.AudioCodec]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:164:6 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `typing.List[bitrate_configuration.VideoCodec]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:172:40 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 3rd parameter `default` to call `configuration.Field.__init__` but got `typing.List[ManifestFormat]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:181:41 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:184:40 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:187:44 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:190:44 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:193:47 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `bool`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:199:49 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:202:48 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:205:43 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/pipeline_configuration.py",
    "min_patch_found": false,
    "full_warning_msg": "streamer/pipeline_configuration.py:209:35 Incompatible parameter type [6]: Expected `typing.Optional[typing.Type[typing.Any]]` for 2nd parameter `default` to call `configuration.Field.__init__` but got `EncryptionConfig`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/transcoder_node.py:108:30 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `streamer.configuration.Field`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "    for i, input in enumerate(self._input_config.inputs):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    for i, input in enumerate(self._input_config.inputs):\n      if input.media_type == MediaType.TEXT:\n",
        "source_code_len": 104,
        "target_code": "\n    for i, input in enumerate(self._input_config.inputs): #type: ignore\n      if input.media_type == MediaType.TEXT:\n",
        "target_code_len": 118,
        "diff_format": "@@ -107,3 +107,3 @@\n \n-    for i, input in enumerate(self._input_config.inputs):\n+    for i, input in enumerate(self._input_config.inputs): #type: ignore\n       if input.media_type == MediaType.TEXT:\n",
        "source_code_with_indent": "\n    <DED>for i, input in enumerate(self._input_config.inputs):\n      <IND>if input.media_type == MediaType.TEXT:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>for i, input in enumerate(self._input_config.inputs): #type: ignore\n      <IND>if input.media_type == MediaType.TEXT:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/transcoder_node.py:131:37 Incompatible parameter type [6]: Expected `AudioOutputStream` for 1st positional only parameter to call `TranscoderNode._encode_audio` but got `OutputStream`.",
    "message": " Expected `AudioOutputStream` for 1st positional only parameter to call `TranscoderNode._encode_audio` but got `OutputStream`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "          args += self._encode_audio(output_stream, input)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if input.media_type == MediaType.AUDIO:\n          args += self._encode_audio(output_stream, input)\n        else:\n          args += self._encode_video(output_stream, input)\n",
        "source_code_len": 180,
        "target_code": "        if input.media_type == MediaType.AUDIO:\n          assert(isinstance(output_stream, AudioOutputStream))\n          args += self._encode_audio(output_stream, input)\n        else:\n          assert(isinstance(output_stream, VideoOutputStream))\n          args += self._encode_video(output_stream, input)\n",
        "target_code_len": 306,
        "diff_format": "@@ -130,4 +130,6 @@\n         if input.media_type == MediaType.AUDIO:\n+          assert(isinstance(output_stream, AudioOutputStream))\n           args += self._encode_audio(output_stream, input)\n         else:\n+          assert(isinstance(output_stream, VideoOutputStream))\n           args += self._encode_video(output_stream, input)\n",
        "source_code_with_indent": "        if input.media_type == MediaType.AUDIO:\n          <IND>args += self._encode_audio(output_stream, input)\n        <DED>else:\n          <IND>args += self._encode_video(output_stream, input)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if input.media_type == MediaType.AUDIO:\n          <IND>assert(isinstance(output_stream, AudioOutputStream))\n          args += self._encode_audio(output_stream, input)\n        <DED>else:\n          <IND>assert(isinstance(output_stream, VideoOutputStream))\n          args += self._encode_video(output_stream, input)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamer/transcoder_node.py:133:37 Incompatible parameter type [6]: Expected `VideoOutputStream` for 1st positional only parameter to call `TranscoderNode._encode_video` but got `OutputStream`.",
    "message": " Expected `VideoOutputStream` for 1st positional only parameter to call `TranscoderNode._encode_video` but got `OutputStream`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "          args += self._encode_video(output_stream, input)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if input.media_type == MediaType.AUDIO:\n          args += self._encode_audio(output_stream, input)\n        else:\n          args += self._encode_video(output_stream, input)\n",
        "source_code_len": 180,
        "target_code": "        if input.media_type == MediaType.AUDIO:\n          assert(isinstance(output_stream, AudioOutputStream))\n          args += self._encode_audio(output_stream, input)\n        else:\n          assert(isinstance(output_stream, VideoOutputStream))\n          args += self._encode_video(output_stream, input)\n",
        "target_code_len": 306,
        "diff_format": "@@ -130,4 +130,6 @@\n         if input.media_type == MediaType.AUDIO:\n+          assert(isinstance(output_stream, AudioOutputStream))\n           args += self._encode_audio(output_stream, input)\n         else:\n+          assert(isinstance(output_stream, VideoOutputStream))\n           args += self._encode_video(output_stream, input)\n",
        "source_code_with_indent": "        if input.media_type == MediaType.AUDIO:\n          <IND>args += self._encode_audio(output_stream, input)\n        <DED>else:\n          <IND>args += self._encode_video(output_stream, input)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if input.media_type == MediaType.AUDIO:\n          <IND>assert(isinstance(output_stream, AudioOutputStream))\n          args += self._encode_audio(output_stream, input)\n        <DED>else:\n          <IND>assert(isinstance(output_stream, VideoOutputStream))\n          args += self._encode_video(output_stream, input)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/transcoder_node.py:163:19 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.extend` but got `streamer.configuration.Field`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.extend` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 163,
    "warning_line": "    filters.extend(input.filters)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    filters.extend(input.filters)\n\n",
        "source_code_len": 36,
        "target_code": "\n    filters.extend(input.filters) #type: ignore\n\n",
        "target_code_len": 50,
        "diff_format": "@@ -162,3 +164,3 @@\n \n-    filters.extend(input.filters)\n+    filters.extend(input.filters) #type: ignore\n \n",
        "source_code_with_indent": "\n    <DED>filters.extend(input.filters)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>filters.extend(input.filters) #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/transcoder_node.py:168:47 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `OutputStream.get_ffmpeg_codec_string` but got `streamer.configuration.Field`.",
    "message": " Expected `str` for 1st positional only parameter to call `OutputStream.get_ffmpeg_codec_string` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 168,
    "warning_line": "        '-c:a', stream.get_ffmpeg_codec_string(hwaccel_api),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Set codec and bitrate.\n        '-c:a', stream.get_ffmpeg_codec_string(hwaccel_api),\n        '-b:a', stream.get_bitrate(),\n",
        "source_code_len": 132,
        "target_code": "        # Set codec and bitrate.\n        '-c:a', stream.get_ffmpeg_codec_string(hwaccel_api), #type: ignore\n        '-b:a', stream.get_bitrate(),\n",
        "target_code_len": 146,
        "diff_format": "@@ -167,3 +169,3 @@\n         # Set codec and bitrate.\n-        '-c:a', stream.get_ffmpeg_codec_string(hwaccel_api),\n+        '-c:a', stream.get_ffmpeg_codec_string(hwaccel_api), #type: ignore\n         '-b:a', stream.get_bitrate(),\n",
        "source_code_with_indent": "        # Set codec and bitrate.\n        '-c:a', stream.get_ffmpeg_codec_string(hwaccel_api),\n        '-b:a', stream.get_bitrate(),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Set codec and bitrate.\n        '-c:a', stream.get_ffmpeg_codec_string(hwaccel_api), #type: ignore\n        '-b:a', stream.get_bitrate(),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/transcoder_node.py:203:19 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.extend` but got `streamer.configuration.Field`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.extend` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 203,
    "warning_line": "    filters.extend(input.filters)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    filters.extend(input.filters)\n\n",
        "source_code_len": 36,
        "target_code": "\n    filters.extend(input.filters) #type: ignore\n\n",
        "target_code_len": 50,
        "diff_format": "@@ -202,3 +204,3 @@\n \n-    filters.extend(input.filters)\n+    filters.extend(input.filters) #type: ignore\n \n",
        "source_code_with_indent": "\n    <DED>filters.extend(input.filters)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>filters.extend(input.filters) #type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/transcoder_node.py:245:9 Unsupported operand [58]: `>=` is not supported for operand types `streamer.configuration.Field` and `int`.",
    "message": " `>=` is not supported for operand types `streamer.configuration.Field` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 245,
    "warning_line": "      if stream.resolution.max_height >= 720:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      # https://en.wikipedia.org/wiki/Advanced_Video_Coding#Profiles\n      if stream.resolution.max_height >= 720:\n        profile = 'high'\n",
        "source_code_len": 140,
        "target_code": "      # https://en.wikipedia.org/wiki/Advanced_Video_Coding#Profiles\n      if stream.resolution.max_height >= 720: #type: ignore\n        profile = 'high'\n",
        "target_code_len": 154,
        "diff_format": "@@ -244,3 +246,3 @@\n       # https://en.wikipedia.org/wiki/Advanced_Video_Coding#Profiles\n-      if stream.resolution.max_height >= 720:\n+      if stream.resolution.max_height >= 720: #type: ignore\n         profile = 'high'\n",
        "source_code_with_indent": "      # https://en.wikipedia.org/wiki/Advanced_Video_Coding#Profiles\n      <IND>if stream.resolution.max_height >= 720:\n        <IND>profile = 'high'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      # https://en.wikipedia.org/wiki/Advanced_Video_Coding#Profiles\n      <IND>if stream.resolution.max_height >= 720: #type: ignore\n        <IND>profile = 'high'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/transcoder_node.py:279:28 Unsupported operand [58]: `*` is not supported for operand types `streamer.configuration.Field` and `streamer.configuration.Field`.",
    "message": " `*` is not supported for operand types `streamer.configuration.Field` and `streamer.configuration.Field`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 279,
    "warning_line": "    keyframe_interval = int(self._pipeline_config.segment_size *",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    keyframe_interval = int(self._pipeline_config.segment_size *\n                            input.frame_rate)\n",
        "source_code_len": 112,
        "target_code": "\n    keyframe_interval = int(self._pipeline_config.segment_size * #type: ignore\n                            input.frame_rate)\n",
        "target_code_len": 126,
        "diff_format": "@@ -278,3 +280,3 @@\n \n-    keyframe_interval = int(self._pipeline_config.segment_size *\n+    keyframe_interval = int(self._pipeline_config.segment_size * #type: ignore\n                             input.frame_rate)\n",
        "source_code_with_indent": "\n    <DED>keyframe_interval = int(self._pipeline_config.segment_size *\n                            input.frame_rate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>keyframe_interval = int(self._pipeline_config.segment_size * #type: ignore\n                            input.frame_rate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/shaka-streamer",
    "commit": "2072d6531cc8ba00532c1df0af8e6c5298c6ee80",
    "filename": "streamer/transcoder_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-shaka-streamer/streamer/transcoder_node.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "streamer/transcoder_node.py:286:47 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `OutputStream.get_ffmpeg_codec_string` but got `streamer.configuration.Field`.",
    "message": " Expected `str` for 1st positional only parameter to call `OutputStream.get_ffmpeg_codec_string` but got `streamer.configuration.Field`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 286,
    "warning_line": "        '-c:v', stream.get_ffmpeg_codec_string(hwaccel_api),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Set codec and bitrate.\n        '-c:v', stream.get_ffmpeg_codec_string(hwaccel_api),\n        '-b:v', stream.get_bitrate(),\n",
        "source_code_len": 132,
        "target_code": "        # Set codec and bitrate.\n        '-c:v', stream.get_ffmpeg_codec_string(hwaccel_api), #type: ignore\n        '-b:v', stream.get_bitrate(),\n",
        "target_code_len": 146,
        "diff_format": "@@ -285,3 +287,3 @@\n         # Set codec and bitrate.\n-        '-c:v', stream.get_ffmpeg_codec_string(hwaccel_api),\n+        '-c:v', stream.get_ffmpeg_codec_string(hwaccel_api), #type: ignore\n         '-b:v', stream.get_bitrate(),\n",
        "source_code_with_indent": "        # Set codec and bitrate.\n        '-c:v', stream.get_ffmpeg_codec_string(hwaccel_api),\n        '-b:v', stream.get_bitrate(),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Set codec and bitrate.\n        '-c:v', stream.get_ffmpeg_codec_string(hwaccel_api), #type: ignore\n        '-b:v', stream.get_bitrate(),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]