[
  {
    "project": "CadQuery/cadquery",
    "commit": "7bcd67f589a752933a9fd6eaced60d5a28ecd646",
    "filename": "cadquery/cq.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/CadQuery-cadquery/cadquery/cq.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cadquery/cq.py:3513:64 Unbound name [10]: Name `obj` is used but not defined in the current scope.",
    "message": " Name `obj` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 3513,
    "warning_line": "                \"%s object doesn't support `clean()` method!\" % obj.ShapeType()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    List,\n)\n",
        "source_code_len": 12,
        "target_code": "    List,\n    cast\n)\n",
        "target_code_len": 21,
        "diff_format": "@@ -32,2 +31,3 @@\n     List,\n+    cast\n )\n",
        "source_code_with_indent": "    List,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    List,\n    cast\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        try:\n            cleanObjects = [obj.clean() for obj in self.objects]\n        except AttributeError:\n            raise AttributeError(\n                \"%s object doesn't support `clean()` method!\" % obj.ShapeType()\n            )\n        return self.newObject(cleanObjects)\n",
        "source_code_len": 293,
        "target_code": "        \"\"\"\n        \n        cleanObjects = [cast(Any,obj).clean() if hasattr(obj,'clean') else obj for obj in self.objects]\n        \n        return self.newObject(cleanObjects)\n",
        "target_code_len": 178,
        "diff_format": "@@ -3508,8 +3507,5 @@\n         \"\"\"\n-        try:\n-            cleanObjects = [obj.clean() for obj in self.objects]\n-        except AttributeError:\n-            raise AttributeError(\n-                \"%s object doesn't support `clean()` method!\" % obj.ShapeType()\n-            )\n+        \n+        cleanObjects = [cast(Any,obj).clean() if hasattr(obj,'clean') else obj for obj in self.objects]\n+        \n         return self.newObject(cleanObjects)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        try:\n            <IND>cleanObjects = [obj.clean() for obj in self.objects]\n        <DED>except AttributeError:\n            <IND>raise AttributeError(\n                \"%s object doesn't support `clean()` method!\" % obj.ShapeType()\n            )\n        <DED>return self.newObject(cleanObjects)\n",
        "target_code_with_indent": "\n        \n        cleanObjects = [cast(Any,obj).clean() if hasattr(obj,'clean') else obj for obj in self.objects]\n        \n        return self.newObject(cleanObjects)\n"
      }
    ]
  },
  {
    "project": "CadQuery/cadquery",
    "commit": "7bcd67f589a752933a9fd6eaced60d5a28ecd646",
    "filename": "cadquery/cq.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/CadQuery-cadquery/cadquery/cq.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cadquery/cq.py:3606:37 Incompatible parameter type [6]: Expected `Iterable[cadquery.occ_impl.shapes.Wire]` for 1st positional only parameter to call `list.extend` but got `typing.Generator[cadquery.occ_impl.shapes.Edge, None, None]`.",
    "message": " Expected `Iterable[cadquery.occ_impl.shapes.Wire]` for 1st positional only parameter to call `list.extend` but got `typing.Generator[cadquery.occ_impl.shapes.Edge, None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 3606,
    "warning_line": "        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Edge))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Wire))\n        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Edge))\n\n",
        "source_code_len": 177,
        "target_code": "        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Wire))\n        self.ctx.pendingEdges.extend(el for el in self.objects if isinstance(el, Edge))\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -3605,3 +3601,3 @@\n         self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Wire))\n-        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Edge))\n+        self.ctx.pendingEdges.extend(el for el in self.objects if isinstance(el, Edge))\n \n",
        "source_code_with_indent": "        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Wire))\n        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Edge))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.ctx.pendingWires.extend(el for el in self.objects if isinstance(el, Wire))\n        self.ctx.pendingEdges.extend(el for el in self.objects if isinstance(el, Edge))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]