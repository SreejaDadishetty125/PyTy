[
  {
    "project": "raiden-network/raiden",
    "commit": "ba631c4cc1fd9c7b4fe29f58c7c3dd65bf359404",
    "filename": "tools/debugging/analyze_sp_logs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/tools/debugging/analyze_sp_logs.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tools/debugging/analyze_sp_logs.py:170:21 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `sorted` but got `List[os.PathLike[typing.Any]]`.",
    "message": " Expected `typing.Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `sorted` but got `List[os.PathLike[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 170,
    "warning_line": "    for fn in sorted(content, reverse=True):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    content: List[os.PathLike] = cast(List[os.PathLike], os.listdir(folder))\n    for fn in sorted(content, reverse=True):\n        file = os.path.join(folder, fn)\n",
        "source_code_len": 162,
        "target_code": "    content: List[os.PathLike] = cast(List[os.PathLike], os.listdir(folder))\n    for fn in sorted(content, reverse=True):  # type: ignore\n        file = os.path.join(folder, fn)\n",
        "target_code_len": 178,
        "diff_format": "@@ -169,3 +169,3 @@\n     content: List[os.PathLike] = cast(List[os.PathLike], os.listdir(folder))\n-    for fn in sorted(content, reverse=True):\n+    for fn in sorted(content, reverse=True):  # type: ignore\n         file = os.path.join(folder, fn)\n",
        "source_code_with_indent": "    content: List[os.PathLike] = cast(List[os.PathLike], os.listdir(folder))\n    for fn in sorted(content, reverse=True):\n        <IND>file = os.path.join(folder, fn)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    content: List[os.PathLike] = cast(List[os.PathLike], os.listdir(folder))\n    for fn in sorted(content, reverse=True):  # type: ignore\n        <IND>file = os.path.join(folder, fn)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "ba631c4cc1fd9c7b4fe29f58c7c3dd65bf359404",
    "filename": "tools/pyinstaller_hooks/hook-raiden.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/tools/pyinstaller_hooks/hook-raiden.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tools/pyinstaller_hooks/hook-raiden.py:23:65 Incompatible parameter type [6]: Expected `typing.Tuple[str, ...]` for 1st positional only parameter to call `pkg_resources.Distribution.requires` but got `typing.List[typing.Any]`.",
    "message": " Expected `typing.Tuple[str, ...]` for 1st positional only parameter to call `pkg_resources.Distribution.requires` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 23,
    "warning_line": "    for req in pkg_resources.get_distribution(req_name).requires(req_extras):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\n\n",
        "source_code_len": 12,
        "target_code": "import sys\nfrom typing import List, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -3,2 +3,3 @@\n import sys\n+from typing import List, Tuple\n \n",
        "source_code_with_indent": "import sys\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# Add metadata of all required packages to allow pkg_resources.require() to work\nrequired_packages = [(\"raiden\", [])]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "source_code_len": 183,
        "target_code": "# Add metadata of all required packages to allow pkg_resources.require() to work\nrequired_packages: List[Tuple[str, Tuple[str, ...]]] = [(\"raiden\", ())]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "target_code_len": 218,
        "diff_format": "@@ -18,3 +19,3 @@\n # Add metadata of all required packages to allow pkg_resources.require() to work\n-required_packages = [(\"raiden\", [])]\n+required_packages: List[Tuple[str, Tuple[str, ...]]] = [(\"raiden\", ())]\n processed_packages = set()  # break out of circular dependencies\n",
        "source_code_with_indent": "# Add metadata of all required packages to allow pkg_resources.require() to work\n<DED>required_packages = [(\"raiden\", [])]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# Add metadata of all required packages to allow pkg_resources.require() to work\n<DED>required_packages: List[Tuple[str, Tuple[str, ...]]] = [(\"raiden\", ())]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "ba631c4cc1fd9c7b4fe29f58c7c3dd65bf359404",
    "filename": "tools/pyinstaller_hooks/hook-raiden.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/tools/pyinstaller_hooks/hook-raiden.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tools/pyinstaller_hooks/hook-raiden.py:28:33 Incompatible parameter type [6]: Expected `typing.Tuple[str, typing.List[typing.Any]]` for 1st positional only parameter to call `list.append` but got `typing.Tuple[str, typing.Tuple[str, ...]]`.",
    "message": " Expected `typing.Tuple[str, typing.List[typing.Any]]` for 1st positional only parameter to call `list.append` but got `typing.Tuple[str, typing.Tuple[str, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 28,
    "warning_line": "        required_packages.append(dep_tuple)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\n\n",
        "source_code_len": 12,
        "target_code": "import sys\nfrom typing import List, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -3,2 +3,3 @@\n import sys\n+from typing import List, Tuple\n \n",
        "source_code_with_indent": "import sys\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# Add metadata of all required packages to allow pkg_resources.require() to work\nrequired_packages = [(\"raiden\", [])]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "source_code_len": 183,
        "target_code": "# Add metadata of all required packages to allow pkg_resources.require() to work\nrequired_packages: List[Tuple[str, Tuple[str, ...]]] = [(\"raiden\", ())]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "target_code_len": 218,
        "diff_format": "@@ -18,3 +19,3 @@\n # Add metadata of all required packages to allow pkg_resources.require() to work\n-required_packages = [(\"raiden\", [])]\n+required_packages: List[Tuple[str, Tuple[str, ...]]] = [(\"raiden\", ())]\n processed_packages = set()  # break out of circular dependencies\n",
        "source_code_with_indent": "# Add metadata of all required packages to allow pkg_resources.require() to work\n<DED>required_packages = [(\"raiden\", [])]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# Add metadata of all required packages to allow pkg_resources.require() to work\n<DED>required_packages: List[Tuple[str, Tuple[str, ...]]] = [(\"raiden\", ())]\nprocessed_packages = set()  # break out of circular dependencies\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]