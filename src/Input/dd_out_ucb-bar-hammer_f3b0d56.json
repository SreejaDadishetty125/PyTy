[
  {
    "project": "ucb-bar/hammer",
    "commit": "f3b0d560ac80baea5b29c2d356bb509948d613a1",
    "filename": "src/hammer-vlsi/hammer_vlsi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ucb-bar-hammer/src/hammer-vlsi/hammer_vlsi.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/hammer-vlsi/hammer_vlsi.py:96:27 Invalid type [31]: Expression `typing.List[typing.Callable[([str, src.hammer.__sub__(vlsi.hammer_vlsi.HammerVLSILogging.Level), typing.List[str]], None)]]` is not a valid type.",
    "message": " Expression `typing.List[typing.Callable[([str, src.hammer.__sub__(vlsi.hammer_vlsi.HammerVLSILogging.Level), typing.List[str]], None)]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 96,
    "warning_line": "    callbacks = [] # type: List[Callable[[str, Level, List[str]], None]]"
  },
  {
    "project": "ucb-bar/hammer",
    "commit": "f3b0d560ac80baea5b29c2d356bb509948d613a1",
    "filename": "src/hammer-vlsi/hammer_vlsi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ucb-bar-hammer/src/hammer-vlsi/hammer_vlsi.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/hammer-vlsi/hammer_vlsi.py:106:29 Incompatible parameter type [6]: Expected `typing.Callable[[str, unknown, List[str]], None]` for 1st positional only parameter to call `list.append` but got `typing.Callable[[str], None]`.",
    "message": " Expected `typing.Callable[[str, unknown, List[str]], None]` for 1st positional only parameter to call `list.append` but got `typing.Callable[[str], None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 106,
    "warning_line": "        cls.callbacks.append(callback)"
  },
  {
    "project": "ucb-bar/hammer",
    "commit": "f3b0d560ac80baea5b29c2d356bb509948d613a1",
    "filename": "src/hammer-vlsi/hammer_vlsi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ucb-bar-hammer/src/hammer-vlsi/hammer_vlsi.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/hammer-vlsi/hammer_vlsi.py:116:48 Incompatible parameter type [6]: Expected `HammerVLSILogging` for 2nd positional only parameter to call `HammerVLSILoggingContext.__init__` but got `typing.Type[HammerVLSILogging]`.",
    "message": " Expected `HammerVLSILogging` for 2nd positional only parameter to call `HammerVLSILoggingContext.__init__` but got `typing.Type[HammerVLSILogging]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "            return HammerVLSILoggingContext([], cls)"
  },
  {
    "project": "ucb-bar/hammer",
    "commit": "f3b0d560ac80baea5b29c2d356bb509948d613a1",
    "filename": "src/hammer-vlsi/hammer_vlsi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ucb-bar-hammer/src/hammer-vlsi/hammer_vlsi.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/hammer-vlsi/hammer_vlsi.py:118:59 Incompatible parameter type [6]: Expected `HammerVLSILogging` for 2nd positional only parameter to call `HammerVLSILoggingContext.__init__` but got `typing.Type[HammerVLSILogging]`.",
    "message": " Expected `HammerVLSILogging` for 2nd positional only parameter to call `HammerVLSILoggingContext.__init__` but got `typing.Type[HammerVLSILogging]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "            return HammerVLSILoggingContext([new_context], cls)"
  },
  {
    "project": "ucb-bar/hammer",
    "commit": "f3b0d560ac80baea5b29c2d356bb509948d613a1",
    "filename": "src/hammer-vlsi/hammer_vlsi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ucb-bar-hammer/src/hammer-vlsi/hammer_vlsi.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/hammer-vlsi/hammer_vlsi.py:200:51 Invalid type [31]: Expression `src.hammer.__sub__(vlsi.hammer_vlsi.HammerVLSILogging)` is not a valid type.",
    "message": " Expression `src.hammer.__sub__(vlsi.hammer_vlsi.HammerVLSILogging)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 200,
    "warning_line": "        self.logging_class = logging_class # type: HammerVLSILogging"
  },
  {
    "project": "ucb-bar/hammer",
    "commit": "f3b0d560ac80baea5b29c2d356bb509948d613a1",
    "filename": "src/hammer-vlsi/hammer_vlsi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ucb-bar-hammer/src/hammer-vlsi/hammer_vlsi.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/hammer-vlsi/hammer_vlsi.py:393:32 Incompatible parameter type [6]: Expected `typing.Union[typing.Sequence[typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, str]], bytes, str]` for 1st positional only parameter to call `subprocess.Popen.__new__` but got `Iterable[str]`.",
    "message": " Expected `typing.Union[typing.Sequence[typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, str]], bytes, str]` for 1st positional only parameter to call `subprocess.Popen.__new__` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 393,
    "warning_line": "        proc = subprocess.Popen(args, shell=False, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=self._subprocess_env)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # TODO(edwardw): consider pulling this out so that hammer_tech can also use this\n    def run_executable(self, args: Iterable[str]) -> str:\n        \"\"\"\n",
        "source_code_len": 155,
        "target_code": "    # TODO(edwardw): consider pulling this out so that hammer_tech can also use this\n    def run_executable(self, args: List[str]) -> str:\n        \"\"\"\n",
        "target_code_len": 151,
        "diff_format": "@@ -369,3 +373,3 @@\n     # TODO(edwardw): consider pulling this out so that hammer_tech can also use this\n-    def run_executable(self, args: Iterable[str]) -> str:\n+    def run_executable(self, args: List[str]) -> str:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    # TODO(edwardw): consider pulling this out so that hammer_tech can also use this\n    <DED><DED>def run_executable(self, args: Iterable[str]) -> str:\n        <IND>",
        "target_code_with_indent": "    # TODO(edwardw): consider pulling this out so that hammer_tech can also use this\n    <DED><DED>def run_executable(self, args: List[str]) -> str:\n        <IND>"
      }
    ]
  }
]