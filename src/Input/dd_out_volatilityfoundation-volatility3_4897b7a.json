[
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "4897b7ab81119f0e1df50d9ca62f7e0932669ceb",
    "filename": "volatility/framework/contexts/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/contexts/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/contexts/__init__.py:167:11 Unsupported operand [58]: `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 167,
    "warning_line": "        if size < 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        \"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "source_code_len": 223,
        "target_code": "\n    def get_symbols_by_absolute_location(self, offset: int, size: int = 0) -> typing.List[str]:\n        \"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "target_code_len": 202,
        "diff_format": "@@ -164,3 +164,3 @@\n \n-    def get_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n+    def get_symbols_by_absolute_location(self, offset: int, size: int = 0) -> typing.List[str]:\n         \"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "source_code_with_indent": "\n    def get_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        <IND>\"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def get_symbols_by_absolute_location(self, offset: int, size: int = 0) -> typing.List[str]:\n        <IND>\"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_len": 171,
        "target_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_len": 154,
        "diff_format": "@@ -209,3 +209,3 @@\n \n-    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n+    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n             typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n"
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "4897b7ab81119f0e1df50d9ca62f7e0932669ceb",
    "filename": "volatility/framework/contexts/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/contexts/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/contexts/__init__.py:213:11 Unsupported operand [58]: `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 213,
    "warning_line": "        if size < 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_len": 171,
        "target_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_len": 154,
        "diff_format": "@@ -209,3 +209,3 @@\n \n-    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n+    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n             typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n"
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "4897b7ab81119f0e1df50d9ca62f7e0932669ceb",
    "filename": "volatility/framework/contexts/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/contexts/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/contexts/__init__.py:216:69 Unsupported operand [58]: `+` is not supported for operand types `int` and `typing.Optional[int]`.",
    "message": " `+` is not supported for operand types `int` and `typing.Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 216,
    "warning_line": "            if (offset <= module.offset + module.size) and (offset + size >= module.offset):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_len": 171,
        "target_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_len": 154,
        "diff_format": "@@ -209,3 +209,3 @@\n \n-    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n+    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n             typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n"
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "4897b7ab81119f0e1df50d9ca62f7e0932669ceb",
    "filename": "volatility/framework/contexts/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/contexts/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/contexts/__init__.py:217:16 Incompatible return type [7]: Expected `typing.Iterable[typing.Tuple[str, typing.List[str]]]` but got `typing.Generator[typing.Tuple[str, typing.Iterable[str]], None, None]`.",
    "message": " Expected `typing.Iterable[typing.Tuple[str, typing.List[str]]]` but got `typing.Generator[typing.Tuple[str, typing.Iterable[str]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 217,
    "warning_line": "                yield (module.name, module.get_symbols_by_absolute_location(offset, size))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        \"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "source_code_len": 223,
        "target_code": "\n    def get_symbols_by_absolute_location(self, offset: int, size: int = 0) -> typing.List[str]:\n        \"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "target_code_len": 202,
        "diff_format": "@@ -164,3 +164,3 @@\n \n-    def get_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n+    def get_symbols_by_absolute_location(self, offset: int, size: int = 0) -> typing.List[str]:\n         \"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "source_code_with_indent": "\n    def get_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        <IND>\"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def get_symbols_by_absolute_location(self, offset: int, size: int = 0) -> typing.List[str]:\n        <IND>\"\"\"Returns the symbols within this module that live at the specified absolute offset provided\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_len": 171,
        "target_code": "\n    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_len": 154,
        "diff_format": "@@ -209,3 +209,3 @@\n \n-    def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) -> \\\n+    def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) -> \\\n             typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: typing.Optional[int] = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n",
        "target_code_with_indent": "\n    <DED>def get_module_symbols_by_absolute_location(self, offset: int, size: int = 0) ->            typing.Iterable[typing.Tuple[str, typing.List[str]]]:\n"
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "4897b7ab81119f0e1df50d9ca62f7e0932669ceb",
    "filename": "volatility/framework/interfaces/symbols.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/interfaces/symbols.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/interfaces/symbols.py:172:11 Unsupported operand [58]: `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 172,
    "warning_line": "        if size < 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_symbols_by_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        \"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "source_code_len": 202,
        "target_code": "\n    def get_symbols_by_location(self, offset: int, size: int = 0) -> typing.Iterable[str]:\n        \"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "target_code_len": 185,
        "diff_format": "@@ -169,3 +169,3 @@\n \n-    def get_symbols_by_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n+    def get_symbols_by_location(self, offset: int, size: int = 0) -> typing.Iterable[str]:\n         \"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def get_symbols_by_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        <IND>\"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def get_symbols_by_location(self, offset: int, size: int = 0) -> typing.Iterable[str]:\n        <IND>\"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "4897b7ab81119f0e1df50d9ca62f7e0932669ceb",
    "filename": "volatility/framework/interfaces/symbols.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/interfaces/symbols.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/interfaces/symbols.py:177:91 Unsupported operand [58]: `+` is not supported for operand types `int` and `typing.Optional[int]`.",
    "message": " `+` is not supported for operand types `int` and `typing.Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 177,
    "warning_line": "                (sort_symbols[result][0] >= offset and sort_symbols[result][0] <= offset + size):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_symbols_by_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        \"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "source_code_len": 202,
        "target_code": "\n    def get_symbols_by_location(self, offset: int, size: int = 0) -> typing.Iterable[str]:\n        \"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "target_code_len": 185,
        "diff_format": "@@ -169,3 +169,3 @@\n \n-    def get_symbols_by_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n+    def get_symbols_by_location(self, offset: int, size: int = 0) -> typing.Iterable[str]:\n         \"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def get_symbols_by_location(self, offset: int, size: typing.Optional[int] = 0) -> typing.Iterable[str]:\n        <IND>\"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def get_symbols_by_location(self, offset: int, size: int = 0) -> typing.Iterable[str]:\n        <IND>\"\"\"Returns the name of all symbols in this table that live at a particular offset\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "4897b7ab81119f0e1df50d9ca62f7e0932669ceb",
    "filename": "volatility/framework/objects/utility.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/objects/utility.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/objects/utility.py:34:22 Incompatible variable type [9]: context is declared to have type `interfaces.context.ContextInterface` but is used as type `None`.",
    "message": " context is declared to have type `interfaces.context.ContextInterface` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "                      context: interfaces.context.ContextInterface = None) -> interfaces.objects.ObjectInterface:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                      count: int,\n                      subtype: typing.Optional[typing.Union[str, interfaces.objects.Template]] = None,\n                      context: interfaces.context.ContextInterface = None) -> interfaces.objects.ObjectInterface:\n    \"\"\"Takes an object, and recasts it as an array of pointers to subtype\"\"\"\n",
        "source_code_len": 328,
        "target_code": "                      count: int,\n                      subtype: typing.Union[str, interfaces.objects.Template],\n                      context: interfaces.context.ContextInterface) -> interfaces.objects.ObjectInterface:\n    \"\"\"Takes an object, and recasts it as an array of pointers to subtype\"\"\"\n",
        "target_code_len": 297,
        "diff_format": "@@ -32,4 +32,4 @@\n                       count: int,\n-                      subtype: typing.Optional[typing.Union[str, interfaces.objects.Template]] = None,\n-                      context: interfaces.context.ContextInterface = None) -> interfaces.objects.ObjectInterface:\n+                      subtype: typing.Union[str, interfaces.objects.Template],\n+                      context: interfaces.context.ContextInterface) -> interfaces.objects.ObjectInterface:\n     \"\"\"Takes an object, and recasts it as an array of pointers to subtype\"\"\"\n",
        "source_code_with_indent": "                      count: int,\n                      subtype: typing.Optional[typing.Union[str, interfaces.objects.Template]] = None,\n                      context: interfaces.context.ContextInterface = None) -> interfaces.objects.ObjectInterface:\n    <IND>\"\"\"Takes an object, and recasts it as an array of pointers to subtype\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                      count: int,\n                      subtype: typing.Union[str, interfaces.objects.Template],\n                      context: interfaces.context.ContextInterface) -> interfaces.objects.ObjectInterface:\n    <IND>\"\"\"Takes an object, and recasts it as an array of pointers to subtype\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]