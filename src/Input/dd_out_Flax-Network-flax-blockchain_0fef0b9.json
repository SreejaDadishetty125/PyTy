[
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/blockchain.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/blockchain.py:45:8 Incompatible attribute type [8]: Attribute `lca_block` declared in class `Blockchain` has type `FullBlock` but is used as type `None`.",
    "message": " Attribute `lca_block` declared in class `Blockchain` has type `FullBlock` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 45,
    "warning_line": "        self.lca_block: FullBlock = None"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/blockchain.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/blockchain.py:482:8 Incompatible variable type [9]: curr_old is declared to have type `TrunkBlock` but is used as type `Optional[TrunkBlock]`.",
    "message": " curr_old is declared to have type `TrunkBlock` but is used as type `Optional[TrunkBlock]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 482,
    "warning_line": "        curr_old: TrunkBlock = old_lca.trunk_block if old_lca else None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        curr_old: TrunkBlock = old_lca.trunk_block if old_lca else None\n        curr_new: TrunkBlock = new_lca.trunk_block\n",
        "source_code_len": 135,
        "target_code": "        \"\"\"\n        curr_old: Optional[TrunkBlock] = old_lca.trunk_block if old_lca else None\n        curr_new: TrunkBlock = new_lca.trunk_block\n",
        "target_code_len": 145,
        "diff_format": "@@ -481,3 +495,3 @@\n         \"\"\"\n-        curr_old: TrunkBlock = old_lca.trunk_block if old_lca else None\n+        curr_old: Optional[TrunkBlock] = old_lca.trunk_block if old_lca else None\n         curr_new: TrunkBlock = new_lca.trunk_block\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        curr_old: TrunkBlock = old_lca.trunk_block if old_lca else None\n        curr_new: TrunkBlock = new_lca.trunk_block\n",
        "target_code_with_indent": "\n        curr_old: Optional[TrunkBlock] = old_lca.trunk_block if old_lca else None\n        curr_new: TrunkBlock = new_lca.trunk_block\n"
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/farmer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/farmer.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/farmer.py:69:60 Incompatible parameter type [6]: Expected `uint64` for 5th positional only parameter to call `calculate_iterations_quality` but got `typing.Union[bytes, int]`.",
    "message": " Expected `uint64` for 5th positional only parameter to call `calculate_iterations_quality` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "                                                            constants[\"MIN_BLOCK_TIME\"])"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/farmer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/farmer.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/farmer.py:113:56 Incompatible parameter type [6]: Expected `uint64` for 5th positional only parameter to call `calculate_iterations_quality` but got `typing.Union[bytes, int]`.",
    "message": " Expected `uint64` for 5th positional only parameter to call `calculate_iterations_quality` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 113,
    "warning_line": "                                                        constants[\"MIN_BLOCK_TIME\"])"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/full_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/full_node.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/full_node.py:87:26 Incompatible parameter type [6]: Expected `FullBlock` for 1st positional only parameter to call `list.append` but got `typing.Coroutine[typing.Any, typing.Any, Optional[FullBlock]]`.",
    "message": " Expected `FullBlock` for 1st positional only parameter to call `list.append` but got `typing.Coroutine[typing.Any, typing.Any, Optional[FullBlock]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 87,
    "warning_line": "            blocks.append(blockchain.get_block(h.header.get_hash()))"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/full_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/full_node.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/full_node.py:467:57 Incompatible parameter type [6]: Expected `uint64` for 5th positional only parameter to call `calculate_iterations` but got `typing.Union[bytes, int]`.",
    "message": " Expected `uint64` for 5th positional only parameter to call `calculate_iterations` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 467,
    "warning_line": "                                                         constants[\"MIN_BLOCK_TIME\"])"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/full_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/full_node.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/full_node.py:474:23 Unsupported operand [58]: `>` is not supported for operand types `uint64` and `typing.Union[bytes, int]`.",
    "message": " `>` is not supported for operand types `uint64` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 474,
    "warning_line": "    if expected_time > constants[\"PROPAGATION_DELAY_THRESHOLD\"]:"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/types/coinbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/types/coinbase.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/types/coinbase.py:20:0 Incompatible variable type [9]: a is declared to have type `int` but is used as type `CoinbaseInfo`.",
    "message": " a is declared to have type `int` but is used as type `CoinbaseInfo`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "a: int = f(124)"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "src/types/coinbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/src/types/coinbase.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/types/coinbase.py:20:11 Incompatible parameter type [6]: Expected `CoinbaseInfo` for 1st positional only parameter to call `f` but got `int`.",
    "message": " Expected `CoinbaseInfo` for 1st positional only parameter to call `f` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 20,
    "warning_line": "a: int = f(124)"
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:85:13 Unsupported operand [58]: `<` is not supported for operand types `int` and `bytes`.",
    "message": " `<` is not supported for operand types `int` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 85,
    "warning_line": "        elif len(block_list) < (test_constants[\"DIFFICULTY_EPOCH\"] + test_constants[\"DIFFICULTY_DELAY\"]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:85:69 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `bytes.__add__` but got `typing.Union[bytes, int]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `bytes.__add__` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 85,
    "warning_line": "        elif len(block_list) < (test_constants[\"DIFFICULTY_EPOCH\"] + test_constants[\"DIFFICULTY_DELAY\"]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:93:47 Unsupported operand [58]: `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "message": " `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 93,
    "warning_line": "            prev_difficulty = (block_list[-1 - test_constants[\"DIFFICULTY_EPOCH\"]].weight -",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:94:47 Unsupported operand [58]: `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "message": " `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 94,
    "warning_line": "                               block_list[-2 - test_constants[\"DIFFICULTY_EPOCH\"]].weight)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:100:53 Incompatible parameter type [6]: Expected `uint64` for 5th positional only parameter to call `calculate_ips_from_iterations` but got `typing.Union[bytes, int]`.",
    "message": " Expected `uint64` for 5th positional only parameter to call `calculate_ips_from_iterations` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 100,
    "warning_line": "                                                     test_constants[\"MIN_BLOCK_TIME\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:105:30 Unsupported operand [58]: `>` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "message": " `>` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 105,
    "warning_line": "            if (next_height > test_constants[\"DIFFICULTY_EPOCH\"] and",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:106:34 Unsupported operand [58]: `%` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "message": " `%` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 106,
    "warning_line": "                    next_height % test_constants[\"DIFFICULTY_EPOCH\"] == test_constants[\"DIFFICULTY_DELAY\"]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:108:48 Unsupported operand [58]: `-` is not supported for operand types `int` and `bytes`.",
    "message": " `-` is not supported for operand types `int` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 108,
    "warning_line": "                height1 = uint64(next_height - (test_constants[\"DIFFICULTY_EPOCH\"] +",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:109:33 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `bytes.__add__` but got `typing.Union[bytes, int]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `bytes.__add__` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 109,
    "warning_line": "                                 test_constants[\"DIFFICULTY_DELAY\"]) - 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:110:48 Unsupported operand [58]: `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "message": " `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 110,
    "warning_line": "                height2 = uint64(next_height - (test_constants[\"DIFFICULTY_EPOCH\"]) - 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:111:48 Unsupported operand [58]: `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "message": " `-` is not supported for operand types `int` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 111,
    "warning_line": "                height3 = uint64(next_height - (test_constants[\"DIFFICULTY_DELAY\"]) - 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:117:34 Unsupported operand [58]: `-` is not supported for operand types `uint64` and `typing.Union[bytes, int]`.",
    "message": " `-` is not supported for operand types `uint64` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 117,
    "warning_line": "                                  test_constants[\"BLOCK_TIME_TARGET\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:122:62 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `bytes.__mul__` but got `typing.Union[bytes, int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `bytes.__mul__` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 122,
    "warning_line": "                term1 = (test_constants[\"DIFFICULTY_DELAY\"] * prev_difficulty *",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:123:53 Unsupported operand [58]: `*` is not supported for operand types `bytes` and `typing.Union[bytes, int]`.",
    "message": " `*` is not supported for operand types `bytes` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 123,
    "warning_line": "                         (timestamp3 - timestamp2) * test_constants[\"BLOCK_TIME_TARGET\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:125:26 Unsupported operand [58]: `-` is not supported for operand types `typing.Union[bytes, int]` and `int`.",
    "message": " `-` is not supported for operand types `typing.Union[bytes, int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 125,
    "warning_line": "                term2 = ((test_constants[\"DIFFICULTY_WARP_FACTOR\"] - 1) *",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:126:26 Unsupported operand [58]: `-` is not supported for operand types `typing.Union[bytes, int]` and `typing.Union[bytes, int]`.",
    "message": " `-` is not supported for operand types `typing.Union[bytes, int]` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 126,
    "warning_line": "                         (test_constants[\"DIFFICULTY_EPOCH\"] - test_constants[\"DIFFICULTY_DELAY\"]) * curr_difficulty",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:130:48 Unsupported operand [58]: `//` is not supported for operand types `bytes` and `typing.Union[bytes, int]`.",
    "message": " `//` is not supported for operand types `bytes` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 130,
    "warning_line": "                new_difficulty: uint64 = uint64((term1 + term2) //",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:135:37 Unsupported operand [58]: `>=` is not supported for operand types `uint64` and `typing.Union[bytes, int]`.",
    "message": " `>=` is not supported for operand types `uint64` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 135,
    "warning_line": "                if new_difficulty >= curr_difficulty:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:137:64 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `bytes.__mul__` but got `typing.Union[bytes, int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `bytes.__mul__` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "                                                                curr_difficulty))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:140:49 Unsupported operand [58]: `//` is not supported for operand types `typing.Union[bytes, int]` and `typing.Union[bytes, int]`.",
    "message": " `//` is not supported for operand types `typing.Union[bytes, int]` and `typing.Union[bytes, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 140,
    "warning_line": "                                          uint64(curr_difficulty // test_constants[\"DIFFICULTY_FACTOR\"])])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:147:96 Incompatible parameter type [6]: Expected `uint64` for 4th positional only parameter to call `BlockTools.create_next_block` but got `typing.Union[bytes, int]`.",
    "message": " Expected `uint64` for 4th positional only parameter to call `BlockTools.create_next_block` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 147,
    "warning_line": "            block_list.append(self.create_next_block(test_constants, block_list[-1], timestamp, curr_difficulty,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Flax-Network/flax-blockchain",
    "commit": "0fef0b933eb15eef18421c513410e870d6f8e218",
    "filename": "tests/block_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain/tests/block_tools.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/block_tools.py:148:53 Incompatible parameter type [6]: Expected `uint64` for 5th positional only parameter to call `BlockTools.create_next_block` but got `typing.Union[bytes, int]`.",
    "message": " Expected `uint64` for 5th positional only parameter to call `BlockTools.create_next_block` but got `typing.Union[bytes, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 148,
    "warning_line": "                                                     curr_ips, seed))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_len": 132,
        "target_code": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_len": 137,
        "diff_format": "@@ -5,3 +5,3 @@\n from chiapos import DiskPlotter, DiskProver\n-from typing import List, Dict\n+from typing import List, Dict, Any\n from blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from chiapos import DiskPlotter, DiskProver\nfrom typing import List, Dict, Any\nfrom blspy import PublicKey, PrivateKey, PrependSignature\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_len": 170,
        "target_code": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_len": 186,
        "diff_format": "@@ -72,3 +72,3 @@\n                                seed: uint64 = uint64(0)) -> List[FullBlock]:\n-        test_constants = constants.copy()\n+        test_constants: Dict[str, Any] = constants.copy()\n         for key, value in input_constants.items():\n",
        "source_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants = constants.copy()\n        for key, value in input_constants.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                               seed: uint64 = uint64(0)) -> List[FullBlock]:\n        <IND>test_constants: Dict[str, Any] = constants.copy()\n        for key, value in input_constants.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]