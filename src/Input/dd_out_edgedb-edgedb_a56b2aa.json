[
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/delta.py",
    "min_patch_found": false,
    "full_warning_msg": "edb/schema/delta.py:1708:28 Incompatible parameter type [6]: Expected `typing.Optional[so.ObjectMeta]` for 2nd parameter `metaclass` to call `utils.ast_to_object` but got `typing.Type[Variable[so.Object_T (bound to so.Object)]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/delta.py",
    "min_patch_found": false,
    "full_warning_msg": "edb/schema/delta.py:1719:28 Incompatible parameter type [6]: Expected `typing.Optional[so.ObjectMeta]` for 2nd parameter `metaclass` to call `utils.ast_to_object` but got `typing.Type[Variable[so.Object_T (bound to so.Object)]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/objtypes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/objtypes.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/objtypes.py:302:4 Incompatible return type [7]: Expected `ObjectType` but got `typing.Tuple[typing.Any, typing.Any, bool]`.",
    "message": " Expected `ObjectType` but got `typing.Tuple[typing.Any, typing.Any, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 302,
    "warning_line": "    return schema, objtype, created",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    module: Optional[str] = None,\n) -> ObjectType:\n\n",
        "source_code_len": 52,
        "target_code": "    module: Optional[str] = None,\n) -> Tuple[s_schema.Schema, ObjectType, bool]:\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -268,3 +268,3 @@\n     module: Optional[str] = None,\n-) -> ObjectType:\n+) -> Tuple[s_schema.Schema, ObjectType, bool]:\n \n",
        "source_code_with_indent": "    module: Optional[str] = None,\n) -> ObjectType:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    module: Optional[str] = None,\n) -> Tuple[s_schema.Schema, ObjectType, bool]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/objtypes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/objtypes.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/objtypes.py:360:4 Incompatible return type [7]: Expected `ObjectType` but got `typing.Tuple[typing.Any, typing.Any, bool]`.",
    "message": " Expected `ObjectType` but got `typing.Tuple[typing.Any, typing.Any, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 360,
    "warning_line": "    return schema, objtype, created",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    module: Optional[str] = None,\n) -> ObjectType:\n\n",
        "source_code_len": 52,
        "target_code": "    module: Optional[str] = None,\n) -> Tuple[s_schema.Schema, ObjectType, bool]:\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -309,3 +309,3 @@\n     module: Optional[str] = None,\n-) -> ObjectType:\n+) -> Tuple[s_schema.Schema, ObjectType, bool]:\n \n",
        "source_code_with_indent": "    module: Optional[str] = None,\n) -> ObjectType:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    module: Optional[str] = None,\n) -> Tuple[s_schema.Schema, ObjectType, bool]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/utils.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "edb/schema/utils.py:127:20 Incompatible parameter type [6]: Expected `typing.Sequence[s_types.Type]` for 2nd positional only parameter to call `s_types.BaseArray.from_subtypes` but got `typing.Mapping[str, s_types.Type]`.",
    "message": " Expected `typing.Sequence[s_types.Type]` for 2nd positional only parameter to call `s_types.BaseArray.from_subtypes` but got `typing.Mapping[str, s_types.Type]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "                    cast(Mapping[str, s_types.Type], subtypes),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    schema,\n                    cast(Mapping[str, s_types.Type], subtypes),\n                    {'named': bool(named)})\n            except errors.SchemaError as e:\n",
        "source_code_len": 180,
        "target_code": "                    schema,\n                    subtypes,  # type: ignore\n                    {'named': bool(named)},\n                )\n            except errors.SchemaError as e:\n",
        "target_code_len": 180,
        "diff_format": "@@ -126,4 +128,5 @@\n                     schema,\n-                    cast(Mapping[str, s_types.Type], subtypes),\n-                    {'named': bool(named)})\n+                    subtypes,  # type: ignore\n+                    {'named': bool(named)},\n+                )\n             except errors.SchemaError as e:\n",
        "source_code_with_indent": "                    schema,\n                    cast(Mapping[str, s_types.Type], subtypes),\n                    {'named': bool(named)})\n            <DED>except errors.SchemaError as e:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    schema,\n                    subtypes,  # type: ignore\n                    {'named': bool(named)},\n                )\n            <DED>except errors.SchemaError as e:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/utils.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/utils.py:225:8 Incompatible variable type [9]: components is declared to have type `typing.Tuple[so.ObjectRef, ...]` but is used as type `typing.Tuple[s_types.Type, ...]`.",
    "message": " components is declared to have type `typing.Tuple[so.ObjectRef, ...]` but is used as type `typing.Tuple[s_types.Type, ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 225,
    "warning_line": "        components = tuple(object_set.objects(schema))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/utils.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "edb/schema/utils.py:293:4 Incompatible return type [7]: Expected `Variable[s_types.TypeT (bound to s_types.Type)]` but got `so.Object`.",
    "message": " Expected `Variable[s_types.TypeT (bound to s_types.Type)]` but got `so.Object`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 293,
    "warning_line": "    return ast_to_object(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    return ast_to_object(\n        node,\n",
        "source_code_len": 41,
        "target_code": "\n    # type ignore for now\n    return ast_to_object(  # type: ignore\n        node,\n",
        "target_code_len": 83,
        "diff_format": "@@ -292,3 +297,4 @@\n \n-    return ast_to_object(\n+    # type ignore for now\n+    return ast_to_object(  # type: ignore\n         node,\n",
        "source_code_with_indent": "\n    <IND>return ast_to_object(\n        node,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # type ignore for now\n    <IND>return ast_to_object(  # type: ignore\n        node,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/utils.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/utils.py:295:8 Incompatible parameter type [6]: Expected `typing.Optional[so.ObjectMeta]` for 2nd parameter `metaclass` to call `ast_to_object` but got `typing.Optional[typing.Type[Variable[s_types.TypeT (bound to s_types.Type)]]]`.",
    "message": " Expected `typing.Optional[so.ObjectMeta]` for 2nd parameter `metaclass` to call `ast_to_object` but got `typing.Optional[typing.Type[Variable[s_types.TypeT (bound to s_types.Type)]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 295,
    "warning_line": "        metaclass=metaclass,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    node: qlast.TypeName, *,\n    metaclass: Optional[so.ObjectMeta] = None,\n    modaliases: Mapping[Optional[str], str],\n",
        "source_code_len": 121,
        "target_code": "    node: qlast.TypeName, *,\n    metaclass: Optional[Type[so.Object]] = None,\n    modaliases: Mapping[Optional[str], str],\n",
        "target_code_len": 123,
        "diff_format": "@@ -250,3 +255,3 @@\n     node: qlast.TypeName, *,\n-    metaclass: Optional[so.ObjectMeta] = None,\n+    metaclass: Optional[Type[so.Object]] = None,\n     modaliases: Mapping[Optional[str], str],\n",
        "source_code_with_indent": "    node: qlast.TypeName, *,\n    metaclass: Optional[so.ObjectMeta] = None,\n    modaliases: Mapping[Optional[str], str],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    node: qlast.TypeName, *,\n    metaclass: Optional[Type[so.Object]] = None,\n    modaliases: Mapping[Optional[str], str],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/utils.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/utils.py:569:65 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[so.InheritingObjectT (bound to so.InheritingObject)]]` for 2nd positional only parameter to call `minimize_class_set_by_most_generic` but got `typing.Set[s_types.Type]`.",
    "message": " Expected `typing.Iterable[Variable[so.InheritingObjectT (bound to so.InheritingObject)]]` for 2nd positional only parameter to call `minimize_class_set_by_most_generic` but got `typing.Set[s_types.Type]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 569,
    "warning_line": "    components_list = minimize_class_set_by_most_generic(schema, components)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/utils.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/utils.py:665:66 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[so.InheritingObjectT (bound to so.InheritingObject)]]` for 2nd positional only parameter to call `minimize_class_set_by_least_generic` but got `typing.Set[s_types.Type]`.",
    "message": " Expected `typing.Iterable[Variable[so.InheritingObjectT (bound to so.InheritingObject)]]` for 2nd positional only parameter to call `minimize_class_set_by_least_generic` but got `typing.Set[s_types.Type]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 665,
    "warning_line": "    components_list = minimize_class_set_by_least_generic(schema, components)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    components_list = minimize_class_set_by_least_generic(schema, components)\n\n",
        "source_code_len": 80,
        "target_code": "\n    components_list: Sequence[s_types.Type]\n\n    if all(isinstance(c, s_types.InheritingType) for c in components):\n        components_list = minimize_class_set_by_least_generic(\n            schema,\n            cast(Set[s_types.InheritingType], components),\n        )\n    else:\n        components_list = list(components)\n\n",
        "target_code_len": 323,
        "diff_format": "@@ -664,3 +690,11 @@\n \n-    components_list = minimize_class_set_by_least_generic(schema, components)\n+    components_list: Sequence[s_types.Type]\n+\n+    if all(isinstance(c, s_types.InheritingType) for c in components):\n+        components_list = minimize_class_set_by_least_generic(\n+            schema,\n+            cast(Set[s_types.InheritingType], components),\n+        )\n+    else:\n+        components_list = list(components)\n \n",
        "source_code_with_indent": "\n    <DED><DED>components_list = minimize_class_set_by_least_generic(schema, components)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>components_list: Sequence[s_types.Type]\n\n    if all(isinstance(c, s_types.InheritingType) for c in components):\n        <IND>components_list = minimize_class_set_by_least_generic(\n            schema,\n            cast(Set[s_types.InheritingType], components),\n        )\n    <DED>else:\n        <IND>components_list = list(components)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "a56b2aaa19b7a12f984e5163fc465215a60e66cd",
    "filename": "edb/schema/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/utils.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/utils.py:687:8 Incompatible return type [7]: Expected `typing.Tuple[s_schema.Schema, s_types.Type, bool]` but got `s_objtypes.ObjectType`.",
    "message": " Expected `typing.Tuple[s_schema.Schema, s_types.Type, bool]` but got `s_objtypes.ObjectType`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 687,
    "warning_line": "        return s_objtypes.get_or_create_intersection_type("
  }
]