[
  {
    "project": "mkorman90/regipy",
    "commit": "66b6dfc74e6b85944c2db6ef8fa6c8fe29e665c6",
    "filename": "regipy/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mkorman90-regipy/regipy/utils.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "regipy/utils.py:57:4 Incompatible return type [7]: Expected `TextIOWrapper` but got `typing.Generator[TextIOWrapper, None, None]`.",
    "message": " Expected `TextIOWrapper` but got `typing.Generator[TextIOWrapper, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 57,
    "warning_line": "    yield stream",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\n\n",
        "source_code_len": 12,
        "target_code": "import sys\n\nfrom typing import Generator, Union\n\n",
        "target_code_len": 49,
        "diff_format": "@@ -5,2 +5,4 @@\n import sys\n+\n+from typing import Generator, Union\n \n",
        "source_code_with_indent": "import sys\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\n\nfrom typing import Generator, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> TextIOWrapper:\n    \"\"\"\n",
        "source_code_len": 86,
        "target_code": "@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> Generator[TextIOWrapper, None, None]:\n    \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -50,3 +52,3 @@\n @contextmanager\n-def boomerang_stream(stream: TextIOWrapper) -> TextIOWrapper:\n+def boomerang_stream(stream: TextIOWrapper) -> Generator[TextIOWrapper, None, None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> TextIOWrapper:\n    <IND>",
        "target_code_with_indent": "<DED>@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> Generator[TextIOWrapper, None, None]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_wintime(wintime: int, as_json=False) -> dt.datetime:\n    \"\"\"\n",
        "source_code_len": 74,
        "target_code": "\ndef convert_wintime(wintime: int, as_json=False) -> Union[dt.datetime, str]:\n    \"\"\"\n",
        "target_code_len": 86,
        "diff_format": "@@ -76,3 +78,3 @@\n \n-def convert_wintime(wintime: int, as_json=False) -> dt.datetime:\n+def convert_wintime(wintime: int, as_json=False) -> Union[dt.datetime, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def convert_wintime(wintime: int, as_json=False) -> dt.datetime:\n    <IND>",
        "target_code_with_indent": "\n<DED><DED>def convert_wintime(wintime: int, as_json=False) -> Union[dt.datetime, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "mkorman90/regipy",
    "commit": "66b6dfc74e6b85944c2db6ef8fa6c8fe29e665c6",
    "filename": "regipy/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mkorman90-regipy/regipy/utils.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "regipy/utils.py:91:4 Incompatible return type [7]: Expected `dt.datetime` but got `typing.Union[dt.datetime, str]`.",
    "message": " Expected `dt.datetime` but got `typing.Union[dt.datetime, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 91,
    "warning_line": "    return date.isoformat() if as_json else date",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\n\n",
        "source_code_len": 12,
        "target_code": "import sys\n\nfrom typing import Generator, Union\n\n",
        "target_code_len": 49,
        "diff_format": "@@ -5,2 +5,4 @@\n import sys\n+\n+from typing import Generator, Union\n \n",
        "source_code_with_indent": "import sys\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\n\nfrom typing import Generator, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> TextIOWrapper:\n    \"\"\"\n",
        "source_code_len": 86,
        "target_code": "@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> Generator[TextIOWrapper, None, None]:\n    \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -50,3 +52,3 @@\n @contextmanager\n-def boomerang_stream(stream: TextIOWrapper) -> TextIOWrapper:\n+def boomerang_stream(stream: TextIOWrapper) -> Generator[TextIOWrapper, None, None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> TextIOWrapper:\n    <IND>",
        "target_code_with_indent": "<DED>@contextmanager\ndef boomerang_stream(stream: TextIOWrapper) -> Generator[TextIOWrapper, None, None]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_wintime(wintime: int, as_json=False) -> dt.datetime:\n    \"\"\"\n",
        "source_code_len": 74,
        "target_code": "\ndef convert_wintime(wintime: int, as_json=False) -> Union[dt.datetime, str]:\n    \"\"\"\n",
        "target_code_len": 86,
        "diff_format": "@@ -76,3 +78,3 @@\n \n-def convert_wintime(wintime: int, as_json=False) -> dt.datetime:\n+def convert_wintime(wintime: int, as_json=False) -> Union[dt.datetime, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def convert_wintime(wintime: int, as_json=False) -> dt.datetime:\n    <IND>",
        "target_code_with_indent": "\n<DED><DED>def convert_wintime(wintime: int, as_json=False) -> Union[dt.datetime, str]:\n    <IND>"
      }
    ]
  }
]