[
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "92024df20e43f95d39ab6efe5b94a84bd2ff5e40",
    "filename": "pl_examples/domain_templates/reinforce_learn_Qnet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pl_examples/domain_templates/reinforce_learn_Qnet.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pl_examples/domain_templates/reinforce_learn_Qnet.py:145:12 Incompatible return type [7]: Expected `typing.Tuple[typing.Any, ...]` but got `typing.Generator[Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any], None, None]`.",
    "message": " Expected `typing.Tuple[typing.Any, ...]` but got `typing.Generator[Tuple[typing.Any, typing.Any, typing.Any, typing.Any, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 145,
    "warning_line": "            yield states[i], actions[i], rewards[i], dones[i], new_states[i]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import deque, namedtuple, OrderedDict\nfrom typing import List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "from collections import deque, namedtuple, OrderedDict\nfrom typing import Iterator, List, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -36,3 +36,3 @@\n from collections import deque, namedtuple, OrderedDict\n-from typing import List, Tuple\n+from typing import Iterator, List, Tuple\n \n",
        "source_code_with_indent": "from collections import deque, namedtuple, OrderedDict\nfrom typing import List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import deque, namedtuple, OrderedDict\nfrom typing import Iterator, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __iter__(self) -> Tuple:\n        states, actions, rewards, dones, new_states = self.buffer.sample(self.sample_size)\n",
        "source_code_len": 125,
        "target_code": "\n    def __iter__(self) -> Iterator:\n        states, actions, rewards, dones, new_states = self.buffer.sample(self.sample_size)\n",
        "target_code_len": 128,
        "diff_format": "@@ -141,3 +141,3 @@\n \n-    def __iter__(self) -> Tuple:\n+    def __iter__(self) -> Iterator:\n         states, actions, rewards, dones, new_states = self.buffer.sample(self.sample_size)\n",
        "source_code_with_indent": "\n    <DED>def __iter__(self) -> Tuple:\n        <IND>states, actions, rewards, dones, new_states = self.buffer.sample(self.sample_size)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __iter__(self) -> Iterator:\n        <IND>states, actions, rewards, dones, new_states = self.buffer.sample(self.sample_size)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]