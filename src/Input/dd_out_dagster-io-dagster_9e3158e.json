[
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:215:12 Incompatible return type [7]: Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 215,
    "warning_line": "            yield materialization",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"target-path\": Field(\n            config=StringSource,\n            is_required=False,\n            default_value=DEFAULT_DBT_TARGET_PATH,\n            description=(\n                \"The directory path for target if different from the default `target-path` in \"\n                \"your dbt project configuration file.\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context) -> DbtCliOutput:\n    \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "source_code_len": 545,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context):\n    \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "target_code_len": 181,
        "diff_format": "@@ -175,16 +96,7 @@\n         ),\n-        \"target-path\": Field(\n-            config=StringSource,\n-            is_required=False,\n-            default_value=DEFAULT_DBT_TARGET_PATH,\n-            description=(\n-                \"The directory path for target if different from the default `target-path` in \"\n-                \"your dbt project configuration file.\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_run(context) -> DbtCliOutput:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_run(context):\n     \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        ),\n        \"target-path\": Field(\n            config=StringSource,\n            is_required=False,\n            default_value=DEFAULT_DBT_TARGET_PATH,\n            description=(\n                \"The directory path for target if different from the default `target-path` in \"\n                \"your dbt project configuration file.\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context) -> DbtCliOutput:\n    <IND>",
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context):\n    <IND>"
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:217:4 Incompatible return type [7]: Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 217,
    "warning_line": "    yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"target-path\": Field(\n            config=StringSource,\n            is_required=False,\n            default_value=DEFAULT_DBT_TARGET_PATH,\n            description=(\n                \"The directory path for target if different from the default `target-path` in \"\n                \"your dbt project configuration file.\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context) -> DbtCliOutput:\n    \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "source_code_len": 545,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context):\n    \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "target_code_len": 181,
        "diff_format": "@@ -175,16 +96,7 @@\n         ),\n-        \"target-path\": Field(\n-            config=StringSource,\n-            is_required=False,\n-            default_value=DEFAULT_DBT_TARGET_PATH,\n-            description=(\n-                \"The directory path for target if different from the default `target-path` in \"\n-                \"your dbt project configuration file.\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_run(context) -> DbtCliOutput:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_run(context):\n     \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        ),\n        \"target-path\": Field(\n            config=StringSource,\n            is_required=False,\n            default_value=DEFAULT_DBT_TARGET_PATH,\n            description=(\n                \"The directory path for target if different from the default `target-path` in \"\n                \"your dbt project configuration file.\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context) -> DbtCliOutput:\n    <IND>",
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context):\n    <IND>"
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:223:4 Incompatible return type [7]: Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 223,
    "warning_line": "    yield Output(cli_output, output_name=\"dbt_output\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"target-path\": Field(\n            config=StringSource,\n            is_required=False,\n            default_value=DEFAULT_DBT_TARGET_PATH,\n            description=(\n                \"The directory path for target if different from the default `target-path` in \"\n                \"your dbt project configuration file.\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context) -> DbtCliOutput:\n    \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "source_code_len": 545,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context):\n    \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "target_code_len": 181,
        "diff_format": "@@ -175,16 +96,7 @@\n         ),\n-        \"target-path\": Field(\n-            config=StringSource,\n-            is_required=False,\n-            default_value=DEFAULT_DBT_TARGET_PATH,\n-            description=(\n-                \"The directory path for target if different from the default `target-path` in \"\n-                \"your dbt project configuration file.\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_run(context) -> DbtCliOutput:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_run(context):\n     \"\"\"This solid executes ``dbt run`` via the dbt CLI. See the solid definition for available\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        ),\n        \"target-path\": Field(\n            config=StringSource,\n            is_required=False,\n            default_value=DEFAULT_DBT_TARGET_PATH,\n            description=(\n                \"The directory path for target if different from the default `target-path` in \"\n                \"your dbt project configuration file.\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context) -> DbtCliOutput:\n    <IND>",
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run(context):\n    <IND>"
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:313:8 Incompatible return type [7]: Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 313,
    "warning_line": "        yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@experimental\ndef dbt_cli_test(context) -> DbtCliOutput:\n    \"\"\"This solid executes ``dbt test`` via the dbt CLI. See the solid definition for available\n",
        "source_code_len": 153,
        "target_code": "@experimental\ndef dbt_cli_test(context):\n    \"\"\"This solid executes ``dbt test`` via the dbt CLI. See the solid definition for available\n",
        "target_code_len": 137,
        "diff_format": "@@ -292,3 +185,3 @@\n @experimental\n-def dbt_cli_test(context) -> DbtCliOutput:\n+def dbt_cli_test(context):\n     \"\"\"This solid executes ``dbt test`` via the dbt CLI. See the solid definition for available\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "@experimental\ndef dbt_cli_test(context) -> DbtCliOutput:\n    <IND>",
        "target_code_with_indent": "@experimental\ndef dbt_cli_test(context):\n    <IND>"
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:319:4 Incompatible return type [7]: Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `DbtCliOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 319,
    "warning_line": "    yield Output(DbtCliOutput.from_dict(cli_output), output_name=\"dbt_output\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@experimental\ndef dbt_cli_test(context) -> DbtCliOutput:\n    \"\"\"This solid executes ``dbt test`` via the dbt CLI. See the solid definition for available\n",
        "source_code_len": 153,
        "target_code": "@experimental\ndef dbt_cli_test(context):\n    \"\"\"This solid executes ``dbt test`` via the dbt CLI. See the solid definition for available\n",
        "target_code_len": 137,
        "diff_format": "@@ -292,3 +185,3 @@\n @experimental\n-def dbt_cli_test(context) -> DbtCliOutput:\n+def dbt_cli_test(context):\n     \"\"\"This solid executes ``dbt test`` via the dbt CLI. See the solid definition for available\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "@experimental\ndef dbt_cli_test(context) -> DbtCliOutput:\n    <IND>",
        "target_code_with_indent": "@experimental\ndef dbt_cli_test(context):\n    <IND>"
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:374:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 374,
    "warning_line": "        yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context) -> Dict:\n    \"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 512,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context):\n    \"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -348,16 +231,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_snapshot(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_snapshot(context):\n     \"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context):\n    <IND>\"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:380:4 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 380,
    "warning_line": "    yield Output(cli_output)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context) -> Dict:\n    \"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 512,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context):\n    \"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -348,16 +231,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_snapshot(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_snapshot(context):\n     \"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot(context):\n    <IND>\"\"\"This solid executes ``dbt snapshot`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:430:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 430,
    "warning_line": "        yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context) -> Dict:\n    \"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 522,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context):\n    \"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 165,
        "diff_format": "@@ -404,16 +272,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_run_operation(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_run_operation(context):\n     \"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context):\n    <IND>\"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:436:4 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 436,
    "warning_line": "    yield Output(cli_output)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context) -> Dict:\n    \"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 522,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context):\n    \"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 165,
        "diff_format": "@@ -404,16 +272,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_run_operation(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_run_operation(context):\n     \"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_run_operation(context):\n    <IND>\"\"\"This solid executes ``dbt run-operation`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:493:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 493,
    "warning_line": "        yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context) -> Dict:\n    \"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 539,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context):\n    \"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 182,
        "diff_format": "@@ -467,16 +320,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_snapshot_freshness(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_snapshot_freshness(context):\n     \"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context):\n    <IND>\"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:499:4 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 499,
    "warning_line": "    yield Output(cli_output)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context) -> Dict:\n    \"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 539,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context):\n    \"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 182,
        "diff_format": "@@ -467,16 +320,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_snapshot_freshness(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_snapshot_freshness(context):\n     \"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_snapshot_freshness(context):\n    <IND>\"\"\"This solid executes ``dbt source snapshot-freshness`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:604:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 604,
    "warning_line": "        yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context) -> Dict:\n    \"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 510,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context):\n    \"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -566,16 +404,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_compile(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_compile(context):\n     \"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context):\n    <IND>\"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:610:4 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 610,
    "warning_line": "    yield Output(cli_output)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context) -> Dict:\n    \"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 510,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context):\n    \"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -566,16 +404,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_compile(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_compile(context):\n     \"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_compile(context):\n    <IND>\"\"\"This solid executes ``dbt compile`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:702:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 702,
    "warning_line": "        yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context) -> Dict:\n    \"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 522,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context):\n    \"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 165,
        "diff_format": "@@ -663,16 +486,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_docs_generate(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_docs_generate(context):\n     \"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context):\n    <IND>\"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:708:4 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 708,
    "warning_line": "    yield Output(cli_output)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context) -> Dict:\n    \"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 522,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context):\n    \"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 165,
        "diff_format": "@@ -663,16 +486,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_docs_generate(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_docs_generate(context):\n     \"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_docs_generate(context):\n    <IND>\"\"\"This solid executes ``dbt docs generate`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:811:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 811,
    "warning_line": "        yield AssetMaterialization(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context) -> Dict:\n    \"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 504,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context):\n    \"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 147,
        "diff_format": "@@ -773,16 +578,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_seed(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_seed(context):\n     \"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context):\n    <IND>\"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py",
    "file_hunks_size": 37,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/solids.py:817:4 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 817,
    "warning_line": "    yield Output(cli_output)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context) -> Dict:\n    \"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "source_code_len": 504,
        "target_code": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context):\n    \"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "target_code_len": 147,
        "diff_format": "@@ -773,16 +578,7 @@\n         ),\n-        \"yield_materializations\": Field(\n-            config=Bool,\n-            is_required=False,\n-            default_value=True,\n-            description=(\n-                \"If True, materializations corresponding to the results of the dbt operation will \"\n-                \"be yielded when the solid executes. Default: True\"\n-            ),\n-        ),\n-    },\n-    tags={\"kind\": \"dbt\"},\n-)\n-@experimental\n-def dbt_cli_seed(context) -> Dict:\n+    },\n+    tags={\"kind\": \"dbt\"},\n+)\n+@experimental\n+def dbt_cli_seed(context):\n     \"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent": "        ),\n        \"yield_materializations\": Field(\n            config=Bool,\n            is_required=False,\n            default_value=True,\n            description=(\n                \"If True, materializations corresponding to the results of the dbt operation will \"\n                \"be yielded when the solid executes. Default: True\"\n            ),\n        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context) -> Dict:\n    <IND>\"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ),\n    },\n    tags={\"kind\": \"dbt\"},\n)\n@experimental\ndef dbt_cli_seed(context):\n    <IND>\"\"\"This solid executes ``dbt seed`` via the dbt CLI.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/types.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/types.py:62:45 Invalid type [31]: Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.cli.types.DbtCliOutput)` is not a valid type.",
    "message": " Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.cli.types.DbtCliOutput)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 62,
    "warning_line": "    def from_dict(cls, d: Dict[str, Any]) -> \"DbtCliOutput\":"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/utils.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/utils.py:32:4 Incompatible variable type [9]: warn_error is declared to have type `bool` but is used as type `typing.Union[List[str], List[Variable[_T]]]`.",
    "message": " warn_error is declared to have type `bool` but is used as type `typing.Union[List[str], List[Variable[_T]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "    warn_error = [\"--warn-error\"] if warn_error else []"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/cli/utils.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/cli/utils.py:57:4 Incompatible variable type [9]: Unable to unpack `str`, expected a tuple.",
    "message": " Unable to unpack `str`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 57,
    "warning_line": "    command = \" \".join(command_list)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    executable: str,\n    command: Tuple[str, ...],\n    flags_dict: Dict[str, Any],\n",
        "source_code_len": 83,
        "target_code": "    executable: str,\n    command: str,\n    flags_dict: Dict[str, Any],\n",
        "target_code_len": 71,
        "diff_format": "@@ -17,3 +18,3 @@\n     executable: str,\n-    command: Tuple[str, ...],\n+    command: str,\n     flags_dict: Dict[str, Any],\n",
        "source_code_with_indent": "    executable: str,\n    command: Tuple[str, ...],\n    flags_dict: Dict[str, Any],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    executable: str,\n    command: str,\n    flags_dict: Dict[str, Any],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py:272:17 Incompatible variable type [9]: select is declared to have type `List[str]` but is used as type `None`.",
    "message": " select is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 272,
    "warning_line": "        self, *, select: List[str] = None, exclude: List[str] = None, **kwargs"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py:348:8 Incompatible variable type [9]: models is declared to have type `List[str]` but is used as type `None`.",
    "message": " models is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 348,
    "warning_line": "        models: List[str] = None,"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py:349:8 Incompatible variable type [9]: exclude is declared to have type `List[str]` but is used as type `None`.",
    "message": " exclude is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 349,
    "warning_line": "        exclude: List[str] = None,"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/resources.py:415:46 Incompatible parameter type [6]: Expected `List[str]` for 1st parameter `select` to call `DbtRpcClient._selection` but got `Optional[List[str]]`.",
    "message": " Expected `List[str]` for 1st parameter `select` to call `DbtRpcClient._selection` but got `Optional[List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 415,
    "warning_line": "        data[\"params\"].update(self._selection(select=select))"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/rpc/solids.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/solids.py:92:12 Incompatible return type [7]: Expected `DbtRpcOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `DbtRpcOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 92,
    "warning_line": "            yield materialization",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n) -> DbtRpcOutput:\n    \"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "source_code_len": 213,
        "target_code": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n):\n    \"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "target_code_len": 197,
        "diff_format": "@@ -33,3 +33,3 @@\n     context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n-) -> DbtRpcOutput:\n+):\n     \"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "source_code_with_indent": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n) -> DbtRpcOutput:\n    <IND>\"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n):\n    <IND>\"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/solids.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/rpc/solids.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/solids.py:94:4 Incompatible return type [7]: Expected `DbtRpcOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `DbtRpcOutput` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 94,
    "warning_line": "    yield Output(polled_run_results)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n) -> DbtRpcOutput:\n    \"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "source_code_len": 213,
        "target_code": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n):\n    \"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "target_code_len": 197,
        "diff_format": "@@ -33,3 +33,3 @@\n     context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n-) -> DbtRpcOutput:\n+):\n     \"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "source_code_with_indent": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n) -> DbtRpcOutput:\n    <IND>\"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    context: SolidExecutionContext, request_token: str, should_yield_materializations: bool = True\n):\n    <IND>\"\"\"Polls the dbt RPC server for the status of a request until the state is ``success``.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/rpc/types.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/rpc/types.py:42:45 Invalid type [31]: Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.rpc.types.DbtRpcOutput)` is not a valid type.",
    "message": " Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.rpc.types.DbtRpcOutput)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 42,
    "warning_line": "    def from_dict(cls, d: Dict[str, Any]) -> \"DbtRpcOutput\":"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/types.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/types.py:72:8 Incompatible variable type [9]: step_timings is declared to have type `List[StepTiming]` but is used as type `None`.",
    "message": " step_timings is declared to have type `List[StepTiming]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "        step_timings: List[StepTiming] = None,"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/types.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/types.py:95:45 Invalid type [31]: Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.types.NodeResult)` is not a valid type.",
    "message": " Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.types.NodeResult)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 95,
    "warning_line": "    def from_dict(cls, d: Dict[str, Any]) -> \"NodeResult\":"
  },
  {
    "project": "dagster-io/dagster",
    "commit": "9e3158e03d19cde24baa9b04f88e5477263480d9",
    "filename": "python_modules/libraries/dagster-dbt/dagster_dbt/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/libraries/dagster-dbt/dagster_dbt/types.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/libraries/dagster-dbt/dagster_dbt/types.py:168:45 Invalid type [31]: Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.types.DbtResult)` is not a valid type.",
    "message": " Expression `python_modules.libraries.dagster.__sub__(dbt.dagster_dbt.types.DbtResult)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 168,
    "warning_line": "    def from_dict(cls, d: Dict[str, Any]) -> \"DbtResult\":"
  }
]