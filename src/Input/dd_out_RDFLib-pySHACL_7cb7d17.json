[
  {
    "project": "RDFLib/pySHACL",
    "commit": "7cb7d174cfdc6e9fe4b189687f0fec2356ea1e7a",
    "filename": "pyshacl/rules/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-pySHACL/pyshacl/rules/__init__.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyshacl/rules/__init__.py:74:4 Incompatible variable type [9]: shapes_rules is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `List[typing.Tuple[typing.Any, typing.Any]]`.",
    "message": " shapes_rules is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `List[typing.Tuple[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 74,
    "warning_line": "    shapes_rules = sorted(shapes_rules.items(), key=lambda x: x[0].order)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import defaultdict\nfrom typing import TYPE_CHECKING, Dict, List\nfrom pyshacl.consts import RDF_type, SH_TripleRule, SH_SPARQLRule, SH_SPARQLFunction, SH_rule\n",
        "source_code_len": 175,
        "target_code": "from collections import defaultdict\nfrom typing import TYPE_CHECKING, Dict, List, Tuple, Any\nfrom pyshacl.consts import RDF_type, SH_TripleRule, SH_SPARQLRule, SH_SPARQLFunction, SH_rule\n",
        "target_code_len": 187,
        "diff_format": "@@ -2,3 +2,3 @@\n from collections import defaultdict\n-from typing import TYPE_CHECKING, Dict, List\n+from typing import TYPE_CHECKING, Dict, List, Tuple, Any\n from pyshacl.consts import RDF_type, SH_TripleRule, SH_SPARQLRule, SH_SPARQLFunction, SH_rule\n",
        "source_code_with_indent": "from collections import defaultdict\nfrom typing import TYPE_CHECKING, Dict, List\nfrom pyshacl.consts import RDF_type, SH_TripleRule, SH_SPARQLRule, SH_SPARQLFunction, SH_rule\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import defaultdict\nfrom typing import TYPE_CHECKING, Dict, List, Tuple, Any\nfrom pyshacl.consts import RDF_type, SH_TripleRule, SH_SPARQLRule, SH_SPARQLFunction, SH_rule\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # short the shapes dict by shapes sh:order before execution\n    shapes_rules = sorted(shapes_rules.items(), key=lambda x: x[0].order)\n    for shape, rules in shapes_rules:\n        # sort the rules by the sh:order before execution\n",
        "source_code_len": 234,
        "target_code": "    # short the shapes dict by shapes sh:order before execution\n    sorted_shapes_rules: List[Tuple[Any, Any]] = sorted(shapes_rules.items(), key=lambda x: x[0].order)\n    for shape, rules in sorted_shapes_rules:\n        # sort the rules by the sh:order before execution\n",
        "target_code_len": 271,
        "diff_format": "@@ -73,4 +73,4 @@\n     # short the shapes dict by shapes sh:order before execution\n-    shapes_rules = sorted(shapes_rules.items(), key=lambda x: x[0].order)\n-    for shape, rules in shapes_rules:\n+    sorted_shapes_rules: List[Tuple[Any, Any]] = sorted(shapes_rules.items(), key=lambda x: x[0].order)\n+    for shape, rules in sorted_shapes_rules:\n         # sort the rules by the sh:order before execution\n",
        "source_code_with_indent": "    # short the shapes dict by shapes sh:order before execution\n    <IND>shapes_rules = sorted(shapes_rules.items(), key=lambda x: x[0].order)\n    for shape, rules in shapes_rules:\n        # sort the rules by the sh:order before execution\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # short the shapes dict by shapes sh:order before execution\n    <IND>sorted_shapes_rules: List[Tuple[Any, Any]] = sorted(shapes_rules.items(), key=lambda x: x[0].order)\n    for shape, rules in sorted_shapes_rules:\n        # sort the rules by the sh:order before execution\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]