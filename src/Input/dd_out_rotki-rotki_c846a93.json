[
  {
    "project": "rotki/rotki",
    "commit": "c846a9301cc2a63ff21ee8cdfa5c6ff79f52b7fe",
    "filename": "rotkehlchen/tests/api/test_makerdao.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/tests/api/test_makerdao.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/tests/api/test_makerdao.py:431:31 Incompatible parameter type [6]: Expected `str` for 2nd parameter `max_diff` to call `FVal.is_close` but got `float`.",
    "message": " Expected `str` for 2nd parameter `max_diff` to call `FVal.is_close` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 431,
    "warning_line": "                            ), max_diff=1e-8)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                result[account]['movements'][idx][mov_key],\n                            ), max_diff=1e-8)\n\n",
        "source_code_len": 123,
        "target_code": "                                result[account]['movements'][idx][mov_key],\n                            ), max_diff='1e-8')\n\n",
        "target_code_len": 125,
        "diff_format": "@@ -430,3 +427,3 @@\n                                 result[account]['movements'][idx][mov_key],\n-                            ), max_diff=1e-8)\n+                            ), max_diff='1e-8')\n \n",
        "source_code_with_indent": "                                result[account]['movements'][idx][mov_key],\n                            ), max_diff=1e-8)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                result[account]['movements'][idx][mov_key],\n                            ), max_diff='1e-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "c846a9301cc2a63ff21ee8cdfa5c6ff79f52b7fe",
    "filename": "rotkehlchen/tests/fixtures/exchanges/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/tests/fixtures/exchanges/kraken.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/tests/fixtures/exchanges/kraken.py:216:12 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Union[Dict[typing.Any, typing.Any], List[typing.Any]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Union[Dict[typing.Any, typing.Any], List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 216,
    "warning_line": "            return rlk_jsonloads(KRAKEN_SPECIFIC_TRADES_HISTORY_RESPONSE)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads\n\n\ndef get_random_kraken_asset() -> Asset:\n    kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "source_code_len": 228,
        "target_code": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads, rlk_jsonloads_dict\n\n\ndef get_random_kraken_asset() -> str:\n    kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "target_code_len": 246,
        "diff_format": "@@ -27,6 +26,6 @@\n from rotkehlchen.user_messages import MessagesAggregator\n-from rotkehlchen.utils.serialization import rlk_jsonloads\n-\n-\n-def get_random_kraken_asset() -> Asset:\n+from rotkehlchen.utils.serialization import rlk_jsonloads, rlk_jsonloads_dict\n+\n+\n+def get_random_kraken_asset() -> str:\n     kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "source_code_with_indent": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads\n\n\ndef get_random_kraken_asset() -> Asset:\n    <IND>kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads, rlk_jsonloads_dict\n\n\ndef get_random_kraken_asset() -> str:\n    <IND>kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # else\n            return rlk_jsonloads(KRAKEN_SPECIFIC_TRADES_HISTORY_RESPONSE)\n        elif method == 'Ledgers':\n            ledger_type = req['type']\n",
        "source_code_len": 165,
        "target_code": "            # else\n            return rlk_jsonloads_dict(KRAKEN_SPECIFIC_TRADES_HISTORY_RESPONSE)\n        elif method == 'Ledgers':\n            assert req, 'Should have given arguments for kraken Ledgers endpoint call'\n            ledger_type = req['type']\n",
        "target_code_len": 257,
        "diff_format": "@@ -215,4 +215,5 @@\n             # else\n-            return rlk_jsonloads(KRAKEN_SPECIFIC_TRADES_HISTORY_RESPONSE)\n+            return rlk_jsonloads_dict(KRAKEN_SPECIFIC_TRADES_HISTORY_RESPONSE)\n         elif method == 'Ledgers':\n+            assert req, 'Should have given arguments for kraken Ledgers endpoint call'\n             ledger_type = req['type']\n",
        "source_code_with_indent": "            # else\n            <DED>return rlk_jsonloads(KRAKEN_SPECIFIC_TRADES_HISTORY_RESPONSE)\n        <DED>elif method == 'Ledgers':\n            <IND>ledger_type = req['type']\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # else\n            <DED>return rlk_jsonloads_dict(KRAKEN_SPECIFIC_TRADES_HISTORY_RESPONSE)\n        <DED>elif method == 'Ledgers':\n            <IND>assert req, 'Should have given arguments for kraken Ledgers endpoint call'\n            ledger_type = req['type']\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "c846a9301cc2a63ff21ee8cdfa5c6ff79f52b7fe",
    "filename": "rotkehlchen/tests/fixtures/exchanges/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/tests/fixtures/exchanges/kraken.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/tests/fixtures/exchanges/kraken.py:234:12 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.Union[Dict[typing.Any, typing.Any], List[typing.Any]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.Union[Dict[typing.Any, typing.Any], List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 234,
    "warning_line": "            return rlk_jsonloads(response)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads\n\n\ndef get_random_kraken_asset() -> Asset:\n    kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "source_code_len": 228,
        "target_code": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads, rlk_jsonloads_dict\n\n\ndef get_random_kraken_asset() -> str:\n    kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "target_code_len": 246,
        "diff_format": "@@ -27,6 +26,6 @@\n from rotkehlchen.user_messages import MessagesAggregator\n-from rotkehlchen.utils.serialization import rlk_jsonloads\n-\n-\n-def get_random_kraken_asset() -> Asset:\n+from rotkehlchen.utils.serialization import rlk_jsonloads, rlk_jsonloads_dict\n+\n+\n+def get_random_kraken_asset() -> str:\n     kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "source_code_with_indent": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads\n\n\ndef get_random_kraken_asset() -> Asset:\n    <IND>kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen.user_messages import MessagesAggregator\nfrom rotkehlchen.utils.serialization import rlk_jsonloads, rlk_jsonloads_dict\n\n\ndef get_random_kraken_asset() -> str:\n    <IND>kraken_assets = set(KRAKEN_TO_WORLD.keys()) - set(KRAKEN_DELISTED)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            return rlk_jsonloads(response)\n\n",
        "source_code_len": 45,
        "target_code": "\n            return rlk_jsonloads_dict(response)\n\n",
        "target_code_len": 50,
        "diff_format": "@@ -233,3 +234,3 @@\n \n-            return rlk_jsonloads(response)\n+            return rlk_jsonloads_dict(response)\n \n",
        "source_code_with_indent": "\n            <DED>return rlk_jsonloads(response)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            <DED>return rlk_jsonloads_dict(response)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]