[
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/cleaners/functions/contains.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TRoboto-Maha/maha/cleaners/functions/contains.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maha/cleaners/functions/contains.py:210:4 Incompatible variable type [9]: custom_expressions is declared to have type `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]` but is used as type `Union[List[Variable[_T]], maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]`.",
    "message": " custom_expressions is declared to have type `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]` but is used as type `Union[List[Variable[_T]], maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 210,
    "warning_line": "    custom_expressions = custom_expressions or []",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or []\n\n",
        "source_code_len": 93,
        "target_code": "    custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or ExpressionGroup()\n\n",
        "target_code_len": 108,
        "diff_format": "@@ -209,3 +209,3 @@\n     custom_strings = custom_strings or []\n-    custom_expressions = custom_expressions or []\n+    custom_expressions = custom_expressions or ExpressionGroup()\n \n",
        "source_code_with_indent": "    <DED>custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or ExpressionGroup()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/cleaners/functions/remove.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TRoboto-Maha/maha/cleaners/functions/remove.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maha/cleaners/functions/remove.py:95:4 Incompatible variable type [9]: custom_expressions is declared to have type `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]` but is used as type `None`.",
    "message": " custom_expressions is declared to have type `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 95,
    "warning_line": "    custom_expressions: Union[ExpressionGroup, Expression] = None,"
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/cleaners/functions/remove.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TRoboto-Maha/maha/cleaners/functions/remove.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maha/cleaners/functions/remove.py:202:4 Incompatible variable type [9]: custom_expressions is declared to have type `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]` but is used as type `Union[List[Variable[_T]], maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]`.",
    "message": " custom_expressions is declared to have type `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]` but is used as type `Union[List[Variable[_T]], maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 202,
    "warning_line": "    custom_expressions = custom_expressions or []",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or []\n\n",
        "source_code_len": 93,
        "target_code": "    custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or ExpressionGroup()\n\n",
        "target_code_len": 108,
        "diff_format": "@@ -201,3 +201,3 @@\n     custom_strings = custom_strings or []\n-    custom_expressions = custom_expressions or []\n+    custom_expressions = custom_expressions or ExpressionGroup()\n \n",
        "source_code_with_indent": "    <DED>custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>custom_strings = custom_strings or []\n    custom_expressions = custom_expressions or ExpressionGroup()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/cleaners/functions/remove.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TRoboto-Maha/maha/cleaners/functions/remove.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maha/cleaners/functions/remove.py:220:33 Incompatible parameter type [6]: Expected `typing.Iterable[typing.Any]` for 1st positional only parameter to call `list.extend` but got `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]`.",
    "message": " Expected `typing.Iterable[typing.Any]` for 1st positional only parameter to call `list.extend` but got `Union[maha.rexy.templates.expression.Expression, maha.rexy.templates.expression_group.ExpressionGroup]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 220,
    "warning_line": "    expressions_to_remove.extend(custom_expressions)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(custom_expressions, str):\n        custom_expressions = [custom_expressions]\n\n    chars_to_remove.extend(custom_strings)\n    expressions_to_remove.extend(custom_expressions)\n\n",
        "source_code_len": 192,
        "target_code": "    if isinstance(custom_expressions, str):\n        custom_expressions = Expression(custom_expressions)\n\n    chars_to_remove.extend(custom_strings)\n    # expressions to remove\n    expressions_to_remove = ExpressionGroup(custom_expressions)\n\n",
        "target_code_len": 241,
        "diff_format": "@@ -216,6 +214,7 @@\n     if isinstance(custom_expressions, str):\n-        custom_expressions = [custom_expressions]\n+        custom_expressions = Expression(custom_expressions)\n \n     chars_to_remove.extend(custom_strings)\n-    expressions_to_remove.extend(custom_expressions)\n+    # expressions to remove\n+    expressions_to_remove = ExpressionGroup(custom_expressions)\n \n",
        "source_code_with_indent": "    <DED>if isinstance(custom_expressions, str):\n        <IND>custom_expressions = [custom_expressions]\n\n    <DED>chars_to_remove.extend(custom_strings)\n    expressions_to_remove.extend(custom_expressions)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if isinstance(custom_expressions, str):\n        <IND>custom_expressions = Expression(custom_expressions)\n\n    <DED>chars_to_remove.extend(custom_strings)\n    # expressions to remove\n    expressions_to_remove = ExpressionGroup(custom_expressions)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if expression and value is True:\n            expressions_to_remove.append(expression)\n\n",
        "source_code_len": 95,
        "target_code": "        if expression and value is True:\n            expressions_to_remove.add(expression)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -234,3 +233,3 @@\n         if expression and value is True:\n-            expressions_to_remove.append(expression)\n+            expressions_to_remove.add(expression)\n \n",
        "source_code_with_indent": "        if expression and value is True:\n            <IND>expressions_to_remove.append(expression)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if expression and value is True:\n            <IND>expressions_to_remove.add(expression)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if expressions_to_remove:\n        output = remove_expressions(output, ExpressionGroup(*expressions_to_remove))\n\n",
        "source_code_len": 116,
        "target_code": "    if expressions_to_remove:\n        output = remove_expressions(output, expressions_to_remove)\n\n",
        "target_code_len": 98,
        "diff_format": "@@ -242,3 +241,3 @@\n     if expressions_to_remove:\n-        output = remove_expressions(output, ExpressionGroup(*expressions_to_remove))\n+        output = remove_expressions(output, expressions_to_remove)\n \n",
        "source_code_with_indent": "    if expressions_to_remove:\n        <IND>output = remove_expressions(output, ExpressionGroup(*expressions_to_remove))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if expressions_to_remove:\n        <IND>output = remove_expressions(output, expressions_to_remove)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/common.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/common.py:40:30 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/common.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/common.py:42:26 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/common.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/common.py:138:75 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/common.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/common.py:142:75 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:62:28 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:62:63 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:63:27 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:63:61 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:64:27 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:64:61 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:65:26 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:65:59 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:66:28 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:66:63 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:67:28 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:67:63 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:68:27 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `maha.parsers.templates.value_expressions.Value.__init__` but got `typing.Iterable[maha.rexy.templates.expression_result.ExpressionResult]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/rules/numeral/values.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/rules/numeral/values.py:68:61 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `maha.rexy.templates.expression.Expression.__call__` but got `maha.parsers.templates.value_expressions.Value`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "TRoboto/Maha",
    "commit": "ca5f1d7a696f3303706ff1e0f4d9f7a0fc42f4ed",
    "filename": "maha/parsers/templates/text_expression.py",
    "min_patch_found": false,
    "full_warning_msg": "maha/parsers/templates/text_expression.py:11:4 Inconsistent override [14]: `maha.parsers.templates.text_expression.TextExpression.parse` overrides method defined in `maha.rexy.templates.expression.Expression` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `typing.Optional[str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]