[
  {
    "project": "willmcgugan/rich",
    "commit": "356bdf8d2a8319d49421d4fd0dd0e28c25ac3f60",
    "filename": "rich/_log_render.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/_log_render.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/_log_render.py:66:13 Unbound name [10]: Name `Logger` is used but not defined in the current scope.",
    "message": " Name `Logger` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 66,
    "warning_line": "    logger = Logger(console)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return output\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    from .console import Console\n\n    console = Console()\n    print(console)\n    logger = Logger(console)\n\n    from .markdown import Markdown\n    from .syntax import Syntax\n\n    s = Syntax(\n        '''\\\n@classmethod\ndef get(cls, renderable: RenderableType, max_width: int) -> RenderWidth:\n    \"\"\"Get desired width for a renderable.\"\"\"\n    if hasattr(renderable, \"__console__\"):\n        get_console_width = getattr(renderable, \"__console_width__\", None)\n        if get_console_width is not None:\n            render_width = get_console_width(max_width).with_maximum(max_width)\n            return render_width.normalize()\n        else:\n            return RenderWidth(1, max_width)\n    elif isinstance(renderable, Segment):\n        text, _style = renderable\n        width = min(max_width, len(text))\n        return RenderWidth(width, width)\n    elif isinstance(renderable, str):\n        text = renderable.rstrip()\n        return RenderWidth(len(text), len(text))\n    else:\n        raise errors.NotRenderableError(\n            f\"Unable to get render width for {renderable!r}; \"\n            \"a str, Segment, or object with __console__ method is required\"\n        )\n        ''',\n        \"python\",\n        theme=\"monokai\",\n    )\n\n    logger(\n        \"Hello\", path=\"foo.py\", line_no=20,\n    )\n    logger(\n        \"World!\", path=\"foo.py\", line_no=20,\n    )\n",
        "source_code_len": 1418,
        "target_code": "        return output\n",
        "target_code_len": 22,
        "diff_format": "@@ -58,48 +58,1 @@\n         return output\n-\n-\n-if __name__ == \"__main__\":  # pragma: no cover\n-    from .console import Console\n-\n-    console = Console()\n-    print(console)\n-    logger = Logger(console)\n-\n-    from .markdown import Markdown\n-    from .syntax import Syntax\n-\n-    s = Syntax(\n-        '''\\\n-@classmethod\n-def get(cls, renderable: RenderableType, max_width: int) -> RenderWidth:\n-    \"\"\"Get desired width for a renderable.\"\"\"\n-    if hasattr(renderable, \"__console__\"):\n-        get_console_width = getattr(renderable, \"__console_width__\", None)\n-        if get_console_width is not None:\n-            render_width = get_console_width(max_width).with_maximum(max_width)\n-            return render_width.normalize()\n-        else:\n-            return RenderWidth(1, max_width)\n-    elif isinstance(renderable, Segment):\n-        text, _style = renderable\n-        width = min(max_width, len(text))\n-        return RenderWidth(width, width)\n-    elif isinstance(renderable, str):\n-        text = renderable.rstrip()\n-        return RenderWidth(len(text), len(text))\n-    else:\n-        raise errors.NotRenderableError(\n-            f\"Unable to get render width for {renderable!r}; \"\n-            \"a str, Segment, or object with __console__ method is required\"\n-        )\n-        ''',\n-        \"python\",\n-        theme=\"monokai\",\n-    )\n-\n-    logger(\n-        \"Hello\", path=\"foo.py\", line_no=20,\n-    )\n-    logger(\n-        \"World!\", path=\"foo.py\", line_no=20,\n-    )\n",
        "source_code_with_indent": "        return output\n\n\n<DED><DED>if __name__ == \"__main__\":  # pragma: no cover\n    <IND>from .console import Console\n\n    console = Console()\n    print(console)\n    logger = Logger(console)\n\n    from .markdown import Markdown\n    from .syntax import Syntax\n\n    s = Syntax(\n        '''\\\n@classmethod\ndef get(cls, renderable: RenderableType, max_width: int) -> RenderWidth:\n    \"\"\"Get desired width for a renderable.\"\"\"\n    if hasattr(renderable, \"__console__\"):\n        get_console_width = getattr(renderable, \"__console_width__\", None)\n        if get_console_width is not None:\n            render_width = get_console_width(max_width).with_maximum(max_width)\n            return render_width.normalize()\n        else:\n            return RenderWidth(1, max_width)\n    elif isinstance(renderable, Segment):\n        text, _style = renderable\n        width = min(max_width, len(text))\n        return RenderWidth(width, width)\n    elif isinstance(renderable, str):\n        text = renderable.rstrip()\n        return RenderWidth(len(text), len(text))\n    else:\n        raise errors.NotRenderableError(\n            f\"Unable to get render width for {renderable!r}; \"\n            \"a str, Segment, or object with __console__ method is required\"\n        )\n        ''',\n        \"python\",\n        theme=\"monokai\",\n    )\n\n    logger(\n        \"Hello\", path=\"foo.py\", line_no=20,\n    )\n    logger(\n        \"World!\", path=\"foo.py\", line_no=20,\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        return output\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "willmcgugan/rich",
    "commit": "356bdf8d2a8319d49421d4fd0dd0e28c25ac3f60",
    "filename": "rich/_render_width.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/_render_width.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/_render_width.py:52:18 Unbound name [10]: Name `errors` is used but not defined in the current scope.",
    "message": " Name `errors` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 52,
    "warning_line": "            raise errors.NotRenderableError(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import NamedTuple\n\nfrom .segment import Segment\n\n",
        "source_code_len": 61,
        "target_code": "from typing import NamedTuple, TYPE_CHECKING\n\nfrom . import errors\nfrom .segment import Segment\n\nif TYPE_CHECKING:\n    from .console import RenderableType\n\n",
        "target_code_len": 156,
        "diff_format": "@@ -1,4 +1,8 @@\n-from typing import NamedTuple\n+from typing import NamedTuple, TYPE_CHECKING\n \n+from . import errors\n from .segment import Segment\n+\n+if TYPE_CHECKING:\n+    from .console import RenderableType\n \n",
        "source_code_with_indent": "from typing import NamedTuple\n\nfrom .segment import Segment\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import NamedTuple, TYPE_CHECKING\n\nfrom . import errors\nfrom .segment import Segment\n\nif TYPE_CHECKING:\n    <IND>from .console import RenderableType\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "willmcgugan/rich",
    "commit": "356bdf8d2a8319d49421d4fd0dd0e28c25ac3f60",
    "filename": "rich/console.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/console.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/console.py:573:20 Incompatible parameter type [6]: Expected `Text` for 1st positional only parameter to call `list.append` but got `Union[Text, str]`.",
    "message": " Expected `Text` for 1st positional only parameter to call `list.append` but got `Union[Text, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 573,
    "warning_line": "                    highlight(repr(renderable)) if highlight else repr(renderable)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                append_text(\n                    highlight(repr(renderable)) if highlight else repr(renderable)\n                )\n",
        "source_code_len": 130,
        "target_code": "                append_text(\n                    highlight(repr(renderable)) if highlight else Text(repr(renderable))\n                )\n",
        "target_code_len": 136,
        "diff_format": "@@ -572,3 +572,3 @@\n                 append_text(\n-                    highlight(repr(renderable)) if highlight else repr(renderable)\n+                    highlight(repr(renderable)) if highlight else Text(repr(renderable))\n                 )\n",
        "source_code_with_indent": "                <IND>append_text(\n                    highlight(repr(renderable)) if highlight else repr(renderable)\n                )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>append_text(\n                    highlight(repr(renderable)) if highlight else Text(repr(renderable))\n                )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "willmcgugan/rich",
    "commit": "356bdf8d2a8319d49421d4fd0dd0e28c25ac3f60",
    "filename": "rich/markdown.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/markdown.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/markdown.py:351:8 Incompatible variable type [9]: justify is declared to have type `str` but is used as type `None`.",
    "message": " justify is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 351,
    "warning_line": "        justify: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ConsoleRenderable,\n    RenderResult,\n",
        "source_code_len": 41,
        "target_code": "    ConsoleRenderable,\n    JustifyValues,\n    RenderResult,\n",
        "target_code_len": 60,
        "diff_format": "@@ -10,2 +10,3 @@\n     ConsoleRenderable,\n+    JustifyValues,\n     RenderResult,\n",
        "source_code_with_indent": "    ConsoleRenderable,\n    RenderResult,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ConsoleRenderable,\n    JustifyValues,\n    RenderResult,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def create(cls, markdown: \"Markdown\", node) -> \"Paragraph\":\n        return cls(justify=markdown.justify)\n\n    def __init__(self, justify: str) -> None:\n        self.justify = justify\n",
        "source_code_len": 187,
        "target_code": "    def create(cls, markdown: \"Markdown\", node) -> \"Paragraph\":\n        return cls(justify=markdown.justify or \"left\")\n\n    def __init__(self, justify: JustifyValues) -> None:\n        self.justify = justify\n",
        "target_code_len": 207,
        "diff_format": "@@ -118,5 +119,5 @@\n     def create(cls, markdown: \"Markdown\", node) -> \"Paragraph\":\n-        return cls(justify=markdown.justify)\n-\n-    def __init__(self, justify: str) -> None:\n+        return cls(justify=markdown.justify or \"left\")\n+\n+    def __init__(self, justify: JustifyValues) -> None:\n         self.justify = justify\n",
        "source_code_with_indent": "    def create(cls, markdown: \"Markdown\", node) -> \"Paragraph\":\n        <IND>return cls(justify=markdown.justify)\n\n    <DED>def __init__(self, justify: str) -> None:\n        <IND>self.justify = justify\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def create(cls, markdown: \"Markdown\", node) -> \"Paragraph\":\n        <IND>return cls(justify=markdown.justify or \"left\")\n\n    <DED>def __init__(self, justify: JustifyValues) -> None:\n        <IND>self.justify = justify\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        code_theme: str = \"monokai\",\n        justify: str = None,\n        style: Union[str, Style] = \"none\",\n",
        "source_code_len": 109,
        "target_code": "        code_theme: str = \"monokai\",\n        justify: JustifyValues = None,\n        style: Union[str, Style] = \"none\",\n",
        "target_code_len": 119,
        "diff_format": "@@ -350,3 +351,3 @@\n         code_theme: str = \"monokai\",\n-        justify: str = None,\n+        justify: JustifyValues = None,\n         style: Union[str, Style] = \"none\",\n",
        "source_code_with_indent": "        code_theme: str = \"monokai\",\n        justify: str = None,\n        style: Union[str, Style] = \"none\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        code_theme: str = \"monokai\",\n        justify: JustifyValues = None,\n        style: Union[str, Style] = \"none\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]