[
  {
    "project": "terrencepreilly/darglint",
    "commit": "4f9e8de508d741cb93240115ce1e85479386932b",
    "filename": "darglint/analysis/abstract_callable_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/analysis/abstract_callable_visitor.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/analysis/abstract_callable_visitor.py:109:54 Incompatible parameter type [6]: Expected `_ast.Return` for 1st positional only parameter to call `AbstractCallableVisitor.analyze_pure_abstract` but got `_ast.FunctionDef`.",
    "message": " Expected `_ast.Return` for 1st positional only parameter to call `AbstractCallableVisitor.analyze_pure_abstract` but got `_ast.FunctionDef`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 109,
    "warning_line": "        self.is_abstract = self.analyze_pure_abstract(node)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_docstring(self, node):\n        # type: (ast.Return) -> bool\n        return (\n",
        "source_code_len": 89,
        "target_code": "    def _is_docstring(self, node):\n        # type: (ast.AST) -> bool\n        return (\n",
        "target_code_len": 86,
        "diff_format": "@@ -19,3 +19,3 @@\n     def _is_docstring(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         return (\n",
        "source_code_with_indent": "    <DED>def _is_docstring(self, node):\n        # type: (ast.Return) -> bool\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_docstring(self, node):\n        # type: (ast.AST) -> bool\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_ellipsis(self, node):\n        # type: (ast.Return) -> bool\n        print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "source_code_len": 125,
        "target_code": "    def _is_ellipsis(self, node):\n        # type: (ast.AST) -> bool\n        print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "target_code_len": 122,
        "diff_format": "@@ -32,3 +32,3 @@\n     def _is_ellipsis(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "source_code_with_indent": "    <DED>def _is_ellipsis(self, node):\n        # type: (ast.Return) -> bool\n        <IND>print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_ellipsis(self, node):\n        # type: (ast.AST) -> bool\n        <IND>print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_raise_NotImplementedException(self, node):\n        # type: (ast.Return) -> bool\n        return (\n",
        "source_code_len": 109,
        "target_code": "    def _is_raise_NotImplementedException(self, node):\n        # type: (ast.AST) -> bool\n        return (\n",
        "target_code_len": 106,
        "diff_format": "@@ -47,3 +47,3 @@\n     def _is_raise_NotImplementedException(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         return (\n",
        "source_code_with_indent": "    <DED>def _is_raise_NotImplementedException(self, node):\n        # type: (ast.Return) -> bool\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_raise_NotImplementedException(self, node):\n        # type: (ast.AST) -> bool\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_return_NotImplemented(self, node):\n        # type: (ast.Return) -> bool\n        return (\n",
        "source_code_len": 101,
        "target_code": "    def _is_return_NotImplemented(self, node):\n        # type: (ast.AST) -> bool\n        return (\n",
        "target_code_len": 98,
        "diff_format": "@@ -62,3 +62,3 @@\n     def _is_return_NotImplemented(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         return (\n",
        "source_code_with_indent": "    <DED>def _is_return_NotImplemented(self, node):\n        # type: (ast.Return) -> bool\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_return_NotImplemented(self, node):\n        # type: (ast.AST) -> bool\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def analyze_pure_abstract(self, node):\n        # type: (ast.Return) -> bool\n        assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "source_code_len": 156,
        "target_code": "    def analyze_pure_abstract(self, node):\n        # type: (ast.AST) -> bool\n        assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "target_code_len": 153,
        "diff_format": "@@ -70,3 +70,3 @@\n     def analyze_pure_abstract(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "source_code_with_indent": "    <DED>def analyze_pure_abstract(self, node):\n        # type: (ast.Return) -> bool\n        <IND>assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def analyze_pure_abstract(self, node):\n        # type: (ast.AST) -> bool\n        <IND>assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "4f9e8de508d741cb93240115ce1e85479386932b",
    "filename": "darglint/analysis/abstract_callable_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/analysis/abstract_callable_visitor.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/analysis/abstract_callable_visitor.py:114:54 Incompatible parameter type [6]: Expected `_ast.Return` for 1st positional only parameter to call `AbstractCallableVisitor.analyze_pure_abstract` but got `_ast.AsyncFunctionDef`.",
    "message": " Expected `_ast.Return` for 1st positional only parameter to call `AbstractCallableVisitor.analyze_pure_abstract` but got `_ast.AsyncFunctionDef`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 114,
    "warning_line": "        self.is_abstract = self.analyze_pure_abstract(node)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_docstring(self, node):\n        # type: (ast.Return) -> bool\n        return (\n",
        "source_code_len": 89,
        "target_code": "    def _is_docstring(self, node):\n        # type: (ast.AST) -> bool\n        return (\n",
        "target_code_len": 86,
        "diff_format": "@@ -19,3 +19,3 @@\n     def _is_docstring(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         return (\n",
        "source_code_with_indent": "    <DED>def _is_docstring(self, node):\n        # type: (ast.Return) -> bool\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_docstring(self, node):\n        # type: (ast.AST) -> bool\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_ellipsis(self, node):\n        # type: (ast.Return) -> bool\n        print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "source_code_len": 125,
        "target_code": "    def _is_ellipsis(self, node):\n        # type: (ast.AST) -> bool\n        print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "target_code_len": 122,
        "diff_format": "@@ -32,3 +32,3 @@\n     def _is_ellipsis(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "source_code_with_indent": "    <DED>def _is_ellipsis(self, node):\n        # type: (ast.Return) -> bool\n        <IND>print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_ellipsis(self, node):\n        # type: (ast.AST) -> bool\n        <IND>print(f\"{getattr(node,'value','')} ellipsis\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_raise_NotImplementedException(self, node):\n        # type: (ast.Return) -> bool\n        return (\n",
        "source_code_len": 109,
        "target_code": "    def _is_raise_NotImplementedException(self, node):\n        # type: (ast.AST) -> bool\n        return (\n",
        "target_code_len": 106,
        "diff_format": "@@ -47,3 +47,3 @@\n     def _is_raise_NotImplementedException(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         return (\n",
        "source_code_with_indent": "    <DED>def _is_raise_NotImplementedException(self, node):\n        # type: (ast.Return) -> bool\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_raise_NotImplementedException(self, node):\n        # type: (ast.AST) -> bool\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _is_return_NotImplemented(self, node):\n        # type: (ast.Return) -> bool\n        return (\n",
        "source_code_len": 101,
        "target_code": "    def _is_return_NotImplemented(self, node):\n        # type: (ast.AST) -> bool\n        return (\n",
        "target_code_len": 98,
        "diff_format": "@@ -62,3 +62,3 @@\n     def _is_return_NotImplemented(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         return (\n",
        "source_code_with_indent": "    <DED>def _is_return_NotImplemented(self, node):\n        # type: (ast.Return) -> bool\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _is_return_NotImplemented(self, node):\n        # type: (ast.AST) -> bool\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def analyze_pure_abstract(self, node):\n        # type: (ast.Return) -> bool\n        assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "source_code_len": 156,
        "target_code": "    def analyze_pure_abstract(self, node):\n        # type: (ast.AST) -> bool\n        assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "target_code_len": 153,
        "diff_format": "@@ -70,3 +70,3 @@\n     def analyze_pure_abstract(self, node):\n-        # type: (ast.Return) -> bool\n+        # type: (ast.AST) -> bool\n         assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "source_code_with_indent": "    <DED>def analyze_pure_abstract(self, node):\n        # type: (ast.Return) -> bool\n        <IND>assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def analyze_pure_abstract(self, node):\n        # type: (ast.AST) -> bool\n        <IND>assert isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)), (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]