[
  {
    "project": "ssato/python-anyconfig",
    "commit": "10d9cc0236d2138a4520f401ca9e2ad1b2899cb4",
    "filename": "src/anyconfig/api/_load.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/api/_load.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/anyconfig/api/_load.py:231:50 Incompatible parameter type [6]: Expected `typing.Union[typing.IO[typing.Any], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]` for 1st positional only parameter to call `src.anyconfig.utils.files.expand_paths` but got `typing.Union[typing.IO[typing.Any], typing.Iterable[typing.Union[typing.IO[typing.Any], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]`.",
    "message": " Expected `typing.Union[typing.IO[typing.Any], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]` for 1st positional only parameter to call `src.anyconfig.utils.files.expand_paths` but got `typing.Union[typing.IO[typing.Any], typing.Iterable[typing.Union[typing.IO[typing.Any], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 231,
    "warning_line": "    paths = [ioinfo_make(p) for p in expand_paths(inputs, marker=marker)]"
  },
  {
    "project": "ssato/python-anyconfig",
    "commit": "10d9cc0236d2138a4520f401ca9e2ad1b2899cb4",
    "filename": "src/anyconfig/api/_load.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/api/_load.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/anyconfig/api/_load.py:239:53 Incompatible parameter type [6]: Expected `typing.Optional[typing.Mapping[str, typing.Any]]` for 4th parameter `ac_context` to call `_single_load` but got `typing.Union[None, typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "message": " Expected `typing.Optional[typing.Mapping[str, typing.Any]]` for 4th parameter `ac_context` to call `_single_load` but got `typing.Union[None, typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 239,
    "warning_line": "                            ac_template=ac_template, ac_context=cnf, **opts)"
  },
  {
    "project": "ssato/python-anyconfig",
    "commit": "10d9cc0236d2138a4520f401ca9e2ad1b2899cb4",
    "filename": "src/anyconfig/api/_load.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/api/_load.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/anyconfig/api/_load.py:244:28 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 1st positional only parameter to call `dicts_merge` but got `typing.Union[typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 1st positional only parameter to call `dicts_merge` but got `typing.Union[typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 244,
    "warning_line": "                dicts_merge(cnf, cups, **options)"
  },
  {
    "project": "ssato/python-anyconfig",
    "commit": "10d9cc0236d2138a4520f401ca9e2ad1b2899cb4",
    "filename": "src/anyconfig/api/_load.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/api/_load.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/anyconfig/api/_load.py:244:33 Incompatible parameter type [6]: Expected `typing.Union[typing.Dict[str, typing.Any], typing.Iterable[typing.Tuple[str, typing.Any]]]` for 2nd positional only parameter to call `dicts_merge` but got `typing.Union[typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "message": " Expected `typing.Union[typing.Dict[str, typing.Any], typing.Iterable[typing.Tuple[str, typing.Any]]]` for 2nd positional only parameter to call `dicts_merge` but got `typing.Union[typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 244,
    "warning_line": "                dicts_merge(cnf, cups, **options)"
  },
  {
    "project": "ssato/python-anyconfig",
    "commit": "10d9cc0236d2138a4520f401ca9e2ad1b2899cb4",
    "filename": "src/anyconfig/utils/files.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/utils/files.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/anyconfig/utils/files.py:149:4 Incompatible return type [7]: Expected `typing.Union[int, pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]` but got `typing.Union[typing.IO[typing.Any], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]`.",
    "message": " Expected `typing.Union[int, pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]` but got `typing.Union[typing.IO[typing.Any], pathlib.Path, src.anyconfig.common.datatypes.IOInfo, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 149,
    "warning_line": "    return obj",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef expand_paths_itr(paths: typing.Union[PathOrIOInfoT,\n                                         typing.List[PathOrIOInfoT]],\n                     marker: str = GLOB_MARKER\n",
        "source_code_len": 174,
        "target_code": "\ndef expand_paths_itr(paths: typing.Union[typing.Iterable[PathOrIOInfoT],\n                                         PathOrIOInfoT],\n                     marker: str = GLOB_MARKER\n",
        "target_code_len": 178,
        "diff_format": "@@ -95,4 +95,4 @@\n \n-def expand_paths_itr(paths: typing.Union[PathOrIOInfoT,\n-                                         typing.List[PathOrIOInfoT]],\n+def expand_paths_itr(paths: typing.Union[typing.Iterable[PathOrIOInfoT],\n+                                         PathOrIOInfoT],\n                      marker: str = GLOB_MARKER\n",
        "source_code_with_indent": "\n<DED>def expand_paths_itr(paths: typing.Union[PathOrIOInfoT,\n                                         typing.List[PathOrIOInfoT]],\n                     marker: str = GLOB_MARKER\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def expand_paths_itr(paths: typing.Union[typing.Iterable[PathOrIOInfoT],\n                                         PathOrIOInfoT],\n                     marker: str = GLOB_MARKER\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    return obj\n\n\ndef expand_paths(paths: PathOrIOInfoT, marker: str = GLOB_MARKER\n                 ) -> typing.Iterable[PathOrIOInfoT]:\n",
        "source_code_len": 137,
        "target_code": "\n    return obj  # type: ignore\n\n\ndef expand_paths(paths: typing.Union[typing.Iterable[PathOrIOInfoT],\n                                     PathOrIOInfoT],\n                 marker: str = GLOB_MARKER\n                 ) -> typing.Iterable[PathOrIOInfoT]:\n",
        "target_code_len": 253,
        "diff_format": "@@ -148,6 +148,8 @@\n \n-    return obj\n+    return obj  # type: ignore\n \n \n-def expand_paths(paths: PathOrIOInfoT, marker: str = GLOB_MARKER\n+def expand_paths(paths: typing.Union[typing.Iterable[PathOrIOInfoT],\n+                                     PathOrIOInfoT],\n+                 marker: str = GLOB_MARKER\n                  ) -> typing.Iterable[PathOrIOInfoT]:\n",
        "source_code_with_indent": "\n    <DED>return obj\n\n\n<DED>def expand_paths(paths: PathOrIOInfoT, marker: str = GLOB_MARKER\n                 ) -> typing.Iterable[PathOrIOInfoT]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>return obj  # type: ignore\n\n\n<DED>def expand_paths(paths: typing.Union[typing.Iterable[PathOrIOInfoT],\n                                     PathOrIOInfoT],\n                 marker: str = GLOB_MARKER\n                 ) -> typing.Iterable[PathOrIOInfoT]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]