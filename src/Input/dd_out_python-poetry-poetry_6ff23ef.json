[
  {
    "project": "python-poetry/poetry",
    "commit": "6ff23efb73e753489088604126bfb93355d0cfd7",
    "filename": "src/poetry/puzzle/solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/src/poetry/puzzle/solver.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/poetry/puzzle/solver.py:240:19 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `Tuple[str, frozenset[str], bool]`.",
    "message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `Tuple[str, frozenset[str], bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 240,
    "warning_line": "    if visited.get(node.id, VisitedState.Unvisited) == VisitedState.Visited:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass DFSNode:\n    def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        self.id = id\n",
        "source_code_len": 148,
        "target_code": "\nDFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        self.id = id\n",
        "target_code_len": 158,
        "diff_format": "@@ -180,6 +180,7 @@\n \n+DFSNodeID = Tuple[str, FrozenSet[str], bool]\n+\n+\n class DFSNode:\n-    def __init__(\n-        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n-    ) -> None:\n+    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n         self.id = id\n",
        "source_code_with_indent": "\n<DED><DED>class DFSNode:\n    <IND>def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        <IND>self.id = id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>DFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    <IND>def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        <IND>self.id = id\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_len": 150,
        "target_code": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_len": 162,
        "diff_format": "@@ -235,4 +236,4 @@\n     node: \"PackageNode\",\n-    back_edges: Dict[str, List[\"PackageNode\"]],\n-    visited: Dict[str, VisitedState],\n+    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n+    visited: Dict[DFSNodeID, VisitedState],\n     sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "6ff23efb73e753489088604126bfb93355d0cfd7",
    "filename": "src/poetry/puzzle/solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/src/poetry/puzzle/solver.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/poetry/puzzle/solver.py:242:19 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `Tuple[str, frozenset[str], bool]`.",
    "message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `Tuple[str, frozenset[str], bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 242,
    "warning_line": "    if visited.get(node.id, VisitedState.Unvisited) == VisitedState.PartiallyVisited:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass DFSNode:\n    def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        self.id = id\n",
        "source_code_len": 148,
        "target_code": "\nDFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        self.id = id\n",
        "target_code_len": 158,
        "diff_format": "@@ -180,6 +180,7 @@\n \n+DFSNodeID = Tuple[str, FrozenSet[str], bool]\n+\n+\n class DFSNode:\n-    def __init__(\n-        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n-    ) -> None:\n+    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n         self.id = id\n",
        "source_code_with_indent": "\n<DED><DED>class DFSNode:\n    <IND>def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        <IND>self.id = id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>DFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    <IND>def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        <IND>self.id = id\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_len": 150,
        "target_code": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_len": 162,
        "diff_format": "@@ -235,4 +236,4 @@\n     node: \"PackageNode\",\n-    back_edges: Dict[str, List[\"PackageNode\"]],\n-    visited: Dict[str, VisitedState],\n+    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n+    visited: Dict[DFSNodeID, VisitedState],\n     sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "6ff23efb73e753489088604126bfb93355d0cfd7",
    "filename": "src/poetry/puzzle/solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/src/poetry/puzzle/solver.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/poetry/puzzle/solver.py:248:12 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Tuple[str, frozenset[str], bool]`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Tuple[str, frozenset[str], bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 248,
    "warning_line": "    visited[node.id] = VisitedState.PartiallyVisited",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass DFSNode:\n    def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        self.id = id\n",
        "source_code_len": 148,
        "target_code": "\nDFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        self.id = id\n",
        "target_code_len": 158,
        "diff_format": "@@ -180,6 +180,7 @@\n \n+DFSNodeID = Tuple[str, FrozenSet[str], bool]\n+\n+\n class DFSNode:\n-    def __init__(\n-        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n-    ) -> None:\n+    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n         self.id = id\n",
        "source_code_with_indent": "\n<DED><DED>class DFSNode:\n    <IND>def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        <IND>self.id = id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>DFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    <IND>def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        <IND>self.id = id\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_len": 150,
        "target_code": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_len": 162,
        "diff_format": "@@ -235,4 +236,4 @@\n     node: \"PackageNode\",\n-    back_edges: Dict[str, List[\"PackageNode\"]],\n-    visited: Dict[str, VisitedState],\n+    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n+    visited: Dict[DFSNodeID, VisitedState],\n     sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "6ff23efb73e753489088604126bfb93355d0cfd7",
    "filename": "src/poetry/puzzle/solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/src/poetry/puzzle/solver.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/poetry/puzzle/solver.py:250:19 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `Tuple[str, frozenset[str], bool]`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `Tuple[str, frozenset[str], bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 250,
    "warning_line": "        back_edges[neighbor.id].append(node)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass DFSNode:\n    def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        self.id = id\n",
        "source_code_len": 148,
        "target_code": "\nDFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        self.id = id\n",
        "target_code_len": 158,
        "diff_format": "@@ -180,6 +180,7 @@\n \n+DFSNodeID = Tuple[str, FrozenSet[str], bool]\n+\n+\n class DFSNode:\n-    def __init__(\n-        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n-    ) -> None:\n+    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n         self.id = id\n",
        "source_code_with_indent": "\n<DED><DED>class DFSNode:\n    <IND>def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        <IND>self.id = id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>DFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    <IND>def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        <IND>self.id = id\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_len": 150,
        "target_code": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_len": 162,
        "diff_format": "@@ -235,4 +236,4 @@\n     node: \"PackageNode\",\n-    back_edges: Dict[str, List[\"PackageNode\"]],\n-    visited: Dict[str, VisitedState],\n+    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n+    visited: Dict[DFSNodeID, VisitedState],\n     sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "6ff23efb73e753489088604126bfb93355d0cfd7",
    "filename": "src/poetry/puzzle/solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/src/poetry/puzzle/solver.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/poetry/puzzle/solver.py:253:12 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Tuple[str, frozenset[str], bool]`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Tuple[str, frozenset[str], bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 253,
    "warning_line": "    visited[node.id] = VisitedState.Visited",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass DFSNode:\n    def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        self.id = id\n",
        "source_code_len": 148,
        "target_code": "\nDFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        self.id = id\n",
        "target_code_len": 158,
        "diff_format": "@@ -180,6 +180,7 @@\n \n+DFSNodeID = Tuple[str, FrozenSet[str], bool]\n+\n+\n class DFSNode:\n-    def __init__(\n-        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n-    ) -> None:\n+    def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n         self.id = id\n",
        "source_code_with_indent": "\n<DED><DED>class DFSNode:\n    <IND>def __init__(\n        self, id: Tuple[str, FrozenSet[str], bool], name: str, base_name: str\n    ) -> None:\n        <IND>self.id = id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>DFSNodeID = Tuple[str, FrozenSet[str], bool]\n\n\nclass DFSNode:\n    <IND>def __init__(self, id: DFSNodeID, name: str, base_name: str) -> None:\n        <IND>self.id = id\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_len": 150,
        "target_code": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_len": 162,
        "diff_format": "@@ -235,4 +236,4 @@\n     node: \"PackageNode\",\n-    back_edges: Dict[str, List[\"PackageNode\"]],\n-    visited: Dict[str, VisitedState],\n+    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n+    visited: Dict[DFSNodeID, VisitedState],\n     sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[str, List[\"PackageNode\"]],\n    visited: Dict[str, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    node: \"PackageNode\",\n    back_edges: Dict[DFSNodeID, List[\"PackageNode\"]],\n    visited: Dict[DFSNodeID, VisitedState],\n    sorted_nodes: List[\"PackageNode\"],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "6ff23efb73e753489088604126bfb93355d0cfd7",
    "filename": "src/poetry/puzzle/solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/src/poetry/puzzle/solver.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/poetry/puzzle/solver.py:362:4 Inconsistent override [14]: `src.poetry.puzzle.solver.PackageNode.visit` overrides method defined in `DFSNode` inconsistently. Parameter of type `PackageNode` is not a supertype of the overridden parameter `List[PackageNode]`.",
    "message": " `src.poetry.puzzle.solver.PackageNode.visit` overrides method defined in `DFSNode` inconsistently. Parameter of type `PackageNode` is not a supertype of the overridden parameter `List[PackageNode]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 362,
    "warning_line": "    def visit(self, parents: \"PackageNode\") -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def visit(self, parents: \"PackageNode\") -> None:\n        # The root package, which has no parents, is defined as having depth -1\n",
        "source_code_len": 134,
        "target_code": "\n    def visit(self, parents: List[\"PackageNode\"]) -> None:\n        # The root package, which has no parents, is defined as having depth -1\n",
        "target_code_len": 140,
        "diff_format": "@@ -361,3 +365,3 @@\n \n-    def visit(self, parents: \"PackageNode\") -> None:\n+    def visit(self, parents: List[\"PackageNode\"]) -> None:\n         # The root package, which has no parents, is defined as having depth -1\n",
        "source_code_with_indent": "\n    <DED>def visit(self, parents: \"PackageNode\") -> None:\n        # The root package, which has no parents, is defined as having depth -1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def visit(self, parents: List[\"PackageNode\"]) -> None:\n        # The root package, which has no parents, is defined as having depth -1\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]