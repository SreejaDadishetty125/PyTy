[
  {
    "project": "optuna/optuna",
    "commit": "6a9d749498399143b8143e567e1e956119aa16df",
    "filename": "optuna/samplers/_nsga2/crossover.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/samplers/_nsga2/crossover.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/samplers/_nsga2/crossover.py:48:52 Incompatible parameter type [6]: Expected `Dict[str, BaseDistribution]` for 1st positional only parameter to call `_SearchSpaceTransform.__init__` but got `Dict[str, typing.Union[DiscreteUniformDistribution, IntLogUniformDistribution, IntUniformDistribution, LogUniformDistribution, UniformDistribution]]`.",
    "message": " Expected `Dict[str, BaseDistribution]` for 1st positional only parameter to call `_SearchSpaceTransform.__init__` but got `Dict[str, typing.Union[DiscreteUniformDistribution, IntLogUniformDistribution, IntUniformDistribution, LogUniformDistribution, UniformDistribution]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "        numerical_transform = _SearchSpaceTransform(numerical_search_space)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    numerical_search_space = {\n        key: value\n        for key, value in search_space.items()\n        if isinstance(value, _NUMERICAL_DISTRIBUTIONS)\n    }\n    numerical_distributions = list(numerical_search_space.values())\n    if len(numerical_distributions) != 0:\n",
        "source_code_len": 269,
        "target_code": "\n    numerical_search_space: Dict[str, BaseDistribution] = {}\n    numerical_distributions: List[BaseDistribution] = []\n\n    for key, value in search_space.items():\n        if isinstance(value, _NUMERICAL_DISTRIBUTIONS):\n            numerical_search_space[key] = value\n            numerical_distributions.append(value)\n\n    if len(numerical_distributions) != 0:\n",
        "target_code_len": 361,
        "diff_format": "@@ -40,8 +40,10 @@\n \n-    numerical_search_space = {\n-        key: value\n-        for key, value in search_space.items()\n-        if isinstance(value, _NUMERICAL_DISTRIBUTIONS)\n-    }\n-    numerical_distributions = list(numerical_search_space.values())\n+    numerical_search_space: Dict[str, BaseDistribution] = {}\n+    numerical_distributions: List[BaseDistribution] = []\n+\n+    for key, value in search_space.items():\n+        if isinstance(value, _NUMERICAL_DISTRIBUTIONS):\n+            numerical_search_space[key] = value\n+            numerical_distributions.append(value)\n+\n     if len(numerical_distributions) != 0:\n",
        "source_code_with_indent": "\n    <IND>numerical_search_space = {\n        key: value\n        for key, value in search_space.items()\n        if isinstance(value, _NUMERICAL_DISTRIBUTIONS)\n    }\n    numerical_distributions = list(numerical_search_space.values())\n    if len(numerical_distributions) != 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>numerical_search_space: Dict[str, BaseDistribution] = {}\n    numerical_distributions: List[BaseDistribution] = []\n\n    for key, value in search_space.items():\n        <IND>if isinstance(value, _NUMERICAL_DISTRIBUTIONS):\n            <IND>numerical_search_space[key] = value\n            numerical_distributions.append(value)\n\n    <DED><DED>if len(numerical_distributions) != 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "6a9d749498399143b8143e567e1e956119aa16df",
    "filename": "optuna/samplers/_nsga2/crossover.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/samplers/_nsga2/crossover.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/samplers/_nsga2/crossover.py:102:16 Incompatible parameter type [6]: Expected `List[BaseDistribution]` for 4th positional only parameter to call `_sbx` but got `List[typing.Union[DiscreteUniformDistribution, IntLogUniformDistribution, IntUniformDistribution, LogUniformDistribution, UniformDistribution]]`.",
    "message": " Expected `List[BaseDistribution]` for 4th positional only parameter to call `_sbx` but got `List[typing.Union[DiscreteUniformDistribution, IntLogUniformDistribution, IntUniformDistribution, LogUniformDistribution, UniformDistribution]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 102,
    "warning_line": "                numerical_distributions,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    numerical_search_space = {\n        key: value\n        for key, value in search_space.items()\n        if isinstance(value, _NUMERICAL_DISTRIBUTIONS)\n    }\n    numerical_distributions = list(numerical_search_space.values())\n    if len(numerical_distributions) != 0:\n",
        "source_code_len": 269,
        "target_code": "\n    numerical_search_space: Dict[str, BaseDistribution] = {}\n    numerical_distributions: List[BaseDistribution] = []\n\n    for key, value in search_space.items():\n        if isinstance(value, _NUMERICAL_DISTRIBUTIONS):\n            numerical_search_space[key] = value\n            numerical_distributions.append(value)\n\n    if len(numerical_distributions) != 0:\n",
        "target_code_len": 361,
        "diff_format": "@@ -40,8 +40,10 @@\n \n-    numerical_search_space = {\n-        key: value\n-        for key, value in search_space.items()\n-        if isinstance(value, _NUMERICAL_DISTRIBUTIONS)\n-    }\n-    numerical_distributions = list(numerical_search_space.values())\n+    numerical_search_space: Dict[str, BaseDistribution] = {}\n+    numerical_distributions: List[BaseDistribution] = []\n+\n+    for key, value in search_space.items():\n+        if isinstance(value, _NUMERICAL_DISTRIBUTIONS):\n+            numerical_search_space[key] = value\n+            numerical_distributions.append(value)\n+\n     if len(numerical_distributions) != 0:\n",
        "source_code_with_indent": "\n    <IND>numerical_search_space = {\n        key: value\n        for key, value in search_space.items()\n        if isinstance(value, _NUMERICAL_DISTRIBUTIONS)\n    }\n    numerical_distributions = list(numerical_search_space.values())\n    if len(numerical_distributions) != 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>numerical_search_space: Dict[str, BaseDistribution] = {}\n    numerical_distributions: List[BaseDistribution] = []\n\n    for key, value in search_space.items():\n        <IND>if isinstance(value, _NUMERICAL_DISTRIBUTIONS):\n            <IND>numerical_search_space[key] = value\n            numerical_distributions.append(value)\n\n    <DED><DED>if len(numerical_distributions) != 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]