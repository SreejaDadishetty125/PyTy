[
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/app.py:890:12 Incompatible return type [7]: Expected `Union[WerkzeugResponse, src.quart.wrappers.response.Response]` but got `None`.",
    "message": " Expected `Union[WerkzeugResponse, src.quart.wrappers.response.Response]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 890,
    "warning_line": "            return await handler(error)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, error: HTTPException\n    ) -> Union[Response, WerkzeugResponse]:\n        \"\"\"Handle a HTTPException subclass error.\n",
        "source_code_len": 129,
        "target_code": "        self, error: HTTPException\n    ) -> Union[HTTPException, ResponseReturnValue]:\n        \"\"\"Handle a HTTPException subclass error.\n",
        "target_code_len": 137,
        "diff_format": "@@ -879,3 +899,3 @@\n         self, error: HTTPException\n-    ) -> Union[Response, WerkzeugResponse]:\n+    ) -> Union[HTTPException, ResponseReturnValue]:\n         \"\"\"Handle a HTTPException subclass error.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self, error: HTTPException\n    ) -> Union[Response, WerkzeugResponse]:\n        <IND>",
        "target_code_with_indent": "        self, error: HTTPException\n    ) -> Union[HTTPException, ResponseReturnValue]:\n        <IND>"
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/app.py:915:8 Incompatible return type [7]: Expected `Union[WerkzeugResponse, src.quart.wrappers.response.Response]` but got `None`.",
    "message": " Expected `Union[WerkzeugResponse, src.quart.wrappers.response.Response]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 915,
    "warning_line": "        return await handler(error)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def handle_user_exception(self, error: Exception) -> Union[Response, WerkzeugResponse]:\n        \"\"\"Handle an exception that has been raised.\n",
        "source_code_len": 152,
        "target_code": "\n    async def handle_user_exception(\n        self, error: Exception\n    ) -> Union[HTTPException, ResponseReturnValue]:\n        \"\"\"Handle an exception that has been raised.\n",
        "target_code_len": 174,
        "diff_format": "@@ -901,3 +927,5 @@\n \n-    async def handle_user_exception(self, error: Exception) -> Union[Response, WerkzeugResponse]:\n+    async def handle_user_exception(\n+        self, error: Exception\n+    ) -> Union[HTTPException, ResponseReturnValue]:\n         \"\"\"Handle an exception that has been raised.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>async def handle_user_exception(self, error: Exception) -> Union[Response, WerkzeugResponse]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>async def handle_user_exception(\n        self, error: Exception\n    ) -> Union[HTTPException, ResponseReturnValue]:\n        <IND>"
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/app.py:925:27 Incompatible parameter type [6]: Expected `Tuple[Type[typing.Any], BaseException, TracebackType]` for 1st positional only parameter to call `Quart.log_exception` but got `Union[Tuple[None, None, None], Tuple[Type[BaseException], BaseException, TracebackType]]`.",
    "message": " Expected `Tuple[Type[typing.Any], BaseException, TracebackType]` for 1st positional only parameter to call `Quart.log_exception` but got `Union[Tuple[None, None, None], Tuple[Type[BaseException], BaseException, TracebackType]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 925,
    "warning_line": "        self.log_exception(sys.exc_info())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def log_exception(self, exception_info: Tuple[type, BaseException, TracebackType]) -> None:\n        \"\"\"Log a exception to the :attr:`logger`.\n",
        "source_code_len": 147,
        "target_code": "\n    def log_exception(\n        self,\n        exception_info: Union[Tuple[type, BaseException, TracebackType], Tuple[None, None, None]],\n    ) -> None:\n        \"\"\"Log a exception to the :attr:`logger`.\n",
        "target_code_len": 202,
        "diff_format": "@@ -965,3 +993,6 @@\n \n-    def log_exception(self, exception_info: Tuple[type, BaseException, TracebackType]) -> None:\n+    def log_exception(\n+        self,\n+        exception_info: Union[Tuple[type, BaseException, TracebackType], Tuple[None, None, None]],\n+    ) -> None:\n         \"\"\"Log a exception to the :attr:`logger`.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def log_exception(self, exception_info: Tuple[type, BaseException, TracebackType]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def log_exception(\n        self,\n        exception_info: Union[Tuple[type, BaseException, TracebackType], Tuple[None, None, None]],\n    ) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/quart/app.py:935:12 Incompatible variable type [9]: response is declared to have type `Union[InternalServerError, WerkzeugResponse, src.quart.wrappers.response.Response]` but is used as type `None`.",
    "message": " response is declared to have type `Union[InternalServerError, WerkzeugResponse, src.quart.wrappers.response.Response]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 935,
    "warning_line": "            response = await handler(internal_server_error)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if handler is not None:\n            response = await handler(internal_server_error)\n        else:\n",
        "source_code_len": 106,
        "target_code": "        if handler is not None:\n            response = await handler(internal_server_error)  # type: ignore\n        else:\n",
        "target_code_len": 122,
        "diff_format": "@@ -934,3 +962,3 @@\n         if handler is not None:\n-            response = await handler(internal_server_error)\n+            response = await handler(internal_server_error)  # type: ignore\n         else:\n",
        "source_code_with_indent": "        if handler is not None:\n            <IND>response = await handler(internal_server_error)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if handler is not None:\n            <IND>response = await handler(internal_server_error)  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/app.py:950:27 Incompatible parameter type [6]: Expected `Tuple[Type[typing.Any], BaseException, TracebackType]` for 1st positional only parameter to call `Quart.log_exception` but got `Union[Tuple[None, None, None], Tuple[Type[BaseException], BaseException, TracebackType]]`.",
    "message": " Expected `Tuple[Type[typing.Any], BaseException, TracebackType]` for 1st positional only parameter to call `Quart.log_exception` but got `Union[Tuple[None, None, None], Tuple[Type[BaseException], BaseException, TracebackType]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 950,
    "warning_line": "        self.log_exception(sys.exc_info())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def log_exception(self, exception_info: Tuple[type, BaseException, TracebackType]) -> None:\n        \"\"\"Log a exception to the :attr:`logger`.\n",
        "source_code_len": 147,
        "target_code": "\n    def log_exception(\n        self,\n        exception_info: Union[Tuple[type, BaseException, TracebackType], Tuple[None, None, None]],\n    ) -> None:\n        \"\"\"Log a exception to the :attr:`logger`.\n",
        "target_code_len": 202,
        "diff_format": "@@ -965,3 +993,6 @@\n \n-    def log_exception(self, exception_info: Tuple[type, BaseException, TracebackType]) -> None:\n+    def log_exception(\n+        self,\n+        exception_info: Union[Tuple[type, BaseException, TracebackType], Tuple[None, None, None]],\n+    ) -> None:\n         \"\"\"Log a exception to the :attr:`logger`.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def log_exception(self, exception_info: Tuple[type, BaseException, TracebackType]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def log_exception(\n        self,\n        exception_info: Union[Tuple[type, BaseException, TracebackType], Tuple[None, None, None]],\n    ) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/quart/app.py:960:12 Incompatible variable type [9]: response is declared to have type `Union[InternalServerError, WerkzeugResponse, src.quart.wrappers.response.Response]` but is used as type `None`.",
    "message": " response is declared to have type `Union[InternalServerError, WerkzeugResponse, src.quart.wrappers.response.Response]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 960,
    "warning_line": "            response = await handler(internal_server_error)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if handler is not None:\n            response = await handler(internal_server_error)\n        else:\n",
        "source_code_len": 106,
        "target_code": "        if handler is not None:\n            response = await handler(internal_server_error)  # type: ignore\n        else:\n",
        "target_code_len": 122,
        "diff_format": "@@ -959,3 +987,3 @@\n         if handler is not None:\n-            response = await handler(internal_server_error)\n+            response = await handler(internal_server_error)  # type: ignore\n         else:\n",
        "source_code_with_indent": "        if handler is not None:\n            <IND>response = await handler(internal_server_error)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if handler is not None:\n            <IND>response = await handler(internal_server_error)  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/app.py:1588:22 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to anonymous call but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to anonymous call but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1588,
    "warning_line": "            processor(request.endpoint, request.view_args)"
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/app.py:1588:40 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to anonymous call but got `Optional[Dict[str, typing.Any]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to anonymous call but got `Optional[Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1588,
    "warning_line": "            processor(request.endpoint, request.view_args)"
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/app.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/app.py:1796:50 Incompatible parameter type [6]: Expected `Union[WerkzeugResponse, src.quart.wrappers.response.Response]` for 2nd positional only parameter to call `Quart.save_session` but got `Union[None, WerkzeugResponse, src.quart.wrappers.response.Response]`.",
    "message": " Expected `Union[WerkzeugResponse, src.quart.wrappers.response.Response]` for 2nd positional only parameter to call `Quart.save_session` but got `Union[None, WerkzeugResponse, src.quart.wrappers.response.Response]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1796,
    "warning_line": "                await self.save_session(session_, response)"
  },
  {
    "project": "pgjones/quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/config.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/config.py:66:40 Incompatible variable type [9]: owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
    "message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "    def __get__(self, instance: object, owner: type = None) -> Any:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:\n",
        "source_code_len": 220,
        "target_code": "\n    def __get__(self, instance: Any, owner: Any = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]\n        if self.converter is not None:\n",
        "target_code_len": 200,
        "diff_format": "@@ -65,6 +66,6 @@\n \n-    def __get__(self, instance: object, owner: type = None) -> Any:\n+    def __get__(self, instance: Any, owner: Any = None) -> Any:\n         if instance is None:\n             return self\n-        result = instance.config[self.key]  # type: ignore\n+        result = instance.config[self.key]\n         if self.converter is not None:\n",
        "source_code_with_indent": "\n    <DED>def __get__(self, instance: object, owner: type = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __get__(self, instance: Any, owner: Any = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]\n        if self.converter is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]