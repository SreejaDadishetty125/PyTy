[
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:262:49 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Tuple[s_types.Type, irast.Set]]` for 2nd parameter `args` to call `polyres.find_callable` but got `typing.List[typing.Tuple[s_types.Type, None]]`.",
    "message": " Expected `typing.Sequence[typing.Tuple[s_types.Type, irast.Set]]` for 2nd parameter `args` to call `polyres.find_callable` but got `typing.List[typing.Tuple[s_types.Type, None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 262,
    "warning_line": "        (CastCallableWrapper(c) for c in casts), args=args, kwargs={}, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    args = [\n        (orig_stype, None),\n        (new_stype, None),\n    ]\n",
        "source_code_len": 74,
        "target_code": "    args = [\n        (orig_stype, irast.EmptySet()),\n        (new_stype, irast.EmptySet()),\n    ]\n",
        "target_code_len": 98,
        "diff_format": "@@ -256,4 +256,4 @@\n     args = [\n-        (orig_stype, None),\n-        (new_stype, None),\n+        (orig_stype, irast.EmptySet()),\n+        (new_stype, irast.EmptySet()),\n     ]\n",
        "source_code_with_indent": "    <DED><DED>args = [\n        (orig_stype, None),\n        (new_stype, None),\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>args = [\n        (orig_stype, irast.EmptySet()),\n        (new_stype, irast.EmptySet()),\n    ]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/clauses.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/clauses.py:55:44 Incompatible parameter type [6]: Expected `typing.Optional[edb.schema.types.Type]` for 2nd parameter `typehint` to call `setgen.scoped_set` but got `edb.schema.objects.Object`.",
    "message": " Expected `typing.Optional[edb.schema.types.Type]` for 2nd parameter `typehint` to call `setgen.scoped_set` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 55,
    "warning_line": "        ir_set = setgen.scoped_set(ir_expr, typehint=bool_t, ctx=subctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/clauses.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/clauses.py:141:46 Incompatible parameter type [6]: Expected `typing.Optional[edb.schema.types.Type]` for 3rd parameter `typehint` to call `setgen.scoped_set` but got `edb.schema.objects.Object`.",
    "message": " Expected `typing.Optional[edb.schema.types.Type]` for 3rd parameter `typehint` to call `setgen.scoped_set` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 141,
    "warning_line": "                ir_expr, force_reassign=True, typehint=int_t, ctx=subctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:206:8 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 206,
    "warning_line": "        ctx.env.get_track_schema_object(std_type),"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:432:32 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 432,
    "warning_line": "                ctx.env.schema, ctx.env.get_track_schema_object('std::json'))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/inference/cardinality.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/inference/cardinality.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/inference/cardinality.py:216:4 Incompatible variable type [9]: scope_tree is declared to have type `typing.Set[edb.ir.pathid.PathId]` but is used as type `edb.ir.scopetree.ScopeTreeNode`.",
    "message": " scope_tree is declared to have type `typing.Set[edb.ir.pathid.PathId]` but is used as type `edb.ir.scopetree.ScopeTreeNode`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 216,
    "warning_line": "    scope_tree = _get_set_scope(filter_set, scope_tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        filter_set: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "source_code_len": 155,
        "target_code": "        filter_set: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "target_code_len": 150,
        "diff_format": "@@ -211,3 +211,3 @@\n         filter_set: irast.Set,\n-        scope_tree: typing.Set[irast.PathId],\n+        scope_tree: irast.ScopeTreeNode,\n         env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "source_code_with_indent": "        filter_set: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        filter_set: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_len": 140,
        "target_code": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_len": 135,
        "diff_format": "@@ -265,3 +265,3 @@\n         result_set: irast.Set, filter_clause: irast.Set,\n-        scope_tree: typing.Set[irast.PathId],\n+        scope_tree: irast.ScopeTreeNode,\n         env) -> qltypes.Cardinality:\n",
        "source_code_with_indent": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_len": 157,
        "target_code": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_len": 152,
        "diff_format": "@@ -292,3 +292,3 @@\n         result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n-        scope_tree: typing.Set[irast.PathId],\n+        scope_tree: irast.ScopeTreeNode,\n         env) -> qltypes.Cardinality:\n",
        "source_code_with_indent": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/inference/cardinality.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/inference/cardinality.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/inference/cardinality.py:216:44 Incompatible parameter type [6]: Expected `edb.ir.scopetree.ScopeTreeNode` for 2nd positional only parameter to call `_get_set_scope` but got `typing.Set[edb.ir.pathid.PathId]`.",
    "message": " Expected `edb.ir.scopetree.ScopeTreeNode` for 2nd positional only parameter to call `_get_set_scope` but got `typing.Set[edb.ir.pathid.PathId]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 216,
    "warning_line": "    scope_tree = _get_set_scope(filter_set, scope_tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        filter_set: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "source_code_len": 155,
        "target_code": "        filter_set: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "target_code_len": 150,
        "diff_format": "@@ -211,3 +211,3 @@\n         filter_set: irast.Set,\n-        scope_tree: typing.Set[irast.PathId],\n+        scope_tree: irast.ScopeTreeNode,\n         env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "source_code_with_indent": "        filter_set: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        filter_set: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> typing.Sequence[typing.Tuple[s_pointers.Pointer, irast.Set]]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_len": 140,
        "target_code": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_len": 135,
        "diff_format": "@@ -265,3 +265,3 @@\n         result_set: irast.Set, filter_clause: irast.Set,\n-        scope_tree: typing.Set[irast.PathId],\n+        scope_tree: irast.ScopeTreeNode,\n         env) -> qltypes.Cardinality:\n",
        "source_code_with_indent": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        result_set: irast.Set, filter_clause: irast.Set,\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_len": 157,
        "target_code": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_len": 152,
        "diff_format": "@@ -292,3 +292,3 @@\n         result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n-        scope_tree: typing.Set[irast.PathId],\n+        scope_tree: irast.ScopeTreeNode,\n         env) -> qltypes.Cardinality:\n",
        "source_code_with_indent": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: typing.Set[irast.PathId],\n        env) -> qltypes.Cardinality:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        result_set: irast.Set, filter_clause: typing.Optional[irast.Set],\n        scope_tree: irast.ScopeTreeNode,\n        env) -> qltypes.Cardinality:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/inference/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/inference/types.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/inference/types.py:105:29 Incompatible parameter type [6]: Expected `irast.EmptySet` for 1st positional only parameter to call `amend_empty_set_type` but got `irast.Base`.",
    "message": " Expected `irast.EmptySet` for 1st positional only parameter to call `amend_empty_set_type` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 105,
    "warning_line": "        amend_empty_set_type(irs[i], common_type, env)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for i in empties:\n        amend_empty_set_type(irs[i], common_type, env)\n\n",
        "source_code_len": 78,
        "target_code": "    for i in empties:\n        amend_empty_set_type(\n            typing.cast(irast.EmptySet, irs[i]), common_type, env)\n\n",
        "target_code_len": 120,
        "diff_format": "@@ -104,3 +104,4 @@\n     for i in empties:\n-        amend_empty_set_type(irs[i], common_type, env)\n+        amend_empty_set_type(\n+            typing.cast(irast.EmptySet, irs[i]), common_type, env)\n \n",
        "source_code_with_indent": "    <DED>for i in empties:\n        <IND>amend_empty_set_type(irs[i], common_type, env)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>for i in empties:\n        <IND>amend_empty_set_type(\n            typing.cast(irast.EmptySet, irs[i]), common_type, env)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:218:67 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 218,
    "warning_line": "                        typeref=irtyputils.type_to_typeref(schema, bytes_t)),"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:219:20 Incompatible parameter type [6]: Expected `typing.Optional[s_types.Type]` for 2nd parameter `typehint` to call `setgen.ensure_set` but got `edb.schema.objects.Object`.",
    "message": " Expected `typing.Optional[s_types.Type]` for 2nd parameter `typehint` to call `setgen.ensure_set` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 219,
    "warning_line": "                    typehint=bytes_t,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:221:40 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 221,
    "warning_line": "                bargs = [BoundArg(None, bytes_t, argval, bytes_t, 0)]"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:221:57 Incompatible parameter type [6]: Expected `s_types.Type` for 4th positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 4th positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 221,
    "warning_line": "                bargs = [BoundArg(None, bytes_t, argval, bytes_t, 0)]"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:435:67 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 435,
    "warning_line": "                typeref=irtyputils.type_to_typeref(ctx.env.schema, bytes_t)),"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:436:12 Incompatible parameter type [6]: Expected `typing.Optional[s_types.Type]` for 2nd parameter `typehint` to call `setgen.ensure_set` but got `edb.schema.objects.Object`.",
    "message": " Expected `typing.Optional[s_types.Type]` for 2nd parameter `typehint` to call `setgen.ensure_set` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 436,
    "warning_line": "            typehint=bytes_t, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:437:50 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 437,
    "warning_line": "        bound_param_args.insert(0, BoundArg(None, bytes_t, bm_set, bytes_t, 0))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:437:67 Incompatible parameter type [6]: Expected `s_types.Type` for 4th positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "message": " Expected `s_types.Type` for 4th positional only parameter to call `BoundArg.__init__` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 437,
    "warning_line": "        bound_param_args.insert(0, BoundArg(None, bytes_t, bm_set, bytes_t, 0))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:79:8 Incompatible variable type [9]: schema is declared to have type `s_schema.Schema` but is used as type `object`.",
    "message": " schema is declared to have type `s_schema.Schema` but is used as type `object`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 79,
    "warning_line": "        schema, _ = s_mod.Module.create_in_schema(schema, name='__derived__')"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/config.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/config.py:45:12 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `pathctx.get_path_serialized_output` but got `pgast.BaseExpr`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `pathctx.get_path_serialized_output` but got `pgast.BaseExpr`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "            val, op.expr.path_id, env=ctx.env)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        val = dispatch.compile(op.expr, ctx=subctx)\n        pathctx.get_path_serialized_output(\n",
        "source_code_len": 96,
        "target_code": "        val = dispatch.compile(op.expr, ctx=subctx)\n        assert isinstance(val, pgast.SelectStmt), \"expected ast.SelectStmt\"\n        pathctx.get_path_serialized_output(\n",
        "target_code_len": 172,
        "diff_format": "@@ -43,2 +43,3 @@\n         val = dispatch.compile(op.expr, ctx=subctx)\n+        assert isinstance(val, pgast.SelectStmt), \"expected ast.SelectStmt\"\n         pathctx.get_path_serialized_output(\n",
        "source_code_with_indent": "        <IND>val = dispatch.compile(op.expr, ctx=subctx)\n        pathctx.get_path_serialized_output(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>val = dispatch.compile(op.expr, ctx=subctx)\n        assert isinstance(val, pgast.SelectStmt), \"expected ast.SelectStmt\"\n        pathctx.get_path_serialized_output(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/config.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/config.py:47:47 Incompatible parameter type [6]: Expected `pgast.SelectStmt` for 1st positional only parameter to call `output.aggregate_json_output` but got `pgast.BaseExpr`.",
    "message": " Expected `pgast.SelectStmt` for 1st positional only parameter to call `output.aggregate_json_output` but got `pgast.BaseExpr`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "            val = output.aggregate_json_output(val, op.expr, env=ctx.env)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        val = dispatch.compile(op.expr, ctx=subctx)\n        pathctx.get_path_serialized_output(\n",
        "source_code_len": 96,
        "target_code": "        val = dispatch.compile(op.expr, ctx=subctx)\n        assert isinstance(val, pgast.SelectStmt), \"expected ast.SelectStmt\"\n        pathctx.get_path_serialized_output(\n",
        "target_code_len": 172,
        "diff_format": "@@ -43,2 +43,3 @@\n         val = dispatch.compile(op.expr, ctx=subctx)\n+        assert isinstance(val, pgast.SelectStmt), \"expected ast.SelectStmt\"\n         pathctx.get_path_serialized_output(\n",
        "source_code_with_indent": "        <IND>val = dispatch.compile(op.expr, ctx=subctx)\n        pathctx.get_path_serialized_output(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>val = dispatch.compile(op.expr, ctx=subctx)\n        assert isinstance(val, pgast.SelectStmt), \"expected ast.SelectStmt\"\n        pathctx.get_path_serialized_output(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/config.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/config.py:150:35 Incompatible parameter type [6]: Expected `typing.Union[pgast.BaseRelation, pgast.CommonTableExpr]` for 1st positional only parameter to call `relctx.rvar_for_rel` but got `pgast.BaseExpr`.",
    "message": " Expected `typing.Union[pgast.BaseRelation, pgast.CommonTableExpr]` for 1st positional only parameter to call `relctx.rvar_for_rel` but got `pgast.BaseExpr`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "        rvar = relctx.rvar_for_rel(selector, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        selector = dispatch.compile(op.selector, ctx=ctx)\n        target = selector.target_list[0]\n",
        "source_code_len": 99,
        "target_code": "        selector = dispatch.compile(op.selector, ctx=ctx)\n        assert isinstance(selector, pgast.SelectStmt), \\\n            \"expected ast.SelectStmt\"\n        target = selector.target_list[0]\n",
        "target_code_len": 194,
        "diff_format": "@@ -142,2 +145,4 @@\n         selector = dispatch.compile(op.selector, ctx=ctx)\n+        assert isinstance(selector, pgast.SelectStmt), \\\n+            \"expected ast.SelectStmt\"\n         target = selector.target_list[0]\n",
        "source_code_with_indent": "        <IND>selector = dispatch.compile(op.selector, ctx=ctx)\n        target = selector.target_list[0]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "        <IND>selector = dispatch.compile(op.selector, ctx=ctx)\n        assert isinstance(selector, pgast.SelectStmt),            \"expected ast.SelectStmt\"\n        target = selector.target_list[0]\n"
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/config.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/config.py:215:4 Incompatible return type [7]: Expected `pgast.Query` but got `pgast.OutputVar`.",
    "message": " Expected `pgast.Query` but got `pgast.OutputVar`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 215,
    "warning_line": "    return pathctx.get_path_serialized_output("
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/dml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/dml.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/dml.py:549:49 Unsupported operand [58]: `+` is not supported for operand types `typing.List[pgast.PathRangeVar]` and `typing.List[pgast.BaseRangeVar]`.",
    "message": " `+` is not supported for operand types `typing.List[pgast.PathRangeVar]` and `typing.List[pgast.BaseRangeVar]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 549,
    "warning_line": "            from_clause=[update_stmt.relation] + list(update_stmt.from_clause),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # so convert the UPDATE statement into a SELECT.\n        update_cte.query = pgast.SelectStmt(\n",
        "source_code_len": 102,
        "target_code": "        # so convert the UPDATE statement into a SELECT.\n        from_clause: typing.List[pgast.BaseRangeVar] = [update_stmt.relation]\n        from_clause.extend(update_stmt.from_clause)\n        update_cte.query = pgast.SelectStmt(\n",
        "target_code_len": 232,
        "diff_format": "@@ -545,2 +545,4 @@\n         # so convert the UPDATE statement into a SELECT.\n+        from_clause: typing.List[pgast.BaseRangeVar] = [update_stmt.relation]\n+        from_clause.extend(update_stmt.from_clause)\n         update_cte.query = pgast.SelectStmt(\n",
        "source_code_with_indent": "        # so convert the UPDATE statement into a SELECT.\n        <IND>update_cte.query = pgast.SelectStmt(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # so convert the UPDATE statement into a SELECT.\n        <IND>from_clause: typing.List[pgast.BaseRangeVar] = [update_stmt.relation]\n        from_clause.extend(update_stmt.from_clause)\n        update_cte.query = pgast.SelectStmt(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target_list=update_stmt.returning_list,\n            from_clause=[update_stmt.relation] + list(update_stmt.from_clause),\n            where_clause=update_stmt.where_clause,\n",
        "source_code_len": 183,
        "target_code": "            target_list=update_stmt.returning_list,\n            from_clause=from_clause,\n            where_clause=update_stmt.where_clause,\n",
        "target_code_len": 140,
        "diff_format": "@@ -548,3 +550,3 @@\n             target_list=update_stmt.returning_list,\n-            from_clause=[update_stmt.relation] + list(update_stmt.from_clause),\n+            from_clause=from_clause,\n             where_clause=update_stmt.where_clause,\n",
        "source_code_with_indent": "            target_list=update_stmt.returning_list,\n            from_clause=[update_stmt.relation] + list(update_stmt.from_clause),\n            where_clause=update_stmt.where_clause,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target_list=update_stmt.returning_list,\n            from_clause=from_clause,\n            where_clause=update_stmt.where_clause,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:840:8 Incompatible variable type [9]: rvar is declared to have type `pgast.PathRangeVar` but is used as type `pgast.BaseRangeVar`.",
    "message": " rvar is declared to have type `pgast.PathRangeVar` but is used as type `pgast.BaseRangeVar`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 840,
    "warning_line": "        rvar = set_ops[0][1].from_clause[0]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Just one class table, so return it directly\n        rvar = set_ops[0][1].from_clause[0]\n\n",
        "source_code_len": 99,
        "target_code": "        # Just one class table, so return it directly\n        from_rvar = set_ops[0][1].from_clause[0]\n        assert isinstance(from_rvar, pgast.PathRangeVar)\n        rvar = from_rvar\n\n",
        "target_code_len": 186,
        "diff_format": "@@ -839,3 +842,5 @@\n         # Just one class table, so return it directly\n-        rvar = set_ops[0][1].from_clause[0]\n+        from_rvar = set_ops[0][1].from_clause[0]\n+        assert isinstance(from_rvar, pgast.PathRangeVar)\n+        rvar = from_rvar\n \n",
        "source_code_with_indent": "        # Just one class table, so return it directly\n        <IND>rvar = set_ops[0][1].from_clause[0]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Just one class table, so return it directly\n        <IND>from_rvar = set_ops[0][1].from_clause[0]\n        assert isinstance(from_rvar, pgast.PathRangeVar)\n        rvar = from_rvar\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:900:34 Incompatible parameter type [6]: Expected `irast.PointerRef` for 1st positional only parameter to call `table_from_ptrref` but got `irast.BasePointerRef`.",
    "message": " Expected `irast.PointerRef` for 1st positional only parameter to call `table_from_ptrref` but got `irast.BasePointerRef`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 900,
    "warning_line": "        table = table_from_ptrref(src_ptrref, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for src_ptrref in refs:\n        table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "source_code_len": 83,
        "target_code": "    for src_ptrref in refs:\n        assert isinstance(src_ptrref, irast.PointerRef), \\\n            \"expected regular PointerRef\"\n        table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "target_code_len": 184,
        "diff_format": "@@ -899,2 +904,4 @@\n     for src_ptrref in refs:\n+        assert isinstance(src_ptrref, irast.PointerRef), \\\n+            \"expected regular PointerRef\"\n         table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "source_code_with_indent": "    <DED><DED>for src_ptrref in refs:\n        <IND>table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "    <DED><DED>for src_ptrref in refs:\n        <IND>assert isinstance(src_ptrref, irast.PointerRef),            \"expected regular PointerRef\"\n        table = table_from_ptrref(src_ptrref, ctx=ctx)\n"
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:916:12 Incompatible parameter type [6]: Expected `irast.PointerRef` for 1st positional only parameter to call `get_ptr_rel_overlays` but got `irast.BasePointerRef`.",
    "message": " Expected `irast.PointerRef` for 1st positional only parameter to call `get_ptr_rel_overlays` but got `irast.BasePointerRef`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 916,
    "warning_line": "            src_ptrref, dml_source=dml_source, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for src_ptrref in refs:\n        table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "source_code_len": 83,
        "target_code": "    for src_ptrref in refs:\n        assert isinstance(src_ptrref, irast.PointerRef), \\\n            \"expected regular PointerRef\"\n        table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "target_code_len": 184,
        "diff_format": "@@ -899,2 +904,4 @@\n     for src_ptrref in refs:\n+        assert isinstance(src_ptrref, irast.PointerRef), \\\n+            \"expected regular PointerRef\"\n         table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "source_code_with_indent": "    <DED><DED>for src_ptrref in refs:\n        <IND>table = table_from_ptrref(src_ptrref, ctx=ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "    <DED><DED>for src_ptrref in refs:\n        <IND>assert isinstance(src_ptrref, irast.PointerRef),            \"expected regular PointerRef\"\n        table = table_from_ptrref(src_ptrref, ctx=ctx)\n"
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "cac8d93fb213b801646335f5cd20bf808745e9ea",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:164:61 Incompatible parameter type [6]: Expected `typing.Union[pgast.ColumnRef, str]` for 2nd positional only parameter to call `astutils.get_column` but got `pgast.OutputVar`.",
    "message": " Expected `typing.Union[pgast.ColumnRef, str]` for 2nd positional only parameter to call `astutils.get_column` but got `pgast.OutputVar`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 164,
    "warning_line": "                            astutils.get_column(gquery_rvar, output_ref)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            gquery, path_id, env=ctx.env)\n                        new_part_clause.append(\n",
        "source_code_len": 106,
        "target_code": "                            gquery, path_id, env=ctx.env)\n                        assert isinstance(output_ref, pgast.ColumnRef)\n                        new_part_clause.append(\n",
        "target_code_len": 177,
        "diff_format": "@@ -162,2 +164,3 @@\n                             gquery, path_id, env=ctx.env)\n+                        assert isinstance(output_ref, pgast.ColumnRef)\n                         new_part_clause.append(\n",
        "source_code_with_indent": "                            gquery, path_id, env=ctx.env)\n                        new_part_clause.append(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                            gquery, path_id, env=ctx.env)\n                        assert isinstance(output_ref, pgast.ColumnRef)\n                        new_part_clause.append(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]