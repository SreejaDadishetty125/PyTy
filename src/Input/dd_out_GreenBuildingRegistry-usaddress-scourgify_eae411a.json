[
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:161:23 Incompatible variable type [9]: addtl_funcs is declared to have type `Sequence[typing.Callable[..., unknown]]` but is used as type `None`.",
    "message": " addtl_funcs is declared to have type `Sequence[typing.Callable[..., unknown]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 161,
    "warning_line": "                       addtl_funcs=None  # type: Sequence[Callable[str, (str, str)]]  # noqa"
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:161:49 Invalid type [31]: Expression `typing.Sequence[typing.Callable[(str, (str, str))]]` is not a valid type.",
    "message": " Expression `typing.Sequence[typing.Callable[(str, (str, str))]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 161,
    "warning_line": "                       addtl_funcs=None  # type: Sequence[Callable[str, (str, str)]]  # noqa"
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:269:44 Incompatible parameter type [6]: Expected `Optional[Sequence[typing.Any]]` for 2nd parameter `comma_separate` to call `get_addr_line_str` but got `bool`.",
    "message": " Expected `Optional[Sequence[typing.Any]]` for 2nd parameter `comma_separate` to call `get_addr_line_str` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 269,
    "warning_line": "    addr_str = get_addr_line_str(addr_dict, comma_separate=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_len": 187,
        "target_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "target_code_len": 193,
        "diff_format": "@@ -557,3 +567,3 @@\n def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n-    # type: (Mapping[str, str], Optional[Sequence]) -> str\n+    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n     \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    <IND>",
        "target_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    <IND>"
      }
    ]
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:283:23 Incompatible parameter type [6]: Expected `Optional[Sequence[typing.Any]]` for 2nd parameter `comma_separate` to call `get_addr_line_str` but got `bool`.",
    "message": " Expected `Optional[Sequence[typing.Any]]` for 2nd parameter `comma_separate` to call `get_addr_line_str` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 283,
    "warning_line": "            addr_dict, comma_separate=True, addr_parts=ADDRESS_KEYS",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_len": 187,
        "target_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "target_code_len": 193,
        "diff_format": "@@ -557,3 +567,3 @@\n def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n-    # type: (Mapping[str, str], Optional[Sequence]) -> str\n+    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n     \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    <IND>",
        "target_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    <IND>"
      }
    ]
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:283:44 Incompatible parameter type [6]: Expected `Mapping[str, str]` for 3rd parameter `addr_parts` to call `get_addr_line_str` but got `typing.Tuple[str, str, str, str, str]`.",
    "message": " Expected `Mapping[str, str]` for 3rd parameter `addr_parts` to call `get_addr_line_str` but got `typing.Tuple[str, str, str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 283,
    "warning_line": "            addr_dict, comma_separate=True, addr_parts=ADDRESS_KEYS",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_len": 187,
        "target_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "target_code_len": 193,
        "diff_format": "@@ -557,3 +567,3 @@\n def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n-    # type: (Mapping[str, str], Optional[Sequence]) -> str\n+    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n     \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    <IND>",
        "target_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    <IND>"
      }
    ]
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:557:33 Incompatible variable type [9]: addr_parts is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " addr_parts is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 557,
    "warning_line": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_len": 187,
        "target_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "target_code_len": 193,
        "diff_format": "@@ -557,3 +567,3 @@\n def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n-    # type: (Mapping[str, str], Optional[Sequence]) -> str\n+    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n     \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    <IND>",
        "target_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    <IND>"
      }
    ]
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:557:50 Incompatible variable type [9]: comma_separate is declared to have type `Optional[Sequence[typing.Any]]` but is used as type `bool`.",
    "message": " comma_separate is declared to have type `Optional[Sequence[typing.Any]]` but is used as type `bool`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 557,
    "warning_line": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_len": 187,
        "target_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "target_code_len": 193,
        "diff_format": "@@ -557,3 +567,3 @@\n def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n-    # type: (Mapping[str, str], Optional[Sequence]) -> str\n+    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n     \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    <IND>",
        "target_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    <IND>"
      }
    ]
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:576:8 Incompatible variable type [9]: addr_parts is declared to have type `Mapping[str, str]` but is used as type `typing.List[str]`.",
    "message": " addr_parts is declared to have type `Mapping[str, str]` but is used as type `typing.List[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 576,
    "warning_line": "        addr_parts = ['address_line_1', 'address_line_2']",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_len": 187,
        "target_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "target_code_len": 193,
        "diff_format": "@@ -557,3 +567,3 @@\n def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n-    # type: (Mapping[str, str], Optional[Sequence]) -> str\n+    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n     \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    <IND>",
        "target_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    <IND>"
      }
    ]
  },
  {
    "project": "GreenBuildingRegistry/usaddress-scourgify",
    "commit": "eae411aba177343d7b9930318a9337cc5c6ad580",
    "filename": "scourgify/normalize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GreenBuildingRegistry-usaddress-scourgify/scourgify/normalize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scourgify/normalize.py:599:45 Incompatible parameter type [6]: Expected `Mapping[str, str]` for 2nd parameter `addr_parts` to call `get_addr_line_str` but got `Optional[Sequence[typing.Any]]`.",
    "message": " Expected `Mapping[str, str]` for 2nd parameter `addr_parts` to call `get_addr_line_str` but got `Optional[Sequence[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 599,
    "warning_line": "        address = get_addr_line_str(address, addr_parts=addr_keys)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_len": 187,
        "target_code": "def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    \"\"\"Get address 'line' elements as a single string.\n",
        "target_code_len": 193,
        "diff_format": "@@ -557,3 +567,3 @@\n def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n-    # type: (Mapping[str, str], Optional[Sequence]) -> str\n+    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n     \"\"\"Get address 'line' elements as a single string.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence]) -> str\n    <IND>",
        "target_code_with_indent": "<DED>def get_addr_line_str(addr_dict, addr_parts=None, comma_separate=False):\n    # type: (Mapping[str, str], Optional[Sequence], bool) -> str\n    <IND>"
      }
    ]
  }
]