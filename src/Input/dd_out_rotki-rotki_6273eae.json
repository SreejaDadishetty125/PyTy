[
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/data_handler.py",
    "min_patch_found": false,
    "full_warning_msg": "rotkehlchen/data_handler.py:290:38 Unsupported operand [58]: `==` is not supported for operand types `FVal` and `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:48:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 48,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:52:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 52,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:56:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 56,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:60:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 60,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:64:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 64,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:68:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 68,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:72:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:76:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:80:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 80,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:84:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 84,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:88:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 88,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:92:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 92,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:96:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:100:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 100,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:104:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 104,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:108:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 108,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_len": 2440,
        "target_code": "    def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    def __eq__(self, other: object) -> bool:\n        evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    def __add__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    def __sub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    def __mul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    def __truediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    def __floordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    def __pow__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    def __radd__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    def __rsub__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    def __rmul__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    def __rtruediv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_len": 2742,
        "diff_format": "@@ -47,64 +47,64 @@\n     def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('1')\n \n     def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('-1')\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n \n     def __le__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n \n     def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n \n-    def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n-        other = evaluate_input(other)\n-        return self.num.compare_signal(other) == Decimal('0')\n+    def __eq__(self, other: object) -> bool:\n+        evaluated_other = evaluate_input(other)\n+        return self.num.compare_signal(evaluated_other) == Decimal('0')\n \n     def __add__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__add__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__add__(evaluated_other))\n \n     def __sub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__sub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__sub__(evaluated_other))\n \n     def __mul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__mul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__mul__(evaluated_other))\n \n     def __truediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__truediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__truediv__(evaluated_other))\n \n     def __floordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__floordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__floordiv__(evaluated_other))\n \n     def __pow__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__pow__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__pow__(evaluated_other))\n \n     def __radd__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__radd__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__radd__(evaluated_other))\n \n     def __rsub__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rsub__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rsub__(evaluated_other))\n \n     def __rmul__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rmul__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rmul__(evaluated_other))\n \n     def __rtruediv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rtruediv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rtruediv__(evaluated_other))\n \n     def __rfloordiv__(self, other: AcceptableFValOtherInput):\n-        other = evaluate_input(other)\n-        return FVal(self.num.__rfloordiv__(other))\n+        evaluated_other = evaluate_input(other)\n+        return FVal(self.num.__rfloordiv__(evaluated_other))\n \n",
        "source_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>other = evaluate_input(other)\n        return self.num.compare_signal(other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__add__(other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__sub__(other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__mul__(other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__truediv__(other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__pow__(other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__radd__(other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rsub__(other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rmul__(other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(other))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __gt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('1')\n\n    <DED>def __lt__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('-1')\n\n    <DED>def __le__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('-1'), Decimal('0'))\n\n    <DED>def __ge__(self, other: AcceptableFValOtherInput) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) in (Decimal('1'), Decimal('0'))\n\n    <DED>def __eq__(self, other: object) -> bool:\n        <IND>evaluated_other = evaluate_input(other)\n        return self.num.compare_signal(evaluated_other) == Decimal('0')\n\n    <DED>def __add__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__add__(evaluated_other))\n\n    <DED>def __sub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__sub__(evaluated_other))\n\n    <DED>def __mul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__mul__(evaluated_other))\n\n    <DED>def __truediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__truediv__(evaluated_other))\n\n    <DED>def __floordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__floordiv__(evaluated_other))\n\n    <DED>def __pow__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__pow__(evaluated_other))\n\n    <DED>def __radd__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__radd__(evaluated_other))\n\n    <DED>def __rsub__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rsub__(evaluated_other))\n\n    <DED>def __rmul__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rmul__(evaluated_other))\n\n    <DED>def __rtruediv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rtruediv__(evaluated_other))\n\n    <DED>def __rfloordiv__(self, other: AcceptableFValOtherInput):\n        <IND>evaluated_other = evaluate_input(other)\n        return FVal(self.num.__rfloordiv__(evaluated_other))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:129:8 Incompatible variable type [9]: other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " other is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 129,
    "warning_line": "        other = evaluate_input(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        other = evaluate_input(other)\n        third = evaluate_input(third)\n        return FVal(self.num.fma(other, third))\n\n",
        "source_code_len": 137,
        "target_code": "        \"\"\"\n        evaluated_other = evaluate_input(other)\n        evaluated_third = evaluate_input(third)\n        return FVal(self.num.fma(evaluated_other, evaluated_third))\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -128,5 +128,5 @@\n         \"\"\"\n-        other = evaluate_input(other)\n-        third = evaluate_input(third)\n-        return FVal(self.num.fma(other, third))\n+        evaluated_other = evaluate_input(other)\n+        evaluated_third = evaluate_input(third)\n+        return FVal(self.num.fma(evaluated_other, evaluated_third))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        other = evaluate_input(other)\n        third = evaluate_input(third)\n        return FVal(self.num.fma(other, third))\n\n",
        "target_code_with_indent": "\n        evaluated_other = evaluate_input(other)\n        evaluated_third = evaluate_input(third)\n        return FVal(self.num.fma(evaluated_other, evaluated_third))\n\n"
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:130:8 Incompatible variable type [9]: third is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "message": " third is declared to have type `Union[FVal, int]` but is used as type `Union[Decimal, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 130,
    "warning_line": "        third = evaluate_input(third)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        other = evaluate_input(other)\n        third = evaluate_input(third)\n        return FVal(self.num.fma(other, third))\n\n",
        "source_code_len": 137,
        "target_code": "        \"\"\"\n        evaluated_other = evaluate_input(other)\n        evaluated_third = evaluate_input(third)\n        return FVal(self.num.fma(evaluated_other, evaluated_third))\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -128,5 +128,5 @@\n         \"\"\"\n-        other = evaluate_input(other)\n-        third = evaluate_input(third)\n-        return FVal(self.num.fma(other, third))\n+        evaluated_other = evaluate_input(other)\n+        evaluated_third = evaluate_input(third)\n+        return FVal(self.num.fma(evaluated_other, evaluated_third))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        other = evaluate_input(other)\n        third = evaluate_input(third)\n        return FVal(self.num.fma(other, third))\n\n",
        "target_code_with_indent": "\n        evaluated_other = evaluate_input(other)\n        evaluated_third = evaluate_input(third)\n        return FVal(self.num.fma(evaluated_other, evaluated_third))\n\n"
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:143:55 Incompatible variable type [9]: max_diff is declared to have type `float` but is used as type `str`.",
    "message": " max_diff is declared to have type `float` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 143,
    "warning_line": "    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "6273eae3a012c5f15143ddf2193ec6b414b71db9",
    "filename": "rotkehlchen/fval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/fval.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/fval.py:144:8 Incompatible variable type [9]: max_diff is declared to have type `float` but is used as type `FVal`.",
    "message": " max_diff is declared to have type `float` but is used as type `FVal`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 144,
    "warning_line": "        max_diff = FVal(max_diff)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_len": 72,
        "target_code": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,3 +1,3 @@\n from decimal import Decimal, InvalidOperation\n-from typing import Union\n+from typing import Any, Union\n \n",
        "source_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from decimal import Decimal, InvalidOperation\nfrom typing import Any, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        max_diff = FVal(max_diff)\n\n",
        "source_code_len": 126,
        "target_code": "\n    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -142,4 +142,4 @@\n \n-    def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n-        max_diff = FVal(max_diff)\n+    def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n+        evaluated_max_diff = FVal(max_diff)\n \n",
        "source_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: float = \"1e-6\") -> bool:\n        <IND>max_diff = FVal(max_diff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_close(self, other: AcceptableFValInitInput, max_diff: str = \"1e-6\") -> bool:\n        <IND>evaluated_max_diff = FVal(max_diff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\ndef evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_len": 228,
        "target_code": "        diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\ndef evaluate_input(other: Any) -> Union[Decimal, int]:\n    \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_len": 217,
        "diff_format": "@@ -149,6 +149,6 @@\n         diff_num = abs(self.num - other.num)\n-        return diff_num <= max_diff.num\n+        return diff_num <= evaluated_max_diff.num\n \n \n-def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n+def evaluate_input(other: Any) -> Union[Decimal, int]:\n     \"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= max_diff.num\n\n\n<DED><DED>def evaluate_input(other: AcceptableFValOtherInput) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>diff_num = abs(self.num - other.num)\n        return diff_num <= evaluated_max_diff.num\n\n\n<DED><DED>def evaluate_input(other: Any) -> Union[Decimal, int]:\n    <IND>\"\"\"Evaluate 'other' and return its Decimal representation\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]