[
  {
    "project": "pdm-project/pdm",
    "commit": "fb8d073e3884b918eb49b965049fb32ec9ca3e6c",
    "filename": "pdm/models/candidates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pdm-project-pdm/pdm/models/candidates.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pdm/models/candidates.py:261:12 Incompatible return type [7]: Expected `str` but got `PySpecSet`.",
    "message": " Expected `str` but got `PySpecSet`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 261,
    "warning_line": "            return self._requires_python",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.link = link\n        self.hashes: Optional[Dict[str, str]] = None\n        self._requires_python: Optional[PySpecSet] = None\n\n        self.wheel: Optional[Wheel] = None\n        self.metadata = None\n\n    def __hash__(self):\n        return hash((self.name, self.version))\n",
        "source_code_len": 281,
        "target_code": "        self.link = link\n        self.hashes: dict[str, str] | None = None\n        self._requires_python: str | None = None\n\n        self.wheel: Wheel | None = None\n        self.metadata: Namespace | Metadata | None = None\n\n    def __hash__(self) -> int:\n        return hash((self.name, self.version))\n",
        "target_code_len": 302,
        "diff_format": "@@ -119,9 +118,9 @@\n         self.link = link\n-        self.hashes: Optional[Dict[str, str]] = None\n-        self._requires_python: Optional[PySpecSet] = None\n-\n-        self.wheel: Optional[Wheel] = None\n-        self.metadata = None\n-\n-    def __hash__(self):\n+        self.hashes: dict[str, str] | None = None\n+        self._requires_python: str | None = None\n+\n+        self.wheel: Wheel | None = None\n+        self.metadata: Namespace | Metadata | None = None\n+\n+    def __hash__(self) -> int:\n         return hash((self.name, self.version))\n",
        "source_code_with_indent": "        <DED>self.link = link\n        self.hashes: Optional[Dict[str, str]] = None\n        self._requires_python: Optional[PySpecSet] = None\n\n        self.wheel: Optional[Wheel] = None\n        self.metadata = None\n\n    <DED>def __hash__(self):\n        <IND>return hash((self.name, self.version))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self.link = link\n        self.hashes: dict[str, str] | None = None\n        self._requires_python: str | None = None\n\n        self.wheel: Wheel | None = None\n        self.metadata: Namespace | Metadata | None = None\n\n    <DED>def __hash__(self) -> int:\n        <IND>return hash((self.name, self.version))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pdm-project/pdm",
    "commit": "fb8d073e3884b918eb49b965049fb32ec9ca3e6c",
    "filename": "pdm/models/candidates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pdm-project-pdm/pdm/models/candidates.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pdm/models/candidates.py:281:8 Incompatible attribute type [8]: Attribute `_requires_python` declared in class `Candidate` has type `Optional[PySpecSet]` but is used as type `str`.",
    "message": " Attribute `_requires_python` declared in class `Candidate` has type `Optional[PySpecSet]` but is used as type `str`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 281,
    "warning_line": "        self._requires_python = value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.link = link\n        self.hashes: Optional[Dict[str, str]] = None\n        self._requires_python: Optional[PySpecSet] = None\n\n        self.wheel: Optional[Wheel] = None\n        self.metadata = None\n\n    def __hash__(self):\n        return hash((self.name, self.version))\n",
        "source_code_len": 281,
        "target_code": "        self.link = link\n        self.hashes: dict[str, str] | None = None\n        self._requires_python: str | None = None\n\n        self.wheel: Wheel | None = None\n        self.metadata: Namespace | Metadata | None = None\n\n    def __hash__(self) -> int:\n        return hash((self.name, self.version))\n",
        "target_code_len": 302,
        "diff_format": "@@ -119,9 +118,9 @@\n         self.link = link\n-        self.hashes: Optional[Dict[str, str]] = None\n-        self._requires_python: Optional[PySpecSet] = None\n-\n-        self.wheel: Optional[Wheel] = None\n-        self.metadata = None\n-\n-    def __hash__(self):\n+        self.hashes: dict[str, str] | None = None\n+        self._requires_python: str | None = None\n+\n+        self.wheel: Wheel | None = None\n+        self.metadata: Namespace | Metadata | None = None\n+\n+    def __hash__(self) -> int:\n         return hash((self.name, self.version))\n",
        "source_code_with_indent": "        <DED>self.link = link\n        self.hashes: Optional[Dict[str, str]] = None\n        self._requires_python: Optional[PySpecSet] = None\n\n        self.wheel: Optional[Wheel] = None\n        self.metadata = None\n\n    <DED>def __hash__(self):\n        <IND>return hash((self.name, self.version))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self.link = link\n        self.hashes: dict[str, str] | None = None\n        self._requires_python: str | None = None\n\n        self.wheel: Wheel | None = None\n        self.metadata: Namespace | Metadata | None = None\n\n    <DED>def __hash__(self) -> int:\n        <IND>return hash((self.name, self.version))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pdm-project/pdm",
    "commit": "fb8d073e3884b918eb49b965049fb32ec9ca3e6c",
    "filename": "pdm/models/environment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pdm-project-pdm/pdm/models/environment.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pdm/models/environment.py:333:8 Incompatible return type [7]: Expected `str` but got `typing.Optional[str]`.",
    "message": " Expected `str` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 333,
    "warning_line": "        return shutil.which(command, path=new_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def which(self, command: str) -> str:\n        \"\"\"Get the full path of the given executable against this environment.\"\"\"\n",
        "source_code_len": 125,
        "target_code": "\n    def which(self, command: str) -> str | None:\n        \"\"\"Get the full path of the given executable against this environment.\"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -320,3 +329,3 @@\n \n-    def which(self, command: str) -> str:\n+    def which(self, command: str) -> str | None:\n         \"\"\"Get the full path of the given executable against this environment.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def which(self, command: str) -> str:\n        <IND>\"\"\"Get the full path of the given executable against this environment.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def which(self, command: str) -> str | None:\n        <IND>\"\"\"Get the full path of the given executable against this environment.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pdm-project/pdm",
    "commit": "fb8d073e3884b918eb49b965049fb32ec9ca3e6c",
    "filename": "pdm/models/repositories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pdm-project-pdm/pdm/models/repositories.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "pdm/models/repositories.py:372:29 Incompatible parameter type [6]: Expected `Tuple[str, str]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[str, str]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 372,
    "warning_line": "            self.file_hashes[tuple(key.split())] = {",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        for key, hashes in lockfile.get(\"metadata\", {}).get(\"files\", {}).items():\n            self.file_hashes[tuple(key.split())] = {\n                item[\"file\"]: item[\"hash\"] for item in hashes\n",
        "source_code_len": 197,
        "target_code": "        for key, hashes in lockfile.get(\"metadata\", {}).get(\"files\", {}).items():\n            self.file_hashes[tuple(key.split(None, 1))] = {  # type: ignore\n                item[\"file\"]: item[\"hash\"] for item in hashes\n",
        "target_code_len": 220,
        "diff_format": "@@ -371,3 +376,3 @@\n         for key, hashes in lockfile.get(\"metadata\", {}).get(\"files\", {}).items():\n-            self.file_hashes[tuple(key.split())] = {\n+            self.file_hashes[tuple(key.split(None, 1))] = {  # type: ignore\n                 item[\"file\"]: item[\"hash\"] for item in hashes\n",
        "source_code_with_indent": "        <DED>for key, hashes in lockfile.get(\"metadata\", {}).get(\"files\", {}).items():\n            <IND>self.file_hashes[tuple(key.split())] = {\n                item[\"file\"]: item[\"hash\"] for item in hashes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>for key, hashes in lockfile.get(\"metadata\", {}).get(\"files\", {}).items():\n            <IND>self.file_hashes[tuple(key.split(None, 1))] = {  # type: ignore\n                item[\"file\"]: item[\"hash\"] for item in hashes\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pdm-project/pdm",
    "commit": "fb8d073e3884b918eb49b965049fb32ec9ca3e6c",
    "filename": "pdm/models/repositories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pdm-project-pdm/pdm/models/repositories.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pdm/models/repositories.py:401:8 Incompatible return type [7]: Expected `Tuple[List[Requirement], PySpecSet, str]` but got `Tuple[typing.Tuple[Requirement, ...], PySpecSet, str]`.",
    "message": " Expected `Tuple[List[Requirement], PySpecSet, str]` but got `Tuple[typing.Tuple[Requirement, ...], PySpecSet, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 401,
    "warning_line": "        return reqs, python, summary",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        reqs, python, summary = super().get_dependencies(candidate)\n        reqs = tuple(\n            req\n",
        "source_code_len": 106,
        "target_code": "        reqs, python, summary = super().get_dependencies(candidate)\n        reqs = [\n            req\n",
        "target_code_len": 101,
        "diff_format": "@@ -394,3 +399,3 @@\n         reqs, python, summary = super().get_dependencies(candidate)\n-        reqs = tuple(\n+        reqs = [\n             req\n",
        "source_code_with_indent": "        <IND>reqs, python, summary = super().get_dependencies(candidate)\n        reqs = tuple(\n            req\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>reqs, python, summary = super().get_dependencies(candidate)\n        reqs = [\n            req\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            or req.marker.evaluate(self.environment.marker_environment)\n        )\n        return reqs, python, summary\n",
        "source_code_len": 119,
        "target_code": "            or req.marker.evaluate(self.environment.marker_environment)\n        ]\n        return reqs, python, summary\n",
        "target_code_len": 119,
        "diff_format": "@@ -399,3 +404,3 @@\n             or req.marker.evaluate(self.environment.marker_environment)\n-        )\n+        ]\n         return reqs, python, summary\n",
        "source_code_with_indent": "            or req.marker.evaluate(self.environment.marker_environment)\n        )\n        return reqs, python, summary\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            or req.marker.evaluate(self.environment.marker_environment)\n        ]\n        return reqs, python, summary\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]