[
  {
    "project": "RaRe-Technologies/gensim",
    "commit": "0a88a08ccef016aa665c80a221b05a3975437fa7",
    "filename": "gensim/parsing/preprocessing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RaRe-Technologies-gensim/gensim/parsing/preprocessing.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gensim/parsing/preprocessing.py:39:0 Incompatible variable type [9]: STOPWORDS is declared to have type `str` but is used as type `frozenset[str]`.",
    "message": " STOPWORDS is declared to have type `str` but is used as type `frozenset[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 39,
    "warning_line": "STOPWORDS = frozenset(w for w in STOPWORDS.split() if w)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# improved list from Stone, Denis, Kwantes (2010)\nSTOPWORDS = \"\"\"\na about above across after afterwards again against all almost alone along already also although always am among amongst amoungst amount an and another any anyhow anyone anything anyway anywhere are around as at back be\nbecame because become becomes becoming been before beforehand behind being below beside besides between beyond bill both bottom but by call can\ncannot cant co computer con could couldnt cry de describe\ndetail did didn do does doesn doing don done down due during\neach eg eight either eleven else elsewhere empty enough etc even ever every everyone everything everywhere except few fifteen\nfify fill find fire first five for former formerly forty found four from front full further get give go\nhad has hasnt have he hence her here hereafter hereby herein hereupon hers herself him himself his how however hundred i ie\nif in inc indeed interest into is it its itself keep last latter latterly least less ltd\njust\nkg km\nmade make many may me meanwhile might mill mine more moreover most mostly move much must my myself name namely\nneither never nevertheless next nine no nobody none noone nor not nothing now nowhere of off\noften on once one only onto or other others otherwise our ours ourselves out over own part per\nperhaps please put rather re\nquite\nrather really regarding\nsame say see seem seemed seeming seems serious several she should show side since sincere six sixty so some somehow someone something sometime sometimes somewhere still such system take ten\nthan that the their them themselves then thence there thereafter thereby therefore therein thereupon these they thick thin third this those though three through throughout thru thus to together too top toward towards twelve twenty two un under\nuntil up unless upon us used using\nvarious very very via\nwas we well were what whatever when whence whenever where whereafter whereas whereby wherein whereupon wherever whether which while whither who whoever whole whom whose why will with within without would yet you\nyour yours yourself yourselves\n\"\"\"\nSTOPWORDS = frozenset(w for w in STOPWORDS.split() if w)\n\n\ndef remove_stopwords(s):\n    s = utils.to_unicode(s)\n    return \" \".join(w for w in s.split() if w not in STOPWORDS)\n\n",
        "source_code_len": 2277,
        "target_code": "\nSTOPWORDS = frozenset([\n    'all', 'six', 'just', 'less', 'being', 'indeed', 'over', 'move', 'anyway', 'four', 'not', 'own', 'through',\n    'using', 'fify', 'where', 'mill', 'only', 'find', 'before', 'one', 'whose', 'system', 'how', 'somewhere',\n    'much', 'thick', 'show', 'had', 'enough', 'should', 'to', 'must', 'whom', 'seeming', 'yourselves', 'under',\n    'ours', 'two', 'has', 'might', 'thereafter', 'latterly', 'do', 'them', 'his', 'around', 'than', 'get', 'very',\n    'de', 'none', 'cannot', 'every', 'un', 'they', 'front', 'during', 'thus', 'now', 'him', 'nor', 'name', 'regarding',\n    'several', 'hereafter', 'did', 'always', 'who', 'didn', 'whither', 'this', 'someone', 'either', 'each', 'become',\n    'thereupon', 'sometime', 'side', 'towards', 'therein', 'twelve', 'because', 'often', 'ten', 'our', 'doing', 'km',\n    'eg', 'some', 'back', 'used', 'up', 'go', 'namely', 'computer', 'are', 'further', 'beyond', 'ourselves', 'yet',\n    'out', 'even', 'will', 'what', 'still', 'for', 'bottom', 'mine', 'since', 'please', 'forty', 'per', 'its',\n    'everything', 'behind', 'does', 'various', 'above', 'between', 'it', 'neither', 'seemed', 'ever', 'across', 'she',\n    'somehow', 'be', 'we', 'full', 'never', 'sixty', 'however', 'here', 'otherwise', 'were', 'whereupon', 'nowhere',\n    'although', 'found', 'alone', 're', 'along', 'quite', 'fifteen', 'by', 'both', 'about', 'last', 'would',\n    'anything', 'via', 'many', 'could', 'thence', 'put', 'against', 'keep', 'etc', 'amount', 'became', 'ltd', 'hence',\n    'onto', 'or', 'con', 'among', 'already', 'co', 'afterwards', 'formerly', 'within', 'seems', 'into', 'others',\n    'while', 'whatever', 'except', 'down', 'hers', 'everyone', 'done', 'least', 'another', 'whoever', 'moreover',\n    'couldnt', 'throughout', 'anyhow', 'yourself', 'three', 'from', 'her', 'few', 'together', 'top', 'there', 'due',\n    'been', 'next', 'anyone', 'eleven', 'cry', 'call', 'therefore', 'interest', 'then', 'thru', 'themselves',\n    'hundred', 'really', 'sincere', 'empty', 'more', 'himself', 'elsewhere', 'mostly', 'on', 'fire', 'am', 'becoming',\n    'hereby', 'amongst', 'else', 'part', 'everywhere', 'too', 'kg', 'herself', 'former', 'those', 'he', 'me', 'myself',\n    'made', 'twenty', 'these', 'was', 'bill', 'cant', 'us', 'until', 'besides', 'nevertheless', 'below', 'anywhere',\n    'nine', 'can', 'whether', 'of', 'your', 'toward', 'my', 'say', 'something', 'and', 'whereafter', 'whenever',\n    'give', 'almost', 'wherever', 'is', 'describe', 'beforehand', 'herein', 'doesn', 'an', 'as', 'itself', 'at',\n    'have', 'in', 'seem', 'whence', 'ie', 'any', 'fill', 'again', 'hasnt', 'inc', 'thereby', 'thin', 'no', 'perhaps',\n    'latter', 'meanwhile', 'when', 'detail', 'same', 'wherein', 'beside', 'also', 'that', 'other', 'take', 'which',\n    'becomes', 'you', 'if', 'nobody', 'unless', 'whereas', 'see', 'though', 'may', 'after', 'upon', 'most', 'hereupon',\n    'eight', 'but', 'serious', 'nothing', 'such', 'why', 'off', 'a', 'don', 'whereby', 'third', 'i', 'whole', 'noone',\n    'sometimes', 'well', 'amoungst', 'yours', 'their', 'rather', 'without', 'so', 'five', 'the', 'first', 'with',\n    'make', 'once'\n])\n\n",
        "target_code_len": 3168,
        "diff_format": "@@ -13,33 +43,32 @@\n \n-# improved list from Stone, Denis, Kwantes (2010)\n-STOPWORDS = \"\"\"\n-a about above across after afterwards again against all almost alone along already also although always am among amongst amoungst amount an and another any anyhow anyone anything anyway anywhere are around as at back be\n-became because become becomes becoming been before beforehand behind being below beside besides between beyond bill both bottom but by call can\n-cannot cant co computer con could couldnt cry de describe\n-detail did didn do does doesn doing don done down due during\n-each eg eight either eleven else elsewhere empty enough etc even ever every everyone everything everywhere except few fifteen\n-fify fill find fire first five for former formerly forty found four from front full further get give go\n-had has hasnt have he hence her here hereafter hereby herein hereupon hers herself him himself his how however hundred i ie\n-if in inc indeed interest into is it its itself keep last latter latterly least less ltd\n-just\n-kg km\n-made make many may me meanwhile might mill mine more moreover most mostly move much must my myself name namely\n-neither never nevertheless next nine no nobody none noone nor not nothing now nowhere of off\n-often on once one only onto or other others otherwise our ours ourselves out over own part per\n-perhaps please put rather re\n-quite\n-rather really regarding\n-same say see seem seemed seeming seems serious several she should show side since sincere six sixty so some somehow someone something sometime sometimes somewhere still such system take ten\n-than that the their them themselves then thence there thereafter thereby therefore therein thereupon these they thick thin third this those though three through throughout thru thus to together too top toward towards twelve twenty two un under\n-until up unless upon us used using\n-various very very via\n-was we well were what whatever when whence whenever where whereafter whereas whereby wherein whereupon wherever whether which while whither who whoever whole whom whose why will with within without would yet you\n-your yours yourself yourselves\n-\"\"\"\n-STOPWORDS = frozenset(w for w in STOPWORDS.split() if w)\n-\n-\n-def remove_stopwords(s):\n-    s = utils.to_unicode(s)\n-    return \" \".join(w for w in s.split() if w not in STOPWORDS)\n+STOPWORDS = frozenset([\n+    'all', 'six', 'just', 'less', 'being', 'indeed', 'over', 'move', 'anyway', 'four', 'not', 'own', 'through',\n+    'using', 'fify', 'where', 'mill', 'only', 'find', 'before', 'one', 'whose', 'system', 'how', 'somewhere',\n+    'much', 'thick', 'show', 'had', 'enough', 'should', 'to', 'must', 'whom', 'seeming', 'yourselves', 'under',\n+    'ours', 'two', 'has', 'might', 'thereafter', 'latterly', 'do', 'them', 'his', 'around', 'than', 'get', 'very',\n+    'de', 'none', 'cannot', 'every', 'un', 'they', 'front', 'during', 'thus', 'now', 'him', 'nor', 'name', 'regarding',\n+    'several', 'hereafter', 'did', 'always', 'who', 'didn', 'whither', 'this', 'someone', 'either', 'each', 'become',\n+    'thereupon', 'sometime', 'side', 'towards', 'therein', 'twelve', 'because', 'often', 'ten', 'our', 'doing', 'km',\n+    'eg', 'some', 'back', 'used', 'up', 'go', 'namely', 'computer', 'are', 'further', 'beyond', 'ourselves', 'yet',\n+    'out', 'even', 'will', 'what', 'still', 'for', 'bottom', 'mine', 'since', 'please', 'forty', 'per', 'its',\n+    'everything', 'behind', 'does', 'various', 'above', 'between', 'it', 'neither', 'seemed', 'ever', 'across', 'she',\n+    'somehow', 'be', 'we', 'full', 'never', 'sixty', 'however', 'here', 'otherwise', 'were', 'whereupon', 'nowhere',\n+    'although', 'found', 'alone', 're', 'along', 'quite', 'fifteen', 'by', 'both', 'about', 'last', 'would',\n+    'anything', 'via', 'many', 'could', 'thence', 'put', 'against', 'keep', 'etc', 'amount', 'became', 'ltd', 'hence',\n+    'onto', 'or', 'con', 'among', 'already', 'co', 'afterwards', 'formerly', 'within', 'seems', 'into', 'others',\n+    'while', 'whatever', 'except', 'down', 'hers', 'everyone', 'done', 'least', 'another', 'whoever', 'moreover',\n+    'couldnt', 'throughout', 'anyhow', 'yourself', 'three', 'from', 'her', 'few', 'together', 'top', 'there', 'due',\n+    'been', 'next', 'anyone', 'eleven', 'cry', 'call', 'therefore', 'interest', 'then', 'thru', 'themselves',\n+    'hundred', 'really', 'sincere', 'empty', 'more', 'himself', 'elsewhere', 'mostly', 'on', 'fire', 'am', 'becoming',\n+    'hereby', 'amongst', 'else', 'part', 'everywhere', 'too', 'kg', 'herself', 'former', 'those', 'he', 'me', 'myself',\n+    'made', 'twenty', 'these', 'was', 'bill', 'cant', 'us', 'until', 'besides', 'nevertheless', 'below', 'anywhere',\n+    'nine', 'can', 'whether', 'of', 'your', 'toward', 'my', 'say', 'something', 'and', 'whereafter', 'whenever',\n+    'give', 'almost', 'wherever', 'is', 'describe', 'beforehand', 'herein', 'doesn', 'an', 'as', 'itself', 'at',\n+    'have', 'in', 'seem', 'whence', 'ie', 'any', 'fill', 'again', 'hasnt', 'inc', 'thereby', 'thin', 'no', 'perhaps',\n+    'latter', 'meanwhile', 'when', 'detail', 'same', 'wherein', 'beside', 'also', 'that', 'other', 'take', 'which',\n+    'becomes', 'you', 'if', 'nobody', 'unless', 'whereas', 'see', 'though', 'may', 'after', 'upon', 'most', 'hereupon',\n+    'eight', 'but', 'serious', 'nothing', 'such', 'why', 'off', 'a', 'don', 'whereby', 'third', 'i', 'whole', 'noone',\n+    'sometimes', 'well', 'amoungst', 'yours', 'their', 'rather', 'without', 'so', 'five', 'the', 'first', 'with',\n+    'make', 'once'\n+])\n \n",
        "source_code_with_indent": "\n# improved list from Stone, Denis, Kwantes (2010)\nSTOPWORDS = \"\"\"\na about above across after afterwards again against all almost alone along already also although always am among amongst amoungst amount an and another any anyhow anyone anything anyway anywhere are around as at back be\nbecame because become becomes becoming been before beforehand behind being below beside besides between beyond bill both bottom but by call can\ncannot cant co computer con could couldnt cry de describe\ndetail did didn do does doesn doing don done down due during\neach eg eight either eleven else elsewhere empty enough etc even ever every everyone everything everywhere except few fifteen\nfify fill find fire first five for former formerly forty found four from front full further get give go\nhad has hasnt have he hence her here hereafter hereby herein hereupon hers herself him himself his how however hundred i ie\nif in inc indeed interest into is it its itself keep last latter latterly least less ltd\njust\nkg km\nmade make many may me meanwhile might mill mine more moreover most mostly move much must my myself name namely\nneither never nevertheless next nine no nobody none noone nor not nothing now nowhere of off\noften on once one only onto or other others otherwise our ours ourselves out over own part per\nperhaps please put rather re\nquite\nrather really regarding\nsame say see seem seemed seeming seems serious several she should show side since sincere six sixty so some somehow someone something sometime sometimes somewhere still such system take ten\nthan that the their them themselves then thence there thereafter thereby therefore therein thereupon these they thick thin third this those though three through throughout thru thus to together too top toward towards twelve twenty two un under\nuntil up unless upon us used using\nvarious very very via\nwas we well were what whatever when whence whenever where whereafter whereas whereby wherein whereupon wherever whether which while whither who whoever whole whom whose why will with within without would yet you\nyour yours yourself yourselves\n\"\"\"\nSTOPWORDS = frozenset(w for w in STOPWORDS.split() if w)\n\n\ndef remove_stopwords(s):\n    <IND>s = utils.to_unicode(s)\n    return \" \".join(w for w in s.split() if w not in STOPWORDS)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSTOPWORDS = frozenset([\n    'all', 'six', 'just', 'less', 'being', 'indeed', 'over', 'move', 'anyway', 'four', 'not', 'own', 'through',\n    'using', 'fify', 'where', 'mill', 'only', 'find', 'before', 'one', 'whose', 'system', 'how', 'somewhere',\n    'much', 'thick', 'show', 'had', 'enough', 'should', 'to', 'must', 'whom', 'seeming', 'yourselves', 'under',\n    'ours', 'two', 'has', 'might', 'thereafter', 'latterly', 'do', 'them', 'his', 'around', 'than', 'get', 'very',\n    'de', 'none', 'cannot', 'every', 'un', 'they', 'front', 'during', 'thus', 'now', 'him', 'nor', 'name', 'regarding',\n    'several', 'hereafter', 'did', 'always', 'who', 'didn', 'whither', 'this', 'someone', 'either', 'each', 'become',\n    'thereupon', 'sometime', 'side', 'towards', 'therein', 'twelve', 'because', 'often', 'ten', 'our', 'doing', 'km',\n    'eg', 'some', 'back', 'used', 'up', 'go', 'namely', 'computer', 'are', 'further', 'beyond', 'ourselves', 'yet',\n    'out', 'even', 'will', 'what', 'still', 'for', 'bottom', 'mine', 'since', 'please', 'forty', 'per', 'its',\n    'everything', 'behind', 'does', 'various', 'above', 'between', 'it', 'neither', 'seemed', 'ever', 'across', 'she',\n    'somehow', 'be', 'we', 'full', 'never', 'sixty', 'however', 'here', 'otherwise', 'were', 'whereupon', 'nowhere',\n    'although', 'found', 'alone', 're', 'along', 'quite', 'fifteen', 'by', 'both', 'about', 'last', 'would',\n    'anything', 'via', 'many', 'could', 'thence', 'put', 'against', 'keep', 'etc', 'amount', 'became', 'ltd', 'hence',\n    'onto', 'or', 'con', 'among', 'already', 'co', 'afterwards', 'formerly', 'within', 'seems', 'into', 'others',\n    'while', 'whatever', 'except', 'down', 'hers', 'everyone', 'done', 'least', 'another', 'whoever', 'moreover',\n    'couldnt', 'throughout', 'anyhow', 'yourself', 'three', 'from', 'her', 'few', 'together', 'top', 'there', 'due',\n    'been', 'next', 'anyone', 'eleven', 'cry', 'call', 'therefore', 'interest', 'then', 'thru', 'themselves',\n    'hundred', 'really', 'sincere', 'empty', 'more', 'himself', 'elsewhere', 'mostly', 'on', 'fire', 'am', 'becoming',\n    'hereby', 'amongst', 'else', 'part', 'everywhere', 'too', 'kg', 'herself', 'former', 'those', 'he', 'me', 'myself',\n    'made', 'twenty', 'these', 'was', 'bill', 'cant', 'us', 'until', 'besides', 'nevertheless', 'below', 'anywhere',\n    'nine', 'can', 'whether', 'of', 'your', 'toward', 'my', 'say', 'something', 'and', 'whereafter', 'whenever',\n    'give', 'almost', 'wherever', 'is', 'describe', 'beforehand', 'herein', 'doesn', 'an', 'as', 'itself', 'at',\n    'have', 'in', 'seem', 'whence', 'ie', 'any', 'fill', 'again', 'hasnt', 'inc', 'thereby', 'thin', 'no', 'perhaps',\n    'latter', 'meanwhile', 'when', 'detail', 'same', 'wherein', 'beside', 'also', 'that', 'other', 'take', 'which',\n    'becomes', 'you', 'if', 'nobody', 'unless', 'whereas', 'see', 'though', 'may', 'after', 'upon', 'most', 'hereupon',\n    'eight', 'but', 'serious', 'nothing', 'such', 'why', 'off', 'a', 'don', 'whereby', 'third', 'i', 'whole', 'noone',\n    'sometimes', 'well', 'amoungst', 'yours', 'their', 'rather', 'without', 'so', 'five', 'the', 'first', 'with',\n    'make', 'once'\n])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "RE_PUNCT = re.compile(r'([%s])+' % re.escape(string.punctuation), re.UNICODE)\n\n\ndef strip_punctuation(s):\n    s = utils.to_unicode(s)\n    return RE_PUNCT.sub(\" \", s)\n\n\n# unicode.translate cannot delete characters like str can\nstrip_punctuation2 = strip_punctuation\n# def strip_punctuation2(s):\n#     s = utils.to_unicode(s)\n#     return s.translate(None, string.punctuation)\n\n\nRE_TAGS = re.compile(r\"<([^>]+)>\", re.UNICODE)\n\n\ndef strip_tags(s):\n    s = utils.to_unicode(s)\n    return RE_TAGS.sub(\"\", s)\n\n\ndef strip_short(s, minsize=3):\n    s = utils.to_unicode(s)\n    return \" \".join(e for e in s.split() if len(e) >= minsize)\n\n\nRE_NUMERIC = re.compile(r\"[0-9]+\", re.UNICODE)\n\n\ndef strip_numeric(s):\n    s = utils.to_unicode(s)\n    return RE_NUMERIC.sub(\"\", s)\n\n\nRE_NONALPHA = re.compile(r\"\\W\", re.UNICODE)\n\n\ndef strip_non_alphanum(s):\n    s = utils.to_unicode(s)\n    return RE_NONALPHA.sub(\" \", s)\n\n\nRE_WHITESPACE = re.compile(r\"(\\s)+\", re.UNICODE)\n\n\ndef strip_multiple_whitespaces(s):\n    s = utils.to_unicode(s)\n    return RE_WHITESPACE.sub(\" \", s)\n\n\nRE_AL_NUM = re.compile(r\"([a-z]+)([0-9]+)\", flags=re.UNICODE)\nRE_NUM_AL = re.compile(r\"([0-9]+)([a-z]+)\", flags=re.UNICODE)\n\n",
        "source_code_len": 1179,
        "target_code": "RE_PUNCT = re.compile(r'([%s])+' % re.escape(string.punctuation), re.UNICODE)\nRE_TAGS = re.compile(r\"<([^>]+)>\", re.UNICODE)\nRE_NUMERIC = re.compile(r\"[0-9]+\", re.UNICODE)\nRE_NONALPHA = re.compile(r\"\\W\", re.UNICODE)\nRE_AL_NUM = re.compile(r\"([a-z]+)([0-9]+)\", flags=re.UNICODE)\nRE_NUM_AL = re.compile(r\"([0-9]+)([a-z]+)\", flags=re.UNICODE)\nRE_WHITESPACE = re.compile(r\"(\\s)+\", re.UNICODE)\n\n\ndef remove_stopwords(s):\n    \"\"\"Remove :const:`~gensim.parsing.preprocessing.STOPWORDS` from `s`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without :const:`~gensim.parsing.preprocessing.STOPWORDS`.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import remove_stopwords\n    >>> remove_stopwords(\"Better late than never, but better never late.\")\n    u'Better late never, better late.'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return \" \".join(w for w in s.split() if w not in STOPWORDS)\n\n\ndef strip_punctuation(s):\n    \"\"\"Replace punctuation characters with spaces in `s` using :const:`~gensim.parsing.preprocessing.RE_PUNCT`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without punctuation characters.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_punctuation\n    >>> strip_punctuation(\"A semicolon is a stronger break than a comma, but not as much as a full stop!\")\n    u'A semicolon is a stronger break than a comma  but not as much as a full stop '\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_PUNCT.sub(\" \", s)\n\n\nstrip_punctuation2 = strip_punctuation\n\n\ndef strip_tags(s):\n    \"\"\"Remove tags from `s` using :const:`~gensim.parsing.preprocessing.RE_TAGS`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without tags.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_tags\n    >>> strip_tags(\"<i>Hello</i> <b>World</b>!\")\n    u'Hello World!'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_TAGS.sub(\"\", s)\n\n\ndef strip_short(s, minsize=3):\n    \"\"\"Remove words with length lesser than `minsize` from `s`.\n\n    Parameters\n    ----------\n    s : str\n    minsize : int, optional\n\n    Returns\n    -------\n    str\n        Unicode string without short words.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_short\n    >>> strip_short(\"salut les amis du 59\")\n    u'salut les amis'\n    >>>\n    >>> strip_short(\"one two three four five six seven eight nine ten\", minsize=5)\n    u'three seven eight'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return \" \".join(e for e in s.split() if len(e) >= minsize)\n\n\ndef strip_numeric(s):\n    \"\"\"Remove digits from `s` using :const:`~gensim.parsing.preprocessing.RE_NUMERIC`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode  string without digits.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_numeric\n    >>> strip_numeric(\"0text24gensim365test\")\n    u'textgensimtest'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_NUMERIC.sub(\"\", s)\n\n\ndef strip_non_alphanum(s):\n    \"\"\"Remove non-alphabetic characters from `s` using :const:`~gensim.parsing.preprocessing.RE_NONALPHA`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string with alphabetic characters only.\n\n    Notes\n    -----\n    Word characters - alphanumeric & underscore.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_non_alphanum\n    >>> strip_non_alphanum(\"if-you#can%read$this&then@this#method^works\")\n    u'if you can read this then this method works'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_NONALPHA.sub(\" \", s)\n\n\ndef strip_multiple_whitespaces(s):\n    r\"\"\"Remove repeating whitespace characters (spaces, tabs, line breaks) from `s`\n    and turns tabs & line breaks into spaces using :const:`~gensim.parsing.preprocessing.RE_WHITESPACE`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without repeating in a row whitespace characters.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_multiple_whitespaces\n    >>> strip_multiple_whitespaces(\"salut\" + '\\r' + \" les\" + '\\n' + \"         loulous!\")\n    u'salut les loulous!'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_WHITESPACE.sub(\" \", s)\n\n",
        "target_code_len": 4428,
        "diff_format": "@@ -47,55 +76,181 @@\n RE_PUNCT = re.compile(r'([%s])+' % re.escape(string.punctuation), re.UNICODE)\n-\n-\n-def strip_punctuation(s):\n-    s = utils.to_unicode(s)\n-    return RE_PUNCT.sub(\" \", s)\n-\n-\n-# unicode.translate cannot delete characters like str can\n-strip_punctuation2 = strip_punctuation\n-# def strip_punctuation2(s):\n-#     s = utils.to_unicode(s)\n-#     return s.translate(None, string.punctuation)\n-\n-\n RE_TAGS = re.compile(r\"<([^>]+)>\", re.UNICODE)\n-\n-\n-def strip_tags(s):\n-    s = utils.to_unicode(s)\n-    return RE_TAGS.sub(\"\", s)\n-\n-\n-def strip_short(s, minsize=3):\n-    s = utils.to_unicode(s)\n-    return \" \".join(e for e in s.split() if len(e) >= minsize)\n-\n-\n RE_NUMERIC = re.compile(r\"[0-9]+\", re.UNICODE)\n-\n-\n-def strip_numeric(s):\n-    s = utils.to_unicode(s)\n-    return RE_NUMERIC.sub(\"\", s)\n-\n-\n RE_NONALPHA = re.compile(r\"\\W\", re.UNICODE)\n-\n-\n-def strip_non_alphanum(s):\n-    s = utils.to_unicode(s)\n-    return RE_NONALPHA.sub(\" \", s)\n-\n-\n-RE_WHITESPACE = re.compile(r\"(\\s)+\", re.UNICODE)\n-\n-\n-def strip_multiple_whitespaces(s):\n-    s = utils.to_unicode(s)\n-    return RE_WHITESPACE.sub(\" \", s)\n-\n-\n RE_AL_NUM = re.compile(r\"([a-z]+)([0-9]+)\", flags=re.UNICODE)\n RE_NUM_AL = re.compile(r\"([0-9]+)([a-z]+)\", flags=re.UNICODE)\n+RE_WHITESPACE = re.compile(r\"(\\s)+\", re.UNICODE)\n+\n+\n+def remove_stopwords(s):\n+    \"\"\"Remove :const:`~gensim.parsing.preprocessing.STOPWORDS` from `s`.\n+\n+    Parameters\n+    ----------\n+    s : str\n+\n+    Returns\n+    -------\n+    str\n+        Unicode string without :const:`~gensim.parsing.preprocessing.STOPWORDS`.\n+\n+    Examples\n+    --------\n+    >>> from gensim.parsing.preprocessing import remove_stopwords\n+    >>> remove_stopwords(\"Better late than never, but better never late.\")\n+    u'Better late never, better late.'\n+\n+    \"\"\"\n+    s = utils.to_unicode(s)\n+    return \" \".join(w for w in s.split() if w not in STOPWORDS)\n+\n+\n+def strip_punctuation(s):\n+    \"\"\"Replace punctuation characters with spaces in `s` using :const:`~gensim.parsing.preprocessing.RE_PUNCT`.\n+\n+    Parameters\n+    ----------\n+    s : str\n+\n+    Returns\n+    -------\n+    str\n+        Unicode string without punctuation characters.\n+\n+    Examples\n+    --------\n+    >>> from gensim.parsing.preprocessing import strip_punctuation\n+    >>> strip_punctuation(\"A semicolon is a stronger break than a comma, but not as much as a full stop!\")\n+    u'A semicolon is a stronger break than a comma  but not as much as a full stop '\n+\n+    \"\"\"\n+    s = utils.to_unicode(s)\n+    return RE_PUNCT.sub(\" \", s)\n+\n+\n+strip_punctuation2 = strip_punctuation\n+\n+\n+def strip_tags(s):\n+    \"\"\"Remove tags from `s` using :const:`~gensim.parsing.preprocessing.RE_TAGS`.\n+\n+    Parameters\n+    ----------\n+    s : str\n+\n+    Returns\n+    -------\n+    str\n+        Unicode string without tags.\n+\n+    Examples\n+    --------\n+    >>> from gensim.parsing.preprocessing import strip_tags\n+    >>> strip_tags(\"<i>Hello</i> <b>World</b>!\")\n+    u'Hello World!'\n+\n+    \"\"\"\n+    s = utils.to_unicode(s)\n+    return RE_TAGS.sub(\"\", s)\n+\n+\n+def strip_short(s, minsize=3):\n+    \"\"\"Remove words with length lesser than `minsize` from `s`.\n+\n+    Parameters\n+    ----------\n+    s : str\n+    minsize : int, optional\n+\n+    Returns\n+    -------\n+    str\n+        Unicode string without short words.\n+\n+    Examples\n+    --------\n+    >>> from gensim.parsing.preprocessing import strip_short\n+    >>> strip_short(\"salut les amis du 59\")\n+    u'salut les amis'\n+    >>>\n+    >>> strip_short(\"one two three four five six seven eight nine ten\", minsize=5)\n+    u'three seven eight'\n+\n+    \"\"\"\n+    s = utils.to_unicode(s)\n+    return \" \".join(e for e in s.split() if len(e) >= minsize)\n+\n+\n+def strip_numeric(s):\n+    \"\"\"Remove digits from `s` using :const:`~gensim.parsing.preprocessing.RE_NUMERIC`.\n+\n+    Parameters\n+    ----------\n+    s : str\n+\n+    Returns\n+    -------\n+    str\n+        Unicode  string without digits.\n+\n+    Examples\n+    --------\n+    >>> from gensim.parsing.preprocessing import strip_numeric\n+    >>> strip_numeric(\"0text24gensim365test\")\n+    u'textgensimtest'\n+\n+    \"\"\"\n+    s = utils.to_unicode(s)\n+    return RE_NUMERIC.sub(\"\", s)\n+\n+\n+def strip_non_alphanum(s):\n+    \"\"\"Remove non-alphabetic characters from `s` using :const:`~gensim.parsing.preprocessing.RE_NONALPHA`.\n+\n+    Parameters\n+    ----------\n+    s : str\n+\n+    Returns\n+    -------\n+    str\n+        Unicode string with alphabetic characters only.\n+\n+    Notes\n+    -----\n+    Word characters - alphanumeric & underscore.\n+\n+    Examples\n+    --------\n+    >>> from gensim.parsing.preprocessing import strip_non_alphanum\n+    >>> strip_non_alphanum(\"if-you#can%read$this&then@this#method^works\")\n+    u'if you can read this then this method works'\n+\n+    \"\"\"\n+    s = utils.to_unicode(s)\n+    return RE_NONALPHA.sub(\" \", s)\n+\n+\n+def strip_multiple_whitespaces(s):\n+    r\"\"\"Remove repeating whitespace characters (spaces, tabs, line breaks) from `s`\n+    and turns tabs & line breaks into spaces using :const:`~gensim.parsing.preprocessing.RE_WHITESPACE`.\n+\n+    Parameters\n+    ----------\n+    s : str\n+\n+    Returns\n+    -------\n+    str\n+        Unicode string without repeating in a row whitespace characters.\n+\n+    Examples\n+    --------\n+    >>> from gensim.parsing.preprocessing import strip_multiple_whitespaces\n+    >>> strip_multiple_whitespaces(\"salut\" + '\\r' + \" les\" + '\\n' + \"         loulous!\")\n+    u'salut les loulous!'\n+\n+    \"\"\"\n+    s = utils.to_unicode(s)\n+    return RE_WHITESPACE.sub(\" \", s)\n \n",
        "source_code_with_indent": "<DED>RE_PUNCT = re.compile(r'([%s])+' % re.escape(string.punctuation), re.UNICODE)\n\n\ndef strip_punctuation(s):\n    <IND>s = utils.to_unicode(s)\n    return RE_PUNCT.sub(\" \", s)\n\n\n# unicode.translate cannot delete characters like str can\n<DED>strip_punctuation2 = strip_punctuation\n# def strip_punctuation2(s):\n#     s = utils.to_unicode(s)\n#     return s.translate(None, string.punctuation)\n\n\nRE_TAGS = re.compile(r\"<([^>]+)>\", re.UNICODE)\n\n\ndef strip_tags(s):\n    <IND>s = utils.to_unicode(s)\n    return RE_TAGS.sub(\"\", s)\n\n\n<DED>def strip_short(s, minsize=3):\n    <IND>s = utils.to_unicode(s)\n    return \" \".join(e for e in s.split() if len(e) >= minsize)\n\n\n<DED>RE_NUMERIC = re.compile(r\"[0-9]+\", re.UNICODE)\n\n\ndef strip_numeric(s):\n    <IND>s = utils.to_unicode(s)\n    return RE_NUMERIC.sub(\"\", s)\n\n\n<DED>RE_NONALPHA = re.compile(r\"\\W\", re.UNICODE)\n\n\ndef strip_non_alphanum(s):\n    <IND>s = utils.to_unicode(s)\n    return RE_NONALPHA.sub(\" \", s)\n\n\n<DED>RE_WHITESPACE = re.compile(r\"(\\s)+\", re.UNICODE)\n\n\ndef strip_multiple_whitespaces(s):\n    <IND>s = utils.to_unicode(s)\n    return RE_WHITESPACE.sub(\" \", s)\n\n\n<DED>RE_AL_NUM = re.compile(r\"([a-z]+)([0-9]+)\", flags=re.UNICODE)\nRE_NUM_AL = re.compile(r\"([0-9]+)([a-z]+)\", flags=re.UNICODE)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "RE_PUNCT = re.compile(r'([%s])+' % re.escape(string.punctuation), re.UNICODE)\nRE_TAGS = re.compile(r\"<([^>]+)>\", re.UNICODE)\nRE_NUMERIC = re.compile(r\"[0-9]+\", re.UNICODE)\nRE_NONALPHA = re.compile(r\"\\W\", re.UNICODE)\nRE_AL_NUM = re.compile(r\"([a-z]+)([0-9]+)\", flags=re.UNICODE)\nRE_NUM_AL = re.compile(r\"([0-9]+)([a-z]+)\", flags=re.UNICODE)\nRE_WHITESPACE = re.compile(r\"(\\s)+\", re.UNICODE)\n\n\ndef remove_stopwords(s):\n    <IND>\"\"\"Remove :const:`~gensim.parsing.preprocessing.STOPWORDS` from `s`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without :const:`~gensim.parsing.preprocessing.STOPWORDS`.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import remove_stopwords\n    >>> remove_stopwords(\"Better late than never, but better never late.\")\n    u'Better late never, better late.'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return \" \".join(w for w in s.split() if w not in STOPWORDS)\n\n\n<DED>def strip_punctuation(s):\n    <IND>\"\"\"Replace punctuation characters with spaces in `s` using :const:`~gensim.parsing.preprocessing.RE_PUNCT`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without punctuation characters.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_punctuation\n    >>> strip_punctuation(\"A semicolon is a stronger break than a comma, but not as much as a full stop!\")\n    u'A semicolon is a stronger break than a comma  but not as much as a full stop '\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_PUNCT.sub(\" \", s)\n\n\n<DED>strip_punctuation2 = strip_punctuation\n\n\ndef strip_tags(s):\n    <IND>\"\"\"Remove tags from `s` using :const:`~gensim.parsing.preprocessing.RE_TAGS`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without tags.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_tags\n    >>> strip_tags(\"<i>Hello</i> <b>World</b>!\")\n    u'Hello World!'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_TAGS.sub(\"\", s)\n\n\n<DED>def strip_short(s, minsize=3):\n    <IND>\"\"\"Remove words with length lesser than `minsize` from `s`.\n\n    Parameters\n    ----------\n    s : str\n    minsize : int, optional\n\n    Returns\n    -------\n    str\n        Unicode string without short words.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_short\n    >>> strip_short(\"salut les amis du 59\")\n    u'salut les amis'\n    >>>\n    >>> strip_short(\"one two three four five six seven eight nine ten\", minsize=5)\n    u'three seven eight'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return \" \".join(e for e in s.split() if len(e) >= minsize)\n\n\n<DED>def strip_numeric(s):\n    <IND>\"\"\"Remove digits from `s` using :const:`~gensim.parsing.preprocessing.RE_NUMERIC`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode  string without digits.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_numeric\n    >>> strip_numeric(\"0text24gensim365test\")\n    u'textgensimtest'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_NUMERIC.sub(\"\", s)\n\n\n<DED>def strip_non_alphanum(s):\n    <IND>\"\"\"Remove non-alphabetic characters from `s` using :const:`~gensim.parsing.preprocessing.RE_NONALPHA`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string with alphabetic characters only.\n\n    Notes\n    -----\n    Word characters - alphanumeric & underscore.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_non_alphanum\n    >>> strip_non_alphanum(\"if-you#can%read$this&then@this#method^works\")\n    u'if you can read this then this method works'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_NONALPHA.sub(\" \", s)\n\n\n<DED>def strip_multiple_whitespaces(s):\n    <IND>r\"\"\"Remove repeating whitespace characters (spaces, tabs, line breaks) from `s`\n    and turns tabs & line breaks into spaces using :const:`~gensim.parsing.preprocessing.RE_WHITESPACE`.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        Unicode string without repeating in a row whitespace characters.\n\n    Examples\n    --------\n    >>> from gensim.parsing.preprocessing import strip_multiple_whitespaces\n    >>> strip_multiple_whitespaces(\"salut\" + '\\r' + \" les\" + '\\n' + \"         loulous!\")\n    u'salut les loulous!'\n\n    \"\"\"\n    s = utils.to_unicode(s)\n    return RE_WHITESPACE.sub(\" \", s)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]