[
  {
    "project": "raiden-network/raiden",
    "commit": "932e65696d4c98c89b11feabdb08c060d9dd61cd",
    "filename": "raiden/network/proxies/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/network/proxies/utils.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/network/proxies/utils.py:58:4 Incompatible return type [7]: Expected `typing.Optional[typing.Tuple[Variable[_T_co](covariant)]]` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Optional[typing.Tuple[Variable[_T_co](covariant)]]` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 58,
    "warning_line": "    return participant1, participant2",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    from raiden.network.proxies.proxy_manager import ProxyManager\n    from raiden.network.proxies.token_network import TokenNetwork\n\n\ndef get_channel_participants_from_open_event(\n    token_network: \"TokenNetwork\",\n    channel_identifier: ChannelID,\n    contract_manager: ContractManager,\n    from_block: BlockNumber,\n) -> Optional[Tuple[Address, Address]]:\n    # For this check it is perfectly fine to use a `latest` block number.\n    # Because the filter is looking just for the OPENED event.\n    to_block = BLOCK_ID_LATEST\n\n    filter_args = get_filter_args_for_specific_event_from_channel(\n        token_network_address=token_network.address,\n        channel_identifier=channel_identifier,\n        event_name=ChannelEvent.OPENED,\n        contract_manager=contract_manager,\n        from_block=from_block,\n        to_block=to_block,\n    )\n\n    events = token_network.proxy.web3.eth.getLogs(filter_args)\n\n    # There must be only one channel open event per channel identifier\n    if len(events) != 1:\n        return None\n\n    event = decode_event(contract_manager.get_contract_abi(CONTRACT_TOKEN_NETWORK), events[0])\n    participant1 = Address(decode_hex(event[\"args\"][\"participant1\"]))\n    participant2 = Address(decode_hex(event[\"args\"][\"participant2\"]))\n\n    return participant1, participant2\n\n",
        "source_code_len": 1298,
        "target_code": "    from raiden.network.proxies.proxy_manager import ProxyManager\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -25,35 +10,2 @@\n     from raiden.network.proxies.proxy_manager import ProxyManager\n-    from raiden.network.proxies.token_network import TokenNetwork\n-\n-\n-def get_channel_participants_from_open_event(\n-    token_network: \"TokenNetwork\",\n-    channel_identifier: ChannelID,\n-    contract_manager: ContractManager,\n-    from_block: BlockNumber,\n-) -> Optional[Tuple[Address, Address]]:\n-    # For this check it is perfectly fine to use a `latest` block number.\n-    # Because the filter is looking just for the OPENED event.\n-    to_block = BLOCK_ID_LATEST\n-\n-    filter_args = get_filter_args_for_specific_event_from_channel(\n-        token_network_address=token_network.address,\n-        channel_identifier=channel_identifier,\n-        event_name=ChannelEvent.OPENED,\n-        contract_manager=contract_manager,\n-        from_block=from_block,\n-        to_block=to_block,\n-    )\n-\n-    events = token_network.proxy.web3.eth.getLogs(filter_args)\n-\n-    # There must be only one channel open event per channel identifier\n-    if len(events) != 1:\n-        return None\n-\n-    event = decode_event(contract_manager.get_contract_abi(CONTRACT_TOKEN_NETWORK), events[0])\n-    participant1 = Address(decode_hex(event[\"args\"][\"participant1\"]))\n-    participant2 = Address(decode_hex(event[\"args\"][\"participant2\"]))\n-\n-    return participant1, participant2\n \n",
        "source_code_with_indent": "    <IND>from raiden.network.proxies.proxy_manager import ProxyManager\n    from raiden.network.proxies.token_network import TokenNetwork\n\n\n<DED>def get_channel_participants_from_open_event(\n    token_network: \"TokenNetwork\",\n    channel_identifier: ChannelID,\n    contract_manager: ContractManager,\n    from_block: BlockNumber,\n) -> Optional[Tuple[Address, Address]]:\n    # For this check it is perfectly fine to use a `latest` block number.\n    # Because the filter is looking just for the OPENED event.\n    <IND>to_block = BLOCK_ID_LATEST\n\n    filter_args = get_filter_args_for_specific_event_from_channel(\n        token_network_address=token_network.address,\n        channel_identifier=channel_identifier,\n        event_name=ChannelEvent.OPENED,\n        contract_manager=contract_manager,\n        from_block=from_block,\n        to_block=to_block,\n    )\n\n    events = token_network.proxy.web3.eth.getLogs(filter_args)\n\n    # There must be only one channel open event per channel identifier\n    if len(events) != 1:\n        <IND>return None\n\n    <DED>event = decode_event(contract_manager.get_contract_abi(CONTRACT_TOKEN_NETWORK), events[0])\n    participant1 = Address(decode_hex(event[\"args\"][\"participant1\"]))\n    participant2 = Address(decode_hex(event[\"args\"][\"participant2\"]))\n\n    return participant1, participant2\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from raiden.network.proxies.proxy_manager import ProxyManager\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]