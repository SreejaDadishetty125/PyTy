[
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:41:8 Incompatible return type [7]: Expected `Dict[TProtocol, BaseSecureTransport]` but got `Dict[str, secio.Transport]`.",
    "message": " Expected `Dict[TProtocol, BaseSecureTransport]` but got `Dict[str, secio.Transport]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 41,
    "warning_line": "        return {secio.ID: secio.Transport(key_pair)}"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:64:30 Incompatible variable type [9]: key_pair is declared to have type `KeyPair` but is used as type `None`.",
    "message": " key_pair is declared to have type `KeyPair` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 64,
    "warning_line": "        cls, is_secure: bool, key_pair: KeyPair = None, muxer_opt: TMuxerOptions = None"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:64:56 Incompatible variable type [9]: muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "message": " muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 64,
    "warning_line": "        cls, is_secure: bool, key_pair: KeyPair = None, muxer_opt: TMuxerOptions = None"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:76:8 Incompatible return type [7]: Expected `Swarm` but got `SwarmFactory`.",
    "message": " Expected `Swarm` but got `SwarmFactory`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 76,
    "warning_line": "        return swarm"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:80:43 Incompatible variable type [9]: muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "message": " muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 80,
    "warning_line": "        cls, is_secure: bool, number: int, muxer_opt: TMuxerOptions = None"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:152:21 Incompatible variable type [9]: muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "message": " muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 152,
    "warning_line": "    is_secure: bool, muxer_opt: TMuxerOptions = None"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:176:21 Incompatible variable type [9]: muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "message": " muxer_opt is declared to have type `typing.Mapping[TProtocol, typing.Type[libp2p.stream_muxer.abc.IMuxedConn]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 176,
    "warning_line": "    is_secure: bool, muxer_opt: TMuxerOptions = None"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:181:4 Incompatible return type [7]: Expected `Tuple[SwarmConn, Swarm, SwarmConn, Swarm]` but got `Tuple[libp2p.network.connection.net_connection_interface.INetConn, Swarm, libp2p.network.connection.net_connection_interface.INetConn, Swarm]`.",
    "message": " Expected `Tuple[SwarmConn, Swarm, SwarmConn, Swarm]` but got `Tuple[libp2p.network.connection.net_connection_interface.INetConn, Swarm, libp2p.network.connection.net_connection_interface.INetConn, Swarm]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 181,
    "warning_line": "    return conn_0, swarms[0], conn_1, swarms[1]"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:189:4 Incompatible return type [7]: Expected `Tuple[Mplex, Swarm, Mplex, Swarm]` but got `Tuple[libp2p.stream_muxer.abc.IMuxedConn, Swarm, libp2p.stream_muxer.abc.IMuxedConn, Swarm]`.",
    "message": " Expected `Tuple[Mplex, Swarm, Mplex, Swarm]` but got `Tuple[libp2p.stream_muxer.abc.IMuxedConn, Swarm, libp2p.stream_muxer.abc.IMuxedConn, Swarm]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 189,
    "warning_line": "    return conn_0.muxed_conn, swarm_0, conn_1.muxed_conn, swarm_1"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:205:4 Incompatible return type [7]: Expected `Tuple[MplexStream, Swarm, MplexStream, Swarm]` but got `Tuple[libp2p.stream_muxer.abc.IMuxedStream, Swarm, MplexStream, Swarm]`.",
    "message": " Expected `Tuple[MplexStream, Swarm, MplexStream, Swarm]` but got `Tuple[libp2p.stream_muxer.abc.IMuxedStream, Swarm, MplexStream, Swarm]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 205,
    "warning_line": "    return stream_0, swarm_0, stream_1, swarm_1"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:221:30 Incompatible parameter type [6]: Expected `TProtocol` for 1st positional only parameter to call `BasicHost.set_stream_handler` but got `str`.",
    "message": " Expected `TProtocol` for 1st positional only parameter to call `BasicHost.set_stream_handler` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 221,
    "warning_line": "    host_1.set_stream_handler(protocol_id, handler)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    protocol_id = \"/example/id/1\"\n\n",
        "source_code_len": 93,
        "target_code": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    protocol_id = TProtocol(\"/example/id/1\")\n\n",
        "target_code_len": 104,
        "diff_format": "@@ -210,3 +219,3 @@\n ) -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n-    protocol_id = \"/example/id/1\"\n+    protocol_id = TProtocol(\"/example/id/1\")\n \n",
        "source_code_with_indent": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    <IND>protocol_id = \"/example/id/1\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    <IND>protocol_id = TProtocol(\"/example/id/1\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:221:43 Incompatible parameter type [6]: Expected `typing.Callable[[INetStream], typing.Awaitable[None]]` for 2nd positional only parameter to call `BasicHost.set_stream_handler` but got `typing.Callable[[Named(stream, INetStream)], None]`.",
    "message": " Expected `typing.Callable[[INetStream], typing.Awaitable[None]]` for 2nd positional only parameter to call `BasicHost.set_stream_handler` but got `typing.Callable[[Named(stream, INetStream)], None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 221,
    "warning_line": "    host_1.set_stream_handler(protocol_id, handler)"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests/factories.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/factories.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/factories.py:223:56 Incompatible parameter type [6]: Expected `typing.Sequence[TProtocol]` for 2nd positional only parameter to call `BasicHost.new_stream` but got `typing.Sequence[str]`.",
    "message": " Expected `typing.Sequence[TProtocol]` for 2nd positional only parameter to call `BasicHost.new_stream` but got `typing.Sequence[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 223,
    "warning_line": "    stream_0 = await host_0.new_stream(host_1.get_id(), [protocol_id])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    protocol_id = \"/example/id/1\"\n\n",
        "source_code_len": 93,
        "target_code": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    protocol_id = TProtocol(\"/example/id/1\")\n\n",
        "target_code_len": 104,
        "diff_format": "@@ -210,3 +219,3 @@\n ) -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n-    protocol_id = \"/example/id/1\"\n+    protocol_id = TProtocol(\"/example/id/1\")\n \n",
        "source_code_with_indent": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    <IND>protocol_id = \"/example/id/1\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> Tuple[INetStream, BasicHost, INetStream, BasicHost]:\n    <IND>protocol_id = TProtocol(\"/example/id/1\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests_interop/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/interop/daemon.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests_interop/daemon.py:107:60 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 2nd positional only parameter to anonymous call but got `typing.Optional[asyncio.streams.StreamReader]`.",
    "message": " Expected `asyncio.streams.StreamReader` for 2nd positional only parameter to anonymous call but got `typing.Optional[asyncio.streams.StreamReader]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "            asyncio.ensure_future(_print_from_stream(\"out\", self.proc.stdout))"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "bcd78901245a30aaff97d7725efb57bdd82dac0e",
    "filename": "tests_interop/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/tools/interop/daemon.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests_interop/daemon.py:110:60 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 2nd positional only parameter to anonymous call but got `typing.Optional[asyncio.streams.StreamReader]`.",
    "message": " Expected `asyncio.streams.StreamReader` for 2nd positional only parameter to anonymous call but got `typing.Optional[asyncio.streams.StreamReader]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "            asyncio.ensure_future(_print_from_stream(\"err\", self.proc.stderr))"
  }
]