[
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "113c23a66d4bf391eb2e1d1e6bafaa7673e7ce55",
    "filename": "volatility/framework/automagic/nlpdtbfinder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/nlpdtbfinder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/nlpdtbfinder.py:168:47 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 168,
    "warning_line": "                        layer = context.memory[physical_layer]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                        layer = context.memory[physical_layer]\n",
        "source_code_len": 184,
        "target_code": "                        physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                        if not isinstance(physical_layer, str):\n                            raise ValueError(\"Physical Layer configuration must be a string\")\n                        layer = context.memory[physical_layer]\n",
        "target_code_len": 342,
        "diff_format": "@@ -167,2 +167,4 @@\n                         physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n+                        if not isinstance(physical_layer, str):\n+                            raise ValueError(\"Physical Layer configuration must be a string\")\n                         layer = context.memory[physical_layer]\n",
        "source_code_with_indent": "                        <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                        layer = context.memory[physical_layer]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                        if not isinstance(physical_layer, str):\n                            <IND>raise ValueError(\"Physical Layer configuration must be a string\")\n                        <DED>layer = context.memory[physical_layer]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "113c23a66d4bf391eb2e1d1e6bafaa7673e7ce55",
    "filename": "volatility/framework/automagic/windows.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/windows.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/windows.py:44:17 Incompatible variable type [9]: layer_type is declared to have type `typing.Type[intel.Intel]` but is used as type `None`.",
    "message": " layer_type is declared to have type `typing.Type[intel.Intel]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "                 layer_type: typing.Type[layers.intel.Intel] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_len": 297,
        "target_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_len": 269,
        "diff_format": "@@ -43,6 +43,6 @@\n     def __init__(self,\n-                 layer_type: typing.Type[layers.intel.Intel] = None,\n-                 ptr_struct: str = None,\n-                 ptr_reference: int = None,\n-                 mask: int = None) -> None:\n+                 layer_type: typing.Type[layers.intel.Intel],\n+                 ptr_struct: str,\n+                 ptr_reference: int,\n+                 mask: int) -> None:\n         self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "113c23a66d4bf391eb2e1d1e6bafaa7673e7ce55",
    "filename": "volatility/framework/automagic/windows.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/windows.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/windows.py:45:17 Incompatible variable type [9]: ptr_struct is declared to have type `str` but is used as type `None`.",
    "message": " ptr_struct is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 45,
    "warning_line": "                 ptr_struct: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_len": 297,
        "target_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_len": 269,
        "diff_format": "@@ -43,6 +43,6 @@\n     def __init__(self,\n-                 layer_type: typing.Type[layers.intel.Intel] = None,\n-                 ptr_struct: str = None,\n-                 ptr_reference: int = None,\n-                 mask: int = None) -> None:\n+                 layer_type: typing.Type[layers.intel.Intel],\n+                 ptr_struct: str,\n+                 ptr_reference: int,\n+                 mask: int) -> None:\n         self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "113c23a66d4bf391eb2e1d1e6bafaa7673e7ce55",
    "filename": "volatility/framework/automagic/windows.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/windows.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/windows.py:46:17 Incompatible variable type [9]: ptr_reference is declared to have type `int` but is used as type `None`.",
    "message": " ptr_reference is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 46,
    "warning_line": "                 ptr_reference: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_len": 297,
        "target_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_len": 269,
        "diff_format": "@@ -43,6 +43,6 @@\n     def __init__(self,\n-                 layer_type: typing.Type[layers.intel.Intel] = None,\n-                 ptr_struct: str = None,\n-                 ptr_reference: int = None,\n-                 mask: int = None) -> None:\n+                 layer_type: typing.Type[layers.intel.Intel],\n+                 ptr_struct: str,\n+                 ptr_reference: int,\n+                 mask: int) -> None:\n         self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "113c23a66d4bf391eb2e1d1e6bafaa7673e7ce55",
    "filename": "volatility/framework/automagic/windows.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/windows.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/windows.py:47:17 Incompatible variable type [9]: mask is declared to have type `int` but is used as type `None`.",
    "message": " mask is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 47,
    "warning_line": "                 mask: int = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_len": 297,
        "target_code": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_len": 269,
        "diff_format": "@@ -43,6 +43,6 @@\n     def __init__(self,\n-                 layer_type: typing.Type[layers.intel.Intel] = None,\n-                 ptr_struct: str = None,\n-                 ptr_reference: int = None,\n-                 mask: int = None) -> None:\n+                 layer_type: typing.Type[layers.intel.Intel],\n+                 ptr_struct: str,\n+                 ptr_reference: int,\n+                 mask: int) -> None:\n         self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel] = None,\n                 ptr_struct: str = None,\n                 ptr_reference: int = None,\n                 mask: int = None) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self,\n                 layer_type: typing.Type[layers.intel.Intel],\n                 ptr_struct: str,\n                 ptr_reference: int,\n                 mask: int) -> None:\n        <IND>self.layer_type = self._check_class(layer_type, layers.intel.Intel)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "113c23a66d4bf391eb2e1d1e6bafaa7673e7ce55",
    "filename": "volatility/framework/automagic/windows.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/windows.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/windows.py:230:24 Incompatible return type [7]: Expected `typing.Generator[typing.Tuple[DtbTest, typing.Set[int]], None, None]` but got `typing.Generator[typing.Tuple[typing.Union[DtbTest32bit, DtbTest64bit, DtbTestPae], int], None, None]`.",
    "message": " Expected `typing.Generator[typing.Tuple[DtbTest, typing.Set[int]], None, None]` but got `typing.Generator[typing.Tuple[typing.Union[DtbTest32bit, DtbTest64bit, DtbTestPae], int], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 230,
    "warning_line": "                        yield (test, result[0])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __call__(self, data: bytes, data_offset: int) \\\n            -> typing.Generator[typing.Tuple[DtbTest, typing.Set[int]], None, None]:\n        results = {}  # type: typing.Dict[DtbTest, typing.Set[int]]\n        for test in self.tests:\n            results[test] = set()\n\n        for test in self.tests:\n",
        "source_code_len": 308,
        "target_code": "    def __call__(self, data: bytes, data_offset: int) \\\n            -> typing.Generator[typing.Tuple[DtbTest, int], None, None]:\n        for test in self.tests:\n",
        "target_code_len": 161,
        "diff_format": "@@ -219,7 +219,3 @@\n     def __call__(self, data: bytes, data_offset: int) \\\n-            -> typing.Generator[typing.Tuple[DtbTest, typing.Set[int]], None, None]:\n-        results = {}  # type: typing.Dict[DtbTest, typing.Set[int]]\n-        for test in self.tests:\n-            results[test] = set()\n-\n+            -> typing.Generator[typing.Tuple[DtbTest, int], None, None]:\n         for test in self.tests:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>def __call__(self, data: bytes, data_offset: int)            -> typing.Generator[typing.Tuple[DtbTest, typing.Set[int]], None, None]:\n        <IND>results = {}  # type: typing.Dict[DtbTest, typing.Set[int]]\n        for test in self.tests:\n            <IND>results[test] = set()\n\n        <DED>for test in self.tests:\n",
        "target_code_with_indent": "    <DED>def __call__(self, data: bytes, data_offset: int)            -> typing.Generator[typing.Tuple[DtbTest, int], None, None]:\n        <IND>for test in self.tests:\n"
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "113c23a66d4bf391eb2e1d1e6bafaa7673e7ce55",
    "filename": "volatility/framework/automagic/windows.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/windows.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/windows.py:436:8 Incompatible return type [7]: Expected `typing.Tuple[str, str, requirements.LayerListRequirement]` but got `typing.Tuple[str, str, typing.Optional[requirements.LayerListRequirement]]`.",
    "message": " Expected `typing.Tuple[str, str, requirements.LayerListRequirement]` but got `typing.Tuple[str, str, typing.Optional[requirements.LayerListRequirement]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 436,
    "warning_line": "        return sub_config, swap_config, swap_req",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                              requirement: interfaces.configuration.TranslationLayerRequirement) \\\n            -> typing.Tuple[str, str, requirements.LayerListRequirement]:\n        \"\"\"Takes a Translation layer and returns its swap_layer requirement\"\"\"\n",
        "source_code_len": 252,
        "target_code": "                              requirement: interfaces.configuration.TranslationLayerRequirement) \\\n            -> typing.Tuple[str, str, typing.Optional[requirements.LayerListRequirement]]:\n        \"\"\"Takes a Translation layer and returns its swap_layer requirement\"\"\"\n",
        "target_code_len": 269,
        "diff_format": "@@ -425,3 +421,3 @@\n                               requirement: interfaces.configuration.TranslationLayerRequirement) \\\n-            -> typing.Tuple[str, str, requirements.LayerListRequirement]:\n+            -> typing.Tuple[str, str, typing.Optional[requirements.LayerListRequirement]]:\n         \"\"\"Takes a Translation layer and returns its swap_layer requirement\"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                              requirement: interfaces.configuration.TranslationLayerRequirement)            -> typing.Tuple[str, str, requirements.LayerListRequirement]:\n        <IND>\"\"\"Takes a Translation layer and returns its swap_layer requirement\"\"\"\n",
        "target_code_with_indent": "                              requirement: interfaces.configuration.TranslationLayerRequirement)            -> typing.Tuple[str, str, typing.Optional[requirements.LayerListRequirement]]:\n        <IND>\"\"\"Takes a Translation layer and returns its swap_layer requirement\"\"\"\n"
      }
    ]
  }
]