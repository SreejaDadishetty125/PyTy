[
  {
    "project": "asyml/forte",
    "commit": "fbe8ba74d0ba1e7663eeeb6bb3a692604835b8a6",
    "filename": "forte/data/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/selector.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/selector.py:39:4 Inconsistent override [14]: `forte.data.selector.NameMatchSelector.select` overrides method defined in `Selector` inconsistently. Could not find parameter `pack` in overriding signature.",
    "message": " `forte.data.selector.NameMatchSelector.select` overrides method defined in `Selector` inconsistently. Could not find parameter `pack` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 39,
    "warning_line": "    def select(self, m_pack: MultiPack) -> Iterator[PackType]:"
  },
  {
    "project": "asyml/forte",
    "commit": "fbe8ba74d0ba1e7663eeeb6bb3a692604835b8a6",
    "filename": "forte/data/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/selector.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/selector.py:39:4 Inconsistent override [15]: `forte.data.selector.NameMatchSelector.select` overrides method defined in `Selector` inconsistently. Returned type `Iterator[Variable[PackType (bound to forte.data.base_pack.BasePack)]]` is not a subtype of the overridden return `Iterator[forte.data.multi_pack.MultiPack]`.",
    "message": " `forte.data.selector.NameMatchSelector.select` overrides method defined in `Selector` inconsistently. Returned type `Iterator[Variable[PackType (bound to forte.data.base_pack.BasePack)]]` is not a subtype of the overridden return `Iterator[forte.data.multi_pack.MultiPack]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 39,
    "warning_line": "    def select(self, m_pack: MultiPack) -> Iterator[PackType]:"
  },
  {
    "project": "asyml/forte",
    "commit": "fbe8ba74d0ba1e7663eeeb6bb3a692604835b8a6",
    "filename": "forte/data/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/selector.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/selector.py:45:16 Incompatible return type [7]: Expected `Iterator[Variable[PackType (bound to forte.data.base_pack.BasePack)]]` but got `typing.Generator[forte.data.data_pack.DataPack, None, None]`.",
    "message": " Expected `Iterator[Variable[PackType (bound to forte.data.base_pack.BasePack)]]` but got `typing.Generator[forte.data.data_pack.DataPack, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 45,
    "warning_line": "                yield pack"
  },
  {
    "project": "asyml/forte",
    "commit": "fbe8ba74d0ba1e7663eeeb6bb3a692604835b8a6",
    "filename": "forte/data/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/selector.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/selector.py:62:4 Inconsistent override [15]: `forte.data.selector.MultiPackSelector.select` overrides method defined in `Selector` inconsistently. Returned type `forte.data.multi_pack.MultiPack` is not a subtype of the overridden return `Iterator[forte.data.multi_pack.MultiPack]`.",
    "message": " `forte.data.selector.MultiPackSelector.select` overrides method defined in `Selector` inconsistently. Returned type `forte.data.multi_pack.MultiPack` is not a subtype of the overridden return `Iterator[forte.data.multi_pack.MultiPack]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 62,
    "warning_line": "    def select(self, pack: MultiPack) -> MultiPack:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "                             f\"not in the MultiPack\")\n\n\nclass MultiPackSelector(Selector[MultiPack]):\n    \"\"\"\n    Select multiple packs from the input MultiPack with specified names,\n    the select function returns a MultiPack\n    \"\"\"\n\n    def __init__(self, select_names: List[str]):\n        super().__init__()\n        self.select_names = select_names\n\n    def select(self, pack: MultiPack) -> MultiPack:\n        ret_pack: MultiPack = MultiPack()\n        for name in self.select_names:\n            if name not in pack._packs:\n                raise ValueError(f\"pack name {name}\"\n                                 f\"not in the MultiPack\")\n            ret_pack.update_pack(**{name: pack.get_pack(name)})\n        return ret_pack\n",
        "source_code_len": 726,
        "target_code": "                             f\"not in the MultiPack\")\n",
        "target_code_len": 54,
        "diff_format": "@@ -49,21 +56,1 @@\n                              f\"not in the MultiPack\")\n-\n-\n-class MultiPackSelector(Selector[MultiPack]):\n-    \"\"\"\n-    Select multiple packs from the input MultiPack with specified names,\n-    the select function returns a MultiPack\n-    \"\"\"\n-\n-    def __init__(self, select_names: List[str]):\n-        super().__init__()\n-        self.select_names = select_names\n-\n-    def select(self, pack: MultiPack) -> MultiPack:\n-        ret_pack: MultiPack = MultiPack()\n-        for name in self.select_names:\n-            if name not in pack._packs:\n-                raise ValueError(f\"pack name {name}\"\n-                                 f\"not in the MultiPack\")\n-            ret_pack.update_pack(**{name: pack.get_pack(name)})\n-        return ret_pack\n",
        "source_code_with_indent": "                             f\"not in the MultiPack\")\n\n\n<DED><DED><DED>class MultiPackSelector(Selector[MultiPack]):\n    <IND>\"\"\"\n    Select multiple packs from the input MultiPack with specified names,\n    the select function returns a MultiPack\n    \"\"\"\n\n    def __init__(self, select_names: List[str]):\n        <IND>super().__init__()\n        self.select_names = select_names\n\n    <DED>def select(self, pack: MultiPack) -> MultiPack:\n        <IND>ret_pack: MultiPack = MultiPack()\n        for name in self.select_names:\n            <IND>if name not in pack._packs:\n                <IND>raise ValueError(f\"pack name {name}\"\n                                 f\"not in the MultiPack\")\n            <DED>ret_pack.update_pack(**{name: pack.get_pack(name)})\n        <DED>return ret_pack\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                             f\"not in the MultiPack\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]