[
  {
    "project": "jina-ai/jina",
    "commit": "212b3bae51befa0c81c1e42424e45ceaf2ff087d",
    "filename": "jina/types/arrays/neural_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/types/arrays/neural_ops.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/types/arrays/neural_ops.py:29:8 Incompatible variable type [9]: traversal_ldarray is declared to have type `List[str]` but is used as type `None`.",
    "message": " traversal_ldarray is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 29,
    "warning_line": "        traversal_ldarray: List[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional, Union, Callable, Tuple, List\n\n",
        "source_code_len": 59,
        "target_code": "from typing import Optional, Union, Callable, Tuple, Sequence\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Optional, Union, Callable, Tuple, List\n+from typing import Optional, Union, Callable, Tuple, Sequence\n \n",
        "source_code_with_indent": "from typing import Optional, Union, Callable, Tuple, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, Union, Callable, Tuple, Sequence\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        exclude_self: bool = False,\n        traversal_ldarray: List[str] = None,\n        traversal_rdarray: List[str] = None,\n    ) -> None:\n",
        "source_code_len": 141,
        "target_code": "        exclude_self: bool = False,\n        traversal_ldarray: Optional[Sequence[str]] = None,\n        traversal_rdarray: Optional[Sequence[str]] = None,\n    ) -> None:\n",
        "target_code_len": 169,
        "diff_format": "@@ -28,4 +28,4 @@\n         exclude_self: bool = False,\n-        traversal_ldarray: List[str] = None,\n-        traversal_rdarray: List[str] = None,\n+        traversal_ldarray: Optional[Sequence[str]] = None,\n+        traversal_rdarray: Optional[Sequence[str]] = None,\n     ) -> None:\n",
        "source_code_with_indent": "        exclude_self: bool = False,\n        traversal_ldarray: List[str] = None,\n        traversal_rdarray: List[str] = None,\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        exclude_self: bool = False,\n        traversal_ldarray: Optional[Sequence[str]] = None,\n        traversal_rdarray: Optional[Sequence[str]] = None,\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "212b3bae51befa0c81c1e42424e45ceaf2ff087d",
    "filename": "jina/types/arrays/neural_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/types/arrays/neural_ops.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/types/arrays/neural_ops.py:30:8 Incompatible variable type [9]: traversal_rdarray is declared to have type `List[str]` but is used as type `None`.",
    "message": " traversal_rdarray is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 30,
    "warning_line": "        traversal_rdarray: List[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional, Union, Callable, Tuple, List\n\n",
        "source_code_len": 59,
        "target_code": "from typing import Optional, Union, Callable, Tuple, Sequence\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Optional, Union, Callable, Tuple, List\n+from typing import Optional, Union, Callable, Tuple, Sequence\n \n",
        "source_code_with_indent": "from typing import Optional, Union, Callable, Tuple, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, Union, Callable, Tuple, Sequence\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        exclude_self: bool = False,\n        traversal_ldarray: List[str] = None,\n        traversal_rdarray: List[str] = None,\n    ) -> None:\n",
        "source_code_len": 141,
        "target_code": "        exclude_self: bool = False,\n        traversal_ldarray: Optional[Sequence[str]] = None,\n        traversal_rdarray: Optional[Sequence[str]] = None,\n    ) -> None:\n",
        "target_code_len": 169,
        "diff_format": "@@ -28,4 +28,4 @@\n         exclude_self: bool = False,\n-        traversal_ldarray: List[str] = None,\n-        traversal_rdarray: List[str] = None,\n+        traversal_ldarray: Optional[Sequence[str]] = None,\n+        traversal_rdarray: Optional[Sequence[str]] = None,\n     ) -> None:\n",
        "source_code_with_indent": "        exclude_self: bool = False,\n        traversal_ldarray: List[str] = None,\n        traversal_rdarray: List[str] = None,\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        exclude_self: bool = False,\n        traversal_ldarray: Optional[Sequence[str]] = None,\n        traversal_rdarray: Optional[Sequence[str]] = None,\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]