[
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:183:8 Incompatible variable type [9]: js_file_name is declared to have type `pathlib.Path` but is used as type `str`.",
    "message": " js_file_name is declared to have type `pathlib.Path` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 183,
    "warning_line": "        js_file_name = self.get_link(js_file_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\n\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import Any, Dict, List, OrderedDict, TextIO, Tuple\n\n",
        "source_code_len": 128,
        "target_code": "import subprocess\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import IO, Any, Dict, List, OrderedDict, Tuple\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -10,5 +10,4 @@\n import subprocess\n-\n # typing.OrderedDict is available (>= 3.7.2)\n-from typing import Any, Dict, List, OrderedDict, TextIO, Tuple\n+from typing import IO, Any, Dict, List, OrderedDict, Tuple\n \n",
        "source_code_with_indent": "import subprocess\n\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import Any, Dict, List, OrderedDict, TextIO, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import IO, Any, Dict, List, OrderedDict, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def include_js(self, file_object: TextIO, js_file_name: pathlib.Path) -> None:\n        js_file_name = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_name)\n        file_object.write(html)\n\n    def include_css(self, file_object: TextIO, css_file_name: pathlib.Path) -> None:\n        css_file_name = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_name)\n        file_object.write(html)\n\n",
        "source_code_len": 506,
        "target_code": "\n    def include_js(self, file_object: IO, js_file_name: pathlib.Path) -> None:\n        js_file_link = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_link)\n        file_object.write(html.encode())\n\n    def include_css(self, file_object: IO, css_file_name: pathlib.Path) -> None:\n        css_file_link = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_link)\n        file_object.write(html.encode())\n\n",
        "target_code_len": 516,
        "diff_format": "@@ -181,11 +183,11 @@\n \n-    def include_js(self, file_object: TextIO, js_file_name: pathlib.Path) -> None:\n-        js_file_name = self.get_link(js_file_name)\n-        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_name)\n-        file_object.write(html)\n-\n-    def include_css(self, file_object: TextIO, css_file_name: pathlib.Path) -> None:\n-        css_file_name = self.get_link(css_file_name)\n-        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_name)\n-        file_object.write(html)\n+    def include_js(self, file_object: IO, js_file_name: pathlib.Path) -> None:\n+        js_file_link = self.get_link(js_file_name)\n+        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_link)\n+        file_object.write(html.encode())\n+\n+    def include_css(self, file_object: IO, css_file_name: pathlib.Path) -> None:\n+        css_file_link = self.get_link(css_file_name)\n+        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_link)\n+        file_object.write(html.encode())\n \n",
        "source_code_with_indent": "\n    <DED>def include_js(self, file_object: TextIO, js_file_name: pathlib.Path) -> None:\n        <IND>js_file_name = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_name)\n        file_object.write(html)\n\n    <DED>def include_css(self, file_object: TextIO, css_file_name: pathlib.Path) -> None:\n        <IND>css_file_name = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_name)\n        file_object.write(html)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def include_js(self, file_object: IO, js_file_name: pathlib.Path) -> None:\n        <IND>js_file_link = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_link)\n        file_object.write(html.encode())\n\n    <DED>def include_css(self, file_object: IO, css_file_name: pathlib.Path) -> None:\n        <IND>css_file_link = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_link)\n        file_object.write(html.encode())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # include (mathjax, js, css)\n    def write_header(self, file_object: TextIO) -> None:\n        file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    def write_title(self, file_object: TextIO, category: str, categorize: bool) -> None:\n        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title))\n        if categorize: file_object.write('* category: {}\\n'.format(category))\n        file_object.write('\\n\\n')\n\n    def write_contents(self,\n                       file_object: TextIO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "source_code_len": 798,
        "target_code": "    # include (mathjax, js, css)\n    def write_header(self, file_object: IO) -> None:\n        file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    def write_title(self, file_object: IO, category: str, categorize: bool) -> None:\n        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title).encode())\n        if categorize: file_object.write('* category: {}\\n'.format(category).encode())\n        file_object.write('\\n\\n'.encode())\n\n    def write_contents(self,\n                       file_object: IO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "target_code_len": 815,
        "diff_format": "@@ -209,15 +211,15 @@\n     # include (mathjax, js, css)\n-    def write_header(self, file_object: TextIO) -> None:\n-        file_object.buffer.write(assets_site_header_txt)\n+    def write_header(self, file_object: IO) -> None:\n+        file_object.write(assets_site_header_txt)\n         self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n         self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n-        file_object.write('\\n\\n')\n-\n-    def write_title(self, file_object: TextIO, category: str, categorize: bool) -> None:\n-        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title))\n-        if categorize: file_object.write('* category: {}\\n'.format(category))\n-        file_object.write('\\n\\n')\n+        file_object.write('\\n\\n'.encode())\n+\n+    def write_title(self, file_object: IO, category: str, categorize: bool) -> None:\n+        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title).encode())\n+        if categorize: file_object.write('* category: {}\\n'.format(category).encode())\n+        file_object.write('\\n\\n'.encode())\n \n     def write_contents(self,\n-                       file_object: TextIO,\n+                       file_object: IO,\n                        path_to_title: OrderedDict[pathlib.Path, str],\n",
        "source_code_with_indent": "    # include (mathjax, js, css)\n    <DED>def write_header(self, file_object: TextIO) -> None:\n        <IND>file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    <DED>def write_title(self, file_object: TextIO, category: str, categorize: bool) -> None:\n        <IND>file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title))\n        if categorize: file_object.write('* category: {}\\n'.format(category))\n        file_object.write('\\n\\n')\n\n    <DED>def write_contents(self,\n                       file_object: TextIO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # include (mathjax, js, css)\n    <DED>def write_header(self, file_object: IO) -> None:\n        <IND>file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    <DED>def write_title(self, file_object: IO, category: str, categorize: bool) -> None:\n        <IND>file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title).encode())\n        if categorize: file_object.write('* category: {}\\n'.format(category).encode())\n        file_object.write('\\n\\n'.encode())\n\n    <DED>def write_contents(self,\n                       file_object: IO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def write_header(self, file_object: TextIO) -> None:\n        file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    def write_title(self, file_object: TextIO) -> None:\n        title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title))\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description))\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n')\n            file_object.write('{:toc}\\n\\n')\n\n",
        "source_code_len": 894,
        "target_code": "\n    def write_header(self, file_object: IO) -> None:\n        file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    def write_title(self, file_object: IO) -> None:\n        title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title).encode())\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description).encode())\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n'.encode())\n            file_object.write('{:toc}\\n\\n'.encode())\n\n",
        "target_code_len": 924,
        "diff_format": "@@ -323,17 +325,17 @@\n \n-    def write_header(self, file_object: TextIO) -> None:\n-        file_object.buffer.write(assets_site_header_txt)\n+    def write_header(self, file_object: IO) -> None:\n+        file_object.write(assets_site_header_txt)\n         self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n         self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n-        file_object.write('\\n\\n')\n-\n-    def write_title(self, file_object: TextIO) -> None:\n+        file_object.write('\\n\\n'.encode())\n+\n+    def write_title(self, file_object: IO) -> None:\n         title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n-        file_object.write('# {}\\n\\n'.format(title))\n+        file_object.write('# {}\\n\\n'.format(title).encode())\n         description = self.config.setdefault('description', '')\n-        if description != '': file_object.write('{}\\n\\n'.format(description))\n+        if description != '': file_object.write('{}\\n\\n'.format(description).encode())\n         toc = self.config.setdefault('toc', False)\n         if toc:\n-            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n')\n-            file_object.write('{:toc}\\n\\n')\n+            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n'.encode())\n+            file_object.write('{:toc}\\n\\n'.encode())\n \n",
        "source_code_with_indent": "\n    <DED>def write_header(self, file_object: TextIO) -> None:\n        <IND>file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    <DED>def write_title(self, file_object: TextIO) -> None:\n        <IND>title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title))\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description))\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            <IND>file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n')\n            file_object.write('{:toc}\\n\\n')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def write_header(self, file_object: IO) -> None:\n        <IND>file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    <DED>def write_title(self, file_object: IO) -> None:\n        <IND>title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title).encode())\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description).encode())\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            <IND>file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n'.encode())\n            file_object.write('{:toc}\\n\\n'.encode())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self,\n            file_object: TextIO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "source_code_len": 113,
        "target_code": "            self,\n            file_object: IO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "target_code_len": 109,
        "diff_format": "@@ -341,3 +343,3 @@\n             self,\n-            file_object: TextIO,\n+            file_object: IO,\n             verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "source_code_with_indent": "            self,\n            file_object: TextIO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self,\n            file_object: IO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:188:8 Incompatible variable type [9]: css_file_name is declared to have type `pathlib.Path` but is used as type `str`.",
    "message": " css_file_name is declared to have type `pathlib.Path` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 188,
    "warning_line": "        css_file_name = self.get_link(css_file_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\n\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import Any, Dict, List, OrderedDict, TextIO, Tuple\n\n",
        "source_code_len": 128,
        "target_code": "import subprocess\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import IO, Any, Dict, List, OrderedDict, Tuple\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -10,5 +10,4 @@\n import subprocess\n-\n # typing.OrderedDict is available (>= 3.7.2)\n-from typing import Any, Dict, List, OrderedDict, TextIO, Tuple\n+from typing import IO, Any, Dict, List, OrderedDict, Tuple\n \n",
        "source_code_with_indent": "import subprocess\n\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import Any, Dict, List, OrderedDict, TextIO, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\n# typing.OrderedDict is available (>= 3.7.2)\nfrom typing import IO, Any, Dict, List, OrderedDict, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def include_js(self, file_object: TextIO, js_file_name: pathlib.Path) -> None:\n        js_file_name = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_name)\n        file_object.write(html)\n\n    def include_css(self, file_object: TextIO, css_file_name: pathlib.Path) -> None:\n        css_file_name = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_name)\n        file_object.write(html)\n\n",
        "source_code_len": 506,
        "target_code": "\n    def include_js(self, file_object: IO, js_file_name: pathlib.Path) -> None:\n        js_file_link = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_link)\n        file_object.write(html.encode())\n\n    def include_css(self, file_object: IO, css_file_name: pathlib.Path) -> None:\n        css_file_link = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_link)\n        file_object.write(html.encode())\n\n",
        "target_code_len": 516,
        "diff_format": "@@ -181,11 +183,11 @@\n \n-    def include_js(self, file_object: TextIO, js_file_name: pathlib.Path) -> None:\n-        js_file_name = self.get_link(js_file_name)\n-        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_name)\n-        file_object.write(html)\n-\n-    def include_css(self, file_object: TextIO, css_file_name: pathlib.Path) -> None:\n-        css_file_name = self.get_link(css_file_name)\n-        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_name)\n-        file_object.write(html)\n+    def include_js(self, file_object: IO, js_file_name: pathlib.Path) -> None:\n+        js_file_link = self.get_link(js_file_name)\n+        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_link)\n+        file_object.write(html.encode())\n+\n+    def include_css(self, file_object: IO, css_file_name: pathlib.Path) -> None:\n+        css_file_link = self.get_link(css_file_name)\n+        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_link)\n+        file_object.write(html.encode())\n \n",
        "source_code_with_indent": "\n    <DED>def include_js(self, file_object: TextIO, js_file_name: pathlib.Path) -> None:\n        <IND>js_file_name = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_name)\n        file_object.write(html)\n\n    <DED>def include_css(self, file_object: TextIO, css_file_name: pathlib.Path) -> None:\n        <IND>css_file_name = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_name)\n        file_object.write(html)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def include_js(self, file_object: IO, js_file_name: pathlib.Path) -> None:\n        <IND>js_file_link = self.get_link(js_file_name)\n        html = '<script type=\"text/javascript\" src=\"{}\"></script>\\n'.format(js_file_link)\n        file_object.write(html.encode())\n\n    <DED>def include_css(self, file_object: IO, css_file_name: pathlib.Path) -> None:\n        <IND>css_file_link = self.get_link(css_file_name)\n        html = '<link rel=\"stylesheet\" href=\"{}\" />\\n'.format(css_file_link)\n        file_object.write(html.encode())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # include (mathjax, js, css)\n    def write_header(self, file_object: TextIO) -> None:\n        file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    def write_title(self, file_object: TextIO, category: str, categorize: bool) -> None:\n        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title))\n        if categorize: file_object.write('* category: {}\\n'.format(category))\n        file_object.write('\\n\\n')\n\n    def write_contents(self,\n                       file_object: TextIO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "source_code_len": 798,
        "target_code": "    # include (mathjax, js, css)\n    def write_header(self, file_object: IO) -> None:\n        file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    def write_title(self, file_object: IO, category: str, categorize: bool) -> None:\n        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title).encode())\n        if categorize: file_object.write('* category: {}\\n'.format(category).encode())\n        file_object.write('\\n\\n'.encode())\n\n    def write_contents(self,\n                       file_object: IO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "target_code_len": 815,
        "diff_format": "@@ -209,15 +211,15 @@\n     # include (mathjax, js, css)\n-    def write_header(self, file_object: TextIO) -> None:\n-        file_object.buffer.write(assets_site_header_txt)\n+    def write_header(self, file_object: IO) -> None:\n+        file_object.write(assets_site_header_txt)\n         self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n         self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n-        file_object.write('\\n\\n')\n-\n-    def write_title(self, file_object: TextIO, category: str, categorize: bool) -> None:\n-        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title))\n-        if categorize: file_object.write('* category: {}\\n'.format(category))\n-        file_object.write('\\n\\n')\n+        file_object.write('\\n\\n'.encode())\n+\n+    def write_title(self, file_object: IO, category: str, categorize: bool) -> None:\n+        file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title).encode())\n+        if categorize: file_object.write('* category: {}\\n'.format(category).encode())\n+        file_object.write('\\n\\n'.encode())\n \n     def write_contents(self,\n-                       file_object: TextIO,\n+                       file_object: IO,\n                        path_to_title: OrderedDict[pathlib.Path, str],\n",
        "source_code_with_indent": "    # include (mathjax, js, css)\n    <DED>def write_header(self, file_object: TextIO) -> None:\n        <IND>file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    <DED>def write_title(self, file_object: TextIO, category: str, categorize: bool) -> None:\n        <IND>file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title))\n        if categorize: file_object.write('* category: {}\\n'.format(category))\n        file_object.write('\\n\\n')\n\n    <DED>def write_contents(self,\n                       file_object: TextIO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # include (mathjax, js, css)\n    <DED>def write_header(self, file_object: IO) -> None:\n        <IND>file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    <DED>def write_title(self, file_object: IO, category: str, categorize: bool) -> None:\n        <IND>file_object.write('# {} {}\\n'.format(self.mark, self.file_class.title).encode())\n        if categorize: file_object.write('* category: {}\\n'.format(category).encode())\n        file_object.write('\\n\\n'.encode())\n\n    <DED>def write_contents(self,\n                       file_object: IO,\n                       path_to_title: OrderedDict[pathlib.Path, str],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def write_header(self, file_object: TextIO) -> None:\n        file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    def write_title(self, file_object: TextIO) -> None:\n        title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title))\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description))\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n')\n            file_object.write('{:toc}\\n\\n')\n\n",
        "source_code_len": 894,
        "target_code": "\n    def write_header(self, file_object: IO) -> None:\n        file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    def write_title(self, file_object: IO) -> None:\n        title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title).encode())\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description).encode())\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n'.encode())\n            file_object.write('{:toc}\\n\\n'.encode())\n\n",
        "target_code_len": 924,
        "diff_format": "@@ -323,17 +325,17 @@\n \n-    def write_header(self, file_object: TextIO) -> None:\n-        file_object.buffer.write(assets_site_header_txt)\n+    def write_header(self, file_object: IO) -> None:\n+        file_object.write(assets_site_header_txt)\n         self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n         self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n-        file_object.write('\\n\\n')\n-\n-    def write_title(self, file_object: TextIO) -> None:\n+        file_object.write('\\n\\n'.encode())\n+\n+    def write_title(self, file_object: IO) -> None:\n         title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n-        file_object.write('# {}\\n\\n'.format(title))\n+        file_object.write('# {}\\n\\n'.format(title).encode())\n         description = self.config.setdefault('description', '')\n-        if description != '': file_object.write('{}\\n\\n'.format(description))\n+        if description != '': file_object.write('{}\\n\\n'.format(description).encode())\n         toc = self.config.setdefault('toc', False)\n         if toc:\n-            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n')\n-            file_object.write('{:toc}\\n\\n')\n+            file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n'.encode())\n+            file_object.write('{:toc}\\n\\n'.encode())\n \n",
        "source_code_with_indent": "\n    <DED>def write_header(self, file_object: TextIO) -> None:\n        <IND>file_object.buffer.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n')\n\n    <DED>def write_title(self, file_object: TextIO) -> None:\n        <IND>title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title))\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description))\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            <IND>file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n')\n            file_object.write('{:toc}\\n\\n')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def write_header(self, file_object: IO) -> None:\n        <IND>file_object.write(assets_site_header_txt)\n        self.include_js(file_object, self.md_destination_path / './assets/js/copy-button.js')\n        self.include_css(file_object, self.md_destination_path / './assets/css/copy-button.css')\n        file_object.write('\\n\\n'.encode())\n\n    <DED>def write_title(self, file_object: IO) -> None:\n        <IND>title = self.config.setdefault('title', 'C++ Competitive Programming Library')\n        file_object.write('# {}\\n\\n'.format(title).encode())\n        description = self.config.setdefault('description', '')\n        if description != '': file_object.write('{}\\n\\n'.format(description).encode())\n        toc = self.config.setdefault('toc', False)\n        if toc:\n            <IND>file_object.write('* this unordered seed list will be replaced by toc as unordered list\\n'.encode())\n            file_object.write('{:toc}\\n\\n'.encode())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self,\n            file_object: TextIO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "source_code_len": 113,
        "target_code": "            self,\n            file_object: IO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "target_code_len": 109,
        "diff_format": "@@ -341,3 +343,3 @@\n             self,\n-            file_object: TextIO,\n+            file_object: IO,\n             verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "source_code_with_indent": "            self,\n            file_object: TextIO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self,\n            file_object: IO,\n            verify_files: OrderedDict[pathlib.Path, CppFile],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:449:8 Incompatible variable type [9]: cpp_source_path is declared to have type `str` but is used as type `pathlib.Path`.",
    "message": " cpp_source_path is declared to have type `str` but is used as type `pathlib.Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 449,
    "warning_line": "        cpp_source_path = pathlib.Path(cpp_source_path).resolve()"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:450:8 Incompatible variable type [9]: md_destination_path is declared to have type `str` but is used as type `pathlib.Path`.",
    "message": " md_destination_path is declared to have type `str` but is used as type `pathlib.Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 450,
    "warning_line": "        md_destination_path = pathlib.Path(md_destination_path).resolve()"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:451:43 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.get_files` but got `str`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.get_files` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 451,
    "warning_line": "        self.verify_files = self.get_files(cpp_source_path, r'^.*\\.test\\.(cpp|hpp|cc)$')"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:452:44 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.get_files` but got `str`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.get_files` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 452,
    "warning_line": "        self.library_files = self.get_files(cpp_source_path, r'^.*\\.(cpp|hpp|cc)$', self.verify_files)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:471:32 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_verify_files` but got `str`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_verify_files` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 471,
    "warning_line": "        self.build_verify_files(cpp_source_path, md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:471:49 Incompatible parameter type [6]: Expected `pathlib.Path` for 2nd positional only parameter to call `PagesBuilder.build_verify_files` but got `str`.",
    "message": " Expected `pathlib.Path` for 2nd positional only parameter to call `PagesBuilder.build_verify_files` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 471,
    "warning_line": "        self.build_verify_files(cpp_source_path, md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:472:33 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_library_files` but got `str`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_library_files` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 472,
    "warning_line": "        self.build_library_files(cpp_source_path, md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:472:50 Incompatible parameter type [6]: Expected `pathlib.Path` for 2nd positional only parameter to call `PagesBuilder.build_library_files` but got `str`.",
    "message": " Expected `pathlib.Path` for 2nd positional only parameter to call `PagesBuilder.build_library_files` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 472,
    "warning_line": "        self.build_library_files(cpp_source_path, md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:473:28 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_top_page` but got `str`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_top_page` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 473,
    "warning_line": "        self.build_top_page(cpp_source_path, md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:473:45 Incompatible parameter type [6]: Expected `pathlib.Path` for 2nd positional only parameter to call `PagesBuilder.build_top_page` but got `str`.",
    "message": " Expected `pathlib.Path` for 2nd positional only parameter to call `PagesBuilder.build_top_page` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 473,
    "warning_line": "        self.build_top_page(cpp_source_path, md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:474:26 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_assets` but got `str`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_assets` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 474,
    "warning_line": "        self.build_assets(md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:475:32 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_static_files` but got `str`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `PagesBuilder.build_static_files` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 475,
    "warning_line": "        self.build_static_files(md_destination_path)"
  },
  {
    "project": "online-judge-tools/verification-helper",
    "commit": "95a90e913510edb05ae93be86399764b79333157",
    "filename": "onlinejudge_verify/docs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/online-judge-tools-verification-helper/onlinejudge_verify/docs.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "onlinejudge_verify/docs.py:490:18 Incompatible variable type [9]: ignored_files is declared to have type `collections.OrderedDict[pathlib.Path, CppFile]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " ignored_files is declared to have type `collections.OrderedDict[pathlib.Path, CppFile]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 490,
    "warning_line": "                  ignored_files: OrderedDict[pathlib.Path, CppFile] ={}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                  extension: str,\n                  ignored_files: OrderedDict[pathlib.Path, CppFile] ={}\n    ) -> OrderedDict[pathlib.Path, CppFile]:\n",
        "source_code_len": 151,
        "target_code": "                  extension: str,\n                  ignored_files: OrderedDict[pathlib.Path, CppFile] = OrderedDict()\n    ) -> OrderedDict[pathlib.Path, CppFile]:\n",
        "target_code_len": 163,
        "diff_format": "@@ -489,3 +495,3 @@\n                   extension: str,\n-                  ignored_files: OrderedDict[pathlib.Path, CppFile] ={}\n+                  ignored_files: OrderedDict[pathlib.Path, CppFile] = OrderedDict()\n     ) -> OrderedDict[pathlib.Path, CppFile]:\n",
        "source_code_with_indent": "                  extension: str,\n                  ignored_files: OrderedDict[pathlib.Path, CppFile] ={}\n    ) -> OrderedDict[pathlib.Path, CppFile]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                  extension: str,\n                  ignored_files: OrderedDict[pathlib.Path, CppFile] = OrderedDict()\n    ) -> OrderedDict[pathlib.Path, CppFile]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]