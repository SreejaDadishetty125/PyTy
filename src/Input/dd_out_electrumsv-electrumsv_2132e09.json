[
  {
    "project": "electrumsv/electrumsv",
    "commit": "2132e0922ed952c7eb61f639b57182657532a757",
    "filename": "examples/applications/restapi/handler_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/examples/applications/restapi/handler_utils.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/applications/restapi/handler_utils.py:161:12 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `Union[Dict[typing.Any, typing.Any], Fault]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `Union[Dict[typing.Any, typing.Any], Fault]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 161,
    "warning_line": "            return await decode_request_body(request)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_header_vars(self, request) -> Dict:\n        header_vars = {}\n        for varname in HEADER_VARS:\n",
        "source_code_len": 110,
        "target_code": "\n    def get_route_vars(self, request: web.Request) -> Dict[str, Any]:\n        # This gets the variables embedded implicitly in the path for any given handler.\n        header_vars: Dict[str, Any] = {}\n        for varname in HEADER_VARS:\n",
        "target_code_len": 237,
        "diff_format": "@@ -152,4 +174,5 @@\n \n-    def get_header_vars(self, request) -> Dict:\n-        header_vars = {}\n+    def get_route_vars(self, request: web.Request) -> Dict[str, Any]:\n+        # This gets the variables embedded implicitly in the path for any given handler.\n+        header_vars: Dict[str, Any] = {}\n         for varname in HEADER_VARS:\n",
        "source_code_with_indent": "\n    <DED>def get_header_vars(self, request) -> Dict:\n        <IND>header_vars = {}\n        for varname in HEADER_VARS:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_route_vars(self, request: web.Request) -> Dict[str, Any]:\n        # This gets the variables embedded implicitly in the path for any given handler.\n        <IND>header_vars: Dict[str, Any] = {}\n        for varname in HEADER_VARS:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def get_body_vars(self, request) -> Dict:\n        try:\n            return await decode_request_body(request)\n        except JSONDecodeError as e:\n",
        "source_code_len": 157,
        "target_code": "\n    async def get_body_vars(self, request: web.Request) -> Dict[str, Any]:\n        # This gets the variables from the body.\n        try:\n            return cast(Dict[str, Any], await decode_request_body(request))\n        except JSONDecodeError as e:\n",
        "target_code_len": 251,
        "diff_format": "@@ -158,5 +181,6 @@\n \n-    async def get_body_vars(self, request) -> Dict:\n+    async def get_body_vars(self, request: web.Request) -> Dict[str, Any]:\n+        # This gets the variables from the body.\n         try:\n-            return await decode_request_body(request)\n+            return cast(Dict[str, Any], await decode_request_body(request))\n         except JSONDecodeError as e:\n",
        "source_code_with_indent": "\n    <DED>async def get_body_vars(self, request) -> Dict:\n        <IND>try:\n            <IND>return await decode_request_body(request)\n        <DED>except JSONDecodeError as e:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def get_body_vars(self, request: web.Request) -> Dict[str, Any]:\n        # This gets the variables from the body.\n        <IND>try:\n            <IND>return cast(Dict[str, Any], await decode_request_body(request))\n        <DED>except JSONDecodeError as e:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        vars: Dict = {}\n        header_vars = self.get_header_vars(request)\n        body_vars = await self.get_body_vars(request)\n",
        "source_code_len": 130,
        "target_code": "        vars: Dict = {}\n        header_vars = self.get_route_vars(request)\n        body_vars = await self.get_body_vars(request)\n",
        "target_code_len": 129,
        "diff_format": "@@ -170,3 +194,3 @@\n         vars: Dict = {}\n-        header_vars = self.get_header_vars(request)\n+        header_vars = self.get_route_vars(request)\n         body_vars = await self.get_body_vars(request)\n",
        "source_code_with_indent": "        vars: Dict = {}\n        header_vars = self.get_header_vars(request)\n        body_vars = await self.get_body_vars(request)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        vars: Dict = {}\n        header_vars = self.get_route_vars(request)\n        body_vars = await self.get_body_vars(request)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "2132e0922ed952c7eb61f639b57182657532a757",
    "filename": "examples/applications/restapi/handler_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/examples/applications/restapi/handler_utils.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/applications/restapi/handler_utils.py:166:52 Incompatible variable type [9]: required_vars is declared to have type `List[typing.Any]` but is used as type `None`.",
    "message": " required_vars is declared to have type `List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 166,
    "warning_line": "    async def argparser(self, request: web.Request, required_vars: List=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def get_body_vars(self, request) -> Dict:\n        try:\n            return await decode_request_body(request)\n        except JSONDecodeError as e:\n",
        "source_code_len": 157,
        "target_code": "\n    async def get_body_vars(self, request: web.Request) -> Dict[str, Any]:\n        # This gets the variables from the body.\n        try:\n            return cast(Dict[str, Any], await decode_request_body(request))\n        except JSONDecodeError as e:\n",
        "target_code_len": 251,
        "diff_format": "@@ -158,5 +181,6 @@\n \n-    async def get_body_vars(self, request) -> Dict:\n+    async def get_body_vars(self, request: web.Request) -> Dict[str, Any]:\n+        # This gets the variables from the body.\n         try:\n-            return await decode_request_body(request)\n+            return cast(Dict[str, Any], await decode_request_body(request))\n         except JSONDecodeError as e:\n",
        "source_code_with_indent": "\n    <DED>async def get_body_vars(self, request) -> Dict:\n        <IND>try:\n            <IND>return await decode_request_body(request)\n        <DED>except JSONDecodeError as e:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def get_body_vars(self, request: web.Request) -> Dict[str, Any]:\n        # This gets the variables from the body.\n        <IND>try:\n            <IND>return cast(Dict[str, Any], await decode_request_body(request))\n        <DED>except JSONDecodeError as e:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def argparser(self, request: web.Request, required_vars: List=None,\n            check_wallet_availability=True) -> Dict[str, Any]:\n        \"\"\"Extracts and checks all standardized header and body variables from the request object\n",
        "source_code_len": 240,
        "target_code": "\n    async def argparser(self, request: web.Request, required_vars: Optional[List]=None,\n            check_wallet_availability: bool=True) -> Dict[str, Any]:\n        \"\"\"Extracts and checks all standardized header and body variables from the request object\n",
        "target_code_len": 256,
        "diff_format": "@@ -165,4 +189,4 @@\n \n-    async def argparser(self, request: web.Request, required_vars: List=None,\n-            check_wallet_availability=True) -> Dict[str, Any]:\n+    async def argparser(self, request: web.Request, required_vars: Optional[List]=None,\n+            check_wallet_availability: bool=True) -> Dict[str, Any]:\n         \"\"\"Extracts and checks all standardized header and body variables from the request object\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>async def argparser(self, request: web.Request, required_vars: List=None,\n            check_wallet_availability=True) -> Dict[str, Any]:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>async def argparser(self, request: web.Request, required_vars: Optional[List]=None,\n            check_wallet_availability: bool=True) -> Dict[str, Any]:\n        <IND>"
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "2132e0922ed952c7eb61f639b57182657532a757",
    "filename": "examples/applications/restapi/handler_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/examples/applications/restapi/handler_utils.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/applications/restapi/handler_utils.py:272:41 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ExtendedHandlerUtils._get_parent_wallet` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ExtendedHandlerUtils._get_parent_wallet` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 272,
    "warning_line": "        wallet = self._get_parent_wallet(wallet_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _is_wallet_ready(self, wallet_name: Optional[str]=None) -> bool:\n        wallet = self._get_parent_wallet(wallet_name)\n",
        "source_code_len": 128,
        "target_code": "\n    def _get_account_from_wallet(self, wallet: Wallet, account_id: int=1) -> AbstractAccount:\n        account = wallet.get_account(account_id)\n        if account is None:\n            message = f\"There is no account at account_id: {account_id}.\"\n            raise Fault(Errors.WALLET_NOT_FOUND_CODE, message)\n        return account\n\n    def _is_wallet_ready(self, wallet_name: str) -> bool:\n        wallet = self._get_parent_wallet(wallet_name)\n",
        "target_code_len": 445,
        "diff_format": "@@ -270,3 +310,10 @@\n \n-    def _is_wallet_ready(self, wallet_name: Optional[str]=None) -> bool:\n+    def _get_account_from_wallet(self, wallet: Wallet, account_id: int=1) -> AbstractAccount:\n+        account = wallet.get_account(account_id)\n+        if account is None:\n+            message = f\"There is no account at account_id: {account_id}.\"\n+            raise Fault(Errors.WALLET_NOT_FOUND_CODE, message)\n+        return account\n+\n+    def _is_wallet_ready(self, wallet_name: str) -> bool:\n         wallet = self._get_parent_wallet(wallet_name)\n",
        "source_code_with_indent": "\n    <DED>def _is_wallet_ready(self, wallet_name: Optional[str]=None) -> bool:\n        <IND>wallet = self._get_parent_wallet(wallet_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_account_from_wallet(self, wallet: Wallet, account_id: int=1) -> AbstractAccount:\n        <IND>account = wallet.get_account(account_id)\n        if account is None:\n            <IND>message = f\"There is no account at account_id: {account_id}.\"\n            raise Fault(Errors.WALLET_NOT_FOUND_CODE, message)\n        <DED>return account\n\n    <DED>def _is_wallet_ready(self, wallet_name: str) -> bool:\n        <IND>wallet = self._get_parent_wallet(wallet_name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "2132e0922ed952c7eb61f639b57182657532a757",
    "filename": "examples/applications/restapi/handler_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/examples/applications/restapi/handler_utils.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/applications/restapi/handler_utils.py:489:27 Unsupported operand [58]: `&` is not supported for operand types `Optional[TxFlags]` and `TxFlags`.",
    "message": " `&` is not supported for operand types `Optional[TxFlags]` and `TxFlags`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 489,
    "warning_line": "        is_signed_state = (tx_flags & TxFlags.STATE_SIGNED) == TxFlags.STATE_SIGNED",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        tx_flags = account._wallet.get_transaction_flags(tx_hash)\n        is_signed_state = (tx_flags & TxFlags.STATE_SIGNED) == TxFlags.STATE_SIGNED\n",
        "source_code_len": 150,
        "target_code": "        tx_flags = account._wallet.get_transaction_flags(tx_hash)\n        assert tx_flags is not None\n        is_signed_state = (tx_flags & TxFlags.STATE_SIGNED) == TxFlags.STATE_SIGNED\n",
        "target_code_len": 186,
        "diff_format": "@@ -488,2 +538,3 @@\n         tx_flags = account._wallet.get_transaction_flags(tx_hash)\n+        assert tx_flags is not None\n         is_signed_state = (tx_flags & TxFlags.STATE_SIGNED) == TxFlags.STATE_SIGNED\n",
        "source_code_with_indent": "        <IND>tx_flags = account._wallet.get_transaction_flags(tx_hash)\n        is_signed_state = (tx_flags & TxFlags.STATE_SIGNED) == TxFlags.STATE_SIGNED\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>tx_flags = account._wallet.get_transaction_flags(tx_hash)\n        assert tx_flags is not None\n        is_signed_state = (tx_flags & TxFlags.STATE_SIGNED) == TxFlags.STATE_SIGNED\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "2132e0922ed952c7eb61f639b57182657532a757",
    "filename": "examples/applications/restapi/handler_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/examples/applications/restapi/handler_utils.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/applications/restapi/handler_utils.py:547:61 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 547,
    "warning_line": "                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
        "source_code_len": 169,
        "target_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
        "target_code_len": 229,
        "diff_format": "@@ -546,2 +597,3 @@\n                 for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n+                    assert key.derivation_data2 is not None\n                     derivation_path = unpack_derivation_path(key.derivation_data2)\n",
        "source_code_with_indent": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>derivation_path = unpack_derivation_path(key.derivation_data2)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]