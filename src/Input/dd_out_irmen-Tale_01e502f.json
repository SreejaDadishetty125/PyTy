[
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:169:49 Incompatible parameter type [6]: Expected `Dict[str, Union[Sequence[str], str]]` for 1st positional only parameter to call `singlyfy_parameters` but got `Dict[typing.Any, List[typing.Any]]`.",
    "message": " Expected `Dict[str, Union[Sequence[str], str]]` for 1st positional only parameter to call `singlyfy_parameters` but got `Dict[typing.Any, List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 169,
    "warning_line": "                parameters = singlyfy_parameters(parse_qs(qs, encoding=\"UTF-8\"))"
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:170:58 Incompatible parameter type [6]: Expected `Dict[str, str]` for 3rd positional only parameter to call `TaleWsgiAppBase.wsgi_route` but got `Dict[str, Union[Sequence[str], str]]`.",
    "message": " Expected `Dict[str, str]` for 3rd positional only parameter to call `TaleWsgiAppBase.wsgi_route` but got `Dict[str, Union[Sequence[str], str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 170,
    "warning_line": "                return self.wsgi_route(environ, path[5:], parameters, start_response)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef singlyfy_parameters(parameters: Dict[str, Union[str, Sequence[str]]]) -> Dict[str, Union[str, Sequence[str]]]:\n    \"\"\"\n",
        "source_code_len": 124,
        "target_code": "\ndef squash_parameters(parameters: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -44,3 +44,3 @@\n \n-def singlyfy_parameters(parameters: Dict[str, Union[str, Sequence[str]]]) -> Dict[str, Union[str, Sequence[str]]]:\n+def squash_parameters(parameters: Dict[str, Any]) -> Dict[str, Any]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef singlyfy_parameters(parameters: Dict[str, Union[str, Sequence[str]]]) -> Dict[str, Union[str, Sequence[str]]]:\n    <IND>",
        "target_code_with_indent": "\ndef squash_parameters(parameters: Dict[str, Any]) -> Dict[str, Any]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    qs = environ.get(\"QUERY_STRING\", \"\")\n                parameters = singlyfy_parameters(parse_qs(qs, encoding=\"UTF-8\"))\n                return self.wsgi_route(environ, path[5:], parameters, start_response)\n",
        "source_code_len": 224,
        "target_code": "                    qs = environ.get(\"QUERY_STRING\", \"\")\n                parameters = squash_parameters(parse_qs(qs, encoding=\"UTF-8\"))\n                return self.wsgi_route(environ, path[5:], parameters, start_response)\n",
        "target_code_len": 222,
        "diff_format": "@@ -168,3 +168,3 @@\n                     qs = environ.get(\"QUERY_STRING\", \"\")\n-                parameters = singlyfy_parameters(parse_qs(qs, encoding=\"UTF-8\"))\n+                parameters = squash_parameters(parse_qs(qs, encoding=\"UTF-8\"))\n                 return self.wsgi_route(environ, path[5:], parameters, start_response)\n",
        "source_code_with_indent": "                    <IND>qs = environ.get(\"QUERY_STRING\", \"\")\n                <DED>parameters = singlyfy_parameters(parse_qs(qs, encoding=\"UTF-8\"))\n                return self.wsgi_route(environ, path[5:], parameters, start_response)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>qs = environ.get(\"QUERY_STRING\", \"\")\n                <DED>parameters = squash_parameters(parse_qs(qs, encoding=\"UTF-8\"))\n                return self.wsgi_route(environ, path[5:], parameters, start_response)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:230:25 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "message": " Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 230,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"start\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:230:35 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "message": " Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 230,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"start\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:230:88 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 3rd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "message": " Expected `Iterable[typing.Any]` for 3rd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 230,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"start\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:246:25 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "message": " Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 246,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"story\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:246:35 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "message": " Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 246,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"story\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:246:88 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 3rd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "message": " Expected `Iterable[typing.Any]` for 3rd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 246,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"story\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:321:25 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "message": " Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 321,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"license\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:321:35 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "message": " Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 321,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"license\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:321:88 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 3rd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "message": " Expected `Iterable[typing.Any]` for 3rd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 321,
    "warning_line": "        etag = self.etag(id(self), time.mktime(self.driver.server_started.timetuple()), resource.mtime, \"license\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:355:29 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "message": " Expected `Iterable[typing.Any]` for 1st positional only parameter to call `TaleWsgiAppBase.etag` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 355,
    "warning_line": "            etag = self.etag(id(vfs.internal_resources), resource.mtime, path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/if_browser_io.py:355:57 Incompatible parameter type [6]: Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "message": " Expected `Iterable[typing.Any]` for 2nd positional only parameter to call `TaleWsgiAppBase.etag` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 355,
    "warning_line": "            etag = self.etag(id(vfs.internal_resources), resource.mtime, path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def etag(self, *components: Iterable[Any]) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_len": 153,
        "target_code": "\n    def etag(self, *components: Any) -> str:\n        return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_len": 143,
        "diff_format": "@@ -346,3 +354,3 @@\n \n-    def etag(self, *components: Iterable[Any]) -> str:\n+    def etag(self, *components: Any) -> str:\n         return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent": "\n    <DED>def etag(self, *components: Iterable[Any]) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def etag(self, *components: Any) -> str:\n        <IND>return '\"' + md5(\"-\".join(str(c) for c in components).encode(\"ascii\")).hexdigest() + '\"'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/tkinter_io.py:131:37 Incompatible parameter type [6]: Expected `typing.Union[bytes, str]` for 1st parameter `data` to call `tkinter.PhotoImage.__init__` but got `typing.Union[str, typing.ByteString]`.",
    "message": " Expected `typing.Union[bytes, str]` for 1st parameter `data` to call `tkinter.PhotoImage.__init__` but got `typing.Union[str, typing.ByteString]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "            img = tkinter.PhotoImage(data=vfs.internal_resources[\"tio/quill_pen_paper.gif\"].data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"The actual gui-window, containing the output text and the input command bar.\"\"\"\n    def __init__(self, gui: 'TaleGUI', parent: tkinter.Tk, title: str, text: str, modal: bool=False) -> None:\n        super().__init__(parent)\n",
        "source_code_len": 230,
        "target_code": "    \"\"\"The actual gui-window, containing the output text and the input command bar.\"\"\"\n\n    def __init__(self, gui, parent, title, text, modal=False):\n        super().__init__(parent)\n",
        "target_code_len": 184,
        "diff_format": "@@ -98,3 +100,4 @@\n     \"\"\"The actual gui-window, containing the output text and the input command bar.\"\"\"\n-    def __init__(self, gui: 'TaleGUI', parent: tkinter.Tk, title: str, text: str, modal: bool=False) -> None:\n+\n+    def __init__(self, gui, parent, title, text, modal=False):\n         super().__init__(parent)\n",
        "source_code_with_indent": "    <IND>\"\"\"The actual gui-window, containing the output text and the input command bar.\"\"\"\n    def __init__(self, gui: 'TaleGUI', parent: tkinter.Tk, title: str, text: str, modal: bool=False) -> None:\n        <IND>super().__init__(parent)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>\"\"\"The actual gui-window, containing the output text and the input command bar.\"\"\"\n\n    def __init__(self, gui, parent, title, text, modal=False):\n        <IND>super().__init__(parent)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/tkinter_io.py:194:56 Incompatible parameter type [6]: Expected `int` for 2nd parameter `size` to call `tkinter.font.Font.__init__` but got `float`.",
    "message": " Expected `int` for 2nd parameter `size` to call `tkinter.font.Font.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 194,
    "warning_line": "                return tkinter.font.Font(family=family, size=size, weight=weight, slant=slant, underline=underlined)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n        fontfamilies = tkinter.font.families()\n",
        "source_code_len": 246,
        "target_code": "\n    def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n        fontfamilies = tkinter.font.families()\n",
        "target_code_len": 160,
        "diff_format": "@@ -188,4 +191,3 @@\n \n-    def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n-                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n+    def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n         fontfamilies = tkinter.font.families()\n",
        "source_code_with_indent": "\n    <DED>def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n        <IND>fontfamilies = tkinter.font.families()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n        <IND>fontfamilies = tkinter.font.families()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/tkinter_io.py:194:67 Incompatible parameter type [6]: Expected `typing.Union[typing_extensions.Literal['bold'], typing_extensions.Literal['normal']]` for 3rd parameter `weight` to call `tkinter.font.Font.__init__` but got `str`.",
    "message": " Expected `typing.Union[typing_extensions.Literal['bold'], typing_extensions.Literal['normal']]` for 3rd parameter `weight` to call `tkinter.font.Font.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 194,
    "warning_line": "                return tkinter.font.Font(family=family, size=size, weight=weight, slant=slant, underline=underlined)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n        fontfamilies = tkinter.font.families()\n",
        "source_code_len": 246,
        "target_code": "\n    def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n        fontfamilies = tkinter.font.families()\n",
        "target_code_len": 160,
        "diff_format": "@@ -188,4 +191,3 @@\n \n-    def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n-                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n+    def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n         fontfamilies = tkinter.font.families()\n",
        "source_code_with_indent": "\n    <DED>def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n        <IND>fontfamilies = tkinter.font.families()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n        <IND>fontfamilies = tkinter.font.families()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/tkinter_io.py:194:82 Incompatible parameter type [6]: Expected `typing.Union[typing_extensions.Literal['italic'], typing_extensions.Literal['roman']]` for 4th parameter `slant` to call `tkinter.font.Font.__init__` but got `str`.",
    "message": " Expected `typing.Union[typing_extensions.Literal['italic'], typing_extensions.Literal['roman']]` for 4th parameter `slant` to call `tkinter.font.Font.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 194,
    "warning_line": "                return tkinter.font.Font(family=family, size=size, weight=weight, slant=slant, underline=underlined)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n        fontfamilies = tkinter.font.families()\n",
        "source_code_len": 246,
        "target_code": "\n    def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n        fontfamilies = tkinter.font.families()\n",
        "target_code_len": 160,
        "diff_format": "@@ -188,4 +191,3 @@\n \n-    def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n-                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n+    def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n         fontfamilies = tkinter.font.families()\n",
        "source_code_with_indent": "\n    <DED>def FindFont(self, families: Sequence[str], size: float, weight: str=tkinter.font.NORMAL,\n                 slant: str=tkinter.font.ROMAN, underlined: bool=False) -> Optional[tkinter.font.Font]:\n        <IND>fontfamilies = tkinter.font.families()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def FindFont(self, families, size, weight=tkinter.font.NORMAL, slant=tkinter.font.ROMAN, underlined=False):\n        <IND>fontfamilies = tkinter.font.families()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/tkinter_io.py:265:34 Incompatible variable type [9]: event is declared to have type `tkinter.Event[typing.Any]` but is used as type `None`.",
    "message": " event is declared to have type `tkinter.Event[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 265,
    "warning_line": "    def quit_button_clicked(self, event: tkinter.Event=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def quit_button_clicked(self, event: tkinter.Event=None) -> None:\n        quit = tkinter.messagebox.askokcancel(\"Quit Confirmation\",\n",
        "source_code_len": 138,
        "target_code": "\n    def quit_button_clicked(self, event=None):\n        quit = tkinter.messagebox.askokcancel(\"Quit Confirmation\",\n",
        "target_code_len": 115,
        "diff_format": "@@ -264,3 +266,3 @@\n \n-    def quit_button_clicked(self, event: tkinter.Event=None) -> None:\n+    def quit_button_clicked(self, event=None):\n         quit = tkinter.messagebox.askokcancel(\"Quit Confirmation\",\n",
        "source_code_with_indent": "\n    <DED><DED>def quit_button_clicked(self, event: tkinter.Event=None) -> None:\n        <IND>quit = tkinter.messagebox.askokcancel(\"Quit Confirmation\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def quit_button_clicked(self, event=None):\n        <IND>quit = tkinter.messagebox.askokcancel(\"Quit Confirmation\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/tkinter_io.py:314:8 Incompatible attribute type [8]: Attribute `window` declared in class `TaleGUI` has type `TaleWindow` but is used as type `None`.",
    "message": " Attribute `window` declared in class `TaleGUI` has type `TaleWindow` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 314,
    "warning_line": "        self.window = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def mainloop(self, player_connection: PlayerConnection) -> None:\n        self.root.mainloop()   # tkinter main loop\n",
        "source_code_len": 121,
        "target_code": "\n    def mainloop(self, player_connection):\n        self.root.mainloop()   # tkinter main loop\n",
        "target_code_len": 95,
        "diff_format": "@@ -311,3 +314,3 @@\n \n-    def mainloop(self, player_connection: PlayerConnection) -> None:\n+    def mainloop(self, player_connection):\n         self.root.mainloop()   # tkinter main loop\n",
        "source_code_with_indent": "\n    <DED>def mainloop(self, player_connection: PlayerConnection) -> None:\n        <IND>self.root.mainloop()   # tkinter main loop\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def mainloop(self, player_connection):\n        <IND>self.root.mainloop()   # tkinter main loop\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "01e502f65f71280ce4007c10f1c460deb002ea63",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/tkinter_io.py:315:8 Incompatible attribute type [8]: Attribute `root` declared in class `TaleGUI` has type `tkinter.Tk` but is used as type `None`.",
    "message": " Attribute `root` declared in class `TaleGUI` has type `tkinter.Tk` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 315,
    "warning_line": "        self.root = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def mainloop(self, player_connection: PlayerConnection) -> None:\n        self.root.mainloop()   # tkinter main loop\n",
        "source_code_len": 121,
        "target_code": "\n    def mainloop(self, player_connection):\n        self.root.mainloop()   # tkinter main loop\n",
        "target_code_len": 95,
        "diff_format": "@@ -311,3 +314,3 @@\n \n-    def mainloop(self, player_connection: PlayerConnection) -> None:\n+    def mainloop(self, player_connection):\n         self.root.mainloop()   # tkinter main loop\n",
        "source_code_with_indent": "\n    <DED>def mainloop(self, player_connection: PlayerConnection) -> None:\n        <IND>self.root.mainloop()   # tkinter main loop\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def mainloop(self, player_connection):\n        <IND>self.root.mainloop()   # tkinter main loop\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]