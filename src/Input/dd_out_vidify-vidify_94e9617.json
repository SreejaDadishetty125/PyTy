[
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/__init__.py:91:12 Incompatible return type [7]: Expected `None` but got `BaseModuleData`.",
    "message": " Expected `None` but got `BaseModuleData`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 91,
    "warning_line": "            return element",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef find_module(data: Tuple[BaseModuleData], id: str) -> None:\n    for element in data:\n        if element.id == id:\n            return element\n\n    return None\n",
        "source_code_len": 162,
        "target_code": "\ndef find_module(data: Tuple[BaseModuleData], module_id: str) -> BaseModuleData:\n    for element in data:\n        if element.id == module_id:\n            return element\n\n    raise ValueError(\"Module with id {module_id} not found\")\n",
        "target_code_len": 231,
        "diff_format": "@@ -87,7 +87,7 @@\n \n-def find_module(data: Tuple[BaseModuleData], id: str) -> None:\n+def find_module(data: Tuple[BaseModuleData], module_id: str) -> BaseModuleData:\n     for element in data:\n-        if element.id == id:\n+        if element.id == module_id:\n             return element\n \n-    return None\n+    raise ValueError(\"Module with id {module_id} not found\")\n",
        "source_code_with_indent": "\n<DED>def find_module(data: Tuple[BaseModuleData], id: str) -> None:\n    <IND>for element in data:\n        <IND>if element.id == id:\n            <IND>return element\n\n    <DED><DED>return None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def find_module(data: Tuple[BaseModuleData], module_id: str) -> BaseModuleData:\n    <IND>for element in data:\n        <IND>if element.id == module_id:\n            <IND>return element\n\n    <DED><DED>raise ValueError(\"Module with id {module_id} not found\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/config.py:89:8 Incompatible parameter type [6]: Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 89,
    "warning_line": "        args=('-n', '--no-lyrics'),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_len": 85,
        "target_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -45,3 +45,3 @@\n     # available for the argument parser. Otherwise, it's None.\n-    args: Tuple[str]\n+    args: Tuple[str, ...]\n \n",
        "source_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/config.py:98:8 Incompatible parameter type [6]: Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 98,
    "warning_line": "        args=('-f', '--fullscreen'),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_len": 85,
        "target_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -45,3 +45,3 @@\n     # available for the argument parser. Otherwise, it's None.\n-    args: Tuple[str]\n+    args: Tuple[str, ...]\n \n",
        "source_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/config.py:148:8 Incompatible parameter type [6]: Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 148,
    "warning_line": "        args=('-a', '--api'),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_len": 85,
        "target_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -45,3 +45,3 @@\n     # available for the argument parser. Otherwise, it's None.\n-    args: Tuple[str]\n+    args: Tuple[str, ...]\n \n",
        "source_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/config.py:159:8 Incompatible parameter type [6]: Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `Tuple[str]` for 4th parameter `args` to call `FullOption.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "        args=('-p', '--player'),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_len": 85,
        "target_code": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -45,3 +45,3 @@\n     # available for the argument parser. Otherwise, it's None.\n-    args: Tuple[str]\n+    args: Tuple[str, ...]\n \n",
        "source_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # available for the argument parser. Otherwise, it's None.\n    args: Tuple[str, ...]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/player/external.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/player/external.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/player/external.py:46:4 Inconsistent override [15]: `vidify.player.external.Client.__repr__` overrides method defined in `object` inconsistently. Returned type `None` is not a subtype of the overridden return `str`.",
    "message": " `vidify.player.external.Client.__repr__` overrides method defined in `object` inconsistently. Returned type `None` is not a subtype of the overridden return `str`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 46,
    "warning_line": "    def __repr__(self) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __repr__(self) -> None:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: str) -> None:\n        self._socket.write(msg)\n",
        "source_code_len": 149,
        "target_code": "\n    def __repr__(self) -> str:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: bytes) -> None:\n        self._socket.write(msg)\n",
        "target_code_len": 150,
        "diff_format": "@@ -45,6 +45,6 @@\n \n-    def __repr__(self) -> None:\n+    def __repr__(self) -> str:\n         return f\"<Client at {self.address}>\"\n \n-    def send(self, msg: str) -> None:\n+    def send(self, msg: bytes) -> None:\n         self._socket.write(msg)\n",
        "source_code_with_indent": "\n    <DED>def __repr__(self) -> None:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: str) -> None:\n        <IND>self._socket.write(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __repr__(self) -> str:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: bytes) -> None:\n        <IND>self._socket.write(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/player/external.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/player/external.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/player/external.py:47:8 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 47,
    "warning_line": "        return f\"<Client at {self.address}>\"",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __repr__(self) -> None:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: str) -> None:\n        self._socket.write(msg)\n",
        "source_code_len": 149,
        "target_code": "\n    def __repr__(self) -> str:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: bytes) -> None:\n        self._socket.write(msg)\n",
        "target_code_len": 150,
        "diff_format": "@@ -45,6 +45,6 @@\n \n-    def __repr__(self) -> None:\n+    def __repr__(self) -> str:\n         return f\"<Client at {self.address}>\"\n \n-    def send(self, msg: str) -> None:\n+    def send(self, msg: bytes) -> None:\n         self._socket.write(msg)\n",
        "source_code_with_indent": "\n    <DED>def __repr__(self) -> None:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: str) -> None:\n        <IND>self._socket.write(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __repr__(self) -> str:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: bytes) -> None:\n        <IND>self._socket.write(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/player/external.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/player/external.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/player/external.py:274:26 Incompatible parameter type [6]: Expected `Tuple[Client]` for 1st positional only parameter to call `ExternalPlayer.send_message` but got `typing.List[Client]`.",
    "message": " Expected `Tuple[Client]` for 1st positional only parameter to call `ExternalPlayer.send_message` but got `typing.List[Client]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 274,
    "warning_line": "        self.send_message([client], self._media, is_playing=self._is_playing)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import platform\nfrom typing import Tuple\nfrom contextlib import suppress\n",
        "source_code_len": 73,
        "target_code": "import platform\nfrom typing import List\nfrom contextlib import suppress\n",
        "target_code_len": 72,
        "diff_format": "@@ -10,3 +10,3 @@\n import platform\n-from typing import Tuple\n+from typing import List\n from contextlib import suppress\n",
        "source_code_with_indent": "import platform\nfrom typing import Tuple\nfrom contextlib import suppress\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import platform\nfrom typing import List\nfrom contextlib import suppress\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def send_message(self, clients: Tuple[Client], url: str,\n                     absolute_pos: int = None, relative_pos: int = None,\n",
        "source_code_len": 135,
        "target_code": "\n    def send_message(self, clients: List[Client], url: str,\n                     absolute_pos: int = None, relative_pos: int = None,\n",
        "target_code_len": 134,
        "diff_format": "@@ -317,3 +317,3 @@\n \n-    def send_message(self, clients: Tuple[Client], url: str,\n+    def send_message(self, clients: List[Client], url: str,\n                      absolute_pos: int = None, relative_pos: int = None,\n",
        "source_code_with_indent": "\n    <DED>def send_message(self, clients: Tuple[Client], url: str,\n                     absolute_pos: int = None, relative_pos: int = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def send_message(self, clients: List[Client], url: str,\n                     absolute_pos: int = None, relative_pos: int = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/player/external.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/player/external.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/player/external.py:294:20 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Client.send` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `Client.send` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 294,
    "warning_line": "        client.send(reply)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __repr__(self) -> None:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: str) -> None:\n        self._socket.write(msg)\n",
        "source_code_len": 149,
        "target_code": "\n    def __repr__(self) -> str:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: bytes) -> None:\n        self._socket.write(msg)\n",
        "target_code_len": 150,
        "diff_format": "@@ -45,6 +45,6 @@\n \n-    def __repr__(self) -> None:\n+    def __repr__(self) -> str:\n         return f\"<Client at {self.address}>\"\n \n-    def send(self, msg: str) -> None:\n+    def send(self, msg: bytes) -> None:\n         self._socket.write(msg)\n",
        "source_code_with_indent": "\n    <DED>def __repr__(self) -> None:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: str) -> None:\n        <IND>self._socket.write(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __repr__(self) -> str:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: bytes) -> None:\n        <IND>self._socket.write(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/player/external.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/player/external.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/player/external.py:340:19 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Client.send` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `Client.send` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 340,
    "warning_line": "            c.send(dump)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __repr__(self) -> None:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: str) -> None:\n        self._socket.write(msg)\n",
        "source_code_len": 149,
        "target_code": "\n    def __repr__(self) -> str:\n        return f\"<Client at {self.address}>\"\n\n    def send(self, msg: bytes) -> None:\n        self._socket.write(msg)\n",
        "target_code_len": 150,
        "diff_format": "@@ -45,6 +45,6 @@\n \n-    def __repr__(self) -> None:\n+    def __repr__(self) -> str:\n         return f\"<Client at {self.address}>\"\n \n-    def send(self, msg: str) -> None:\n+    def send(self, msg: bytes) -> None:\n         self._socket.write(msg)\n",
        "source_code_with_indent": "\n    <DED>def __repr__(self) -> None:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: str) -> None:\n        <IND>self._socket.write(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __repr__(self) -> str:\n        <IND>return f\"<Client at {self.address}>\"\n\n    <DED>def send(self, msg: bytes) -> None:\n        <IND>self._socket.write(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vidify/vidify",
    "commit": "94e96175173859117338136f51d635a6e7fad406",
    "filename": "vidify/player/external.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vidify-vidify/vidify/player/external.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vidify/player/external.py:439:8 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 439,
    "warning_line": "        self._is_playing = not do_pause",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @pause.setter\n    def pause(self, do_pause: bool) -> bool:\n        \"\"\"\n",
        "source_code_len": 75,
        "target_code": "    @pause.setter\n    def pause(self, do_pause: bool) -> None:\n        \"\"\"\n",
        "target_code_len": 75,
        "diff_format": "@@ -424,3 +424,3 @@\n     @pause.setter\n-    def pause(self, do_pause: bool) -> bool:\n+    def pause(self, do_pause: bool) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@pause.setter\n    def pause(self, do_pause: bool) -> bool:\n        <IND>",
        "target_code_with_indent": "    <DED>@pause.setter\n    def pause(self, do_pause: bool) -> None:\n        <IND>"
      }
    ]
  }
]