[
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:221:41 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 221,
    "warning_line": "                btc_resp = response_data['balance']"
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:670:31 Call error [29]: `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "message": " `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 670,
    "warning_line": "                        amount=add_or_sub(self.totals[token].amount, balance),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    token_totals[token] = token_totals[token] + balance\n\n",
        "source_code_len": 73,
        "target_code": "                    token_totals[token] = token_totals[token] + balance\n\n        if action == AccountAction.APPEND:\n            add_or_sub = operator.add\n        elif action == AccountAction.REMOVE:\n            add_or_sub = operator.sub\n        else:\n            raise AssertionError('Should never happen')\n\n",
        "target_code_len": 308,
        "diff_format": "@@ -659,2 +662,9 @@\n                     token_totals[token] = token_totals[token] + balance\n+\n+        if action == AccountAction.APPEND:\n+            add_or_sub = operator.add\n+        elif action == AccountAction.REMOVE:\n+            add_or_sub = operator.sub\n+        else:\n+            raise AssertionError('Should never happen')\n \n",
        "source_code_with_indent": "                    <DED>token_totals[token] = token_totals[token] + balance\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <DED>token_totals[token] = token_totals[token] + balance\n\n        <DED><DED><DED>if action == AccountAction.APPEND:\n            <IND>add_or_sub = operator.add\n        <DED>elif action == AccountAction.REMOVE:\n            <IND>add_or_sub = operator.sub\n        <DED>else:\n            <IND>raise AssertionError('Should never happen')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:671:34 Call error [29]: `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "message": " `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 671,
    "warning_line": "                        usd_value=add_or_sub(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    token_totals[token] = token_totals[token] + balance\n\n",
        "source_code_len": 73,
        "target_code": "                    token_totals[token] = token_totals[token] + balance\n\n        if action == AccountAction.APPEND:\n            add_or_sub = operator.add\n        elif action == AccountAction.REMOVE:\n            add_or_sub = operator.sub\n        else:\n            raise AssertionError('Should never happen')\n\n",
        "target_code_len": 308,
        "diff_format": "@@ -659,2 +662,9 @@\n                     token_totals[token] = token_totals[token] + balance\n+\n+        if action == AccountAction.APPEND:\n+            add_or_sub = operator.add\n+        elif action == AccountAction.REMOVE:\n+            add_or_sub = operator.sub\n+        else:\n+            raise AssertionError('Should never happen')\n \n",
        "source_code_with_indent": "                    <DED>token_totals[token] = token_totals[token] + balance\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <DED>token_totals[token] = token_totals[token] + balance\n\n        <DED><DED><DED>if action == AccountAction.APPEND:\n            <IND>add_or_sub = operator.add\n        <DED>elif action == AccountAction.REMOVE:\n            <IND>add_or_sub = operator.sub\n        <DED>else:\n            <IND>raise AssertionError('Should never happen')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:763:31 Call error [29]: `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "message": " `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 763,
    "warning_line": "                        amount=add_or_sub(self.totals[token].amount, token_total),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                )\n\n",
        "source_code_len": 19,
        "target_code": "                )\n\n        if action == AccountAction.APPEND:\n            add_or_sub = operator.add\n        elif action == AccountAction.REMOVE:\n            add_or_sub = operator.sub\n        else:\n            raise AssertionError('Should never happen')\n\n",
        "target_code_len": 254,
        "diff_format": "@@ -736,2 +741,9 @@\n                 )\n+\n+        if action == AccountAction.APPEND:\n+            add_or_sub = operator.add\n+        elif action == AccountAction.REMOVE:\n+            add_or_sub = operator.sub\n+        else:\n+            raise AssertionError('Should never happen')\n \n",
        "source_code_with_indent": "                )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                )\n\n        <DED><DED>if action == AccountAction.APPEND:\n            <IND>add_or_sub = operator.add\n        <DED>elif action == AccountAction.REMOVE:\n            <IND>add_or_sub = operator.sub\n        <DED>else:\n            <IND>raise AssertionError('Should never happen')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:764:34 Call error [29]: `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "message": " `Union[typing.Callable(operator.add)[[typing.Any, typing.Any], typing.Any], typing.Callable(operator.sub)[[typing.Any, typing.Any], typing.Any], None]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 764,
    "warning_line": "                        usd_value=add_or_sub(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                )\n\n",
        "source_code_len": 19,
        "target_code": "                )\n\n        if action == AccountAction.APPEND:\n            add_or_sub = operator.add\n        elif action == AccountAction.REMOVE:\n            add_or_sub = operator.sub\n        else:\n            raise AssertionError('Should never happen')\n\n",
        "target_code_len": 254,
        "diff_format": "@@ -736,2 +741,9 @@\n                 )\n+\n+        if action == AccountAction.APPEND:\n+            add_or_sub = operator.add\n+        elif action == AccountAction.REMOVE:\n+            add_or_sub = operator.sub\n+        else:\n+            raise AssertionError('Should never happen')\n \n",
        "source_code_with_indent": "                )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                )\n\n        <DED><DED>if action == AccountAction.APPEND:\n            <IND>add_or_sub = operator.add\n        <DED>elif action == AccountAction.REMOVE:\n            <IND>add_or_sub = operator.sub\n        <DED>else:\n            <IND>raise AssertionError('Should never happen')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:799:34 Incompatible parameter type [6]: Expected `FVal` for 1st positional only parameter to call `Price.__init__` but got `int`.",
    "message": " Expected `FVal` for 1st positional only parameter to call `Price.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 799,
    "warning_line": "                usd_price = Price(1)  # Let's try to continue with a usd/dai price of 1 if error"
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/exchanges/bitmex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/exchanges/bitmex.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/exchanges/bitmex.py:304:20 Incompatible parameter type [6]: Expected `rotkehlchen.typing.Fee` for 7th parameter `fee` to call `AssetMovement.__init__` but got `FVal`.",
    "message": " Expected `rotkehlchen.typing.Fee` for 7th parameter `fee` to call `AssetMovement.__init__` but got `FVal`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 304,
    "warning_line": "                    fee=fee,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen.serialization.deserialize import deserialize_asset_amount, deserialize_fee\nfrom rotkehlchen.typing import ApiKey, ApiSecret, AssetAmount, AssetMovementCategory, Timestamp\nfrom rotkehlchen.user_messages import MessagesAggregator\n",
        "source_code_len": 245,
        "target_code": "from rotkehlchen.serialization.deserialize import deserialize_asset_amount, deserialize_fee\nfrom rotkehlchen.typing import (\n    ApiKey,\n    ApiSecret,\n    AssetAmount,\n    AssetMovementCategory,\n    Fee,\n    Timestamp,\n)\nfrom rotkehlchen.user_messages import MessagesAggregator\n",
        "target_code_len": 279,
        "diff_format": "@@ -17,3 +17,10 @@\n from rotkehlchen.serialization.deserialize import deserialize_asset_amount, deserialize_fee\n-from rotkehlchen.typing import ApiKey, ApiSecret, AssetAmount, AssetMovementCategory, Timestamp\n+from rotkehlchen.typing import (\n+    ApiKey,\n+    ApiSecret,\n+    AssetAmount,\n+    AssetMovementCategory,\n+    Fee,\n+    Timestamp,\n+)\n from rotkehlchen.user_messages import MessagesAggregator\n",
        "source_code_with_indent": "from rotkehlchen.serialization.deserialize import deserialize_asset_amount, deserialize_fee\nfrom rotkehlchen.typing import ApiKey, ApiSecret, AssetAmount, AssetMovementCategory, Timestamp\nfrom rotkehlchen.user_messages import MessagesAggregator\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen.serialization.deserialize import deserialize_asset_amount, deserialize_fee\nfrom rotkehlchen.typing import (\n    ApiKey,\n    ApiSecret,\n    AssetAmount,\n    AssetMovementCategory,\n    Fee,\n    Timestamp,\n)\nfrom rotkehlchen.user_messages import MessagesAggregator\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    # bitmex stores amounts in satoshis\n                    amount = satoshis_to_btc(amount)\n                    fee = satoshis_to_btc(fee)\n\n",
        "source_code_len": 157,
        "target_code": "                    # bitmex stores amounts in satoshis\n                    amount = AssetAmount(satoshis_to_btc(amount))\n                    fee = Fee(satoshis_to_btc(fee))\n\n",
        "target_code_len": 175,
        "diff_format": "@@ -293,4 +300,4 @@\n                     # bitmex stores amounts in satoshis\n-                    amount = satoshis_to_btc(amount)\n-                    fee = satoshis_to_btc(fee)\n+                    amount = AssetAmount(satoshis_to_btc(amount))\n+                    fee = Fee(satoshis_to_btc(fee))\n \n",
        "source_code_with_indent": "                    # bitmex stores amounts in satoshis\n                    <IND>amount = satoshis_to_btc(amount)\n                    fee = satoshis_to_btc(fee)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    # bitmex stores amounts in satoshis\n                    <IND>amount = AssetAmount(satoshis_to_btc(amount))\n                    fee = Fee(satoshis_to_btc(fee))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/exchanges/bittrex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/exchanges/bittrex.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/exchanges/bittrex.py:161:8 Incompatible parameter type [6]: Expected `rotkehlchen.typing.AssetAmount` for 5th parameter `amount` to call `Trade.__init__` but got `FVal`.",
    "message": " Expected `rotkehlchen.typing.AssetAmount` for 5th parameter `amount` to call `Trade.__init__` but got `FVal`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 161,
    "warning_line": "        amount=amount,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ApiSecret,\n    AssetMovementCategory,\n",
        "source_code_len": 42,
        "target_code": "    ApiSecret,\n    AssetAmount,\n    AssetMovementCategory,\n",
        "target_code_len": 59,
        "diff_format": "@@ -41,2 +41,3 @@\n     ApiSecret,\n+    AssetAmount,\n     AssetMovementCategory,\n",
        "source_code_with_indent": "    ApiSecret,\n    AssetMovementCategory,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ApiSecret,\n    AssetAmount,\n    AssetMovementCategory,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    amount = (\n        deserialize_asset_amount(bittrex_trade['Quantity']) -\n        deserialize_asset_amount(bittrex_trade['QuantityRemaining'])\n    )\n",
        "source_code_len": 160,
        "target_code": "    \"\"\"\n    amount = AssetAmount(\n        deserialize_asset_amount(bittrex_trade['Quantity']) -\n        deserialize_asset_amount(bittrex_trade['QuantityRemaining']),\n    )\n",
        "target_code_len": 172,
        "diff_format": "@@ -131,5 +132,5 @@\n     \"\"\"\n-    amount = (\n+    amount = AssetAmount(\n         deserialize_asset_amount(bittrex_trade['Quantity']) -\n-        deserialize_asset_amount(bittrex_trade['QuantityRemaining'])\n+        deserialize_asset_amount(bittrex_trade['QuantityRemaining']),\n     )\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    amount = (\n        deserialize_asset_amount(bittrex_trade['Quantity']) -\n        deserialize_asset_amount(bittrex_trade['QuantityRemaining'])\n    )\n",
        "target_code_with_indent": "\n    amount = AssetAmount(\n        deserialize_asset_amount(bittrex_trade['Quantity']) -\n        deserialize_asset_amount(bittrex_trade['QuantityRemaining']),\n    )\n"
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/exchanges/coinbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/exchanges/coinbase.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/exchanges/coinbase.py:83:8 Incompatible parameter type [6]: Expected `rotkehlchen.typing.Price` for 6th parameter `rate` to call `Trade.__init__` but got `FVal`.",
    "message": " Expected `rotkehlchen.typing.Price` for 6th parameter `rate` to call `Trade.__init__` but got `FVal`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 83,
    "warning_line": "        rate=rate,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Location,\n    Timestamp,\n",
        "source_code_len": 29,
        "target_code": "    Location,\n    Price,\n    Timestamp,\n",
        "target_code_len": 40,
        "diff_format": "@@ -31,2 +32,3 @@\n     Location,\n+    Price,\n     Timestamp,\n",
        "source_code_with_indent": "    Location,\n    Timestamp,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Location,\n    Price,\n    Timestamp,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # The rate is how much you get/give in quotecurrency if you buy/sell 1 unit of base currency\n    rate = native_amount / tx_amount\n    fee_amount = deserialize_fee(raw_trade['fee']['amount'])\n",
        "source_code_len": 195,
        "target_code": "    # The rate is how much you get/give in quotecurrency if you buy/sell 1 unit of base currency\n    rate = Price(native_amount / tx_amount)\n    fee_amount = deserialize_fee(raw_trade['fee']['amount'])\n",
        "target_code_len": 202,
        "diff_format": "@@ -72,3 +74,3 @@\n     # The rate is how much you get/give in quotecurrency if you buy/sell 1 unit of base currency\n-    rate = native_amount / tx_amount\n+    rate = Price(native_amount / tx_amount)\n     fee_amount = deserialize_fee(raw_trade['fee']['amount'])\n",
        "source_code_with_indent": "    # The rate is how much you get/give in quotecurrency if you buy/sell 1 unit of base currency\n    rate = native_amount / tx_amount\n    fee_amount = deserialize_fee(raw_trade['fee']['amount'])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # The rate is how much you get/give in quotecurrency if you buy/sell 1 unit of base currency\n    rate = Price(native_amount / tx_amount)\n    fee_amount = deserialize_fee(raw_trade['fee']['amount'])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/exchanges/gemini.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/exchanges/gemini.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/exchanges/gemini.py:471:20 Incompatible parameter type [6]: Expected `Timestamp` for 3rd parameter `timestamp` to call `AssetMovement.__init__` but got `int`.",
    "message": " Expected `Timestamp` for 3rd parameter `timestamp` to call `AssetMovement.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 471,
    "warning_line": "                    timestamp=timestamp,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                timestamp = deserialize_timestamp(entry['timestampms'])\n                timestamp = int(timestamp / 1000)\n                asset = Asset(entry['currency'])\n",
        "source_code_len": 171,
        "target_code": "                timestamp = deserialize_timestamp(entry['timestampms'])\n                timestamp = Timestamp(int(timestamp / 1000))\n                asset = Asset(entry['currency'])\n",
        "target_code_len": 182,
        "diff_format": "@@ -465,3 +465,3 @@\n                 timestamp = deserialize_timestamp(entry['timestampms'])\n-                timestamp = int(timestamp / 1000)\n+                timestamp = Timestamp(int(timestamp / 1000))\n                 asset = Asset(entry['currency'])\n",
        "source_code_with_indent": "                <IND>timestamp = deserialize_timestamp(entry['timestampms'])\n                timestamp = int(timestamp / 1000)\n                asset = Asset(entry['currency'])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>timestamp = deserialize_timestamp(entry['timestampms'])\n                timestamp = Timestamp(int(timestamp / 1000))\n                asset = Asset(entry['currency'])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/exchanges/poloniex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/exchanges/poloniex.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/exchanges/poloniex.py:133:8 Incompatible parameter type [6]: Expected `Fee` for 7th parameter `fee` to call `Trade.__init__` but got `FVal`.",
    "message": " Expected `Fee` for 7th parameter `fee` to call `Trade.__init__` but got `FVal`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "        fee=fee,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if trade_type == TradeType.BUY:\n        fee = amount * perc_fee\n        fee_currency = quote_currency\n    elif trade_type == TradeType.SELL:\n        fee = cost * perc_fee\n        fee_currency = base_currency\n",
        "source_code_len": 212,
        "target_code": "    if trade_type == TradeType.BUY:\n        fee = Fee(amount * perc_fee)\n        fee_currency = quote_currency\n    elif trade_type == TradeType.SELL:\n        fee = Fee(cost * perc_fee)\n        fee_currency = base_currency\n",
        "target_code_len": 222,
        "diff_format": "@@ -92,6 +92,6 @@\n     if trade_type == TradeType.BUY:\n-        fee = amount * perc_fee\n+        fee = Fee(amount * perc_fee)\n         fee_currency = quote_currency\n     elif trade_type == TradeType.SELL:\n-        fee = cost * perc_fee\n+        fee = Fee(cost * perc_fee)\n         fee_currency = base_currency\n",
        "source_code_with_indent": "    if trade_type == TradeType.BUY:\n        <IND>fee = amount * perc_fee\n        fee_currency = quote_currency\n    <DED>elif trade_type == TradeType.SELL:\n        <IND>fee = cost * perc_fee\n        fee_currency = base_currency\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if trade_type == TradeType.BUY:\n        <IND>fee = Fee(amount * perc_fee)\n        fee_currency = quote_currency\n    <DED>elif trade_type == TradeType.SELL:\n        <IND>fee = Fee(cost * perc_fee)\n        fee_currency = base_currency\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "73ed63be9d07c2ff9c14ed80dcff00df488f81fa",
    "filename": "rotkehlchen/rotkehlchen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/rotkehlchen.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/rotkehlchen.py:159:16 Incompatible parameter type [6]: Expected `Union[typing_extensions.Literal['no'], typing_extensions.Literal['unknown'], typing_extensions.Literal['yes']]` for 4th parameter `sync_approval` to call `PremiumSyncManager.try_premium_at_start` but got `str`.",
    "message": " Expected `Union[typing_extensions.Literal['no'], typing_extensions.Literal['unknown'], typing_extensions.Literal['yes']]` for 4th parameter `sync_approval` to call `PremiumSyncManager.try_premium_at_start` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "                sync_approval=sync_approval,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from gevent.lock import Semaphore\n\n",
        "source_code_len": 35,
        "target_code": "from gevent.lock import Semaphore\nfrom typing_extensions import Literal\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -9,2 +9,3 @@\n from gevent.lock import Semaphore\n+from typing_extensions import Literal\n \n",
        "source_code_with_indent": "from gevent.lock import Semaphore\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from gevent.lock import Semaphore\nfrom typing_extensions import Literal\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            create_new: bool,\n            sync_approval: str,\n            premium_credentials: Optional[PremiumCredentials],\n",
        "source_code_len": 125,
        "target_code": "            create_new: bool,\n            sync_approval: Literal['yes', 'no', 'unknown'],\n            premium_credentials: Optional[PremiumCredentials],\n",
        "target_code_len": 153,
        "diff_format": "@@ -124,3 +125,3 @@\n             create_new: bool,\n-            sync_approval: str,\n+            sync_approval: Literal['yes', 'no', 'unknown'],\n             premium_credentials: Optional[PremiumCredentials],\n",
        "source_code_with_indent": "            create_new: bool,\n            sync_approval: str,\n            premium_credentials: Optional[PremiumCredentials],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            create_new: bool,\n            sync_approval: Literal['yes', 'no', 'unknown'],\n            premium_credentials: Optional[PremiumCredentials],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]