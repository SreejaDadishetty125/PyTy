[
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/docs/snippets_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/docs/snippets_test.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/docs/snippets_test.py:86:34 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 86,
    "warning_line": "        assert_code_snippet_fails(after, state, expected_failure)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n",
        "source_code_len": 103,
        "target_code": "    if expected_failure is not None:\n        assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
        "target_code_len": 136,
        "diff_format": "@@ -85,2 +85,3 @@\n     if expected_failure is not None:\n+        assert after is not None\n         assert_code_snippet_fails(after, state, expected_failure)\n",
        "source_code_with_indent": "    if expected_failure is not None:\n        <IND>assert_code_snippet_fails(after, state, expected_failure)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if expected_failure is not None:\n        <IND>assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/google/engine/engine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/engine/engine.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/engine/engine.py:401:8 Incompatible attribute type [8]: Attribute `_results` declared in class `EngineJob` has type `List[EngineTrialResult]` but is used as type `None`.",
    "message": " Attribute `_results` declared in class `EngineJob` has type `List[EngineTrialResult]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 401,
    "warning_line": "        self._results = None  # type: List[EngineTrialResult]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.program_resource_name = self.job_resource_name.split('/jobs')[0]\n        self._results = None  # type: List[EngineTrialResult]\n\n",
        "source_code_len": 141,
        "target_code": "        self.program_resource_name = self.job_resource_name.split('/jobs')[0]\n        self._results = None  # type: Optional[List[EngineTrialResult]]\n\n",
        "target_code_len": 151,
        "diff_format": "@@ -400,3 +400,3 @@\n         self.program_resource_name = self.job_resource_name.split('/jobs')[0]\n-        self._results = None  # type: List[EngineTrialResult]\n+        self._results = None  # type: Optional[List[EngineTrialResult]]\n \n",
        "source_code_with_indent": "        self.program_resource_name = self.job_resource_name.split('/jobs')[0]\n        self._results = None  # type: List[EngineTrialResult]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.program_resource_name = self.job_resource_name.split('/jobs')[0]\n        self._results = None  # type: Optional[List[EngineTrialResult]]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/google/merge_interactions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/merge_interactions.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/merge_interactions.py:149:12 Incompatible variable type [9]: index is declared to have type `int` but is used as type `Optional[int]`.",
    "message": " index is declared to have type `int` but is used as type `Optional[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 149,
    "warning_line": "            index = circuit.next_moment_operating_on(qubits, index + 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            circuit: Circuit,\n            index: int,\n            qubits: Tuple[ops.QubitId, ...]\n",
        "source_code_len": 98,
        "target_code": "            circuit: Circuit,\n            index: Optional[int],\n            qubits: Tuple[ops.QubitId, ...]\n",
        "target_code_len": 108,
        "diff_format": "@@ -106,3 +106,3 @@\n             circuit: Circuit,\n-            index: int,\n+            index: Optional[int],\n             qubits: Tuple[ops.QubitId, ...]\n",
        "source_code_with_indent": "            circuit: Circuit,\n            index: int,\n            qubits: Tuple[ops.QubitId, ...]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            circuit: Circuit,\n            index: Optional[int],\n            qubits: Tuple[ops.QubitId, ...]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/google/merge_rotations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/merge_rotations.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/merge_rotations.py:73:12 Incompatible variable type [9]: index is declared to have type `int` but is used as type `typing.Optional[int]`.",
    "message": " index is declared to have type `int` but is used as type `typing.Optional[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 73,
    "warning_line": "            index = circuit.next_moment_operating_on([qubit], index + 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Iterable, List, Tuple\n\n",
        "source_code_len": 43,
        "target_code": "\nfrom typing import Iterable, List, Tuple, cast, Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Iterable, List, Tuple\n+from typing import Iterable, List, Tuple, cast, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Iterable, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Iterable, List, Tuple, cast, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self,\n            circuit: Circuit, index: int,\n            qubit: ops.QubitId) -> Tuple[List[int], List[ops.Gate]]:\n",
        "source_code_len": 129,
        "target_code": "            self,\n            circuit: Circuit,\n            index: Optional[int],\n            qubit: ops.QubitId) -> Tuple[List[int], List[ops.Gate]]:\n",
        "target_code_len": 151,
        "diff_format": "@@ -59,3 +59,4 @@\n             self,\n-            circuit: Circuit, index: int,\n+            circuit: Circuit,\n+            index: Optional[int],\n             qubit: ops.QubitId) -> Tuple[List[int], List[ops.Gate]]:\n",
        "source_code_with_indent": "            self,\n            circuit: Circuit, index: int,\n            qubit: ops.QubitId) -> Tuple[List[int], List[ops.Gate]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self,\n            circuit: Circuit,\n            index: Optional[int],\n            qubit: ops.QubitId) -> Tuple[List[int], List[ops.Gate]]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        while index is not None:\n            op = circuit.operation_at(qubit, index)\n            if len(op.qubits) != 1:\n",
        "source_code_len": 121,
        "target_code": "        while index is not None:\n            op = cast(ops.Operation, circuit.operation_at(qubit, index))\n            if len(op.qubits) != 1:\n",
        "target_code_len": 142,
        "diff_format": "@@ -64,3 +65,3 @@\n         while index is not None:\n-            op = circuit.operation_at(qubit, index)\n+            op = cast(ops.Operation, circuit.operation_at(qubit, index))\n             if len(op.qubits) != 1:\n",
        "source_code_with_indent": "        while index is not None:\n            <IND>op = circuit.operation_at(qubit, index)\n            if len(op.qubits) != 1:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        while index is not None:\n            <IND>op = cast(ops.Operation, circuit.operation_at(qubit, index))\n            if len(op.qubits) != 1:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/google/programs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/programs.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/programs.py:35:4 Incompatible variable type [9]: last_time_picos is declared to have type `int` but is used as type `None`.",
    "message": " last_time_picos is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "    last_time_picos = None  # type: int",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from cirq.value import Timestamp\n\n",
        "source_code_len": 34,
        "target_code": "from cirq.value import Timestamp\n\nif TYPE_CHECKING:\n    from typing import Optional  # pylint: disable=unused-import\n\n",
        "target_code_len": 118,
        "diff_format": "@@ -22,2 +22,5 @@\n from cirq.value import Timestamp\n+\n+if TYPE_CHECKING:\n+    from typing import Optional  # pylint: disable=unused-import\n \n",
        "source_code_with_indent": "from cirq.value import Timestamp\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from cirq.value import Timestamp\n\nif TYPE_CHECKING:\n    <IND>from typing import Optional  # pylint: disable=unused-import\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    last_time_picos = None  # type: int\n    for so in schedule.scheduled_operations:\n        gate = xmon_gate_ext.try_cast(so.operation.gate, xmon_gates.XmonGate)\n        op = gate.to_proto(*so.operation.qubits)\n",
        "source_code_len": 220,
        "target_code": "    \"\"\"\n    last_time_picos = None  # type: Optional[int]\n    for so in schedule.scheduled_operations:\n        gate = xmon_gate_ext.cast(so.operation.gate, xmon_gates.XmonGate)\n        op = gate.to_proto(*so.operation.qubits)\n",
        "target_code_len": 226,
        "diff_format": "@@ -34,5 +37,5 @@\n     \"\"\"\n-    last_time_picos = None  # type: int\n+    last_time_picos = None  # type: Optional[int]\n     for so in schedule.scheduled_operations:\n-        gate = xmon_gate_ext.try_cast(so.operation.gate, xmon_gates.XmonGate)\n+        gate = xmon_gate_ext.cast(so.operation.gate, xmon_gates.XmonGate)\n         op = gate.to_proto(*so.operation.qubits)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    last_time_picos = None  # type: int\n    for so in schedule.scheduled_operations:\n        <IND>gate = xmon_gate_ext.try_cast(so.operation.gate, xmon_gates.XmonGate)\n        op = gate.to_proto(*so.operation.qubits)\n",
        "target_code_with_indent": "\n    last_time_picos = None  # type: Optional[int]\n    for so in schedule.scheduled_operations:\n        <IND>gate = xmon_gate_ext.cast(so.operation.gate, xmon_gates.XmonGate)\n        op = gate.to_proto(*so.operation.qubits)\n"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/google/xmon_gate_extensions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/xmon_gate_extensions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/xmon_gate_extensions.py:20:27 Incompatible parameter type [6]: Expected `typing.Optional[typing.Dict[typing.Type[Variable[cirq.extension.extensions.T_DESIRED]], typing.Dict[typing.Type[Variable[cirq.extension.extensions.T_ACTUAL]], typing.Callable[[Variable[cirq.extension.extensions.T_ACTUAL]], typing.Optional[Variable[cirq.extension.extensions.T_DESIRED]]]]]]` for 1st parameter `desired_to_actual_to_wrapper` to call `cirq.extension.extensions.Extensions.__init__` but got `typing.Dict[typing.Type[xmon_gates.XmonGate], typing.Dict[typing.Type[typing.Union[ops.common_gates.MeasurementGate, ops.common_gates.Rot11Gate, ops.common_gates.RotXGate, ops.common_gates.RotYGate, ops.common_gates.RotZGate]], typing.Callable[[Named(e, typing.Any)], typing.Union[xmon_gates.Exp11Gate, xmon_gates.ExpWGate, xmon_gates.ExpZGate, xmon_gates.XmonMeasurementGate]]]]`.",
    "message": " Expected `typing.Optional[typing.Dict[typing.Type[Variable[cirq.extension.extensions.T_DESIRED]], typing.Dict[typing.Type[Variable[cirq.extension.extensions.T_ACTUAL]], typing.Callable[[Variable[cirq.extension.extensions.T_ACTUAL]], typing.Optional[Variable[cirq.extension.extensions.T_DESIRED]]]]]]` for 1st parameter `desired_to_actual_to_wrapper` to call `cirq.extension.extensions.Extensions.__init__` but got `typing.Dict[typing.Type[xmon_gates.XmonGate], typing.Dict[typing.Type[typing.Union[ops.common_gates.MeasurementGate, ops.common_gates.Rot11Gate, ops.common_gates.RotXGate, ops.common_gates.RotYGate, ops.common_gates.RotZGate]], typing.Callable[[Named(e, typing.Any)], typing.Union[xmon_gates.Exp11Gate, xmon_gates.ExpWGate, xmon_gates.ExpZGate, xmon_gates.XmonMeasurementGate]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 20,
    "warning_line": "xmon_gate_ext = Extensions(desired_to_actual_to_wrapper={",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nxmon_gate_ext = Extensions(desired_to_actual_to_wrapper={\n    xmon_gates.XmonGate: {\n        ops.RotXGate: lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                                    axis_half_turns=0),\n        ops.RotYGate: lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                                    axis_half_turns=0.5),\n        ops.RotZGate: lambda e: xmon_gates.ExpZGate(half_turns=e.half_turns),\n        ops.Rot11Gate: lambda e: xmon_gates.Exp11Gate(half_turns=e.half_turns),\n        ops.MeasurementGate: lambda e: xmon_gates.XmonMeasurementGate(\n            key=e.key, invert_mask=e.invert_mask),\n    }\n})\n",
        "source_code_len": 675,
        "target_code": "\nxmon_gate_ext = Extensions()\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.RotXGate,\n    conversion=lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                             axis_half_turns=0))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.RotYGate,\n    conversion=lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                             axis_half_turns=0.5))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.RotZGate,\n    conversion=lambda e: xmon_gates.ExpZGate(half_turns=e.half_turns))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.Rot11Gate,\n    conversion=lambda e: xmon_gates.Exp11Gate(half_turns=e.half_turns))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.MeasurementGate,\n    conversion=lambda e: xmon_gates.XmonMeasurementGate(\n        key=e.key,\n        invert_mask=e.invert_mask))\n",
        "target_code_len": 1030,
        "diff_format": "@@ -19,13 +19,31 @@\n \n-xmon_gate_ext = Extensions(desired_to_actual_to_wrapper={\n-    xmon_gates.XmonGate: {\n-        ops.RotXGate: lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n-                                                    axis_half_turns=0),\n-        ops.RotYGate: lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n-                                                    axis_half_turns=0.5),\n-        ops.RotZGate: lambda e: xmon_gates.ExpZGate(half_turns=e.half_turns),\n-        ops.Rot11Gate: lambda e: xmon_gates.Exp11Gate(half_turns=e.half_turns),\n-        ops.MeasurementGate: lambda e: xmon_gates.XmonMeasurementGate(\n-            key=e.key, invert_mask=e.invert_mask),\n-    }\n-})\n+xmon_gate_ext = Extensions()\n+\n+xmon_gate_ext.add_cast(\n+    desired_type=xmon_gates.XmonGate,\n+    actual_type=ops.RotXGate,\n+    conversion=lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n+                                             axis_half_turns=0))\n+\n+xmon_gate_ext.add_cast(\n+    desired_type=xmon_gates.XmonGate,\n+    actual_type=ops.RotYGate,\n+    conversion=lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n+                                             axis_half_turns=0.5))\n+\n+xmon_gate_ext.add_cast(\n+    desired_type=xmon_gates.XmonGate,\n+    actual_type=ops.RotZGate,\n+    conversion=lambda e: xmon_gates.ExpZGate(half_turns=e.half_turns))\n+\n+xmon_gate_ext.add_cast(\n+    desired_type=xmon_gates.XmonGate,\n+    actual_type=ops.Rot11Gate,\n+    conversion=lambda e: xmon_gates.Exp11Gate(half_turns=e.half_turns))\n+\n+xmon_gate_ext.add_cast(\n+    desired_type=xmon_gates.XmonGate,\n+    actual_type=ops.MeasurementGate,\n+    conversion=lambda e: xmon_gates.XmonMeasurementGate(\n+        key=e.key,\n+        invert_mask=e.invert_mask))\n",
        "source_code_with_indent": "\nxmon_gate_ext = Extensions(desired_to_actual_to_wrapper={\n    xmon_gates.XmonGate: {\n        ops.RotXGate: lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                                    axis_half_turns=0),\n        ops.RotYGate: lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                                    axis_half_turns=0.5),\n        ops.RotZGate: lambda e: xmon_gates.ExpZGate(half_turns=e.half_turns),\n        ops.Rot11Gate: lambda e: xmon_gates.Exp11Gate(half_turns=e.half_turns),\n        ops.MeasurementGate: lambda e: xmon_gates.XmonMeasurementGate(\n            key=e.key, invert_mask=e.invert_mask),\n    }\n})\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nxmon_gate_ext = Extensions()\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.RotXGate,\n    conversion=lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                             axis_half_turns=0))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.RotYGate,\n    conversion=lambda e: xmon_gates.ExpWGate(half_turns=e.half_turns,\n                                             axis_half_turns=0.5))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.RotZGate,\n    conversion=lambda e: xmon_gates.ExpZGate(half_turns=e.half_turns))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.Rot11Gate,\n    conversion=lambda e: xmon_gates.Exp11Gate(half_turns=e.half_turns))\n\nxmon_gate_ext.add_cast(\n    desired_type=xmon_gates.XmonGate,\n    actual_type=ops.MeasurementGate,\n    conversion=lambda e: xmon_gates.XmonMeasurementGate(\n        key=e.key,\n        invert_mask=e.invert_mask))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/schedules/schedule.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/schedules/schedule.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/schedules/schedule.py:97:8 Incompatible variable type [9]: qubits is declared to have type `Iterable[cirq.ops.raw_types.QubitId]` but is used as type `typing.Optional[frozenset[cirq.ops.raw_types.QubitId]]`.",
    "message": " qubits is declared to have type `Iterable[cirq.ops.raw_types.QubitId]` but is used as type `typing.Optional[frozenset[cirq.ops.raw_types.QubitId]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 97,
    "warning_line": "        qubits = None if qubits is None else frozenset(qubits)"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/schedules/schedule.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/schedules/schedule.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/schedules/schedule.py:195:8 Incompatible variable type [9]: time is declared to have type `cirq.value.timestamp.Timestamp` but is used as type `None`.",
    "message": " time is declared to have type `cirq.value.timestamp.Timestamp` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 195,
    "warning_line": "        time = None  # type: Timestamp"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "dev_tools/env_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/dev_tools/env_tools.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dev_tools/env_tools.py:133:13 Incompatible parameter type [6]: Expected `typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `os.chdir` but got `Optional[str]`.",
    "message": " Expected `typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `os.chdir` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "    os.chdir(python3_environment.destination_directory)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import Optional, Iterable, Callable\n\n",
        "source_code_len": 60,
        "target_code": "import sys\nfrom typing import Optional, Iterable, Callable, cast\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -17,3 +17,3 @@\n import sys\n-from typing import Optional, Iterable, Callable\n+from typing import Optional, Iterable, Callable, cast\n \n",
        "source_code_with_indent": "import sys\nfrom typing import Optional, Iterable, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Optional, Iterable, Callable, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    shutil.rmtree(destination_directory)\n    os.chdir(python3_environment.destination_directory)\n    input_directory = python3_environment.destination_directory\n    conversion_script_path = os.path.join(\n        python3_environment.destination_directory,\n        'python2.7-generate.sh')\n",
        "source_code_len": 288,
        "target_code": "    shutil.rmtree(destination_directory)\n    input_directory = cast(str, python3_environment.destination_directory)\n    os.chdir(input_directory)\n    conversion_script_path = os.path.join(\n        input_directory,\n        'python2.7-generate.sh')\n",
        "target_code_len": 247,
        "diff_format": "@@ -132,6 +133,6 @@\n     shutil.rmtree(destination_directory)\n-    os.chdir(python3_environment.destination_directory)\n-    input_directory = python3_environment.destination_directory\n+    input_directory = cast(str, python3_environment.destination_directory)\n+    os.chdir(input_directory)\n     conversion_script_path = os.path.join(\n-        python3_environment.destination_directory,\n+        input_directory,\n         'python2.7-generate.sh')\n",
        "source_code_with_indent": "    shutil.rmtree(destination_directory)\n    os.chdir(python3_environment.destination_directory)\n    input_directory = python3_environment.destination_directory\n    conversion_script_path = os.path.join(\n        python3_environment.destination_directory,\n        'python2.7-generate.sh')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    shutil.rmtree(destination_directory)\n    input_directory = cast(str, python3_environment.destination_directory)\n    os.chdir(input_directory)\n    conversion_script_path = os.path.join(\n        input_directory,\n        'python2.7-generate.sh')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "dev_tools/env_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/dev_tools/env_tools.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dev_tools/env_tools.py:141:24 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `shell_tools.run_cmd` but got `Optional[str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `shell_tools.run_cmd` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 141,
    "warning_line": "                        input_directory,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import Optional, Iterable, Callable\n\n",
        "source_code_len": 60,
        "target_code": "import sys\nfrom typing import Optional, Iterable, Callable, cast\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -17,3 +17,3 @@\n import sys\n-from typing import Optional, Iterable, Callable\n+from typing import Optional, Iterable, Callable, cast\n \n",
        "source_code_with_indent": "import sys\nfrom typing import Optional, Iterable, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Optional, Iterable, Callable, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    shutil.rmtree(destination_directory)\n    os.chdir(python3_environment.destination_directory)\n    input_directory = python3_environment.destination_directory\n    conversion_script_path = os.path.join(\n        python3_environment.destination_directory,\n        'python2.7-generate.sh')\n",
        "source_code_len": 288,
        "target_code": "    shutil.rmtree(destination_directory)\n    input_directory = cast(str, python3_environment.destination_directory)\n    os.chdir(input_directory)\n    conversion_script_path = os.path.join(\n        input_directory,\n        'python2.7-generate.sh')\n",
        "target_code_len": 247,
        "diff_format": "@@ -132,6 +133,6 @@\n     shutil.rmtree(destination_directory)\n-    os.chdir(python3_environment.destination_directory)\n-    input_directory = python3_environment.destination_directory\n+    input_directory = cast(str, python3_environment.destination_directory)\n+    os.chdir(input_directory)\n     conversion_script_path = os.path.join(\n-        python3_environment.destination_directory,\n+        input_directory,\n         'python2.7-generate.sh')\n",
        "source_code_with_indent": "    shutil.rmtree(destination_directory)\n    os.chdir(python3_environment.destination_directory)\n    input_directory = python3_environment.destination_directory\n    conversion_script_path = os.path.join(\n        python3_environment.destination_directory,\n        'python2.7-generate.sh')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    shutil.rmtree(destination_directory)\n    input_directory = cast(str, python3_environment.destination_directory)\n    os.chdir(input_directory)\n    conversion_script_path = os.path.join(\n        input_directory,\n        'python2.7-generate.sh')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "dev_tools/git_env_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/dev_tools/git_env_tools.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dev_tools/git_env_tools.py:70:42 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `prepared_env.PreparedEnv.__init__` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `prepared_env.PreparedEnv.__init__` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "    return prepared_env.PreparedEnv(None, actual_id, base_id, None, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    actual_id = None\n    base_id = None\n    for depth in [10, 100, 1000, None]:\n",
        "source_code_len": 88,
        "target_code": "    \"\"\"\n    actual_id = ''\n    base_id = ''\n    for depth in [10, 100, 1000, None]:\n",
        "target_code_len": 84,
        "diff_format": "@@ -47,4 +47,4 @@\n     \"\"\"\n-    actual_id = None\n-    base_id = None\n+    actual_id = ''\n+    base_id = ''\n     for depth in [10, 100, 1000, None]:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    actual_id = None\n    base_id = None\n    for depth in [10, 100, 1000, None]:\n",
        "target_code_with_indent": "\n    actual_id = ''\n    base_id = ''\n    for depth in [10, 100, 1000, None]:\n"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "dev_tools/git_env_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/dev_tools/git_env_tools.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dev_tools/git_env_tools.py:70:53 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `prepared_env.PreparedEnv.__init__` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `prepared_env.PreparedEnv.__init__` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "    return prepared_env.PreparedEnv(None, actual_id, base_id, None, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    actual_id = None\n    base_id = None\n    for depth in [10, 100, 1000, None]:\n",
        "source_code_len": 88,
        "target_code": "    \"\"\"\n    actual_id = ''\n    base_id = ''\n    for depth in [10, 100, 1000, None]:\n",
        "target_code_len": 84,
        "diff_format": "@@ -47,4 +47,4 @@\n     \"\"\"\n-    actual_id = None\n-    base_id = None\n+    actual_id = ''\n+    base_id = ''\n     for depth in [10, 100, 1000, None]:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    actual_id = None\n    base_id = None\n    for depth in [10, 100, 1000, None]:\n",
        "target_code_with_indent": "\n    actual_id = ''\n    base_id = ''\n    for depth in [10, 100, 1000, None]:\n"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "dev_tools/shell_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/dev_tools/shell_tools.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dev_tools/shell_tools.py:82:19 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `Optional[typing.List[typing.Any]]`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `Optional[typing.List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 82,
    "warning_line": "    return ''.join(chunks) if capture else None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            print(chunk, file=out_pipe, end='')\n        if capture:\n            chunks.append(chunk)\n\n    return ''.join(chunks) if capture else None\n\n",
        "source_code_len": 151,
        "target_code": "            print(chunk, file=out_pipe, end='')\n        if chunks is not None:\n            chunks.append(chunk)\n\n    return ''.join(chunks) if chunks is not None else None\n\n",
        "target_code_len": 173,
        "diff_format": "@@ -78,6 +78,6 @@\n             print(chunk, file=out_pipe, end='')\n-        if capture:\n+        if chunks is not None:\n             chunks.append(chunk)\n \n-    return ''.join(chunks) if capture else None\n+    return ''.join(chunks) if chunks is not None else None\n \n",
        "source_code_with_indent": "            <IND>print(chunk, file=out_pipe, end='')\n        <DED>if capture:\n            <IND>chunks.append(chunk)\n\n    <DED><DED>return ''.join(chunks) if capture else None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>print(chunk, file=out_pipe, end='')\n        <DED>if chunks is not None:\n            <IND>chunks.append(chunk)\n\n    <DED><DED>return ''.join(chunks) if chunks is not None else None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]