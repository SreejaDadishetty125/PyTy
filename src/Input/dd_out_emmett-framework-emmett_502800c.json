[
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:96:49 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `CacheHandler.get_or_set_loop` but got `typing.Callable[..., typing.Any]`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `CacheHandler.get_or_set_loop` but got `typing.Callable[..., typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 96,
    "warning_line": "                return self.get_or_set_loop(key, function, duration)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 99,
        "target_code": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 118,
        "diff_format": "@@ -114,3 +118,3 @@\n         key: str,\n-        function: Awaitable,\n+        function: Callable[[], Awaitable[Any]],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:98:36 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `CacheDecorator.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `CacheDecorator.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 98,
    "warning_line": "        return CacheDecorator(self, key, duration)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        handler: CacheHandler,\n        key: str,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 101,
        "target_code": "        handler: CacheHandler,\n        key: Optional[str],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 111,
        "diff_format": "@@ -148,3 +152,3 @@\n         handler: CacheHandler,\n-        key: str,\n+        key: Optional[str],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        handler: CacheHandler,\n        key: str,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        handler: CacheHandler,\n        key: Optional[str],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:120:26 Call error [29]: `Awaitable[typing.Any]` is not a function.",
    "message": " `Awaitable[typing.Any]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 120,
    "warning_line": "            value = await function()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 99,
        "target_code": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 118,
        "diff_format": "@@ -114,3 +118,3 @@\n         key: str,\n-        function: Awaitable,\n+        function: Callable[[], Awaitable[Any]],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:171:15 Incompatible parameter type [6]: Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `wraps` but got `Awaitable[typing.Any]`.",
    "message": " Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `wraps` but got `Awaitable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "        @wraps(f)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 99,
        "target_code": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 118,
        "diff_format": "@@ -114,3 +118,3 @@\n         key: str,\n-        function: Awaitable,\n+        function: Callable[[], Awaitable[Any]],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        @wraps(f)\n",
        "source_code_len": 72,
        "target_code": "\n    def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        @wraps(f)\n",
        "target_code_len": 134,
        "diff_format": "@@ -169,3 +173,6 @@\n \n-    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n+    def _wrap_loop(\n+        self,\n+        f: Callable[..., Awaitable[Any]]\n+    ) -> Callable[..., Awaitable[Any]]:\n         @wraps(f)\n",
        "source_code_with_indent": "\n    <DED>def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        <IND>@wraps(f)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        <IND>@wraps(f)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:178:21 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `CacheHandler.get_or_set_loop` but got `typing.Callable[[], typing.Any]`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `CacheHandler.get_or_set_loop` but got `typing.Callable[[], typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "                key, lambda: f(*args, **kwargs), self.duration)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 99,
        "target_code": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 118,
        "diff_format": "@@ -114,3 +118,3 @@\n         key: str,\n-        function: Awaitable,\n+        function: Callable[[], Awaitable[Any]],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:178:29 Call error [29]: `Awaitable[typing.Any]` is not a function.",
    "message": " `Awaitable[typing.Any]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 178,
    "warning_line": "                key, lambda: f(*args, **kwargs), self.duration)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 99,
        "target_code": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 118,
        "diff_format": "@@ -114,3 +118,3 @@\n         key: str,\n-        function: Awaitable,\n+        function: Callable[[], Awaitable[Any]],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        @wraps(f)\n",
        "source_code_len": 72,
        "target_code": "\n    def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        @wraps(f)\n",
        "target_code_len": 134,
        "diff_format": "@@ -169,3 +173,6 @@\n \n-    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n+    def _wrap_loop(\n+        self,\n+        f: Callable[..., Awaitable[Any]]\n+    ) -> Callable[..., Awaitable[Any]]:\n         @wraps(f)\n",
        "source_code_with_indent": "\n    <DED>def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        <IND>@wraps(f)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        <IND>@wraps(f)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:183:28 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 1st positional only parameter to call `CacheDecorator._wrap_loop` but got `typing.Callable[..., typing.Any]`.",
    "message": " Expected `Awaitable[typing.Any]` for 1st positional only parameter to call `CacheDecorator._wrap_loop` but got `typing.Callable[..., typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "            self._wrap_loop(f) if asyncio.iscoroutinefunction(f) else",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 99,
        "target_code": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 118,
        "diff_format": "@@ -114,3 +118,3 @@\n         key: str,\n-        function: Awaitable,\n+        function: Callable[[], Awaitable[Any]],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        @wraps(f)\n",
        "source_code_len": 72,
        "target_code": "\n    def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        @wraps(f)\n",
        "target_code_len": 134,
        "diff_format": "@@ -169,3 +173,6 @@\n \n-    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n+    def _wrap_loop(\n+        self,\n+        f: Callable[..., Awaitable[Any]]\n+    ) -> Callable[..., Awaitable[Any]]:\n         @wraps(f)\n",
        "source_code_with_indent": "\n    <DED>def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        <IND>@wraps(f)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        <IND>@wraps(f)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/cache.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/cache.py:187:8 Incompatible return type [7]: Expected `typing.Callable[..., typing.Any]` but got `Union[typing.Callable[..., typing.Any], Awaitable[typing.Any]]`.",
    "message": " Expected `typing.Callable[..., typing.Any]` but got `Union[typing.Callable[..., typing.Any], Awaitable[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 187,
    "warning_line": "        return rv",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_len": 99,
        "target_code": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_len": 118,
        "diff_format": "@@ -114,3 +118,3 @@\n         key: str,\n-        function: Awaitable,\n+        function: Callable[[], Awaitable[Any]],\n         duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent": "        key: str,\n        function: Awaitable,\n        duration: Union[int, str, None] = 'default'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key: str,\n        function: Callable[[], Awaitable[Any]],\n        duration: Union[int, str, None] = 'default'\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        @wraps(f)\n",
        "source_code_len": 72,
        "target_code": "\n    def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        @wraps(f)\n",
        "target_code_len": 134,
        "diff_format": "@@ -169,3 +173,6 @@\n \n-    def _wrap_loop(self, f: Awaitable) -> Awaitable:\n+    def _wrap_loop(\n+        self,\n+        f: Callable[..., Awaitable[Any]]\n+    ) -> Callable[..., Awaitable[Any]]:\n         @wraps(f)\n",
        "source_code_with_indent": "\n    <DED>def _wrap_loop(self, f: Awaitable) -> Awaitable:\n        <IND>@wraps(f)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _wrap_loop(\n        self,\n        f: Callable[..., Awaitable[Any]]\n    ) -> Callable[..., Awaitable[Any]]:\n        <IND>@wraps(f)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/routing/response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/routing/response.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/routing/response.py:27:4 Incompatible attribute type [8]: Attribute `http_cls` declared in class `ResponseBuilder` has type `HTTPResponse` but is used as type `typing.Type[HTTP]`.",
    "message": " Attribute `http_cls` declared in class `ResponseBuilder` has type `HTTPResponse` but is used as type `typing.Type[HTTP]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 27,
    "warning_line": "    http_cls: HTTPResponse = HTTP",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, AnyStr, Dict, Tuple, Union\n\n",
        "source_code_len": 53,
        "target_code": "\nfrom typing import Any, AnyStr, Dict, Tuple, Type, Union\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -13,3 +13,3 @@\n \n-from typing import Any, AnyStr, Dict, Tuple, Union\n+from typing import Any, AnyStr, Dict, Tuple, Type, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Any, AnyStr, Dict, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, AnyStr, Dict, Tuple, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ResponseBuilder:\n    http_cls: HTTPResponse = HTTP\n\n",
        "source_code_len": 58,
        "target_code": "class ResponseBuilder:\n    http_cls: Type[HTTPResponse] = HTTP\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -26,3 +26,3 @@\n class ResponseBuilder:\n-    http_cls: HTTPResponse = HTTP\n+    http_cls: Type[HTTPResponse] = HTTP\n \n",
        "source_code_with_indent": "class ResponseBuilder:\n    <IND>http_cls: HTTPResponse = HTTP\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class ResponseBuilder:\n    <IND>http_cls: Type[HTTPResponse] = HTTP\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        return self.http_cls, output\n",
        "source_code_len": 106,
        "target_code": "\n    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        return self.http_cls, output\n",
        "target_code_len": 112,
        "diff_format": "@@ -31,3 +31,3 @@\n \n-    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n+    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n         return self.http_cls, output\n",
        "source_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        <IND>return self.http_cls, output\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        <IND>return self.http_cls, output\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        return self.http_cls, self.process(output)\n",
        "source_code_len": 120,
        "target_code": "\n    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        return self.http_cls, self.process(output)\n",
        "target_code_len": 126,
        "diff_format": "@@ -39,3 +39,3 @@\n \n-    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n+    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n         return self.http_cls, self.process(output)\n",
        "source_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        <IND>return self.http_cls, self.process(output)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        <IND>return self.http_cls, self.process(output)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class BytesResponseBuilder(ResponseBuilder):\n    http_cls: HTTPResponse = HTTPBytes\n\n",
        "source_code_len": 85,
        "target_code": "class BytesResponseBuilder(ResponseBuilder):\n    http_cls: Type[HTTPResponse] = HTTPBytes\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -44,3 +44,3 @@\n class BytesResponseBuilder(ResponseBuilder):\n-    http_cls: HTTPResponse = HTTPBytes\n+    http_cls: Type[HTTPResponse] = HTTPBytes\n \n",
        "source_code_with_indent": "<DED><DED>class BytesResponseBuilder(ResponseBuilder):\n    <IND>http_cls: HTTPResponse = HTTPBytes\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>class BytesResponseBuilder(ResponseBuilder):\n    <IND>http_cls: Type[HTTPResponse] = HTTPBytes\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emmett-framework/emmett",
    "commit": "502800c0d94f8396f174c041ea1199ae00232302",
    "filename": "emmett/routing/response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emmett-framework-emmett/emmett/routing/response.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "emmett/routing/response.py:45:4 Incompatible attribute type [8]: Attribute `http_cls` declared in class `BytesResponseBuilder` has type `HTTPResponse` but is used as type `typing.Type[HTTPBytes]`.",
    "message": " Attribute `http_cls` declared in class `BytesResponseBuilder` has type `HTTPResponse` but is used as type `typing.Type[HTTPBytes]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 45,
    "warning_line": "    http_cls: HTTPResponse = HTTPBytes",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, AnyStr, Dict, Tuple, Union\n\n",
        "source_code_len": 53,
        "target_code": "\nfrom typing import Any, AnyStr, Dict, Tuple, Type, Union\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -13,3 +13,3 @@\n \n-from typing import Any, AnyStr, Dict, Tuple, Union\n+from typing import Any, AnyStr, Dict, Tuple, Type, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Any, AnyStr, Dict, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, AnyStr, Dict, Tuple, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ResponseBuilder:\n    http_cls: HTTPResponse = HTTP\n\n",
        "source_code_len": 58,
        "target_code": "class ResponseBuilder:\n    http_cls: Type[HTTPResponse] = HTTP\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -26,3 +26,3 @@\n class ResponseBuilder:\n-    http_cls: HTTPResponse = HTTP\n+    http_cls: Type[HTTPResponse] = HTTP\n \n",
        "source_code_with_indent": "class ResponseBuilder:\n    <IND>http_cls: HTTPResponse = HTTP\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class ResponseBuilder:\n    <IND>http_cls: Type[HTTPResponse] = HTTP\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        return self.http_cls, output\n",
        "source_code_len": 106,
        "target_code": "\n    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        return self.http_cls, output\n",
        "target_code_len": 112,
        "diff_format": "@@ -31,3 +31,3 @@\n \n-    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n+    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n         return self.http_cls, output\n",
        "source_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        <IND>return self.http_cls, output\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        <IND>return self.http_cls, output\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        return self.http_cls, self.process(output)\n",
        "source_code_len": 120,
        "target_code": "\n    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        return self.http_cls, self.process(output)\n",
        "target_code_len": 126,
        "diff_format": "@@ -39,3 +39,3 @@\n \n-    def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n+    def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n         return self.http_cls, self.process(output)\n",
        "source_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[HTTPResponse, AnyStr]:\n        <IND>return self.http_cls, self.process(output)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __call__(self, output: Any) -> Tuple[Type[HTTPResponse], AnyStr]:\n        <IND>return self.http_cls, self.process(output)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class BytesResponseBuilder(ResponseBuilder):\n    http_cls: HTTPResponse = HTTPBytes\n\n",
        "source_code_len": 85,
        "target_code": "class BytesResponseBuilder(ResponseBuilder):\n    http_cls: Type[HTTPResponse] = HTTPBytes\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -44,3 +44,3 @@\n class BytesResponseBuilder(ResponseBuilder):\n-    http_cls: HTTPResponse = HTTPBytes\n+    http_cls: Type[HTTPResponse] = HTTPBytes\n \n",
        "source_code_with_indent": "<DED><DED>class BytesResponseBuilder(ResponseBuilder):\n    <IND>http_cls: HTTPResponse = HTTPBytes\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>class BytesResponseBuilder(ResponseBuilder):\n    <IND>http_cls: Type[HTTPResponse] = HTTPBytes\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]