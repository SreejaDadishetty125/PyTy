[
  {
    "project": "pygae/galgebra",
    "commit": "ceacd273cdb095122678af6b1239f2b7b18cd9f4",
    "filename": "galgebra/mv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pygae-galgebra/galgebra/mv.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "galgebra/mv.py:1688:8 Incompatible return type [7]: Expected `Tuple[Dop]` but got `typing.Tuple[Dop, ...]`.",
    "message": " Expected `Tuple[Dop]` but got `typing.Tuple[Dop, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1688,
    "warning_line": "        return tuple(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def components(self) -> Tuple['Dop']:\n        return tuple(\n",
        "source_code_len": 65,
        "target_code": "\n    def components(self) -> Tuple['Dop', ...]:\n        return tuple(\n",
        "target_code_len": 70,
        "diff_format": "@@ -1686,3 +1686,3 @@\n \n-    def components(self) -> Tuple['Dop']:\n+    def components(self) -> Tuple['Dop', ...]:\n         return tuple(\n",
        "source_code_with_indent": "\n    <DED>def components(self) -> Tuple['Dop']:\n        <IND>return tuple(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def components(self) -> Tuple['Dop', ...]:\n        <IND>return tuple(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pygae/galgebra",
    "commit": "ceacd273cdb095122678af6b1239f2b7b18cd9f4",
    "filename": "galgebra/printer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pygae-galgebra/galgebra/printer.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "galgebra/printer.py:1204:4 Incompatible variable type [9]: op_ord is declared to have type `str` but is used as type `typing.List[str]`.",
    "message": " op_ord is declared to have type `str` but is used as type `typing.List[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1204,
    "warning_line": "    op_ord = op_ord.split(',')",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    global _eval_global_dict, _eval_parse_order\n    op_ord = op_ord.split(',')\n    _parser.validate_op_order(op_ord)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord\n\n",
        "source_code_len": 176,
        "target_code": "    global _eval_global_dict, _eval_parse_order\n    op_ord_list = op_ord.split(',')\n    _parser.validate_op_order(op_ord_list)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord_list\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -1203,6 +1203,6 @@\n     global _eval_global_dict, _eval_parse_order\n-    op_ord = op_ord.split(',')\n-    _parser.validate_op_order(op_ord)\n+    op_ord_list = op_ord.split(',')\n+    _parser.validate_op_order(op_ord_list)\n     _eval_global_dict = gd\n-    _eval_parse_order = op_ord\n+    _eval_parse_order = op_ord_list\n \n",
        "source_code_with_indent": "    global _eval_global_dict, _eval_parse_order\n    op_ord = op_ord.split(',')\n    _parser.validate_op_order(op_ord)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    global _eval_global_dict, _eval_parse_order\n    op_ord_list = op_ord.split(',')\n    _parser.validate_op_order(op_ord_list)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord_list\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pygae/galgebra",
    "commit": "ceacd273cdb095122678af6b1239f2b7b18cd9f4",
    "filename": "galgebra/printer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pygae-galgebra/galgebra/printer.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "galgebra/printer.py:1205:30 Incompatible parameter type [6]: Expected `typing.List[str]` for 1st positional only parameter to call `_parser.validate_op_order` but got `str`.",
    "message": " Expected `typing.List[str]` for 1st positional only parameter to call `_parser.validate_op_order` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1205,
    "warning_line": "    _parser.validate_op_order(op_ord)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    global _eval_global_dict, _eval_parse_order\n    op_ord = op_ord.split(',')\n    _parser.validate_op_order(op_ord)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord\n\n",
        "source_code_len": 176,
        "target_code": "    global _eval_global_dict, _eval_parse_order\n    op_ord_list = op_ord.split(',')\n    _parser.validate_op_order(op_ord_list)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord_list\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -1203,6 +1203,6 @@\n     global _eval_global_dict, _eval_parse_order\n-    op_ord = op_ord.split(',')\n-    _parser.validate_op_order(op_ord)\n+    op_ord_list = op_ord.split(',')\n+    _parser.validate_op_order(op_ord_list)\n     _eval_global_dict = gd\n-    _eval_parse_order = op_ord\n+    _eval_parse_order = op_ord_list\n \n",
        "source_code_with_indent": "    global _eval_global_dict, _eval_parse_order\n    op_ord = op_ord.split(',')\n    _parser.validate_op_order(op_ord)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    global _eval_global_dict, _eval_parse_order\n    op_ord_list = op_ord.split(',')\n    _parser.validate_op_order(op_ord_list)\n    _eval_global_dict = gd\n    _eval_parse_order = op_ord_list\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]