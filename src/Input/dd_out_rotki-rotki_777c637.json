[
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/kraken.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/kraken.py:272:33 Incompatible parameter type [6]: Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 272,
    "warning_line": "            return self.usdprice['BTC']",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_len": 79,
        "target_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -23,3 +23,3 @@\n from rotkehlchen import typing\n-from typing import Optional, Tuple, Dict, List\n+from typing import Optional, Tuple, Dict, List, Union, cast\n \n",
        "source_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_len": 216,
        "target_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_len": 376,
        "diff_format": "@@ -104,4 +104,6 @@\n         self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n-        self.usdprice: Dict[typing.Asset, FVal] = {}\n-        self.eurprice: Dict[typing.Asset, FVal] = {}\n+        # typing TODO: Without a union of str and Asset we get lots of warning\n+        # How can this be avoided without too much pain?\n+        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n+        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n         self.session.headers.update({\n",
        "source_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/kraken.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/kraken.py:288:26 Incompatible parameter type [6]: Expected `typing.Asset` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Asset` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 288,
    "warning_line": "            self.usdprice[common_name] = btc_price * self.usdprice['BTC']",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_len": 79,
        "target_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -23,3 +23,3 @@\n from rotkehlchen import typing\n-from typing import Optional, Tuple, Dict, List\n+from typing import Optional, Tuple, Dict, List, Union, cast\n \n",
        "source_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_len": 216,
        "target_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_len": 376,
        "diff_format": "@@ -104,4 +104,6 @@\n         self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n-        self.usdprice: Dict[typing.Asset, FVal] = {}\n-        self.eurprice: Dict[typing.Asset, FVal] = {}\n+        # typing TODO: Without a union of str and Asset we get lots of warning\n+        # How can this be avoided without too much pain?\n+        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n+        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n         self.session.headers.update({\n",
        "source_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/kraken.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/kraken.py:288:67 Incompatible parameter type [6]: Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 288,
    "warning_line": "            self.usdprice[common_name] = btc_price * self.usdprice['BTC']",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_len": 79,
        "target_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -23,3 +23,3 @@\n from rotkehlchen import typing\n-from typing import Optional, Tuple, Dict, List\n+from typing import Optional, Tuple, Dict, List, Union, cast\n \n",
        "source_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_len": 216,
        "target_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_len": 376,
        "diff_format": "@@ -104,4 +104,6 @@\n         self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n-        self.usdprice: Dict[typing.Asset, FVal] = {}\n-        self.eurprice: Dict[typing.Asset, FVal] = {}\n+        # typing TODO: Without a union of str and Asset we get lots of warning\n+        # How can this be avoided without too much pain?\n+        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n+        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n         self.session.headers.update({\n",
        "source_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/kraken.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/kraken.py:289:26 Incompatible parameter type [6]: Expected `typing.Asset` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Asset` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 289,
    "warning_line": "            self.eurprice[common_name] = btc_price * self.eurprice['BTC']",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_len": 79,
        "target_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -23,3 +23,3 @@\n from rotkehlchen import typing\n-from typing import Optional, Tuple, Dict, List\n+from typing import Optional, Tuple, Dict, List, Union, cast\n \n",
        "source_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_len": 216,
        "target_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_len": 376,
        "diff_format": "@@ -104,4 +104,6 @@\n         self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n-        self.usdprice: Dict[typing.Asset, FVal] = {}\n-        self.eurprice: Dict[typing.Asset, FVal] = {}\n+        # typing TODO: Without a union of str and Asset we get lots of warning\n+        # How can this be avoided without too much pain?\n+        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n+        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n         self.session.headers.update({\n",
        "source_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/kraken.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/kraken.py:289:67 Incompatible parameter type [6]: Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 289,
    "warning_line": "            self.eurprice[common_name] = btc_price * self.eurprice['BTC']",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_len": 79,
        "target_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -23,3 +23,3 @@\n from rotkehlchen import typing\n-from typing import Optional, Tuple, Dict, List\n+from typing import Optional, Tuple, Dict, List, Union, cast\n \n",
        "source_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_len": 216,
        "target_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_len": 376,
        "diff_format": "@@ -104,4 +104,6 @@\n         self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n-        self.usdprice: Dict[typing.Asset, FVal] = {}\n-        self.eurprice: Dict[typing.Asset, FVal] = {}\n+        # typing TODO: Without a union of str and Asset we get lots of warning\n+        # How can this be avoided without too much pain?\n+        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n+        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n         self.session.headers.update({\n",
        "source_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/kraken.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/kraken.py:290:29 Incompatible parameter type [6]: Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `typing.Asset` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 290,
    "warning_line": "        return self.usdprice[common_name]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_len": 79,
        "target_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -23,3 +23,3 @@\n from rotkehlchen import typing\n-from typing import Optional, Tuple, Dict, List\n+from typing import Optional, Tuple, Dict, List, Union, cast\n \n",
        "source_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_len": 216,
        "target_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_len": 376,
        "diff_format": "@@ -104,4 +104,6 @@\n         self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n-        self.usdprice: Dict[typing.Asset, FVal] = {}\n-        self.eurprice: Dict[typing.Asset, FVal] = {}\n+        # typing TODO: Without a union of str and Asset we get lots of warning\n+        # How can this be avoided without too much pain?\n+        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n+        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n         self.session.headers.update({\n",
        "source_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/kraken.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/kraken.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/kraken.py:299:30 Incompatible parameter type [6]: Expected `typing.Asset` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Asset` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 299,
    "warning_line": "                self.usdprice['EUR'] = query_fiat_pair('EUR', 'USD')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_len": 79,
        "target_code": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -23,3 +23,3 @@\n from rotkehlchen import typing\n-from typing import Optional, Tuple, Dict, List\n+from typing import Optional, Tuple, Dict, List, Union, cast\n \n",
        "source_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen import typing\nfrom typing import Optional, Tuple, Dict, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_len": 216,
        "target_code": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_len": 376,
        "diff_format": "@@ -104,4 +104,6 @@\n         self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n-        self.usdprice: Dict[typing.Asset, FVal] = {}\n-        self.eurprice: Dict[typing.Asset, FVal] = {}\n+        # typing TODO: Without a union of str and Asset we get lots of warning\n+        # How can this be avoided without too much pain?\n+        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n+        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n         self.session.headers.update({\n",
        "source_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        self.usdprice: Dict[typing.Asset, FVal] = {}\n        self.eurprice: Dict[typing.Asset, FVal] = {}\n        self.session.headers.update({\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.uri = 'https://api.kraken.com/{}/'.format(self.apiversion)\n        # typing TODO: Without a union of str and Asset we get lots of warning\n        # How can this be avoided without too much pain?\n        self.usdprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.eurprice: Dict[Union[typing.Asset, str], FVal] = {}\n        self.session.headers.update({\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/poloniex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/poloniex.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/poloniex.py:315:8 Incompatible return type [7]: Expected `List[typing.Any]` but got `Union[Dict[typing.Any, typing.Any], List[typing.Any]]`.",
    "message": " Expected `List[typing.Any]` but got `Union[Dict[typing.Any, typing.Any], List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 315,
    "warning_line": "        return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            end_at_least_ts: typing.Timestamp,\n    ) -> List:\n        with self.lock:\n",
        "source_code_len": 86,
        "target_code": "            end_at_least_ts: typing.Timestamp,\n    ) -> Union[List, Dict]:\n        with self.lock:\n",
        "target_code_len": 99,
        "diff_format": "@@ -290,3 +290,3 @@\n             end_at_least_ts: typing.Timestamp,\n-    ) -> List:\n+    ) -> Union[List, Dict]:\n         with self.lock:\n",
        "source_code_with_indent": "            end_at_least_ts: typing.Timestamp,\n    ) -> List:\n        <IND>with self.lock:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            end_at_least_ts: typing.Timestamp,\n    ) -> Union[List, Dict]:\n        <IND>with self.lock:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/poloniex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/poloniex.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/poloniex.py:427:33 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 427,
    "warning_line": "        for withdrawal in result['withdrawals']:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union\n\n",
        "source_code_len": 90,
        "target_code": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union, cast\n\n",
        "target_code_len": 96,
        "diff_format": "@@ -9,3 +9,3 @@\n from urllib.parse import urlencode\n-from typing import Tuple, Dict, Optional, List, Union\n+from typing import Tuple, Dict, Optional, List, Union, cast\n \n",
        "source_code_with_indent": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )\n        if cache is None:\n",
        "source_code_len": 40,
        "target_code": "            )\n            cache = cast(Dict, cache)\n        if cache is None:\n",
        "target_code_len": 78,
        "diff_format": "@@ -413,2 +419,3 @@\n             )\n+            cache = cast(Dict, cache)\n         if cache is None:\n",
        "source_code_with_indent": "            )\n        <DED>if cache is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )\n            cache = cast(Dict, cache)\n        <DED>if cache is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "777c637ca042a57c57fbef07b376c89d73f6742f",
    "filename": "rotkehlchen/poloniex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/poloniex.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/poloniex.py:437:30 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 437,
    "warning_line": "        for deposit in result['deposits']:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union\n\n",
        "source_code_len": 90,
        "target_code": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union, cast\n\n",
        "target_code_len": 96,
        "diff_format": "@@ -9,3 +9,3 @@\n from urllib.parse import urlencode\n-from typing import Tuple, Dict, Optional, List, Union\n+from typing import Tuple, Dict, Optional, List, Union, cast\n \n",
        "source_code_with_indent": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from urllib.parse import urlencode\nfrom typing import Tuple, Dict, Optional, List, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )\n        if cache is None:\n",
        "source_code_len": 40,
        "target_code": "            )\n            cache = cast(Dict, cache)\n        if cache is None:\n",
        "target_code_len": 78,
        "diff_format": "@@ -413,2 +419,3 @@\n             )\n+            cache = cast(Dict, cache)\n         if cache is None:\n",
        "source_code_with_indent": "            )\n        <DED>if cache is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )\n            cache = cast(Dict, cache)\n        <DED>if cache is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]