[
  {
    "project": "trezor/trezor-firmware",
    "commit": "2a91052b021d02039cf8a609414e0bc01db90cd6",
    "filename": "core/src/trezor/ui/layouts/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/trezor/ui/layouts/tt/__init__.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/trezor/ui/layouts/tt/__init__.py:927:22 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `HoldToConfirm`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `HoldToConfirm`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 927,
    "warning_line": "        interact(ctx, HoldToConfirm(text), \"modify_fee\", ButtonRequestType.SignTx)"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "2a91052b021d02039cf8a609414e0bc01db90cd6",
    "filename": "core/src/trezor/ui/layouts/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/trezor/ui/layouts/tt/__init__.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/trezor/ui/layouts/tt/__init__.py:941:22 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `HoldToConfirm`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `HoldToConfirm`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 941,
    "warning_line": "        interact(ctx, HoldToConfirm(text), \"coinjoin_final\", ButtonRequestType.Other)"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "2a91052b021d02039cf8a609414e0bc01db90cd6",
    "filename": "core/src/trezor/ui/layouts/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/trezor/ui/layouts/tt/__init__.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/trezor/ui/layouts/tt/__init__.py:971:26 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Confirm`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Confirm`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 971,
    "warning_line": "            interact(ctx, Confirm(text), br_type, ButtonRequestType.Other)"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "2a91052b021d02039cf8a609414e0bc01db90cd6",
    "filename": "core/src/trezor/ui/layouts/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/trezor/ui/layouts/tt/__init__.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/trezor/ui/layouts/tt/__init__.py:1007:17 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Confirm`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Confirm`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1007,
    "warning_line": "            ctx, Confirm(text), \"confirm_timebounds\", ButtonRequestType.ConfirmOutput",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n# TODO cleanup @ redesign\nasync def confirm_timebounds_stellar(\n    ctx: wire.GenericContext, start: int, end: int\n) -> None:\n    text = Text(\"Confirm timebounds\", ui.ICON_SEND, ui.GREEN)\n    text.bold(\"Valid from (UTC):\")\n    if start:\n        text.normal(str(start))\n    else:\n        text.mono(\"[no restriction]\")\n\n    text.bold(\"Valid to (UTC):\")\n    if end:\n        text.normal(str(end))\n    else:\n        text.mono(\"[no restriction]\")\n\n    await raise_if_cancelled(\n        interact(\n            ctx, Confirm(text), \"confirm_timebounds\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\n# TODO cleanup @ redesign\nasync def confirm_transfer_binance(\n    ctx: wire.GenericContext, inputs_outputs: Sequence[Tuple[str, str, str]]\n) -> None:\n    pages: list[ui.Component] = []\n    for title, amount, address in inputs_outputs:\n        coin_page = Text(title, ui.ICON_SEND, icon_color=ui.GREEN, new_lines=False)\n        coin_page.bold(amount)\n        coin_page.normal(\"\\nto\\n\")\n        coin_page.mono(*_split_address(address))\n        pages.append(coin_page)\n\n    pages[-1] = HoldToConfirm(pages[-1])\n\n    await raise_if_cancelled(\n        interact(\n            ctx, Paginated(pages), \"confirm_transfer\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\nasync def show_popup(\n",
        "source_code_len": 1279,
        "target_code": "\nasync def show_popup(\n",
        "target_code_len": 23,
        "diff_format": "@@ -987,47 +917,2 @@\n \n-# TODO cleanup @ redesign\n-async def confirm_timebounds_stellar(\n-    ctx: wire.GenericContext, start: int, end: int\n-) -> None:\n-    text = Text(\"Confirm timebounds\", ui.ICON_SEND, ui.GREEN)\n-    text.bold(\"Valid from (UTC):\")\n-    if start:\n-        text.normal(str(start))\n-    else:\n-        text.mono(\"[no restriction]\")\n-\n-    text.bold(\"Valid to (UTC):\")\n-    if end:\n-        text.normal(str(end))\n-    else:\n-        text.mono(\"[no restriction]\")\n-\n-    await raise_if_cancelled(\n-        interact(\n-            ctx, Confirm(text), \"confirm_timebounds\", ButtonRequestType.ConfirmOutput\n-        )\n-    )\n-\n-\n-# TODO cleanup @ redesign\n-async def confirm_transfer_binance(\n-    ctx: wire.GenericContext, inputs_outputs: Sequence[Tuple[str, str, str]]\n-) -> None:\n-    pages: list[ui.Component] = []\n-    for title, amount, address in inputs_outputs:\n-        coin_page = Text(title, ui.ICON_SEND, icon_color=ui.GREEN, new_lines=False)\n-        coin_page.bold(amount)\n-        coin_page.normal(\"\\nto\\n\")\n-        coin_page.mono(*_split_address(address))\n-        pages.append(coin_page)\n-\n-    pages[-1] = HoldToConfirm(pages[-1])\n-\n-    await raise_if_cancelled(\n-        interact(\n-            ctx, Paginated(pages), \"confirm_transfer\", ButtonRequestType.ConfirmOutput\n-        )\n-    )\n-\n-\n async def show_popup(\n",
        "source_code_with_indent": "\n# TODO cleanup @ redesign\n<DED>async def confirm_timebounds_stellar(\n    ctx: wire.GenericContext, start: int, end: int\n) -> None:\n    <IND>text = Text(\"Confirm timebounds\", ui.ICON_SEND, ui.GREEN)\n    text.bold(\"Valid from (UTC):\")\n    if start:\n        <IND>text.normal(str(start))\n    <DED>else:\n        <IND>text.mono(\"[no restriction]\")\n\n    <DED>text.bold(\"Valid to (UTC):\")\n    if end:\n        <IND>text.normal(str(end))\n    <DED>else:\n        <IND>text.mono(\"[no restriction]\")\n\n    <DED>await raise_if_cancelled(\n        interact(\n            ctx, Confirm(text), \"confirm_timebounds\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\n# TODO cleanup @ redesign\n<DED>async def confirm_transfer_binance(\n    ctx: wire.GenericContext, inputs_outputs: Sequence[Tuple[str, str, str]]\n) -> None:\n    <IND>pages: list[ui.Component] = []\n    for title, amount, address in inputs_outputs:\n        <IND>coin_page = Text(title, ui.ICON_SEND, icon_color=ui.GREEN, new_lines=False)\n        coin_page.bold(amount)\n        coin_page.normal(\"\\nto\\n\")\n        coin_page.mono(*_split_address(address))\n        pages.append(coin_page)\n\n    <DED>pages[-1] = HoldToConfirm(pages[-1])\n\n    await raise_if_cancelled(\n        interact(\n            ctx, Paginated(pages), \"confirm_transfer\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\n<DED>async def show_popup(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>async def show_popup(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "2a91052b021d02039cf8a609414e0bc01db90cd6",
    "filename": "core/src/trezor/ui/layouts/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/trezor/ui/layouts/tt/__init__.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/trezor/ui/layouts/tt/__init__.py:1028:17 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Paginated`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Paginated`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1028,
    "warning_line": "            ctx, Paginated(pages), \"confirm_transfer\", ButtonRequestType.ConfirmOutput",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n# TODO cleanup @ redesign\nasync def confirm_timebounds_stellar(\n    ctx: wire.GenericContext, start: int, end: int\n) -> None:\n    text = Text(\"Confirm timebounds\", ui.ICON_SEND, ui.GREEN)\n    text.bold(\"Valid from (UTC):\")\n    if start:\n        text.normal(str(start))\n    else:\n        text.mono(\"[no restriction]\")\n\n    text.bold(\"Valid to (UTC):\")\n    if end:\n        text.normal(str(end))\n    else:\n        text.mono(\"[no restriction]\")\n\n    await raise_if_cancelled(\n        interact(\n            ctx, Confirm(text), \"confirm_timebounds\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\n# TODO cleanup @ redesign\nasync def confirm_transfer_binance(\n    ctx: wire.GenericContext, inputs_outputs: Sequence[Tuple[str, str, str]]\n) -> None:\n    pages: list[ui.Component] = []\n    for title, amount, address in inputs_outputs:\n        coin_page = Text(title, ui.ICON_SEND, icon_color=ui.GREEN, new_lines=False)\n        coin_page.bold(amount)\n        coin_page.normal(\"\\nto\\n\")\n        coin_page.mono(*_split_address(address))\n        pages.append(coin_page)\n\n    pages[-1] = HoldToConfirm(pages[-1])\n\n    await raise_if_cancelled(\n        interact(\n            ctx, Paginated(pages), \"confirm_transfer\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\nasync def show_popup(\n",
        "source_code_len": 1279,
        "target_code": "\nasync def show_popup(\n",
        "target_code_len": 23,
        "diff_format": "@@ -987,47 +917,2 @@\n \n-# TODO cleanup @ redesign\n-async def confirm_timebounds_stellar(\n-    ctx: wire.GenericContext, start: int, end: int\n-) -> None:\n-    text = Text(\"Confirm timebounds\", ui.ICON_SEND, ui.GREEN)\n-    text.bold(\"Valid from (UTC):\")\n-    if start:\n-        text.normal(str(start))\n-    else:\n-        text.mono(\"[no restriction]\")\n-\n-    text.bold(\"Valid to (UTC):\")\n-    if end:\n-        text.normal(str(end))\n-    else:\n-        text.mono(\"[no restriction]\")\n-\n-    await raise_if_cancelled(\n-        interact(\n-            ctx, Confirm(text), \"confirm_timebounds\", ButtonRequestType.ConfirmOutput\n-        )\n-    )\n-\n-\n-# TODO cleanup @ redesign\n-async def confirm_transfer_binance(\n-    ctx: wire.GenericContext, inputs_outputs: Sequence[Tuple[str, str, str]]\n-) -> None:\n-    pages: list[ui.Component] = []\n-    for title, amount, address in inputs_outputs:\n-        coin_page = Text(title, ui.ICON_SEND, icon_color=ui.GREEN, new_lines=False)\n-        coin_page.bold(amount)\n-        coin_page.normal(\"\\nto\\n\")\n-        coin_page.mono(*_split_address(address))\n-        pages.append(coin_page)\n-\n-    pages[-1] = HoldToConfirm(pages[-1])\n-\n-    await raise_if_cancelled(\n-        interact(\n-            ctx, Paginated(pages), \"confirm_transfer\", ButtonRequestType.ConfirmOutput\n-        )\n-    )\n-\n-\n async def show_popup(\n",
        "source_code_with_indent": "\n# TODO cleanup @ redesign\n<DED>async def confirm_timebounds_stellar(\n    ctx: wire.GenericContext, start: int, end: int\n) -> None:\n    <IND>text = Text(\"Confirm timebounds\", ui.ICON_SEND, ui.GREEN)\n    text.bold(\"Valid from (UTC):\")\n    if start:\n        <IND>text.normal(str(start))\n    <DED>else:\n        <IND>text.mono(\"[no restriction]\")\n\n    <DED>text.bold(\"Valid to (UTC):\")\n    if end:\n        <IND>text.normal(str(end))\n    <DED>else:\n        <IND>text.mono(\"[no restriction]\")\n\n    <DED>await raise_if_cancelled(\n        interact(\n            ctx, Confirm(text), \"confirm_timebounds\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\n# TODO cleanup @ redesign\n<DED>async def confirm_transfer_binance(\n    ctx: wire.GenericContext, inputs_outputs: Sequence[Tuple[str, str, str]]\n) -> None:\n    <IND>pages: list[ui.Component] = []\n    for title, amount, address in inputs_outputs:\n        <IND>coin_page = Text(title, ui.ICON_SEND, icon_color=ui.GREEN, new_lines=False)\n        coin_page.bold(amount)\n        coin_page.normal(\"\\nto\\n\")\n        coin_page.mono(*_split_address(address))\n        pages.append(coin_page)\n\n    <DED>pages[-1] = HoldToConfirm(pages[-1])\n\n    await raise_if_cancelled(\n        interact(\n            ctx, Paginated(pages), \"confirm_transfer\", ButtonRequestType.ConfirmOutput\n        )\n    )\n\n\n<DED>async def show_popup(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>async def show_popup(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "2a91052b021d02039cf8a609414e0bc01db90cd6",
    "filename": "core/src/trezor/ui/layouts/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/trezor/ui/layouts/tt/__init__.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/trezor/ui/layouts/tt/__init__.py:1036:14 Unbound name [10]: Name `Optional` is used but not defined in the current scope.",
    "message": " Name `Optional` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 1036,
    "warning_line": "    subtitle: Optional[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    description: str,\n    subtitle: Optional[str] = None,\n    description_param: str = \"\",\n",
        "source_code_len": 91,
        "target_code": "    description: str,\n    subtitle: str | None = None,\n    description_param: str = \"\",\n",
        "target_code_len": 88,
        "diff_format": "@@ -1035,3 +920,3 @@\n     description: str,\n-    subtitle: Optional[str] = None,\n+    subtitle: str | None = None,\n     description_param: str = \"\",\n",
        "source_code_with_indent": "    description: str,\n    subtitle: Optional[str] = None,\n    description_param: str = \"\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    description: str,\n    subtitle: str | None = None,\n    description_param: str = \"\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "2a91052b021d02039cf8a609414e0bc01db90cd6",
    "filename": "core/src/trezor/ui/layouts/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/core/src/trezor/ui/layouts/tt/__init__.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/src/trezor/ui/layouts/tt/__init__.py:1062:32 Incompatible parameter type [6]: Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Confirm`.",
    "message": " Expected `Awaitable[typing.Any]` for 2nd positional only parameter to call `interact` but got `Confirm`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1062,
    "warning_line": "            await interact(ctx, confirm, \"confirm_webauthn\", ButtonRequestType.Other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nasync def confirm_webauthn(\n    ctx: Optional[wire.GenericContext],\n    info: ConfirmInfo,\n    pageable: Optional[Pageable] = None,\n) -> bool:\n    if pageable is not None:\n        confirm: ui.Layout = ConfirmPageable(pageable, ConfirmContent(info))\n    else:\n        confirm = Confirm(ConfirmContent(info))\n\n    if ctx is None:\n        return is_confirmed(await confirm)\n    else:\n        return is_confirmed(\n            await interact(ctx, confirm, \"confirm_webauthn\", ButtonRequestType.Other)\n        )\n\n\nasync def confirm_webauthn_reset() -> bool:\n    text = Text(\"FIDO2 Reset\", ui.ICON_CONFIG)\n    text.normal(\"Do you really want to\")\n    text.bold(\"erase all credentials?\")\n    return is_confirmed(await Confirm(text))\n\n\ndef draw_simple_text(title: str, description: str = \"\") -> None:\n",
        "source_code_len": 793,
        "target_code": "\ndef draw_simple_text(title: str, description: str = \"\") -> None:\n",
        "target_code_len": 66,
        "diff_format": "@@ -1047,27 +932,2 @@\n \n-async def confirm_webauthn(\n-    ctx: Optional[wire.GenericContext],\n-    info: ConfirmInfo,\n-    pageable: Optional[Pageable] = None,\n-) -> bool:\n-    if pageable is not None:\n-        confirm: ui.Layout = ConfirmPageable(pageable, ConfirmContent(info))\n-    else:\n-        confirm = Confirm(ConfirmContent(info))\n-\n-    if ctx is None:\n-        return is_confirmed(await confirm)\n-    else:\n-        return is_confirmed(\n-            await interact(ctx, confirm, \"confirm_webauthn\", ButtonRequestType.Other)\n-        )\n-\n-\n-async def confirm_webauthn_reset() -> bool:\n-    text = Text(\"FIDO2 Reset\", ui.ICON_CONFIG)\n-    text.normal(\"Do you really want to\")\n-    text.bold(\"erase all credentials?\")\n-    return is_confirmed(await Confirm(text))\n-\n-\n def draw_simple_text(title: str, description: str = \"\") -> None:\n",
        "source_code_with_indent": "\n<DED>async def confirm_webauthn(\n    ctx: Optional[wire.GenericContext],\n    info: ConfirmInfo,\n    pageable: Optional[Pageable] = None,\n) -> bool:\n    <IND>if pageable is not None:\n        <IND>confirm: ui.Layout = ConfirmPageable(pageable, ConfirmContent(info))\n    <DED>else:\n        <IND>confirm = Confirm(ConfirmContent(info))\n\n    <DED>if ctx is None:\n        <IND>return is_confirmed(await confirm)\n    <DED>else:\n        <IND>return is_confirmed(\n            await interact(ctx, confirm, \"confirm_webauthn\", ButtonRequestType.Other)\n        )\n\n\n<DED><DED>async def confirm_webauthn_reset() -> bool:\n    <IND>text = Text(\"FIDO2 Reset\", ui.ICON_CONFIG)\n    text.normal(\"Do you really want to\")\n    text.bold(\"erase all credentials?\")\n    return is_confirmed(await Confirm(text))\n\n\n<DED>def draw_simple_text(title: str, description: str = \"\") -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def draw_simple_text(title: str, description: str = \"\") -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]