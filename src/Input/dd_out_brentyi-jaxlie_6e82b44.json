[
  {
    "project": "brentyi/jaxlie",
    "commit": "6e82b447bd4c558798d652d90ef189de12377ca9",
    "filename": "tests/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/brentyi-jaxlie/tests/utils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/utils.py:23:4 Incompatible return type [7]: Expected `Variable[T (bound to jaxlie._base.MatrixLieGroup)]` but got `jaxlie._base.MatrixLieGroup`.",
    "message": " Expected `Variable[T (bound to jaxlie._base.MatrixLieGroup)]` but got `jaxlie._base.MatrixLieGroup`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 23,
    "warning_line": "    return Group.sample_uniform(key=jax.random.PRNGKey(seed=seed))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\nfrom typing import Callable, Type, TypeVar\n\n",
        "source_code_len": 58,
        "target_code": "import random\nfrom typing import Any, Callable, Type, TypeVar, cast\n\n",
        "target_code_len": 69,
        "diff_format": "@@ -1,3 +1,3 @@\n import random\n-from typing import Callable, Type, TypeVar\n+from typing import Any, Callable, Type, TypeVar, cast\n \n",
        "source_code_with_indent": "import random\nfrom typing import Callable, Type, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import random\nfrom typing import Any, Callable, Type, TypeVar, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    seed = random.getrandbits(32)\n    return Group.sample_uniform(key=jax.random.PRNGKey(seed=seed))\n\n",
        "source_code_len": 102,
        "target_code": "    seed = random.getrandbits(32)\n    return cast(T, Group.sample_uniform(key=jax.random.PRNGKey(seed=seed)))\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -22,3 +22,3 @@\n     seed = random.getrandbits(32)\n-    return Group.sample_uniform(key=jax.random.PRNGKey(seed=seed))\n+    return cast(T, Group.sample_uniform(key=jax.random.PRNGKey(seed=seed)))\n \n",
        "source_code_with_indent": "    seed = random.getrandbits(32)\n    return Group.sample_uniform(key=jax.random.PRNGKey(seed=seed))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    seed = random.getrandbits(32)\n    return cast(T, Group.sample_uniform(key=jax.random.PRNGKey(seed=seed)))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]