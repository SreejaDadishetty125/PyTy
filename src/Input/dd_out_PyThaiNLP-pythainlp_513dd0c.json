[
  {
    "project": "PyThaiNLP/pythainlp",
    "commit": "513dd0cd1eea9df42da5317c680e4bc61a127321",
    "filename": "pythainlp/spell/pn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyThaiNLP-pythainlp/pythainlp/spell/pn.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pythainlp/spell/pn.py:43:8 Incompatible return type [7]: Expected `typing.Callable[[str], bool]` but got `bool`.",
    "message": " Expected `typing.Callable[[str], bool]` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 43,
    "warning_line": "        return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    dict_filter: Callable[[str], bool],\n) -> Callable[[str], bool]:\n    \"\"\"\n    Keep only Thai words with at least min_freq frequency\n    and has length between min_len and max_len characters\n    \"\"\"\n",
        "source_code_len": 200,
        "target_code": "    dict_filter: Callable[[str], bool],\n) -> bool:\n    \"\"\"\n    Checks whether a given word with the given accuracy\n    has the required minimum frequency of min_freq\n    and its character length is between min_len and max_len.\n    \"\"\"\n",
        "target_code_len": 235,
        "diff_format": "@@ -36,6 +36,7 @@\n     dict_filter: Callable[[str], bool],\n-) -> Callable[[str], bool]:\n-    \"\"\"\n-    Keep only Thai words with at least min_freq frequency\n-    and has length between min_len and max_len characters\n+) -> bool:\n+    \"\"\"\n+    Checks whether a given word with the given accuracy\n+    has the required minimum frequency of min_freq\n+    and its character length is between min_len and max_len.\n     \"\"\"\n",
        "source_code_with_indent": "    dict_filter: Callable[[str], bool],\n) -> Callable[[str], bool]:\n    <IND>\"\"\"\n    Keep only Thai words with at least min_freq frequency\n    and has length between min_len and max_len characters\n    \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    dict_filter: Callable[[str], bool],\n) -> bool:\n    <IND>\"\"\"\n    Checks whether a given word with the given accuracy\n    has the required minimum frequency of min_freq\n    and its character length is between min_len and max_len.\n    \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyThaiNLP/pythainlp",
    "commit": "513dd0cd1eea9df42da5317c680e4bc61a127321",
    "filename": "pythainlp/spell/pn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyThaiNLP-pythainlp/pythainlp/spell/pn.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pythainlp/spell/pn.py:47:8 Incompatible return type [7]: Expected `typing.Callable[[str], bool]` but got `bool`.",
    "message": " Expected `typing.Callable[[str], bool]` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 47,
    "warning_line": "        return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    dict_filter: Callable[[str], bool],\n) -> Callable[[str], bool]:\n    \"\"\"\n    Keep only Thai words with at least min_freq frequency\n    and has length between min_len and max_len characters\n    \"\"\"\n",
        "source_code_len": 200,
        "target_code": "    dict_filter: Callable[[str], bool],\n) -> bool:\n    \"\"\"\n    Checks whether a given word with the given accuracy\n    has the required minimum frequency of min_freq\n    and its character length is between min_len and max_len.\n    \"\"\"\n",
        "target_code_len": 235,
        "diff_format": "@@ -36,6 +36,7 @@\n     dict_filter: Callable[[str], bool],\n-) -> Callable[[str], bool]:\n-    \"\"\"\n-    Keep only Thai words with at least min_freq frequency\n-    and has length between min_len and max_len characters\n+) -> bool:\n+    \"\"\"\n+    Checks whether a given word with the given accuracy\n+    has the required minimum frequency of min_freq\n+    and its character length is between min_len and max_len.\n     \"\"\"\n",
        "source_code_with_indent": "    dict_filter: Callable[[str], bool],\n) -> Callable[[str], bool]:\n    <IND>\"\"\"\n    Keep only Thai words with at least min_freq frequency\n    and has length between min_len and max_len characters\n    \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    dict_filter: Callable[[str], bool],\n) -> bool:\n    <IND>\"\"\"\n    Checks whether a given word with the given accuracy\n    has the required minimum frequency of min_freq\n    and its character length is between min_len and max_len.\n    \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyThaiNLP/pythainlp",
    "commit": "513dd0cd1eea9df42da5317c680e4bc61a127321",
    "filename": "pythainlp/spell/pn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyThaiNLP-pythainlp/pythainlp/spell/pn.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pythainlp/spell/pn.py:49:4 Incompatible return type [7]: Expected `typing.Callable[[str], bool]` but got `bool`.",
    "message": " Expected `typing.Callable[[str], bool]` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 49,
    "warning_line": "    return dict_filter(word)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    dict_filter: Callable[[str], bool],\n) -> Callable[[str], bool]:\n    \"\"\"\n    Keep only Thai words with at least min_freq frequency\n    and has length between min_len and max_len characters\n    \"\"\"\n",
        "source_code_len": 200,
        "target_code": "    dict_filter: Callable[[str], bool],\n) -> bool:\n    \"\"\"\n    Checks whether a given word with the given accuracy\n    has the required minimum frequency of min_freq\n    and its character length is between min_len and max_len.\n    \"\"\"\n",
        "target_code_len": 235,
        "diff_format": "@@ -36,6 +36,7 @@\n     dict_filter: Callable[[str], bool],\n-) -> Callable[[str], bool]:\n-    \"\"\"\n-    Keep only Thai words with at least min_freq frequency\n-    and has length between min_len and max_len characters\n+) -> bool:\n+    \"\"\"\n+    Checks whether a given word with the given accuracy\n+    has the required minimum frequency of min_freq\n+    and its character length is between min_len and max_len.\n     \"\"\"\n",
        "source_code_with_indent": "    dict_filter: Callable[[str], bool],\n) -> Callable[[str], bool]:\n    <IND>\"\"\"\n    Keep only Thai words with at least min_freq frequency\n    and has length between min_len and max_len characters\n    \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    dict_filter: Callable[[str], bool],\n) -> bool:\n    <IND>\"\"\"\n    Checks whether a given word with the given accuracy\n    has the required minimum frequency of min_freq\n    and its character length is between min_len and max_len.\n    \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyThaiNLP/pythainlp",
    "commit": "513dd0cd1eea9df42da5317c680e4bc61a127321",
    "filename": "pythainlp/spell/pn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyThaiNLP-pythainlp/pythainlp/spell/pn.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pythainlp/spell/pn.py:114:21 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `_keep` but got `Tuple[str, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `_keep` but got `Tuple[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 114,
    "warning_line": "            if _keep(word_freq, min_freq, min_len, max_len, dict_filter)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _keep(\n    word_freq: int,\n    min_freq: int,\n",
        "source_code_len": 50,
        "target_code": "def _keep(\n    word_freq: Tuple[str, int],\n    min_freq: int,\n",
        "target_code_len": 62,
        "diff_format": "@@ -31,3 +31,3 @@\n def _keep(\n-    word_freq: int,\n+    word_freq: Tuple[str, int],\n     min_freq: int,\n",
        "source_code_with_indent": "<DED>def _keep(\n    word_freq: int,\n    min_freq: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _keep(\n    word_freq: Tuple[str, int],\n    min_freq: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyThaiNLP/pythainlp",
    "commit": "513dd0cd1eea9df42da5317c680e4bc61a127321",
    "filename": "pythainlp/spell/pn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyThaiNLP-pythainlp/pythainlp/spell/pn.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pythainlp/spell/pn.py:263:12 Incompatible return type [7]: Expected `List[str]` but got `str`.",
    "message": " Expected `List[str]` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 263,
    "warning_line": "            return \"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if not word:\n            return \"\"\n\n",
        "source_code_len": 44,
        "target_code": "        if not word:\n            return []\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -262,3 +276,3 @@\n         if not word:\n-            return \"\"\n+            return []\n \n",
        "source_code_with_indent": "        if not word:\n            <IND>return \"\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if not word:\n            <IND>return []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyThaiNLP/pythainlp",
    "commit": "513dd0cd1eea9df42da5317c680e4bc61a127321",
    "filename": "pythainlp/spell/pn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyThaiNLP-pythainlp/pythainlp/spell/pn.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pythainlp/spell/pn.py:267:26 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `NorvigSpellChecker.known` but got `Set[str]`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `NorvigSpellChecker.known` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 267,
    "warning_line": "            or self.known(_edits1(word))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from string import digits\nfrom typing import Callable, List, Set, Tuple\n\n",
        "source_code_len": 73,
        "target_code": "from string import digits\nfrom typing import Callable, Iterable, ItemsView, List, Set, Tuple\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -10,3 +10,3 @@\n from string import digits\n-from typing import Callable, List, Set, Tuple\n+from typing import Callable, Iterable, ItemsView, List, Set, Tuple\n \n",
        "source_code_with_indent": "from string import digits\nfrom typing import Callable, List, Set, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from string import digits\nfrom typing import Callable, Iterable, ItemsView, List, Set, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def known(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Return a list of given words that found in the spelling dictionary\n\n",
        "source_code_len": 141,
        "target_code": "\n    def known(self, words: Iterable[str]) -> List[str]:\n        \"\"\"\n        Returns a list of given words that found in the spelling dictionary\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -140,5 +143,5 @@\n \n-    def known(self, words: List[str]) -> List[str]:\n-        \"\"\"\n-        Return a list of given words that found in the spelling dictionary\n+    def known(self, words: Iterable[str]) -> List[str]:\n+        \"\"\"\n+        Returns a list of given words that found in the spelling dictionary\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def known(self, words: List[str]) -> List[str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def known(self, words: Iterable[str]) -> List[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "PyThaiNLP/pythainlp",
    "commit": "513dd0cd1eea9df42da5317c680e4bc61a127321",
    "filename": "pythainlp/spell/pn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyThaiNLP-pythainlp/pythainlp/spell/pn.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pythainlp/spell/pn.py:268:26 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `NorvigSpellChecker.known` but got `Set[str]`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `NorvigSpellChecker.known` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 268,
    "warning_line": "            or self.known(_edits2(word))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from string import digits\nfrom typing import Callable, List, Set, Tuple\n\n",
        "source_code_len": 73,
        "target_code": "from string import digits\nfrom typing import Callable, Iterable, ItemsView, List, Set, Tuple\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -10,3 +10,3 @@\n from string import digits\n-from typing import Callable, List, Set, Tuple\n+from typing import Callable, Iterable, ItemsView, List, Set, Tuple\n \n",
        "source_code_with_indent": "from string import digits\nfrom typing import Callable, List, Set, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from string import digits\nfrom typing import Callable, Iterable, ItemsView, List, Set, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def known(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Return a list of given words that found in the spelling dictionary\n\n",
        "source_code_len": 141,
        "target_code": "\n    def known(self, words: Iterable[str]) -> List[str]:\n        \"\"\"\n        Returns a list of given words that found in the spelling dictionary\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -140,5 +143,5 @@\n \n-    def known(self, words: List[str]) -> List[str]:\n-        \"\"\"\n-        Return a list of given words that found in the spelling dictionary\n+    def known(self, words: Iterable[str]) -> List[str]:\n+        \"\"\"\n+        Returns a list of given words that found in the spelling dictionary\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def known(self, words: List[str]) -> List[str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def known(self, words: Iterable[str]) -> List[str]:\n        <IND>"
      }
    ]
  }
]