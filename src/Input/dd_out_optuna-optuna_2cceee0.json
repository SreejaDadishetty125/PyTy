[
  {
    "project": "optuna/optuna",
    "commit": "2cceee0ae682cc18119cd1a1e4bf27551bda3293",
    "filename": "tests/integration_tests/lightgbm_tuner_tests/test_optimize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/tests/integration_tests/lightgbm_tuner_tests/test_optimize.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/integration_tests/lightgbm_tuner_tests/test_optimize.py:957:24 Incompatible variable type [9]: model_dir is declared to have type `bool` but is used as type `str`.",
    "message": " model_dir is declared to have type `bool` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 957,
    "warning_line": "                        model_dir = tmpdir",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (None, True), (True, False), (None, False)]\n    )\n    def test_get_best_booster(self, model_dir: bool, return_cvbooster: bool) -> None:\n        unexpected_value = 20  # out of scope.\n",
        "source_code_len": 267,
        "target_code": "    @pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (False, True), (True, False), (False, False)]\n    )\n    def test_get_best_booster(self, model_dir: Optional[str], return_cvbooster: bool) -> None:\n        unexpected_value = 20  # out of scope.\n",
        "target_code_len": 278,
        "diff_format": "@@ -927,5 +927,5 @@\n     @pytest.mark.parametrize(\n-        \"model_dir, return_cvbooster\", [(True, True), (None, True), (True, False), (None, False)]\n+        \"model_dir, return_cvbooster\", [(True, True), (False, True), (True, False), (False, False)]\n     )\n-    def test_get_best_booster(self, model_dir: bool, return_cvbooster: bool) -> None:\n+    def test_get_best_booster(self, model_dir: Optional[str], return_cvbooster: bool) -> None:\n         unexpected_value = 20  # out of scope.\n",
        "source_code_with_indent": "    <DED>@pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (None, True), (True, False), (None, False)]\n    )\n    def test_get_best_booster(self, model_dir: bool, return_cvbooster: bool) -> None:\n        <IND>unexpected_value = 20  # out of scope.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (False, True), (True, False), (False, False)]\n    )\n    def test_get_best_booster(self, model_dir: Optional[str], return_cvbooster: bool) -> None:\n        <IND>unexpected_value = 20  # out of scope.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "2cceee0ae682cc18119cd1a1e4bf27551bda3293",
    "filename": "tests/integration_tests/lightgbm_tuner_tests/test_optimize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/tests/integration_tests/lightgbm_tuner_tests/test_optimize.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/integration_tests/lightgbm_tuner_tests/test_optimize.py:962:24 Incompatible parameter type [6]: Expected `Optional[str]` for 4th parameter `model_dir` to call `LightGBMTunerCV.__init__` but got `bool`.",
    "message": " Expected `Optional[str]` for 4th parameter `model_dir` to call `LightGBMTunerCV.__init__` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 962,
    "warning_line": "                        model_dir=model_dir,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (None, True), (True, False), (None, False)]\n    )\n    def test_get_best_booster(self, model_dir: bool, return_cvbooster: bool) -> None:\n        unexpected_value = 20  # out of scope.\n",
        "source_code_len": 267,
        "target_code": "    @pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (False, True), (True, False), (False, False)]\n    )\n    def test_get_best_booster(self, model_dir: Optional[str], return_cvbooster: bool) -> None:\n        unexpected_value = 20  # out of scope.\n",
        "target_code_len": 278,
        "diff_format": "@@ -927,5 +927,5 @@\n     @pytest.mark.parametrize(\n-        \"model_dir, return_cvbooster\", [(True, True), (None, True), (True, False), (None, False)]\n+        \"model_dir, return_cvbooster\", [(True, True), (False, True), (True, False), (False, False)]\n     )\n-    def test_get_best_booster(self, model_dir: bool, return_cvbooster: bool) -> None:\n+    def test_get_best_booster(self, model_dir: Optional[str], return_cvbooster: bool) -> None:\n         unexpected_value = 20  # out of scope.\n",
        "source_code_with_indent": "    <DED>@pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (None, True), (True, False), (None, False)]\n    )\n    def test_get_best_booster(self, model_dir: bool, return_cvbooster: bool) -> None:\n        <IND>unexpected_value = 20  # out of scope.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@pytest.mark.parametrize(\n        \"model_dir, return_cvbooster\", [(True, True), (False, True), (True, False), (False, False)]\n    )\n    def test_get_best_booster(self, model_dir: Optional[str], return_cvbooster: bool) -> None:\n        <IND>unexpected_value = 20  # out of scope.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]