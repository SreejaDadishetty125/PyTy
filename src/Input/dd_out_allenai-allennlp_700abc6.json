[
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/basic_classifier.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/basic_classifier.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/basic_classifier.py:64:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)\n        self._text_field_embedder = text_field_embedder\n",
        "source_code_len": 248,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        super().__init__(vocab, **kwargs)\n        self._text_field_embedder = text_field_embedder\n",
        "target_code_len": 202,
        "diff_format": "@@ -60,6 +58,6 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n \n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n         self._text_field_embedder = text_field_embedder\n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        <IND>super().__init__(vocab, regularizer)\n        self._text_field_embedder = text_field_embedder\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        <IND>super().__init__(vocab, **kwargs)\n        self._text_field_embedder = text_field_embedder\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/bert_for_classification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/bert_for_classification.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/bert_for_classification.py:62:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 62,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -59,5 +56,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/biaffine_dependency_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/biaffine_dependency_parser.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/biaffine_dependency_parser.py:98:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 98,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -95,5 +93,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/biattentive_classification_network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/biattentive_classification_network.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/biattentive_classification_network.py:89:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 89,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -86,5 +84,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/bimpm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/bimpm.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/bimpm.py:79:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -76,5 +74,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/constituency_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/constituency_parser.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/constituency_parser.py:93:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 93,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        evalb_directory_path: str = DEFAULT_EVALB_DIR,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 247,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        evalb_directory_path: str = DEFAULT_EVALB_DIR,\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 201,
        "diff_format": "@@ -89,6 +87,6 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n         evalb_directory_path: str = DEFAULT_EVALB_DIR,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        evalb_directory_path: str = DEFAULT_EVALB_DIR,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        evalb_directory_path: str = DEFAULT_EVALB_DIR,\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/constituency_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/constituency_parser.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/constituency_parser.py:361:83 Incompatible parameter type [6]: Expected `List[str]` for 3rd positional only parameter to call `SpanConstituencyParser.construct_tree_from_spans` but got `Optional[List[str]]`.",
    "message": " Expected `List[str]` for 3rd positional only parameter to call `SpanConstituencyParser.construct_tree_from_spans` but got `Optional[List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 361,
    "warning_line": "            trees.append(self.construct_tree_from_spans(spans_to_labels, sentence, sentence_pos))"
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/coreference_resolution/coref.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/coreference_resolution/coref.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/coreference_resolution/coref.py:79:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 145,
        "diff_format": "@@ -76,5 +74,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/crf_tagger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/crf_tagger.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/crf_tagger.py:89:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 89,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        top_k: int = 1,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 216,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        top_k: int = 1,\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -85,6 +83,6 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n         top_k: int = 1,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        top_k: int = 1,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        top_k: int = 1,\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/decomposable_attention.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/decomposable_attention.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/decomposable_attention.py:77:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 77,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -74,5 +72,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/encoder_decoders/composed_seq2seq.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/encoder_decoders/composed_seq2seq.py:59:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 59,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 193,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 147,
        "diff_format": "@@ -55,6 +53,6 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n \n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/esim.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/esim.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/esim.py:69:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -66,5 +64,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/event2mind.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/event2mind.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/event2mind.py:76:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 76,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        target_embedding_dim: int = None,\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n        target_names = target_names or [\"xintent\", \"xreact\", \"oreact\"]\n",
        "source_code_len": 234,
        "target_code": "        target_embedding_dim: int = None,\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n        target_names = target_names or [\"xintent\", \"xreact\", \"oreact\"]\n",
        "target_code_len": 188,
        "diff_format": "@@ -73,5 +70,5 @@\n         target_embedding_dim: int = None,\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n         target_names = target_names or [\"xintent\", \"xreact\", \"oreact\"]\n",
        "source_code_with_indent": "        target_embedding_dim: int = None,\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n        target_names = target_names or [\"xintent\", \"xreact\", \"oreact\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        target_embedding_dim: int = None,\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n        target_names = target_names or [\"xintent\", \"xreact\", \"oreact\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/graph_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/graph_parser.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/graph_parser.py:79:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -76,5 +74,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/language_model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/language_model.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/language_model.py:105:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 105,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = None,\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n        self._text_field_embedder = text_field_embedder\n",
        "source_code_len": 228,
        "target_code": "        initializer: InitializerApplicator = None,\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n        self._text_field_embedder = text_field_embedder\n",
        "target_code_len": 182,
        "diff_format": "@@ -102,5 +100,5 @@\n         initializer: InitializerApplicator = None,\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n         self._text_field_embedder = text_field_embedder\n",
        "source_code_with_indent": "        initializer: InitializerApplicator = None,\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n        self._text_field_embedder = text_field_embedder\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = None,\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n        self._text_field_embedder = text_field_embedder\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/semantic_role_labeler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/semantic_role_labeler.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/semantic_role_labeler.py:77:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 77,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 113,
        "target_code": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 128,
        "diff_format": "@@ -75,4 +72,5 @@\n         srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/simple_tagger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/simple_tagger.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/simple_tagger.py:67:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 192,
        "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -64,5 +62,5 @@\n         initializer: InitializerApplicator = InitializerApplicator(),\n-        regularizer: Optional[RegularizerApplicator] = None,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "allenai/allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/srl_bert.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp/allennlp/models/srl_bert.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "allennlp/models/srl_bert.py:52:32 Incompatible parameter type [6]: Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "        super().__init__(vocab, regularizer)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
        "source_code_len": 113,
        "target_code": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
        "target_code_len": 128,
        "diff_format": "@@ -50,4 +47,5 @@\n         srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n+        **kwargs,\n     ) -> None:\n-        super().__init__(vocab, regularizer)\n+        super().__init__(vocab, **kwargs)\n \n",
        "source_code_with_indent": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        srl_eval_path: str = DEFAULT_SRL_EVAL_PATH,\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]