[
  {
    "project": "searxng/searxng",
    "commit": "d5950079cfef58f1877787ed1ed946284116fe35",
    "filename": "searx/search.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/searxng-searxng/searx/search.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "searx/search.py:79:17 Incompatible variable type [9]: external_bang is declared to have type `typing.Optional[str]` but is used as type `bool`.",
    "message": " external_bang is declared to have type `typing.Optional[str]` but is used as type `bool`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 79,
    "warning_line": "                 external_bang: typing.Optional[str]=False):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 timeout_limit: typing.Optional[float]=None,\n                 external_bang: typing.Optional[str]=False):\n        self.query = query\n",
        "source_code_len": 149,
        "target_code": "                 timeout_limit: typing.Optional[float]=None,\n                 external_bang: typing.Optional[str]=None):\n        self.query = query\n",
        "target_code_len": 148,
        "diff_format": "@@ -78,3 +78,3 @@\n                  timeout_limit: typing.Optional[float]=None,\n-                 external_bang: typing.Optional[str]=False):\n+                 external_bang: typing.Optional[str]=None):\n         self.query = query\n",
        "source_code_with_indent": "                 timeout_limit: typing.Optional[float]=None,\n                 external_bang: typing.Optional[str]=False):\n        <IND>self.query = query\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 timeout_limit: typing.Optional[float]=None,\n                 external_bang: typing.Optional[str]=None):\n        <IND>self.query = query\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "searxng/searxng",
    "commit": "d5950079cfef58f1877787ed1ed946284116fe35",
    "filename": "searx/webadapter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/searxng-searxng/searx/webadapter.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "searx/webadapter.py:14:4 Incompatible return type [7]: Expected `List[EngineRef]` but got `typing.ValuesView[EngineRef]`.",
    "message": " Expected `List[EngineRef]` but got `typing.ValuesView[EngineRef]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 14,
    "warning_line": "    return engineref_dict.values()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    engineref_dict = {q.category + '|' + q.name: q for q in engineref_list}\n    return engineref_dict.values()\n\n",
        "source_code_len": 112,
        "target_code": "    engineref_dict = {q.category + '|' + q.name: q for q in engineref_list}\n    return list(engineref_dict.values())\n\n",
        "target_code_len": 118,
        "diff_format": "@@ -13,3 +13,3 @@\n     engineref_dict = {q.category + '|' + q.name: q for q in engineref_list}\n-    return engineref_dict.values()\n+    return list(engineref_dict.values())\n \n",
        "source_code_with_indent": "    <IND>engineref_dict = {q.category + '|' + q.name: q for q in engineref_list}\n    return engineref_dict.values()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>engineref_dict = {q.category + '|' + q.name: q for q in engineref_list}\n    return list(engineref_dict.values())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "searxng/searxng",
    "commit": "d5950079cfef58f1877787ed1ed946284116fe35",
    "filename": "searx/webadapter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/searxng-searxng/searx/webadapter.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "searx/webadapter.py:91:4 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 91,
    "warning_line": "    return query_time_range",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_time_range(form: Dict[str, str]) -> str:\n    query_time_range = form.get('time_range')\n",
        "source_code_len": 98,
        "target_code": "\ndef parse_time_range(form: Dict[str, str]) -> Optional[str]:\n    query_time_range = form.get('time_range')\n",
        "target_code_len": 108,
        "diff_format": "@@ -84,3 +84,3 @@\n \n-def parse_time_range(form: Dict[str, str]) -> str:\n+def parse_time_range(form: Dict[str, str]) -> Optional[str]:\n     query_time_range = form.get('time_range')\n",
        "source_code_with_indent": "\n<DED>def parse_time_range(form: Dict[str, str]) -> str:\n    <IND>query_time_range = form.get('time_range')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def parse_time_range(form: Dict[str, str]) -> Optional[str]:\n    <IND>query_time_range = form.get('time_range')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "searxng/searxng",
    "commit": "d5950079cfef58f1877787ed1ed946284116fe35",
    "filename": "searx/webadapter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/searxng-searxng/searx/webadapter.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "searx/webadapter.py:102:29 Incompatible parameter type [6]: Expected `typing.Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `Optional[str]`.",
    "message": " Expected `typing.Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 102,
    "warning_line": "                return float(raw_time_limit)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def parse_timeout(form: Dict[str, str], raw_text_query: RawTextQuery) -> Optional[float]:\n    query_timeout = raw_text_query.timeout_limit\n    if query_timeout is None and 'timeout_limit' in form:\n        raw_time_limit = form.get('timeout_limit')\n        if raw_time_limit in ['None', '']:\n            return None\n        else:\n            try:\n                return float(raw_time_limit)\n            except ValueError:\n                raise SearxParameterException('timeout_limit', raw_time_limit)\n\n",
        "source_code_len": 502,
        "target_code": "def parse_timeout(form: Dict[str, str], raw_text_query: RawTextQuery) -> Optional[float]:\n    timeout_limit = raw_text_query.timeout_limit\n    if timeout_limit is None:\n        timeout_limit = form.get('timeout_limit')\n\n    if timeout_limit is None or timeout_limit in ['None', '']:\n        return None\n    try:\n        return float(timeout_limit)\n    except ValueError:\n        raise SearxParameterException('timeout_limit', timeout_limit)\n\n",
        "target_code_len": 442,
        "diff_format": "@@ -94,12 +94,12 @@\n def parse_timeout(form: Dict[str, str], raw_text_query: RawTextQuery) -> Optional[float]:\n-    query_timeout = raw_text_query.timeout_limit\n-    if query_timeout is None and 'timeout_limit' in form:\n-        raw_time_limit = form.get('timeout_limit')\n-        if raw_time_limit in ['None', '']:\n-            return None\n-        else:\n-            try:\n-                return float(raw_time_limit)\n-            except ValueError:\n-                raise SearxParameterException('timeout_limit', raw_time_limit)\n+    timeout_limit = raw_text_query.timeout_limit\n+    if timeout_limit is None:\n+        timeout_limit = form.get('timeout_limit')\n+\n+    if timeout_limit is None or timeout_limit in ['None', '']:\n+        return None\n+    try:\n+        return float(timeout_limit)\n+    except ValueError:\n+        raise SearxParameterException('timeout_limit', timeout_limit)\n \n",
        "source_code_with_indent": "<DED>def parse_timeout(form: Dict[str, str], raw_text_query: RawTextQuery) -> Optional[float]:\n    <IND>query_timeout = raw_text_query.timeout_limit\n    if query_timeout is None and 'timeout_limit' in form:\n        <IND>raw_time_limit = form.get('timeout_limit')\n        if raw_time_limit in ['None', '']:\n            <IND>return None\n        <DED>else:\n            <IND>try:\n                <IND>return float(raw_time_limit)\n            <DED>except ValueError:\n                <IND>raise SearxParameterException('timeout_limit', raw_time_limit)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def parse_timeout(form: Dict[str, str], raw_text_query: RawTextQuery) -> Optional[float]:\n    <IND>timeout_limit = raw_text_query.timeout_limit\n    if timeout_limit is None:\n        <IND>timeout_limit = form.get('timeout_limit')\n\n    <DED>if timeout_limit is None or timeout_limit in ['None', '']:\n        <IND>return None\n    <DED>try:\n        <IND>return float(timeout_limit)\n    <DED>except ValueError:\n        <IND>raise SearxParameterException('timeout_limit', timeout_limit)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "searxng/searxng",
    "commit": "d5950079cfef58f1877787ed1ed946284116fe35",
    "filename": "searx/webadapter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/searxng-searxng/searx/webadapter.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "searx/webadapter.py:183:68 Incompatible parameter type [6]: Expected `Dict[str, str]` for 2nd positional only parameter to call `get_selected_categories` but got `None`.",
    "message": " Expected `Dict[str, str]` for 2nd positional only parameter to call `get_selected_categories` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 183,
    "warning_line": "            query_categories = get_selected_categories(preferences, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_selected_categories(preferences: Preferences, form: Dict[str, str]) -> List[str]:\n    selected_categories = []\n",
        "source_code_len": 120,
        "target_code": "\ndef get_selected_categories(preferences: Preferences, form: Optional[Dict[str, str]]) -> List[str]:\n    selected_categories = []\n",
        "target_code_len": 130,
        "diff_format": "@@ -136,3 +136,3 @@\n \n-def get_selected_categories(preferences: Preferences, form: Dict[str, str]) -> List[str]:\n+def get_selected_categories(preferences: Preferences, form: Optional[Dict[str, str]]) -> List[str]:\n     selected_categories = []\n",
        "source_code_with_indent": "\n<DED><DED><DED>def get_selected_categories(preferences: Preferences, form: Dict[str, str]) -> List[str]:\n    <IND>selected_categories = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def get_selected_categories(preferences: Preferences, form: Optional[Dict[str, str]]) -> List[str]:\n    <IND>selected_categories = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "searxng/searxng",
    "commit": "d5950079cfef58f1877787ed1ed946284116fe35",
    "filename": "searx/webadapter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/searxng-searxng/searx/webadapter.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "searx/webadapter.py:231:36 Incompatible parameter type [6]: Expected `bool` for 5th positional only parameter to call `SearchQuery.__init__` but got `int`.",
    "message": " Expected `bool` for 5th positional only parameter to call `SearchQuery.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 231,
    "warning_line": "                        query_lang, query_safesearch, query_pageno,"
  }
]