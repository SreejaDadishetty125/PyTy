[
  {
    "project": "python-poetry/poetry",
    "commit": "a49372a59d9dd725ab4039407a6edd45e66b5812",
    "filename": "poetry/installation/installer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/installation/installer.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/installation/installer.py:217:46 Incompatible parameter type [6]: Expected `List[Operation]` for 2nd positional only parameter to call `Installer._populate_local_repo` but got `List[Union[poetry.installation.operations.install.Install, poetry.installation.operations.uninstall.Uninstall, poetry.installation.operations.update.Update]]`.",
    "message": " Expected `List[Operation]` for 2nd positional only parameter to call `Installer._populate_local_repo` but got `List[Union[poetry.installation.operations.install.Install, poetry.installation.operations.uninstall.Uninstall, poetry.installation.operations.update.Update]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "        self._populate_local_repo(local_repo, ops)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional\nfrom typing import Union\n",
        "source_code_len": 53,
        "target_code": "from typing import Optional\nfrom typing import Sequence\nfrom typing import Union\n",
        "target_code_len": 81,
        "diff_format": "@@ -4,2 +4,3 @@\n from typing import Optional\n+from typing import Sequence\n from typing import Union\n",
        "source_code_with_indent": "from typing import Optional\nfrom typing import Union\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\nfrom typing import Sequence\nfrom typing import Union\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _populate_local_repo(\n        self, local_repo: Repository, ops: List[Operation]\n    ) -> None:\n",
        "source_code_len": 104,
        "target_code": "    def _populate_local_repo(\n        self, local_repo: Repository, ops: Sequence[Operation]\n    ) -> None:\n",
        "target_code_len": 108,
        "diff_format": "@@ -501,3 +502,3 @@\n     def _populate_local_repo(\n-        self, local_repo: Repository, ops: List[Operation]\n+        self, local_repo: Repository, ops: Sequence[Operation]\n     ) -> None:\n",
        "source_code_with_indent": "    <DED>def _populate_local_repo(\n        self, local_repo: Repository, ops: List[Operation]\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _populate_local_repo(\n        self, local_repo: Repository, ops: Sequence[Operation]\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "a49372a59d9dd725ab4039407a6edd45e66b5812",
    "filename": "poetry/installation/installer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/installation/installer.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/installation/installer.py:276:46 Incompatible parameter type [6]: Expected `List[Operation]` for 2nd positional only parameter to call `Installer._populate_local_repo` but got `Union[List[Union[poetry.installation.operations.install.Install, poetry.installation.operations.uninstall.Uninstall, poetry.installation.operations.update.Update]], List[Operation]]`.",
    "message": " Expected `List[Operation]` for 2nd positional only parameter to call `Installer._populate_local_repo` but got `Union[List[Union[poetry.installation.operations.install.Install, poetry.installation.operations.uninstall.Uninstall, poetry.installation.operations.update.Update]], List[Operation]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 276,
    "warning_line": "        self._populate_local_repo(local_repo, ops)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional\nfrom typing import Union\n",
        "source_code_len": 53,
        "target_code": "from typing import Optional\nfrom typing import Sequence\nfrom typing import Union\n",
        "target_code_len": 81,
        "diff_format": "@@ -4,2 +4,3 @@\n from typing import Optional\n+from typing import Sequence\n from typing import Union\n",
        "source_code_with_indent": "from typing import Optional\nfrom typing import Union\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\nfrom typing import Sequence\nfrom typing import Union\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _populate_local_repo(\n        self, local_repo: Repository, ops: List[Operation]\n    ) -> None:\n",
        "source_code_len": 104,
        "target_code": "    def _populate_local_repo(\n        self, local_repo: Repository, ops: Sequence[Operation]\n    ) -> None:\n",
        "target_code_len": 108,
        "diff_format": "@@ -501,3 +502,3 @@\n     def _populate_local_repo(\n-        self, local_repo: Repository, ops: List[Operation]\n+        self, local_repo: Repository, ops: Sequence[Operation]\n     ) -> None:\n",
        "source_code_with_indent": "    <DED>def _populate_local_repo(\n        self, local_repo: Repository, ops: List[Operation]\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _populate_local_repo(\n        self, local_repo: Repository, ops: Sequence[Operation]\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "a49372a59d9dd725ab4039407a6edd45e66b5812",
    "filename": "poetry/installation/installer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/installation/installer.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/installation/installer.py:352:32 Incompatible parameter type [6]: Expected `List[Operation]` for 1st positional only parameter to call `Installer._filter_operations` but got `List[Union[poetry.installation.operations.install.Install, poetry.installation.operations.uninstall.Uninstall, poetry.installation.operations.update.Update]]`.",
    "message": " Expected `List[Operation]` for 1st positional only parameter to call `Installer._filter_operations` but got `List[Union[poetry.installation.operations.install.Install, poetry.installation.operations.uninstall.Uninstall, poetry.installation.operations.update.Update]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 352,
    "warning_line": "        self._filter_operations(ops, local_repo)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional\nfrom typing import Union\n",
        "source_code_len": 53,
        "target_code": "from typing import Optional\nfrom typing import Sequence\nfrom typing import Union\n",
        "target_code_len": 81,
        "diff_format": "@@ -4,2 +4,3 @@\n from typing import Optional\n+from typing import Sequence\n from typing import Union\n",
        "source_code_with_indent": "from typing import Optional\nfrom typing import Union\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\nfrom typing import Sequence\nfrom typing import Union\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _filter_operations(self, ops: List[Operation], repo: Repository) -> None:\n        extra_packages = self._get_extra_packages(repo)\n",
        "source_code_len": 139,
        "target_code": "\n    def _filter_operations(self, ops: Sequence[Operation], repo: Repository) -> None:\n        extra_packages = self._get_extra_packages(repo)\n",
        "target_code_len": 143,
        "diff_format": "@@ -545,3 +546,3 @@\n \n-    def _filter_operations(self, ops: List[Operation], repo: Repository) -> None:\n+    def _filter_operations(self, ops: Sequence[Operation], repo: Repository) -> None:\n         extra_packages = self._get_extra_packages(repo)\n",
        "source_code_with_indent": "\n    <DED>def _filter_operations(self, ops: List[Operation], repo: Repository) -> None:\n        <IND>extra_packages = self._get_extra_packages(repo)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _filter_operations(self, ops: Sequence[Operation], repo: Repository) -> None:\n        <IND>extra_packages = self._get_extra_packages(repo)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "a49372a59d9dd725ab4039407a6edd45e66b5812",
    "filename": "poetry/puzzle/provider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/puzzle/provider.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/puzzle/provider.py:95:8 Incompatible return type [7]: Expected `Provider` but got `typing.Generator[Provider, None, None]`.",
    "message": " Expected `Provider` but got `typing.Generator[Provider, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 95,
    "warning_line": "        yield self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @contextmanager\n    def use_environment(self, env: Env) -> \"Provider\":\n        original_env = self._env\n",
        "source_code_len": 108,
        "target_code": "    @contextmanager\n    def use_environment(self, env: Env) -> Iterator[\"Provider\"]:\n        original_env = self._env\n",
        "target_code_len": 118,
        "diff_format": "@@ -87,3 +87,3 @@\n     @contextmanager\n-    def use_environment(self, env: Env) -> \"Provider\":\n+    def use_environment(self, env: Env) -> Iterator[\"Provider\"]:\n         original_env = self._env\n",
        "source_code_with_indent": "    <DED>@contextmanager\n    def use_environment(self, env: Env) -> \"Provider\":\n        <IND>original_env = self._env\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@contextmanager\n    def use_environment(self, env: Env) -> Iterator[\"Provider\"]:\n        <IND>original_env = self._env\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "a49372a59d9dd725ab4039407a6edd45e66b5812",
    "filename": "poetry/puzzle/solver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/puzzle/solver.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/puzzle/solver.py:70:12 Incompatible return type [7]: Expected `None` but got `typing.Generator[None, None, None]`.",
    "message": " Expected `None` but got `typing.Generator[None, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "            yield",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import FrozenSet\nfrom typing import List\n",
        "source_code_len": 53,
        "target_code": "from typing import FrozenSet\nfrom typing import Iterator\nfrom typing import List\n",
        "target_code_len": 81,
        "diff_format": "@@ -9,2 +9,3 @@\n from typing import FrozenSet\n+from typing import Iterator\n from typing import List\n",
        "source_code_with_indent": "from typing import FrozenSet\nfrom typing import List\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import FrozenSet\nfrom typing import Iterator\nfrom typing import List\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @contextmanager\n    def use_environment(self, env: Env) -> None:\n        with self.provider.use_environment(env):\n",
        "source_code_len": 118,
        "target_code": "    @contextmanager\n    def use_environment(self, env: Env) -> Iterator[None]:\n        with self.provider.use_environment(env):\n",
        "target_code_len": 128,
        "diff_format": "@@ -67,3 +68,3 @@\n     @contextmanager\n-    def use_environment(self, env: Env) -> None:\n+    def use_environment(self, env: Env) -> Iterator[None]:\n         with self.provider.use_environment(env):\n",
        "source_code_with_indent": "    <DED>@contextmanager\n    def use_environment(self, env: Env) -> None:\n        <IND>with self.provider.use_environment(env):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@contextmanager\n    def use_environment(self, env: Env) -> Iterator[None]:\n        <IND>with self.provider.use_environment(env):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "a49372a59d9dd725ab4039407a6edd45e66b5812",
    "filename": "poetry/utils/extras.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/utils/extras.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/utils/extras.py:30:8 Incompatible return type [7]: Expected `Iterator[str]` but got `List[Variable[_T]]`.",
    "message": " Expected `Iterator[str]` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 30,
    "warning_line": "        return []",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    extra_names: Sequence[str],\n) -> Iterator[str]:\n    \"\"\"\n",
        "source_code_len": 60,
        "target_code": "    extra_names: Sequence[str],\n) -> Iterable[str]:\n    \"\"\"\n",
        "target_code_len": 60,
        "diff_format": "@@ -16,3 +16,3 @@\n     extra_names: Sequence[str],\n-) -> Iterator[str]:\n+) -> Iterable[str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    extra_names: Sequence[str],\n) -> Iterator[str]:\n    <IND>",
        "target_code_with_indent": "    extra_names: Sequence[str],\n) -> Iterable[str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "python-poetry/poetry",
    "commit": "a49372a59d9dd725ab4039407a6edd45e66b5812",
    "filename": "poetry/utils/shell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-poetry-poetry/poetry/utils/shell.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poetry/utils/shell.py:66:12 Incompatible return type [7]: Expected `None` but got `typing.Optional[int]`.",
    "message": " Expected `None` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "            return env.execute(self.path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any\nfrom typing import Optional\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -6,2 +6,3 @@\n from typing import Any\n+from typing import Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def activate(self, env: VirtualEnv) -> None:\n        if WINDOWS:\n",
        "source_code_len": 70,
        "target_code": "\n    def activate(self, env: VirtualEnv) -> Optional[int]:\n        if WINDOWS:\n",
        "target_code_len": 79,
        "diff_format": "@@ -63,3 +64,3 @@\n \n-    def activate(self, env: VirtualEnv) -> None:\n+    def activate(self, env: VirtualEnv) -> Optional[int]:\n         if WINDOWS:\n",
        "source_code_with_indent": "\n    <DED>def activate(self, env: VirtualEnv) -> None:\n        <IND>if WINDOWS:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def activate(self, env: VirtualEnv) -> Optional[int]:\n        <IND>if WINDOWS:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]