[
  {
    "project": "nvbn/py-backwards",
    "commit": "fd2d89ad972148024ee667eff5b9f19ac91d98ad",
    "filename": "py_backwards/transformers/import_dbm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nvbn-py-backwards/py_backwards/transformers/import_dbm.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "py_backwards/transformers/import_dbm.py:39:12 Incompatible return type [7]: Expected `Union[ast.ImportFrom, ast.Try]` but got `ast.AST`.",
    "message": " Expected `Union[ast.ImportFrom, ast.Try]` but got `ast.AST`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "            return self.wrapper.get_body(previous=node, current=import_)[0]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                                                  asname='ndbm')])\n            return self.wrapper.get_body(previous=node, current=import_)[0]\n\n",
        "source_code_len": 144,
        "target_code": "                                                  asname='ndbm')])\n            return self.wrapper.get_body(previous=node, current=import_)[0]  # type: ignore\n\n",
        "target_code_len": 160,
        "diff_format": "@@ -38,3 +38,3 @@\n                                                   asname='ndbm')])\n-            return self.wrapper.get_body(previous=node, current=import_)[0]\n+            return self.wrapper.get_body(previous=node, current=import_)[0]  # type: ignore\n \n",
        "source_code_with_indent": "                                                  asname='ndbm')])\n            return self.wrapper.get_body(previous=node, current=import_)[0]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                                  asname='ndbm')])\n            return self.wrapper.get_body(previous=node, current=import_)[0]  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nvbn/py-backwards",
    "commit": "fd2d89ad972148024ee667eff5b9f19ac91d98ad",
    "filename": "py_backwards/utils/snippet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nvbn-py-backwards/py_backwards/utils/snippet.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "py_backwards/utils/snippet.py:98:23 Incompatible parameter type [6]: Expected `Union[List[ast.AST], ast.AST]` for 3rd positional only parameter to call `replace_at` but got `Union[List[ast.AST], ast.AST, str]`.",
    "message": " Expected `Union[List[ast.AST], ast.AST]` for 3rd positional only parameter to call `replace_at` but got `Union[List[ast.AST], ast.AST, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 98,
    "warning_line": "                       variables[node.args[0].id],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            position = get_node_position(tree, node)\n            replace_at(position.index, position.parent,\n                       variables[node.args[0].id],\n                       position.attribute)  # type: ignore\n",
        "source_code_len": 219,
        "target_code": "            position = get_node_position(tree, node)\n            replace_at(position.index, position.parent,  # type: ignore\n                       variables[node.args[0].id],  # type: ignore\n                       position.attribute)  # type: ignore\n",
        "target_code_len": 251,
        "diff_format": "@@ -96,4 +96,4 @@\n             position = get_node_position(tree, node)\n-            replace_at(position.index, position.parent,\n-                       variables[node.args[0].id],\n+            replace_at(position.index, position.parent,  # type: ignore\n+                       variables[node.args[0].id],  # type: ignore\n                        position.attribute)  # type: ignore\n",
        "source_code_with_indent": "            <IND>position = get_node_position(tree, node)\n            replace_at(position.index, position.parent,\n                       variables[node.args[0].id],\n                       position.attribute)  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>position = get_node_position(tree, node)\n            replace_at(position.index, position.parent,  # type: ignore\n                       variables[node.args[0].id],  # type: ignore\n                       position.attribute)  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]