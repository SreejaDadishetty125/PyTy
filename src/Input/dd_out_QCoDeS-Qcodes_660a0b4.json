[
  {
    "project": "QCoDeS/Qcodes",
    "commit": "660a0b41348ab6b4592482592dbbe866980822ed",
    "filename": "qcodes/instrument_drivers/Spectrum/M4i.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/instrument_drivers/Spectrum/M4i.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/instrument_drivers/Spectrum/M4i.py:808:22 Unsupported operand [58]: `*` is not supported for operand types `typing.Type[typing.Union[ct.c_int16, ct.c_int32]]` and `int`.",
    "message": " `*` is not supported for operand types `typing.Type[typing.Union[ct.c_int16, ct.c_int32]]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 808,
    "warning_line": "        buffer_size = sample_ctype * memsize * numch",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_len": 96,
        "target_code": "from functools import partial\nfrom typing import Any\n\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "target_code_len": 120,
        "diff_format": "@@ -19,2 +19,4 @@\n from functools import partial\n+from typing import Any\n+\n from qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_with_indent": "from functools import partial\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any\n\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if bytes_per_sample == 2:\n            sample_ctype = ct.c_int16\n        elif bytes_per_sample == 4:\n",
        "source_code_len": 108,
        "target_code": "        if bytes_per_sample == 2:\n            sample_ctype = ct.c_int16 # type: Any\n        elif bytes_per_sample == 4:\n",
        "target_code_len": 120,
        "diff_format": "@@ -801,3 +803,3 @@\n         if bytes_per_sample == 2:\n-            sample_ctype = ct.c_int16\n+            sample_ctype = ct.c_int16 # type: Any\n         elif bytes_per_sample == 4:\n",
        "source_code_with_indent": "        if bytes_per_sample == 2:\n            <IND>sample_ctype = ct.c_int16\n        <DED>elif bytes_per_sample == 4:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if bytes_per_sample == 2:\n            <IND>sample_ctype = ct.c_int16 # type: Any\n        <DED>elif bytes_per_sample == 4:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "QCoDeS/Qcodes",
    "commit": "660a0b41348ab6b4592482592dbbe866980822ed",
    "filename": "qcodes/instrument_drivers/Spectrum/M4i.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/instrument_drivers/Spectrum/M4i.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/instrument_drivers/Spectrum/M4i.py:809:22 Call error [29]: `int` is not a function.",
    "message": " `int` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 809,
    "warning_line": "        data_buffer = (buffer_size)()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_len": 96,
        "target_code": "from functools import partial\nfrom typing import Any\n\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "target_code_len": 120,
        "diff_format": "@@ -19,2 +19,4 @@\n from functools import partial\n+from typing import Any\n+\n from qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_with_indent": "from functools import partial\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any\n\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if bytes_per_sample == 2:\n            sample_ctype = ct.c_int16\n        elif bytes_per_sample == 4:\n",
        "source_code_len": 108,
        "target_code": "        if bytes_per_sample == 2:\n            sample_ctype = ct.c_int16 # type: Any\n        elif bytes_per_sample == 4:\n",
        "target_code_len": 120,
        "diff_format": "@@ -801,3 +803,3 @@\n         if bytes_per_sample == 2:\n-            sample_ctype = ct.c_int16\n+            sample_ctype = ct.c_int16 # type: Any\n         elif bytes_per_sample == 4:\n",
        "source_code_with_indent": "        if bytes_per_sample == 2:\n            <IND>sample_ctype = ct.c_int16\n        <DED>elif bytes_per_sample == 4:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if bytes_per_sample == 2:\n            <IND>sample_ctype = ct.c_int16 # type: Any\n        <DED>elif bytes_per_sample == 4:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "QCoDeS/Qcodes",
    "commit": "660a0b41348ab6b4592482592dbbe866980822ed",
    "filename": "qcodes/instrument_drivers/Spectrum/M4i.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/instrument_drivers/Spectrum/M4i.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/instrument_drivers/Spectrum/M4i.py:819:48 Incompatible parameter type [6]: Expected `typing.Type[Variable[ct._CT (bound to ct._CData)]]` for 1st positional only parameter to call `ct.POINTER` but got `int`.",
    "message": " Expected `typing.Type[Variable[ct._CT (bound to ct._CData)]]` for 1st positional only parameter to call `ct.POINTER` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 819,
    "warning_line": "        data = ct.cast(data_pointer, ct.POINTER(buffer_size))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_len": 96,
        "target_code": "from functools import partial\nfrom typing import Any\n\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "target_code_len": 120,
        "diff_format": "@@ -19,2 +19,4 @@\n from functools import partial\n+from typing import Any\n+\n from qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_with_indent": "from functools import partial\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any\n\nfrom qcodes.utils.validators import Enum, Numbers, Anything, Ints\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if bytes_per_sample == 2:\n            sample_ctype = ct.c_int16\n        elif bytes_per_sample == 4:\n",
        "source_code_len": 108,
        "target_code": "        if bytes_per_sample == 2:\n            sample_ctype = ct.c_int16 # type: Any\n        elif bytes_per_sample == 4:\n",
        "target_code_len": 120,
        "diff_format": "@@ -801,3 +803,3 @@\n         if bytes_per_sample == 2:\n-            sample_ctype = ct.c_int16\n+            sample_ctype = ct.c_int16 # type: Any\n         elif bytes_per_sample == 4:\n",
        "source_code_with_indent": "        if bytes_per_sample == 2:\n            <IND>sample_ctype = ct.c_int16\n        <DED>elif bytes_per_sample == 4:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if bytes_per_sample == 2:\n            <IND>sample_ctype = ct.c_int16 # type: Any\n        <DED>elif bytes_per_sample == 4:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]