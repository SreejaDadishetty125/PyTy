[
  {
    "project": "alerta/alerta",
    "commit": "0cb430d2efaa6a29b15c9c00b46ddb13fa0e17fb",
    "filename": "alerta/database/backends/mongodb/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/alerta-alerta/alerta/database/backends/mongodb/utils.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alerta/database/backends/mongodb/utils.py:217:8 Incompatible variable type [9]: params is declared to have type `ImmutableMultiDict[typing.Any, typing.Any]` but is used as type `MultiDict[Variable[werkzeug.datastructures._K], Variable[werkzeug.datastructures._V]]`.",
    "message": " params is declared to have type `ImmutableMultiDict[typing.Any, typing.Any]` but is used as type `MultiDict[Variable[werkzeug.datastructures._K], Variable[werkzeug.datastructures._V]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 217,
    "warning_line": "        params = MultiDict(params)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Any, Dict, List\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -4,2 +4,3 @@\n from datetime import datetime\n+from typing import Any, Dict, List\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Any, Dict, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        query = dict()\n        params = MultiDict(params)\n\n",
        "source_code_len": 60,
        "target_code": "\n        query = dict()  # type: Dict[str, Any]\n        params = MultiDict(params)  # type: ignore\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -215,4 +216,4 @@\n \n-        query = dict()\n-        params = MultiDict(params)\n+        query = dict()  # type: Dict[str, Any]\n+        params = MultiDict(params)  # type: ignore\n \n",
        "source_code_with_indent": "\n        <IND>query = dict()\n        params = MultiDict(params)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <IND>query = dict()  # type: Dict[str, Any]\n        params = MultiDict(params)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "alerta/alerta",
    "commit": "0cb430d2efaa6a29b15c9c00b46ddb13fa0e17fb",
    "filename": "alerta/database/backends/mongodb/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/alerta-alerta/alerta/database/backends/mongodb/utils.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alerta/database/backends/mongodb/utils.py:269:8 Incompatible variable type [9]: params is declared to have type `ImmutableMultiDict[typing.Any, typing.Any]` but is used as type `MultiDict[Variable[werkzeug.datastructures._K], Variable[werkzeug.datastructures._V]]`.",
    "message": " params is declared to have type `ImmutableMultiDict[typing.Any, typing.Any]` but is used as type `MultiDict[Variable[werkzeug.datastructures._K], Variable[werkzeug.datastructures._V]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 269,
    "warning_line": "        params = MultiDict(params)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Any, Dict, List\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -4,2 +4,3 @@\n from datetime import datetime\n+from typing import Any, Dict, List\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Any, Dict, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        query = dict()\n        params = MultiDict(params)\n\n",
        "source_code_len": 60,
        "target_code": "\n        query = dict()  # type: Dict[str, Any]\n        params = MultiDict(params)  # type: ignore\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -267,4 +268,4 @@\n \n-        query = dict()\n-        params = MultiDict(params)\n+        query = dict()  # type: Dict[str, Any]\n+        params = MultiDict(params)  # type: ignore\n \n",
        "source_code_with_indent": "\n        <IND>query = dict()\n        params = MultiDict(params)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <IND>query = dict()  # type: Dict[str, Any]\n        params = MultiDict(params)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "alerta/alerta",
    "commit": "0cb430d2efaa6a29b15c9c00b46ddb13fa0e17fb",
    "filename": "alerta/utils/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/alerta-alerta/alerta/utils/api.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alerta/utils/api.py:14:40 Incompatible variable type [9]: permission is declared to have type `Scope` but is used as type `str`.",
    "message": " permission is declared to have type `Scope` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 14,
    "warning_line": "def assign_customer(wanted: str = None, permission: Scope = Scope.admin_alerts) -> Optional[str]:"
  },
  {
    "project": "alerta/alerta",
    "commit": "0cb430d2efaa6a29b15c9c00b46ddb13fa0e17fb",
    "filename": "alerta/utils/key.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/alerta-alerta/alerta/utils/key.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alerta/utils/key.py:40:12 Incompatible return type [7]: Expected `List[Scope]` but got `List[str]`.",
    "message": " Expected `List[Scope]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 40,
    "warning_line": "            return [Scope.read, Scope.write]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def type_to_scopes(self, user: str, key_type: str) -> List[Scope]:\n        if user in self.admin_users:\n",
        "source_code_len": 109,
        "target_code": "\n    def type_to_scopes(self, user: str, key_type: str) -> List[str]:\n        if user in self.admin_users:\n",
        "target_code_len": 107,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def type_to_scopes(self, user: str, key_type: str) -> List[Scope]:\n+    def type_to_scopes(self, user: str, key_type: str) -> List[str]:\n         if user in self.admin_users:\n",
        "source_code_with_indent": "\n    <DED>def type_to_scopes(self, user: str, key_type: str) -> List[Scope]:\n        <IND>if user in self.admin_users:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def type_to_scopes(self, user: str, key_type: str) -> List[str]:\n        <IND>if user in self.admin_users:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "alerta/alerta",
    "commit": "0cb430d2efaa6a29b15c9c00b46ddb13fa0e17fb",
    "filename": "alerta/utils/key.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/alerta-alerta/alerta/utils/key.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alerta/utils/key.py:42:12 Incompatible return type [7]: Expected `List[Scope]` but got `List[str]`.",
    "message": " Expected `List[Scope]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 42,
    "warning_line": "            return [Scope.read]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def type_to_scopes(self, user: str, key_type: str) -> List[Scope]:\n        if user in self.admin_users:\n",
        "source_code_len": 109,
        "target_code": "\n    def type_to_scopes(self, user: str, key_type: str) -> List[str]:\n        if user in self.admin_users:\n",
        "target_code_len": 107,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def type_to_scopes(self, user: str, key_type: str) -> List[Scope]:\n+    def type_to_scopes(self, user: str, key_type: str) -> List[str]:\n         if user in self.admin_users:\n",
        "source_code_with_indent": "\n    <DED>def type_to_scopes(self, user: str, key_type: str) -> List[Scope]:\n        <IND>if user in self.admin_users:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def type_to_scopes(self, user: str, key_type: str) -> List[str]:\n        <IND>if user in self.admin_users:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]