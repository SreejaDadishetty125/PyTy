[
  {
    "project": "collerek/ormar",
    "commit": "b637fc077455ff3194dfcd8cf80471fc125b9c81",
    "filename": "tests/test_model_definition/test_create_uses_init_for_consistency.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar/tests/test_model_definition/test_create_uses_init_for_consistency.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_model_definition/test_create_uses_init_for_consistency.py:30:4 Incompatible attribute type [8]: Attribute `id` declared in class `Mol` has type `str` but is used as type `ormar.fields.model_fields.UUID`.",
    "message": " Attribute `id` declared in class `Mol` has type `str` but is used as type `ormar.fields.model_fields.UUID`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 30,
    "warning_line": "    id: str = ormar.UUID(primary_key=True, index=True, uuid_format=\"hex\")",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    id: str = ormar.UUID(primary_key=True, index=True, uuid_format=\"hex\")\n    smiles: str = ormar.String(nullable=False, unique=True, max_length=256)\n",
        "source_code_len": 151,
        "target_code": "\n    id: uuid.UUID = ormar.UUID(primary_key=True, index=True, uuid_format=\"hex\")\n    smiles: str = ormar.String(nullable=False, unique=True, max_length=256)\n",
        "target_code_len": 157,
        "diff_format": "@@ -29,3 +29,3 @@\n \n-    id: str = ormar.UUID(primary_key=True, index=True, uuid_format=\"hex\")\n+    id: uuid.UUID = ormar.UUID(primary_key=True, index=True, uuid_format=\"hex\")\n     smiles: str = ormar.String(nullable=False, unique=True, max_length=256)\n",
        "source_code_with_indent": "\n    <DED>id: str = ormar.UUID(primary_key=True, index=True, uuid_format=\"hex\")\n    smiles: str = ormar.String(nullable=False, unique=True, max_length=256)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>id: uuid.UUID = ormar.UUID(primary_key=True, index=True, uuid_format=\"hex\")\n    smiles: str = ormar.String(nullable=False, unique=True, max_length=256)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "collerek/ormar",
    "commit": "b637fc077455ff3194dfcd8cf80471fc125b9c81",
    "filename": "tests/test_model_definition/test_overwriting_pydantic_field_type.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar/tests/test_model_definition/test_overwriting_pydantic_field_type.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/test_model_definition/test_overwriting_pydantic_field_type.py:22:4 Incompatible attribute type [8]: Attribute `my_int` declared in class `OverwriteTest` has type `str` but is used as type `ormar.fields.model_fields.Integer`.",
    "message": " Attribute `my_int` declared in class `OverwriteTest` has type `str` but is used as type `ormar.fields.model_fields.Integer`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 22,
    "warning_line": "    my_int: str = ormar.Integer(overwrite_pydantic_type=PositiveInt)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    id: int = ormar.Integer(primary_key=True)\n    my_int: str = ormar.Integer(overwrite_pydantic_type=PositiveInt)\n    constraint_dict: Json = ormar.JSON(\n        overwrite_pydantic_type=Optional[Json[Dict[str, int]]]\n    )\n",
        "source_code_len": 224,
        "target_code": "    id: int = ormar.Integer(primary_key=True)\n    my_int: int = ormar.Integer(overwrite_pydantic_type=PositiveInt)\n    constraint_dict: Json = ormar.JSON(\n        overwrite_pydantic_type=Optional[Json[Dict[str, int]]]  # type: ignore\n    )\n",
        "target_code_len": 240,
        "diff_format": "@@ -21,5 +21,5 @@\n     id: int = ormar.Integer(primary_key=True)\n-    my_int: str = ormar.Integer(overwrite_pydantic_type=PositiveInt)\n+    my_int: int = ormar.Integer(overwrite_pydantic_type=PositiveInt)\n     constraint_dict: Json = ormar.JSON(\n-        overwrite_pydantic_type=Optional[Json[Dict[str, int]]]\n+        overwrite_pydantic_type=Optional[Json[Dict[str, int]]]  # type: ignore\n     )\n",
        "source_code_with_indent": "    <DED>id: int = ormar.Integer(primary_key=True)\n    my_int: str = ormar.Integer(overwrite_pydantic_type=PositiveInt)\n    constraint_dict: Json = ormar.JSON(\n        overwrite_pydantic_type=Optional[Json[Dict[str, int]]]\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>id: int = ormar.Integer(primary_key=True)\n    my_int: int = ormar.Integer(overwrite_pydantic_type=PositiveInt)\n    constraint_dict: Json = ormar.JSON(\n        overwrite_pydantic_type=Optional[Json[Dict[str, int]]]  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]