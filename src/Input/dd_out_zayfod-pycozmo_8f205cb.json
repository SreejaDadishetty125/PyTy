[
  {
    "project": "zayfod/pycozmo",
    "commit": "8f205cb219b17756bbd9a3648eeb0c612a25455a",
    "filename": "pycozmo/protocol_ast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/protocol_ast.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/protocol_ast.py:116:17 Incompatible variable type [9]: data_type is declared to have type `Union[Argument, str]` but is used as type `typing.Type[UInt8Argument]`.",
    "message": " data_type is declared to have type `Union[Argument, str]` but is used as type `typing.Type[UInt8Argument]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 116,
    "warning_line": "                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_len": 62,
        "target_code": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,3 +8,3 @@\n from abc import ABC\n-from typing import List, Optional, Union\n+from typing import List, Optional, Union, Type\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 209,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 215,
        "diff_format": "@@ -115,3 +115,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n+                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 220,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 232,
        "diff_format": "@@ -126,3 +126,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n+                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "source_code_len": 183,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "target_code_len": 189,
        "diff_format": "@@ -137,3 +137,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 length_type: Argument = UInt16Argument, default=\"\"):\n+                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "8f205cb219b17756bbd9a3648eeb0c612a25455a",
    "filename": "pycozmo/protocol_ast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/protocol_ast.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/protocol_ast.py:127:17 Incompatible variable type [9]: data_type is declared to have type `Argument` but is used as type `typing.Type[UInt8Argument]`.",
    "message": " data_type is declared to have type `Argument` but is used as type `typing.Type[UInt8Argument]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 127,
    "warning_line": "                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_len": 62,
        "target_code": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,3 +8,3 @@\n from abc import ABC\n-from typing import List, Optional, Union\n+from typing import List, Optional, Union, Type\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 209,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 215,
        "diff_format": "@@ -115,3 +115,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n+                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 220,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 232,
        "diff_format": "@@ -126,3 +126,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n+                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "source_code_len": 183,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "target_code_len": 189,
        "diff_format": "@@ -137,3 +137,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 length_type: Argument = UInt16Argument, default=\"\"):\n+                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "8f205cb219b17756bbd9a3648eeb0c612a25455a",
    "filename": "pycozmo/protocol_ast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/protocol_ast.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/protocol_ast.py:127:54 Incompatible variable type [9]: length_type is declared to have type `Argument` but is used as type `typing.Type[UInt16Argument]`.",
    "message": " length_type is declared to have type `Argument` but is used as type `typing.Type[UInt16Argument]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 127,
    "warning_line": "                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_len": 62,
        "target_code": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,3 +8,3 @@\n from abc import ABC\n-from typing import List, Optional, Union\n+from typing import List, Optional, Union, Type\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 209,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 215,
        "diff_format": "@@ -115,3 +115,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n+                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 220,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 232,
        "diff_format": "@@ -126,3 +126,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n+                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "source_code_len": 183,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "target_code_len": 189,
        "diff_format": "@@ -137,3 +137,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 length_type: Argument = UInt16Argument, default=\"\"):\n+                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "8f205cb219b17756bbd9a3648eeb0c612a25455a",
    "filename": "pycozmo/protocol_ast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/protocol_ast.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/protocol_ast.py:138:17 Incompatible variable type [9]: length_type is declared to have type `Argument` but is used as type `typing.Type[UInt16Argument]`.",
    "message": " length_type is declared to have type `Argument` but is used as type `typing.Type[UInt16Argument]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 138,
    "warning_line": "                 length_type: Argument = UInt16Argument, default=\"\"):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_len": 62,
        "target_code": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,3 +8,3 @@\n from abc import ABC\n-from typing import List, Optional, Union\n+from typing import List, Optional, Union, Type\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import List, Optional, Union, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 209,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 215,
        "diff_format": "@@ -115,3 +115,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n+                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Argument, str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Union[Type[Argument], str] = UInt8Argument, length: int = 0, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "source_code_len": 220,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        super().__init__(name, description)\n",
        "target_code_len": 232,
        "diff_format": "@@ -126,3 +126,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n+                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Argument = UInt8Argument, length_type: Argument = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 data_type: Type[Argument] = UInt8Argument, length_type: Type[Argument] = UInt16Argument, default=()):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "source_code_len": 183,
        "target_code": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        super().__init__(name, description)\n",
        "target_code_len": 189,
        "diff_format": "@@ -137,3 +137,3 @@\n     def __init__(self, name: str, description: Optional[str] = None,\n-                 length_type: Argument = UInt16Argument, default=\"\"):\n+                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n         super().__init__(name, description)\n",
        "source_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Argument = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, name: str, description: Optional[str] = None,\n                 length_type: Type[Argument] = UInt16Argument, default=\"\"):\n        <IND>super().__init__(name, description)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "8f205cb219b17756bbd9a3648eeb0c612a25455a",
    "filename": "pycozmo/protocol_declaration.py",
    "min_patch_found": false,
    "full_warning_msg": "pycozmo/protocol_declaration.py:124:39 Incompatible parameter type [6]: Expected `pycozmo.protocol_ast.Argument` for 2nd parameter `data_type` to call `pycozmo.protocol_ast.VArrayArgument.__init__` but got `typing.Type[pycozmo.protocol_ast.UInt32Argument]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "8f205cb219b17756bbd9a3648eeb0c612a25455a",
    "filename": "pycozmo/protocol_declaration.py",
    "min_patch_found": false,
    "full_warning_msg": "pycozmo/protocol_declaration.py:124:65 Incompatible parameter type [6]: Expected `pycozmo.protocol_ast.Argument` for 3rd parameter `length_type` to call `pycozmo.protocol_ast.VArrayArgument.__init__` but got `typing.Type[pycozmo.protocol_ast.UInt8Argument]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "8f205cb219b17756bbd9a3648eeb0c612a25455a",
    "filename": "pycozmo/protocol_declaration.py",
    "min_patch_found": false,
    "full_warning_msg": "pycozmo/protocol_declaration.py:224:45 Incompatible parameter type [6]: Expected `typing.Union[pycozmo.protocol_ast.Argument, str]` for 2nd parameter `data_type` to call `pycozmo.protocol_ast.FArrayArgument.__init__` but got `typing.Type[pycozmo.protocol_ast.UInt16Argument]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]