[
  {
    "project": "Ultimaker/Uranium",
    "commit": "f9a43860b447b66e61f9ef1ccf9457d8c3701209",
    "filename": "plugins/LocalContainerProvider/LocalContainerProvider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/plugins/LocalContainerProvider/LocalContainerProvider.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/LocalContainerProvider/LocalContainerProvider.py:66:39 Incompatible parameter type [6]: Expected `DefinitionContainer` for 1st positional only parameter to call `LocalContainerProvider._saveCachedDefinition` but got `typing.Union[DefinitionContainer, UM.Settings.ContainerStack.ContainerStack, UM.Settings.InstanceContainer.InstanceContainer]`.",
    "message": " Expected `DefinitionContainer` for 1st positional only parameter to call `LocalContainerProvider._saveCachedDefinition` but got `typing.Union[DefinitionContainer, UM.Settings.ContainerStack.ContainerStack, UM.Settings.InstanceContainer.InstanceContainer]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "            self._saveCachedDefinition(container)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if issubclass(container_class, DefinitionContainer):\n            self._saveCachedDefinition(container)\n",
        "source_code_len": 112,
        "target_code": "\n        if isinstance(container, DefinitionContainer):\n            self._saveCachedDefinition(container)\n",
        "target_code_len": 106,
        "diff_format": "@@ -64,3 +66,3 @@\n \n-        if issubclass(container_class, DefinitionContainer):\n+        if isinstance(container, DefinitionContainer):\n             self._saveCachedDefinition(container)\n",
        "source_code_with_indent": "\n        if issubclass(container_class, DefinitionContainer):\n            <IND>self._saveCachedDefinition(container)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if isinstance(container, DefinitionContainer):\n            <IND>self._saveCachedDefinition(container)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "f9a43860b447b66e61f9ef1ccf9457d8c3701209",
    "filename": "plugins/LocalContainerProvider/LocalContainerProvider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/plugins/LocalContainerProvider/LocalContainerProvider.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/LocalContainerProvider/LocalContainerProvider.py:94:50 Incompatible parameter type [6]: Expected `MimeType` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[MimeType]`.",
    "message": " Expected `MimeType` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[MimeType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 94,
    "warning_line": "            self._id_to_mime[container.getId()] = self._pathToMime(path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self._id_to_path[container.getId()] = path\n            self._id_to_mime[container.getId()] = self._pathToMime(path)\n            base_file = container.getMetaData().get(\"base_file\")\n",
        "source_code_len": 193,
        "target_code": "            self._id_to_path[container.getId()] = path\n            mime = self._pathToMime(path)\n            if mime is not None:\n                self._id_to_mime[container.getId()] = mime\n            else:\n                Logger.log(\"e\", \"Failed to find MIME type for container ID [%s] with path [%s]\", container.getId(), path)\n\n            base_file = container.getMetaData().get(\"base_file\")\n",
        "target_code_len": 395,
        "diff_format": "@@ -93,3 +98,8 @@\n             self._id_to_path[container.getId()] = path\n-            self._id_to_mime[container.getId()] = self._pathToMime(path)\n+            mime = self._pathToMime(path)\n+            if mime is not None:\n+                self._id_to_mime[container.getId()] = mime\n+            else:\n+                Logger.log(\"e\", \"Failed to find MIME type for container ID [%s] with path [%s]\", container.getId(), path)\n+\n             base_file = container.getMetaData().get(\"base_file\")\n",
        "source_code_with_indent": "            self._id_to_path[container.getId()] = path\n            self._id_to_mime[container.getId()] = self._pathToMime(path)\n            base_file = container.getMetaData().get(\"base_file\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self._id_to_path[container.getId()] = path\n            mime = self._pathToMime(path)\n            if mime is not None:\n                <IND>self._id_to_mime[container.getId()] = mime\n            <DED>else:\n                <IND>Logger.log(\"e\", \"Failed to find MIME type for container ID [%s] with path [%s]\", container.getId(), path)\n\n            <DED>base_file = container.getMetaData().get(\"base_file\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "f9a43860b447b66e61f9ef1ccf9457d8c3701209",
    "filename": "plugins/LocalContainerProvider/LocalContainerProvider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/plugins/LocalContainerProvider/LocalContainerProvider.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/LocalContainerProvider/LocalContainerProvider.py:99:59 Incompatible parameter type [6]: Expected `MimeType` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[MimeType]`.",
    "message": " Expected `MimeType` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[MimeType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 99,
    "warning_line": "                    self._id_to_mime[container_md[\"id\"]] = self._pathToMime(path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    self._id_to_path[container_md[\"id\"]] = path\n                    self._id_to_mime[container_md[\"id\"]] = self._pathToMime(path)\n        else:\n",
        "source_code_len": 160,
        "target_code": "                    self._id_to_path[container_md[\"id\"]] = path\n                    mime = self._pathToMime(path)\n                    if mime is not None:\n                        self._id_to_mime[container_md[\"id\"]] = mime\n                    else:\n                        Logger.log(\"e\", \"Failed to find MIME type for container ID [%s] with path [%s]\", container.getId(), path)\n        else:\n",
        "target_code_len": 393,
        "diff_format": "@@ -98,3 +108,7 @@\n                     self._id_to_path[container_md[\"id\"]] = path\n-                    self._id_to_mime[container_md[\"id\"]] = self._pathToMime(path)\n+                    mime = self._pathToMime(path)\n+                    if mime is not None:\n+                        self._id_to_mime[container_md[\"id\"]] = mime\n+                    else:\n+                        Logger.log(\"e\", \"Failed to find MIME type for container ID [%s] with path [%s]\", container.getId(), path)\n         else:\n",
        "source_code_with_indent": "                    <IND>self._id_to_path[container_md[\"id\"]] = path\n                    self._id_to_mime[container_md[\"id\"]] = self._pathToMime(path)\n        <DED><DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>self._id_to_path[container_md[\"id\"]] = path\n                    mime = self._pathToMime(path)\n                    if mime is not None:\n                        <IND>self._id_to_mime[container_md[\"id\"]] = mime\n                    <DED>else:\n                        <IND>Logger.log(\"e\", \"Failed to find MIME type for container ID [%s] with path [%s]\", container.getId(), path)\n        <DED><DED><DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "f9a43860b447b66e61f9ef1ccf9457d8c3701209",
    "filename": "plugins/LocalContainerProvider/LocalContainerProvider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/plugins/LocalContainerProvider/LocalContainerProvider.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/LocalContainerProvider/LocalContainerProvider.py:108:4 Inconsistent override [15]: `plugins.LocalContainerProvider.LocalContainerProvider.LocalContainerProvider.loadMetadata` overrides method defined in `ContainerProvider` inconsistently. Returned type `Optional[Dict[str, typing.Any]]` is not a subtype of the overridden return `Dict[str, typing.Any]`.",
    "message": " `plugins.LocalContainerProvider.LocalContainerProvider.LocalContainerProvider.loadMetadata` overrides method defined in `ContainerProvider` inconsistently. Returned type `Optional[Dict[str, typing.Any]]` is not a subtype of the overridden return `Dict[str, typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 108,
    "warning_line": "    def loadMetadata(self, container_id: str) -> Optional[Dict[str, Any]]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    #   metadata failed to load.\n    def loadMetadata(self, container_id: str) -> Optional[Dict[str, Any]]:\n        registry = ContainerRegistry.getInstance()\n",
        "source_code_len": 159,
        "target_code": "    #   metadata failed to load.\n    def loadMetadata(self, container_id: str) -> Dict[str, Any]:\n        registry = ContainerRegistry.getInstance()\n",
        "target_code_len": 149,
        "diff_format": "@@ -107,3 +121,3 @@\n     #   metadata failed to load.\n-    def loadMetadata(self, container_id: str) -> Optional[Dict[str, Any]]:\n+    def loadMetadata(self, container_id: str) -> Dict[str, Any]:\n         registry = ContainerRegistry.getInstance()\n",
        "source_code_with_indent": "    #   metadata failed to load.\n    <DED><DED>def loadMetadata(self, container_id: str) -> Optional[Dict[str, Any]]:\n        <IND>registry = ContainerRegistry.getInstance()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    #   metadata failed to load.\n    <DED><DED>def loadMetadata(self, container_id: str) -> Dict[str, Any]:\n        <IND>registry = ContainerRegistry.getInstance()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        requested_metadata = None\n        try:\n",
        "source_code_len": 48,
        "target_code": "\n        requested_metadata = {}  # type: Dict[str, Any]\n        try:\n",
        "target_code_len": 70,
        "diff_format": "@@ -115,3 +129,3 @@\n \n-        requested_metadata = None\n+        requested_metadata = {}  # type: Dict[str, Any]\n         try:\n",
        "source_code_with_indent": "\n        requested_metadata = None\n        try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        requested_metadata = {}  # type: Dict[str, Any]\n        try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return None\n        except Exception as e:\n",
        "source_code_len": 141,
        "target_code": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return {}\n        except Exception as e:\n",
        "target_code_len": 139,
        "diff_format": "@@ -122,3 +136,3 @@\n             ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n-            return None\n+            return {}\n         except Exception as e:\n",
        "source_code_with_indent": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return None\n        <DED>except Exception as e:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return {}\n        <DED>except Exception as e:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return None\n\n",
        "source_code_len": 111,
        "target_code": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return {}\n\n",
        "target_code_len": 109,
        "diff_format": "@@ -126,3 +140,3 @@\n             ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n-            return None\n+            return {}\n \n",
        "source_code_with_indent": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ConfigurationErrorMessage.getInstance().addFaultyContainers(container_id)\n            return {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]