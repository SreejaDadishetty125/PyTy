[
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:190:4 Inconsistent override [14]: `src.ezdxf.entities.mesh.Mesh._copy_data` overrides method defined in `src.ezdxf.entities.dxfentity.DXFEntity` inconsistently. Parameter of type `Mesh` is not a supertype of the overridden parameter `src.ezdxf.entities.dxfentity.DXFEntity`.",
    "message": " `src.ezdxf.entities.mesh.Mesh._copy_data` overrides method defined in `src.ezdxf.entities.dxfentity.DXFEntity` inconsistently. Parameter of type `Mesh` is not a supertype of the overridden parameter `src.ezdxf.entities.dxfentity.DXFEntity`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 190,
    "warning_line": "    def _copy_data(self, entity: 'Mesh') -> None:"
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:353:8 Incompatible return type [7]: Expected `MeshData` but got `typing.Generator[MeshData, None, None]`.",
    "message": " Expected `MeshData` but got `typing.Generator[MeshData, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 353,
    "warning_line": "        yield data",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# Copyright (c) 2019-2020 Manfred Moitzi\n# License: MIT License\nfrom typing import TYPE_CHECKING, Iterable, Sequence, Tuple, Union, List, Dict\nimport array\n",
        "source_code_len": 156,
        "target_code": "# Copyright (c) 2019-2021 Manfred Moitzi\n# License: MIT License\nfrom typing import (\n    TYPE_CHECKING,\n    Iterable,\n    Sequence,\n    Tuple,\n    Union,\n    List,\n    Dict,\n    Iterator,\n)\nimport array\n",
        "target_code_len": 203,
        "diff_format": "@@ -1,4 +1,13 @@\n-# Copyright (c) 2019-2020 Manfred Moitzi\n+# Copyright (c) 2019-2021 Manfred Moitzi\n # License: MIT License\n-from typing import TYPE_CHECKING, Iterable, Sequence, Tuple, Union, List, Dict\n+from typing import (\n+    TYPE_CHECKING,\n+    Iterable,\n+    Sequence,\n+    Tuple,\n+    Union,\n+    List,\n+    Dict,\n+    Iterator,\n+)\n import array\n",
        "source_code_with_indent": "# Copyright (c) 2019-2020 Manfred Moitzi\n# License: MIT License\nfrom typing import TYPE_CHECKING, Iterable, Sequence, Tuple, Union, List, Dict\nimport array\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# Copyright (c) 2019-2021 Manfred Moitzi\n# License: MIT License\nfrom typing import (\n    TYPE_CHECKING,\n    Iterable,\n    Sequence,\n    Tuple,\n    Union,\n    List,\n    Dict,\n    Iterator,\n)\nimport array\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @contextmanager\n    def edit_data(self) -> 'MeshData':\n        \"\"\" Context manager various mesh data, returns :class:`MeshData`.\n\n",
        "source_code_len": 134,
        "target_code": "    @contextmanager\n    def edit_data(self) -> Iterator[\"MeshData\"]:\n        \"\"\"Context manager various mesh data, returns :class:`MeshData`.\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -343,4 +376,4 @@\n     @contextmanager\n-    def edit_data(self) -> 'MeshData':\n-        \"\"\" Context manager various mesh data, returns :class:`MeshData`.\n+    def edit_data(self) -> Iterator[\"MeshData\"]:\n+        \"\"\"Context manager various mesh data, returns :class:`MeshData`.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@contextmanager\n    def edit_data(self) -> 'MeshData':\n        <IND>",
        "target_code_with_indent": "    <DED>@contextmanager\n    def edit_data(self) -> Iterator[\"MeshData\"]:\n        <IND>"
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:396:29 Incompatible parameter type [6]: Expected `Tuple[float, float, float]` for 1st positional only parameter to call `list.append` but got `Sequence[float]`.",
    "message": " Expected `Tuple[float, float, float]` for 1st positional only parameter to call `list.append` but got `Sequence[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 396,
    "warning_line": "        self.vertices.append(vertex)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            raise DXFValueError(\n                'Parameter vertex has to be a 3-tuple (x, y, z).')\n        index = len(self.vertices)\n        self.vertices.append(vertex)\n        return index\n",
        "source_code_len": 193,
        "target_code": "            raise DXFValueError(\n                \"Parameter vertex has to be a 3-tuple (x, y, z).\"\n            )\n        index = len(self.vertices)\n        self.vertices.append(vertex)  # type: ignore\n        return index\n",
        "target_code_len": 222,
        "diff_format": "@@ -393,5 +428,6 @@\n             raise DXFValueError(\n-                'Parameter vertex has to be a 3-tuple (x, y, z).')\n+                \"Parameter vertex has to be a 3-tuple (x, y, z).\"\n+            )\n         index = len(self.vertices)\n-        self.vertices.append(vertex)\n+        self.vertices.append(vertex)  # type: ignore\n         return index\n",
        "source_code_with_indent": "            <IND>raise DXFValueError(\n                'Parameter vertex has to be a 3-tuple (x, y, z).')\n        <DED>index = len(self.vertices)\n        self.vertices.append(vertex)\n        return index\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>raise DXFValueError(\n                \"Parameter vertex has to be a 3-tuple (x, y, z).\"\n            )\n        <DED>index = len(self.vertices)\n        self.vertices.append(vertex)  # type: ignore\n        return index\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:410:20 Incompatible return type [7]: Expected `Iterable[Tuple[float, float, float]]` but got `typing.Generator[Tuple[float, float, float, int], None, None]`.",
    "message": " Expected `Iterable[Tuple[float, float, float]]` but got `typing.Generator[Tuple[float, float, float, int], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 410,
    "warning_line": "                    yield (round(x, precision),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_len": 414,
        "target_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_len": 457,
        "diff_format": "@@ -406,9 +442,11 @@\n         def remove_doublette_vertices() -> Dict[int, int]:\n-            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n+            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                 for index, vertex in enumerate(self.vertices):\n                     x, y, z = vertex\n-                    yield (round(x, precision),\n-                           round(y, precision),\n-                           round(z, precision),\n-                           index)\n+                    yield (\n+                        round(x, precision),\n+                        round(y, precision),\n+                        round(z, precision),\n+                        index,\n+                    )\n \n",
        "source_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:424:43 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `float`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 424,
    "warning_line": "                vertex = original_vertices[original_index]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_len": 414,
        "target_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_len": 457,
        "diff_format": "@@ -406,9 +442,11 @@\n         def remove_doublette_vertices() -> Dict[int, int]:\n-            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n+            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                 for index, vertex in enumerate(self.vertices):\n                     x, y, z = vertex\n-                    yield (round(x, precision),\n-                           round(y, precision),\n-                           round(z, precision),\n-                           index)\n+                    yield (\n+                        round(x, precision),\n+                        round(y, precision),\n+                        round(z, precision),\n+                        index,\n+                    )\n \n",
        "source_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:429:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `dict.__setitem__` but got `float`.",
    "message": " Expected `int` for 1st positional only parameter to call `dict.__setitem__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 429,
    "warning_line": "                    index_map[original_index] = index",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_len": 414,
        "target_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_len": 457,
        "diff_format": "@@ -406,9 +442,11 @@\n         def remove_doublette_vertices() -> Dict[int, int]:\n-            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n+            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                 for index, vertex in enumerate(self.vertices):\n                     x, y, z = vertex\n-                    yield (round(x, precision),\n-                           round(y, precision),\n-                           round(z, precision),\n-                           index)\n+                    yield (\n+                        round(x, precision),\n+                        round(y, precision),\n+                        round(z, precision),\n+                        index,\n+                    )\n \n",
        "source_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:432:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `dict.__setitem__` but got `float`.",
    "message": " Expected `int` for 1st positional only parameter to call `dict.__setitem__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 432,
    "warning_line": "                    index_map[original_index] = index",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_len": 414,
        "target_code": "        def remove_doublette_vertices() -> Dict[int, int]:\n            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                for index, vertex in enumerate(self.vertices):\n                    x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_len": 457,
        "diff_format": "@@ -406,9 +442,11 @@\n         def remove_doublette_vertices() -> Dict[int, int]:\n-            def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n+            def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                 for index, vertex in enumerate(self.vertices):\n                     x, y, z = vertex\n-                    yield (round(x, precision),\n-                           round(y, precision),\n-                           round(z, precision),\n-                           index)\n+                    yield (\n+                        round(x, precision),\n+                        round(y, precision),\n+                        round(z, precision),\n+                        index,\n+                    )\n \n",
        "source_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (round(x, precision),\n                           round(y, precision),\n                           round(z, precision),\n                           index)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        def remove_doublette_vertices() -> Dict[int, int]:\n            <IND>def prepare_vertices() -> Iterable[Tuple[float, float, float, int]]:\n                <IND>for index, vertex in enumerate(self.vertices):\n                    <IND>x, y, z = vertex\n                    yield (\n                        round(x, precision),\n                        round(y, precision),\n                        round(z, precision),\n                        index,\n                    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:436:12 Incompatible attribute type [8]: Attribute `faces` declared in class `MeshData` has type `List[array.array[typing.Any]]` but is used as type `List[typing.Tuple[typing.Any, ...]]`.",
    "message": " Attribute `faces` declared in class `MeshData` has type `List[array.array[typing.Any]]` but is used as type `List[typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 436,
    "warning_line": "            self.faces = remap_indices(self.faces)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        def remap_faces() -> None:\n            self.faces = remap_indices(self.faces)\n\n        def remap_edges() -> None:\n            self.edges = remap_indices(self.edges)\n\n        def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            mapped_indices = []  # type: List[Tuple]\n            for entity in entity_list:\n",
        "source_code_len": 346,
        "target_code": "        def remap_faces() -> None:\n            self.faces = remap_indices(self.faces)  # type: ignore\n\n        def remap_edges() -> None:\n            self.edges = remap_indices(self.edges)  # type: ignore\n\n        def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            mapped_indices: List[Tuple] = []\n            for entity in entity_list:\n",
        "target_code_len": 370,
        "diff_format": "@@ -435,9 +473,9 @@\n         def remap_faces() -> None:\n-            self.faces = remap_indices(self.faces)\n+            self.faces = remap_indices(self.faces)  # type: ignore\n \n         def remap_edges() -> None:\n-            self.edges = remap_indices(self.edges)\n+            self.edges = remap_indices(self.edges)  # type: ignore\n \n         def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n-            mapped_indices = []  # type: List[Tuple]\n+            mapped_indices: List[Tuple] = []\n             for entity in entity_list:\n",
        "source_code_with_indent": "        <DED>def remap_faces() -> None:\n            <IND>self.faces = remap_indices(self.faces)\n\n        <DED>def remap_edges() -> None:\n            <IND>self.edges = remap_indices(self.edges)\n\n        <DED>def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            <IND>mapped_indices = []  # type: List[Tuple]\n            for entity in entity_list:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>def remap_faces() -> None:\n            <IND>self.faces = remap_indices(self.faces)  # type: ignore\n\n        <DED>def remap_edges() -> None:\n            <IND>self.edges = remap_indices(self.edges)  # type: ignore\n\n        <DED>def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            <IND>mapped_indices: List[Tuple] = []\n            for entity in entity_list:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "6a86603364c565bf7bef62117b5b6071396ebb36",
    "filename": "src/ezdxf/entities/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/entities/mesh.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/entities/mesh.py:439:12 Incompatible attribute type [8]: Attribute `edges` declared in class `MeshData` has type `List[Tuple[int, int]]` but is used as type `List[typing.Tuple[typing.Any, ...]]`.",
    "message": " Attribute `edges` declared in class `MeshData` has type `List[Tuple[int, int]]` but is used as type `List[typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 439,
    "warning_line": "            self.edges = remap_indices(self.edges)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        def remap_faces() -> None:\n            self.faces = remap_indices(self.faces)\n\n        def remap_edges() -> None:\n            self.edges = remap_indices(self.edges)\n\n        def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            mapped_indices = []  # type: List[Tuple]\n            for entity in entity_list:\n",
        "source_code_len": 346,
        "target_code": "        def remap_faces() -> None:\n            self.faces = remap_indices(self.faces)  # type: ignore\n\n        def remap_edges() -> None:\n            self.edges = remap_indices(self.edges)  # type: ignore\n\n        def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            mapped_indices: List[Tuple] = []\n            for entity in entity_list:\n",
        "target_code_len": 370,
        "diff_format": "@@ -435,9 +473,9 @@\n         def remap_faces() -> None:\n-            self.faces = remap_indices(self.faces)\n+            self.faces = remap_indices(self.faces)  # type: ignore\n \n         def remap_edges() -> None:\n-            self.edges = remap_indices(self.edges)\n+            self.edges = remap_indices(self.edges)  # type: ignore\n \n         def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n-            mapped_indices = []  # type: List[Tuple]\n+            mapped_indices: List[Tuple] = []\n             for entity in entity_list:\n",
        "source_code_with_indent": "        <DED>def remap_faces() -> None:\n            <IND>self.faces = remap_indices(self.faces)\n\n        <DED>def remap_edges() -> None:\n            <IND>self.edges = remap_indices(self.edges)\n\n        <DED>def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            <IND>mapped_indices = []  # type: List[Tuple]\n            for entity in entity_list:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>def remap_faces() -> None:\n            <IND>self.faces = remap_indices(self.faces)  # type: ignore\n\n        <DED>def remap_edges() -> None:\n            <IND>self.edges = remap_indices(self.edges)  # type: ignore\n\n        <DED>def remap_indices(entity_list: Sequence[Sequence[int]]) -> List[Tuple]:\n            <IND>mapped_indices: List[Tuple] = []\n            for entity in entity_list:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]