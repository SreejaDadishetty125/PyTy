[
  {
    "project": "hyperledger/indy-plenum",
    "commit": "dcf67923bf45472cec612c59718f04b4da270ef6",
    "filename": "plenum/common/error.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/error.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/error.py:9:20 Incompatible variable type [9]: exc_type is declared to have type `Exception` but is used as type `typing.Type[Exception]`.",
    "message": " exc_type is declared to have type `Exception` but is used as type `typing.Type[Exception]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def error(msg: str, exc_type: Exception=Exception) -> Exception:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    getlogger().error(msg, exc_info=ex)\n\n\ndef error(msg: str, exc_type: Exception=Exception) -> Exception:\n    \"\"\"\n    Wrapper to get around Python's distinction between statements and expressions\n    Can be used in lambdas and expressions such as: a if b else error(c)\n\n    :param msg: error message\n    :param exc_type: type of exception to raise\n    \"\"\"\n    raise exc_type(msg)\n",
        "source_code_len": 381,
        "target_code": "    getlogger().error(msg, exc_info=ex)\n",
        "target_code_len": 40,
        "diff_format": "@@ -6,12 +6,1 @@\n     getlogger().error(msg, exc_info=ex)\n-\n-\n-def error(msg: str, exc_type: Exception=Exception) -> Exception:\n-    \"\"\"\n-    Wrapper to get around Python's distinction between statements and expressions\n-    Can be used in lambdas and expressions such as: a if b else error(c)\n-\n-    :param msg: error message\n-    :param exc_type: type of exception to raise\n-    \"\"\"\n-    raise exc_type(msg)\n",
        "source_code_with_indent": "    getlogger().error(msg, exc_info=ex)\n\n\n<DED>def error(msg: str, exc_type: Exception=Exception) -> Exception:\n    <IND>\"\"\"\n    Wrapper to get around Python's distinction between statements and expressions\n    Can be used in lambdas and expressions such as: a if b else error(c)\n\n    :param msg: error message\n    :param exc_type: type of exception to raise\n    \"\"\"\n    raise exc_type(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    getlogger().error(msg, exc_info=ex)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "dcf67923bf45472cec612c59718f04b4da270ef6",
    "filename": "plenum/common/error.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/error.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/error.py:17:10 Call error [29]: `Exception` is not a function.",
    "message": " `Exception` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 17,
    "warning_line": "    raise exc_type(msg)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    getlogger().error(msg, exc_info=ex)\n\n\ndef error(msg: str, exc_type: Exception=Exception) -> Exception:\n    \"\"\"\n    Wrapper to get around Python's distinction between statements and expressions\n    Can be used in lambdas and expressions such as: a if b else error(c)\n\n    :param msg: error message\n    :param exc_type: type of exception to raise\n    \"\"\"\n    raise exc_type(msg)\n",
        "source_code_len": 381,
        "target_code": "    getlogger().error(msg, exc_info=ex)\n",
        "target_code_len": 40,
        "diff_format": "@@ -6,12 +6,1 @@\n     getlogger().error(msg, exc_info=ex)\n-\n-\n-def error(msg: str, exc_type: Exception=Exception) -> Exception:\n-    \"\"\"\n-    Wrapper to get around Python's distinction between statements and expressions\n-    Can be used in lambdas and expressions such as: a if b else error(c)\n-\n-    :param msg: error message\n-    :param exc_type: type of exception to raise\n-    \"\"\"\n-    raise exc_type(msg)\n",
        "source_code_with_indent": "    getlogger().error(msg, exc_info=ex)\n\n\n<DED>def error(msg: str, exc_type: Exception=Exception) -> Exception:\n    <IND>\"\"\"\n    Wrapper to get around Python's distinction between statements and expressions\n    Can be used in lambdas and expressions such as: a if b else error(c)\n\n    :param msg: error message\n    :param exc_type: type of exception to raise\n    \"\"\"\n    raise exc_type(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    getlogger().error(msg, exc_info=ex)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "dcf67923bf45472cec612c59718f04b4da270ef6",
    "filename": "plenum/test/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/helper.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/helper.py:285:23 Incompatible variable type [9]: nodes is declared to have type `Sequence[TestNode]` but is used as type `None`.",
    "message": " nodes is declared to have type `Sequence[TestNode]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 285,
    "warning_line": "                       nodes: Sequence[TestNode] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return clients, wallets\n\n\n# noinspection PyIncorrectDocstring\nasync def aSetupClient(looper: Looper,\n                       nodes: Sequence[TestNode] = None,\n                       nodeReg=None,\n                       tmpdir=None):\n    \"\"\"\n    async version of above\n    \"\"\"\n    client1 = genTestClient(nodes=nodes,\n                            nodeReg=nodeReg,\n                            tmpdir=tmpdir)\n    looper.add(client1)\n    await client1.ensureConnectedToNodes()\n    return client1\n\n",
        "source_code_len": 495,
        "target_code": "    return clients, wallets\n\n",
        "target_code_len": 29,
        "diff_format": "@@ -280,18 +279,2 @@\n     return clients, wallets\n-\n-\n-# noinspection PyIncorrectDocstring\n-async def aSetupClient(looper: Looper,\n-                       nodes: Sequence[TestNode] = None,\n-                       nodeReg=None,\n-                       tmpdir=None):\n-    \"\"\"\n-    async version of above\n-    \"\"\"\n-    client1 = genTestClient(nodes=nodes,\n-                            nodeReg=nodeReg,\n-                            tmpdir=tmpdir)\n-    looper.add(client1)\n-    await client1.ensureConnectedToNodes()\n-    return client1\n \n",
        "source_code_with_indent": "    <DED>return clients, wallets\n\n\n# noinspection PyIncorrectDocstring\n<DED>async def aSetupClient(looper: Looper,\n                       nodes: Sequence[TestNode] = None,\n                       nodeReg=None,\n                       tmpdir=None):\n    <IND>\"\"\"\n    async version of above\n    \"\"\"\n    client1 = genTestClient(nodes=nodes,\n                            nodeReg=nodeReg,\n                            tmpdir=tmpdir)\n    looper.add(client1)\n    await client1.ensureConnectedToNodes()\n    return client1\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>return clients, wallets\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]