[
  {
    "project": "orchest/orchest",
    "commit": "0d39de58ead32de899dd132784f5c96c51290a5e",
    "filename": "python/orchest/pipeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/orchest-orchest/python/orchest/pipeline.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/orchest/pipeline.py:48:28 Invalid type [31]: Expression `typing.Optional[typing.Dict[slice(str, typing.Any, None)]]` is not a valid type.",
    "message": " Expression `typing.Optional[typing.Dict[slice(str, typing.Any, None)]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 48,
    "warning_line": "    def get_params(self) -> Optional[Dict[str: Any]]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_params(self) -> Optional[Dict[str: Any]]:\n        return self.properties.get('parameters')\n",
        "source_code_len": 104,
        "target_code": "\n    def get_params(self) -> Optional[Dict[str, Any]]:\n        return self.properties.get('parameters')\n",
        "target_code_len": 104,
        "diff_format": "@@ -47,3 +47,3 @@\n \n-    def get_params(self) -> Optional[Dict[str: Any]]:\n+    def get_params(self) -> Optional[Dict[str, Any]]:\n         return self.properties.get('parameters')\n",
        "source_code_with_indent": "\n    <DED>def get_params(self) -> Optional[Dict[str: Any]]:\n        <IND>return self.properties.get('parameters')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_params(self) -> Optional[Dict[str, Any]]:\n        <IND>return self.properties.get('parameters')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]