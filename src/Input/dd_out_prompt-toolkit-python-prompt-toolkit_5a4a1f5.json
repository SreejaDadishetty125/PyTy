[
  {
    "project": "prompt-toolkit/python-prompt-toolkit",
    "commit": "5a4a1f5c74d867176897c69090ab53d8d070c52b",
    "filename": "prompt_toolkit/application/dummy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/prompt-toolkit-python-prompt-toolkit/prompt_toolkit/application/dummy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prompt_toolkit/application/dummy.py:25:4 Inconsistent override [14]: `prompt_toolkit.application.dummy.DummyApplication.run_async` overrides method defined in `Application` inconsistently. Could not find parameter `set_exception_handler` in overriding signature.",
    "message": " `prompt_toolkit.application.dummy.DummyApplication.run_async` overrides method defined in `Application` inconsistently. Could not find parameter `set_exception_handler` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 25,
    "warning_line": "    async def run_async(self, pre_run: Optional[Callable[[], None]] = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def run_async(self, pre_run: Optional[Callable[[], None]] = None) -> None:\n        raise NotImplementedError('A DummyApplication is not supposed to run.')\n",
        "source_code_len": 166,
        "target_code": "\n    async def run_async(self, pre_run: Optional[Callable[[], None]] = None,\n                        set_exception_handler: bool = True) -> None:\n        raise NotImplementedError('A DummyApplication is not supposed to run.')\n",
        "target_code_len": 226,
        "diff_format": "@@ -24,3 +24,4 @@\n \n-    async def run_async(self, pre_run: Optional[Callable[[], None]] = None) -> None:\n+    async def run_async(self, pre_run: Optional[Callable[[], None]] = None,\n+                        set_exception_handler: bool = True) -> None:\n         raise NotImplementedError('A DummyApplication is not supposed to run.')\n",
        "source_code_with_indent": "\n    <DED>async def run_async(self, pre_run: Optional[Callable[[], None]] = None) -> None:\n        <IND>raise NotImplementedError('A DummyApplication is not supposed to run.')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>async def run_async(self, pre_run: Optional[Callable[[], None]] = None,\n                        set_exception_handler: bool = True) -> None:\n        <IND>raise NotImplementedError('A DummyApplication is not supposed to run.')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "prompt-toolkit/python-prompt-toolkit",
    "commit": "5a4a1f5c74d867176897c69090ab53d8d070c52b",
    "filename": "prompt_toolkit/key_binding/bindings/emacs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/prompt-toolkit-python-prompt-toolkit/prompt_toolkit/key_binding/bindings/emacs.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prompt_toolkit/key_binding/bindings/emacs.py:411:49 Incompatible parameter type [6]: Expected `Keys` for 1st positional only parameter to call `dict.__getitem__` but got `typing.Union[Keys, str]`.",
    "message": " Expected `Keys` for 1st positional only parameter to call `dict.__getitem__` but got `typing.Union[Keys, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 411,
    "warning_line": "            handler = get_by_name(key_to_command[key])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# pylint: disable=function-redefined\nfrom prompt_toolkit.application.current import get_app\n",
        "source_code_len": 92,
        "target_code": "# pylint: disable=function-redefined\nfrom typing import Dict, Union\n\nfrom prompt_toolkit.application.current import get_app\n",
        "target_code_len": 124,
        "diff_format": "@@ -1,2 +1,4 @@\n # pylint: disable=function-redefined\n+from typing import Dict, Union\n+\n from prompt_toolkit.application.current import get_app\n",
        "source_code_with_indent": "# pylint: disable=function-redefined\nfrom prompt_toolkit.application.current import get_app\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# pylint: disable=function-redefined\nfrom typing import Dict, Union\n\nfrom prompt_toolkit.application.current import get_app\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "source_code_len": 69,
        "target_code": ")\nfrom prompt_toolkit.key_binding.key_bindings import Binding\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "target_code_len": 129,
        "diff_format": "@@ -16,2 +18,3 @@\n )\n+from prompt_toolkit.key_binding.key_bindings import Binding\n from prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "source_code_with_indent": ")\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom prompt_toolkit.key_binding.key_bindings import Binding\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # the other keys are handled through their readline command\n        key_to_command = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "source_code_len": 148,
        "target_code": "        # the other keys are handled through their readline command\n        key_to_command: Dict[Union[Keys, str], str] = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "target_code_len": 177,
        "diff_format": "@@ -397,3 +400,3 @@\n         # the other keys are handled through their readline command\n-        key_to_command = {\n+        key_to_command: Dict[Union[Keys, str], str] = {\n             Keys.ShiftLeft:         'backward-char',\n",
        "source_code_with_indent": "        # the other keys are handled through their readline command\n        <DED>key_to_command = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # the other keys are handled through their readline command\n        <DED>key_to_command: Dict[Union[Keys, str], str] = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:  # (`else` is not really needed here.)\n            handler(event)\n\n",
        "source_code_len": 81,
        "target_code": "        else:  # (`else` is not really needed here.)\n            if not isinstance(handler, Binding):\n                # (It should always be a normal callable here, for these\n                # commands.)\n                handler(event)\n\n",
        "target_code_len": 236,
        "diff_format": "@@ -414,3 +417,6 @@\n         else:  # (`else` is not really needed here.)\n-            handler(event)\n+            if not isinstance(handler, Binding):\n+                # (It should always be a normal callable here, for these\n+                # commands.)\n+                handler(event)\n \n",
        "source_code_with_indent": "        <DED>else:  # (`else` is not really needed here.)\n            <IND>handler(event)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:  # (`else` is not really needed here.)\n            <IND>if not isinstance(handler, Binding):\n                # (It should always be a normal callable here, for these\n                # commands.)\n                <IND>handler(event)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "prompt-toolkit/python-prompt-toolkit",
    "commit": "5a4a1f5c74d867176897c69090ab53d8d070c52b",
    "filename": "prompt_toolkit/key_binding/bindings/emacs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/prompt-toolkit-python-prompt-toolkit/prompt_toolkit/key_binding/bindings/emacs.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prompt_toolkit/key_binding/bindings/emacs.py:415:12 Call error [29]: `typing.Union[typing.Callable[[KeyPressEvent], None], prompt_toolkit.key_binding.key_bindings.Binding]` is not a function.",
    "message": " `typing.Union[typing.Callable[[KeyPressEvent], None], prompt_toolkit.key_binding.key_bindings.Binding]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 415,
    "warning_line": "            handler(event)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# pylint: disable=function-redefined\nfrom prompt_toolkit.application.current import get_app\n",
        "source_code_len": 92,
        "target_code": "# pylint: disable=function-redefined\nfrom typing import Dict, Union\n\nfrom prompt_toolkit.application.current import get_app\n",
        "target_code_len": 124,
        "diff_format": "@@ -1,2 +1,4 @@\n # pylint: disable=function-redefined\n+from typing import Dict, Union\n+\n from prompt_toolkit.application.current import get_app\n",
        "source_code_with_indent": "# pylint: disable=function-redefined\nfrom prompt_toolkit.application.current import get_app\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# pylint: disable=function-redefined\nfrom typing import Dict, Union\n\nfrom prompt_toolkit.application.current import get_app\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "source_code_len": 69,
        "target_code": ")\nfrom prompt_toolkit.key_binding.key_bindings import Binding\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "target_code_len": 129,
        "diff_format": "@@ -16,2 +18,3 @@\n )\n+from prompt_toolkit.key_binding.key_bindings import Binding\n from prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "source_code_with_indent": ")\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom prompt_toolkit.key_binding.key_bindings import Binding\nfrom prompt_toolkit.key_binding.key_processor import KeyPressEvent\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # the other keys are handled through their readline command\n        key_to_command = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "source_code_len": 148,
        "target_code": "        # the other keys are handled through their readline command\n        key_to_command: Dict[Union[Keys, str], str] = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "target_code_len": 177,
        "diff_format": "@@ -397,3 +400,3 @@\n         # the other keys are handled through their readline command\n-        key_to_command = {\n+        key_to_command: Dict[Union[Keys, str], str] = {\n             Keys.ShiftLeft:         'backward-char',\n",
        "source_code_with_indent": "        # the other keys are handled through their readline command\n        <DED>key_to_command = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # the other keys are handled through their readline command\n        <DED>key_to_command: Dict[Union[Keys, str], str] = {\n            Keys.ShiftLeft:         'backward-char',\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:  # (`else` is not really needed here.)\n            handler(event)\n\n",
        "source_code_len": 81,
        "target_code": "        else:  # (`else` is not really needed here.)\n            if not isinstance(handler, Binding):\n                # (It should always be a normal callable here, for these\n                # commands.)\n                handler(event)\n\n",
        "target_code_len": 236,
        "diff_format": "@@ -414,3 +417,6 @@\n         else:  # (`else` is not really needed here.)\n-            handler(event)\n+            if not isinstance(handler, Binding):\n+                # (It should always be a normal callable here, for these\n+                # commands.)\n+                handler(event)\n \n",
        "source_code_with_indent": "        <DED>else:  # (`else` is not really needed here.)\n            <IND>handler(event)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:  # (`else` is not really needed here.)\n            <IND>if not isinstance(handler, Binding):\n                # (It should always be a normal callable here, for these\n                # commands.)\n                <IND>handler(event)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]