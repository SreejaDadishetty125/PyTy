[
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "53885afc2e233df1c9856ebc75da6f85e0a1377e",
    "filename": "pytorch_lightning/utilities/apply_func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pytorch_lightning/utilities/apply_func.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytorch_lightning/utilities/apply_func.py:95:24 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "    if isinstance(data, dtype) and (wrong_dtype is None or not isinstance(data, wrong_dtype)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_len": 81,
        "target_code": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -20,3 +20,3 @@\n from functools import partial\n-from typing import Any, Callable, Optional, Union\n+from typing import Any, Callable, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    data: Any,\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    include_none: bool = True,\n    **kwargs\n) -> Any:\n",
        "source_code_len": 189,
        "target_code": "    data: Any,\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    include_none: bool = True,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_len": 229,
        "diff_format": "@@ -70,8 +74,8 @@\n     data: Any,\n-    dtype: Union[type, tuple],\n+    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n     function: Callable,\n-    *args,\n-    wrong_dtype: Optional[Union[type, tuple]] = None,\n+    *args: Any,\n+    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n     include_none: bool = True,\n-    **kwargs\n+    **kwargs: Any,\n ) -> Any:\n",
        "source_code_with_indent": "    data: Any,\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    include_none: bool = True,\n    **kwargs\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    data: Any,\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    include_none: bool = True,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if _is_dataclass_instance(data):\n        out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_len": 102,
        "target_code": "    if _is_dataclass_instance(data):\n        out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_len": 107,
        "diff_format": "@@ -123,3 +127,3 @@\n     if _is_dataclass_instance(data):\n-        out = {}\n+        out_dict = {}\n         for field in data.__dataclass_fields__:\n",
        "source_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                out[field] = v\n        return elem_type(**out)\n\n",
        "source_code_len": 192,
        "target_code": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                out_dict[field] = v\n        return elem_type(**out_dict)\n\n",
        "target_code_len": 203,
        "diff_format": "@@ -132,7 +136,7 @@\n                 include_none=include_none,\n-                **kwargs\n+                **kwargs,\n             )\n             if include_none or v is not None:\n-                out[field] = v\n-        return elem_type(**out)\n+                out_dict[field] = v\n+        return elem_type(**out_dict)\n \n",
        "source_code_with_indent": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                <IND>out[field] = v\n        <DED><DED>return elem_type(**out)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                <IND>out_dict[field] = v\n        <DED><DED>return elem_type(**out_dict)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_len": 169,
        "target_code": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_len": 209,
        "diff_format": "@@ -145,7 +149,7 @@\n     data2: Optional[Any],\n-    dtype: Union[type, tuple],\n+    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n     function: Callable,\n-    *args,\n-    wrong_dtype: Optional[Union[type, tuple]] = None,\n-    **kwargs\n+    *args: Any,\n+    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n+    **kwargs: Any,\n ) -> Any:\n",
        "source_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "53885afc2e233df1c9856ebc75da6f85e0a1377e",
    "filename": "pytorch_lightning/utilities/apply_func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pytorch_lightning/utilities/apply_func.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytorch_lightning/utilities/apply_func.py:95:80 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "    if isinstance(data, dtype) and (wrong_dtype is None or not isinstance(data, wrong_dtype)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_len": 81,
        "target_code": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -20,3 +20,3 @@\n from functools import partial\n-from typing import Any, Callable, Optional, Union\n+from typing import Any, Callable, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    data: Any,\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    include_none: bool = True,\n    **kwargs\n) -> Any:\n",
        "source_code_len": 189,
        "target_code": "    data: Any,\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    include_none: bool = True,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_len": 229,
        "diff_format": "@@ -70,8 +74,8 @@\n     data: Any,\n-    dtype: Union[type, tuple],\n+    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n     function: Callable,\n-    *args,\n-    wrong_dtype: Optional[Union[type, tuple]] = None,\n+    *args: Any,\n+    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n     include_none: bool = True,\n-    **kwargs\n+    **kwargs: Any,\n ) -> Any:\n",
        "source_code_with_indent": "    data: Any,\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    include_none: bool = True,\n    **kwargs\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    data: Any,\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    include_none: bool = True,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if _is_dataclass_instance(data):\n        out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_len": 102,
        "target_code": "    if _is_dataclass_instance(data):\n        out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_len": 107,
        "diff_format": "@@ -123,3 +127,3 @@\n     if _is_dataclass_instance(data):\n-        out = {}\n+        out_dict = {}\n         for field in data.__dataclass_fields__:\n",
        "source_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                out[field] = v\n        return elem_type(**out)\n\n",
        "source_code_len": 192,
        "target_code": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                out_dict[field] = v\n        return elem_type(**out_dict)\n\n",
        "target_code_len": 203,
        "diff_format": "@@ -132,7 +136,7 @@\n                 include_none=include_none,\n-                **kwargs\n+                **kwargs,\n             )\n             if include_none or v is not None:\n-                out[field] = v\n-        return elem_type(**out)\n+                out_dict[field] = v\n+        return elem_type(**out_dict)\n \n",
        "source_code_with_indent": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                <IND>out[field] = v\n        <DED><DED>return elem_type(**out)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                <IND>out_dict[field] = v\n        <DED><DED>return elem_type(**out_dict)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_len": 169,
        "target_code": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_len": 209,
        "diff_format": "@@ -145,7 +149,7 @@\n     data2: Optional[Any],\n-    dtype: Union[type, tuple],\n+    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n     function: Callable,\n-    *args,\n-    wrong_dtype: Optional[Union[type, tuple]] = None,\n-    **kwargs\n+    *args: Any,\n+    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n+    **kwargs: Any,\n ) -> Any:\n",
        "source_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "53885afc2e233df1c9856ebc75da6f85e0a1377e",
    "filename": "pytorch_lightning/utilities/apply_func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pytorch_lightning/utilities/apply_func.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytorch_lightning/utilities/apply_func.py:178:25 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "    if isinstance(data1, dtype) and data2 is not None and (wrong_dtype is None or not isinstance(data1, wrong_dtype)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_len": 81,
        "target_code": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -20,3 +20,3 @@\n from functools import partial\n-from typing import Any, Callable, Optional, Union\n+from typing import Any, Callable, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if _is_dataclass_instance(data):\n        out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_len": 102,
        "target_code": "    if _is_dataclass_instance(data):\n        out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_len": 107,
        "diff_format": "@@ -123,3 +127,3 @@\n     if _is_dataclass_instance(data):\n-        out = {}\n+        out_dict = {}\n         for field in data.__dataclass_fields__:\n",
        "source_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                out[field] = v\n        return elem_type(**out)\n\n",
        "source_code_len": 192,
        "target_code": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                out_dict[field] = v\n        return elem_type(**out_dict)\n\n",
        "target_code_len": 203,
        "diff_format": "@@ -132,7 +136,7 @@\n                 include_none=include_none,\n-                **kwargs\n+                **kwargs,\n             )\n             if include_none or v is not None:\n-                out[field] = v\n-        return elem_type(**out)\n+                out_dict[field] = v\n+        return elem_type(**out_dict)\n \n",
        "source_code_with_indent": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                <IND>out[field] = v\n        <DED><DED>return elem_type(**out)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                <IND>out_dict[field] = v\n        <DED><DED>return elem_type(**out_dict)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_len": 169,
        "target_code": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_len": 209,
        "diff_format": "@@ -145,7 +149,7 @@\n     data2: Optional[Any],\n-    dtype: Union[type, tuple],\n+    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n     function: Callable,\n-    *args,\n-    wrong_dtype: Optional[Union[type, tuple]] = None,\n-    **kwargs\n+    *args: Any,\n+    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n+    **kwargs: Any,\n ) -> Any:\n",
        "source_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "53885afc2e233df1c9856ebc75da6f85e0a1377e",
    "filename": "pytorch_lightning/utilities/apply_func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pytorch_lightning/utilities/apply_func.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytorch_lightning/utilities/apply_func.py:178:104 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Union[typing.Type[typing.Any], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "    if isinstance(data1, dtype) and data2 is not None and (wrong_dtype is None or not isinstance(data1, wrong_dtype)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_len": 81,
        "target_code": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -20,3 +20,3 @@\n from functools import partial\n-from typing import Any, Callable, Optional, Union\n+from typing import Any, Callable, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if _is_dataclass_instance(data):\n        out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_len": 102,
        "target_code": "    if _is_dataclass_instance(data):\n        out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_len": 107,
        "diff_format": "@@ -123,3 +127,3 @@\n     if _is_dataclass_instance(data):\n-        out = {}\n+        out_dict = {}\n         for field in data.__dataclass_fields__:\n",
        "source_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out = {}\n        for field in data.__dataclass_fields__:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if _is_dataclass_instance(data):\n        <IND>out_dict = {}\n        for field in data.__dataclass_fields__:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                out[field] = v\n        return elem_type(**out)\n\n",
        "source_code_len": 192,
        "target_code": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                out_dict[field] = v\n        return elem_type(**out_dict)\n\n",
        "target_code_len": 203,
        "diff_format": "@@ -132,7 +136,7 @@\n                 include_none=include_none,\n-                **kwargs\n+                **kwargs,\n             )\n             if include_none or v is not None:\n-                out[field] = v\n-        return elem_type(**out)\n+                out_dict[field] = v\n+        return elem_type(**out_dict)\n \n",
        "source_code_with_indent": "                include_none=include_none,\n                **kwargs\n            )\n            if include_none or v is not None:\n                <IND>out[field] = v\n        <DED><DED>return elem_type(**out)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                include_none=include_none,\n                **kwargs,\n            )\n            if include_none or v is not None:\n                <IND>out_dict[field] = v\n        <DED><DED>return elem_type(**out_dict)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_len": 169,
        "target_code": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_len": 209,
        "diff_format": "@@ -145,7 +149,7 @@\n     data2: Optional[Any],\n-    dtype: Union[type, tuple],\n+    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n     function: Callable,\n-    *args,\n-    wrong_dtype: Optional[Union[type, tuple]] = None,\n-    **kwargs\n+    *args: Any,\n+    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n+    **kwargs: Any,\n ) -> Any:\n",
        "source_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, tuple],\n    function: Callable,\n    *args,\n    wrong_dtype: Optional[Union[type, tuple]] = None,\n    **kwargs\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    data2: Optional[Any],\n    dtype: Union[type, Any, Tuple[Union[type, Any]]],\n    function: Callable,\n    *args: Any,\n    wrong_dtype: Optional[Union[type, Tuple[type]]] = None,\n    **kwargs: Any,\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]