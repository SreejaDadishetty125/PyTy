[
  {
    "project": "Project-MONAI/MONAI",
    "commit": "20b251e728598dab94fc09c8cc85dbeb25d25b95",
    "filename": "monai/data/nifti_saver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAI/monai/data/nifti_saver.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "monai/data/nifti_saver.py:66:58 Incompatible variable type [9]: meta_data is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " meta_data is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):"
  },
  {
    "project": "Project-MONAI/MONAI",
    "commit": "20b251e728598dab94fc09c8cc85dbeb25d25b95",
    "filename": "monai/data/nifti_saver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAI/monai/data/nifti_saver.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "monai/data/nifti_saver.py:135:28 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `NiftiSaver.save` but got `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `NiftiSaver.save` but got `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "            self.save(data, {k: meta_data[k][i] for k in meta_data} if meta_data else None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):\n        \"\"\"\n",
        "source_code_len": 96,
        "target_code": "\n    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: Optional[dict] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 114,
        "diff_format": "@@ -65,3 +65,3 @@\n \n-    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):\n+    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: Optional[dict] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: Optional[dict] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "Project-MONAI/MONAI",
    "commit": "20b251e728598dab94fc09c8cc85dbeb25d25b95",
    "filename": "monai/data/png_saver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAI/monai/data/png_saver.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "monai/data/png_saver.py:61:58 Incompatible variable type [9]: meta_data is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " meta_data is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 61,
    "warning_line": "    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):"
  },
  {
    "project": "Project-MONAI/MONAI",
    "commit": "20b251e728598dab94fc09c8cc85dbeb25d25b95",
    "filename": "monai/data/png_saver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAI/monai/data/png_saver.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "monai/data/png_saver.py:113:28 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `PNGSaver.save` but got `typing.Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `PNGSaver.save` but got `typing.Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 113,
    "warning_line": "            self.save(data, {k: meta_data[k][i] for k in meta_data} if meta_data else None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional, Union\n\n",
        "target_code_len": 37,
        "diff_format": "@@ -11,3 +11,3 @@\n \n-from typing import Union\n+from typing import Optional, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):\n        \"\"\"\n",
        "source_code_len": 96,
        "target_code": "\n    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: Optional[dict] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 114,
        "diff_format": "@@ -60,3 +60,3 @@\n \n-    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):\n+    def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: Optional[dict] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: dict = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def save(self, data: Union[torch.Tensor, np.ndarray], meta_data: Optional[dict] = None) -> None:\n        <IND>"
      }
    ]
  }
]