[
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/datacatalog.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/datacatalog.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/datacatalog.py:640:8 Incompatible variable type [9]: read_mask is declared to have type `Union[Dict[typing.Any, typing.Any], FieldMask]` but is used as type `None`.",
    "message": " read_mask is declared to have type `Union[Dict[typing.Any, typing.Any], FieldMask]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 640,
    "warning_line": "        read_mask: Union[Dict, FieldMask] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        project_id: str,\n        read_mask: Union[Dict, FieldMask] = None,\n        retry: Optional[Retry] = None,\n        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n    ) -> EntryGroup:\n",
        "source_code_len": 238,
        "target_code": "        project_id: str,\n        read_mask: Optional[FieldMask] = None,\n        retry: Optional[Retry] = None,\n        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> EntryGroup:\n",
        "target_code_len": 223,
        "diff_format": "@@ -639,6 +639,6 @@\n         project_id: str,\n-        read_mask: Union[Dict, FieldMask] = None,\n-        retry: Optional[Retry] = None,\n-        timeout: Optional[float] = None,\n-        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n+        read_mask: Optional[FieldMask] = None,\n+        retry: Optional[Retry] = None,\n+        timeout: Optional[float] = None,\n+        metadata: Sequence[Tuple[str, str]] = (),\n     ) -> EntryGroup:\n",
        "source_code_with_indent": "        project_id: str,\n        read_mask: Union[Dict, FieldMask] = None,\n        retry: Optional[Retry] = None,\n        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n    ) -> EntryGroup:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        project_id: str,\n        read_mask: Optional[FieldMask] = None,\n        retry: Optional[Retry] = None,\n        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> EntryGroup:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:302:34 Unsupported operand [58]: `<` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 302,
    "warning_line": "        while num_file_attempts < num_max_attempts:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        while num_file_attempts < num_max_attempts:\n            try:\n",
        "source_code_len": 70,
        "target_code": "\n        while True:\n            try:\n",
        "target_code_len": 38,
        "diff_format": "@@ -301,3 +310,3 @@\n \n-        while num_file_attempts < num_max_attempts:\n+        while True:\n             try:\n",
        "source_code_with_indent": "\n        while num_file_attempts < num_max_attempts:\n            <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        while True:\n            <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:330:16 Incompatible return type [7]: Expected `Union[bytes, str]` but got implicit return value of `None`.",
    "message": " Expected `Union[bytes, str]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 330,
    "warning_line": "                continue",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        while num_file_attempts < num_max_attempts:\n            try:\n",
        "source_code_len": 70,
        "target_code": "\n        while True:\n            try:\n",
        "target_code_len": 38,
        "diff_format": "@@ -301,3 +310,3 @@\n \n-        while num_file_attempts < num_max_attempts:\n+        while True:\n             try:\n",
        "source_code_with_indent": "\n        while num_file_attempts < num_max_attempts:\n            <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        while True:\n            <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:358:26 Incompatible parameter type [6]: Expected `str` for 1st parameter `bucket_name` to call `GCSHook.download` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `bucket_name` to call `GCSHook.download` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 358,
    "warning_line": "            self.download(bucket_name=bucket_name, object_name=object_name, filename=tmp_file.name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    return _wrapper\n\n",
        "source_code_len": 21,
        "target_code": "    return _wrapper\n\n\n# A fake bucket to use in functions decorated by _fallback_object_url_to_object_name_and_bucket_name.\n# This allows the 'bucket' argument to be of type str instead of Optional[str],\n# making it easier to type hint the function body without dealing with the None\n# case that can never happen at runtime.\nPROVIDE_BUCKET: str = cast(str, None)\n\n",
        "target_code_len": 364,
        "diff_format": "@@ -114,2 +116,9 @@\n     return _wrapper\n+\n+\n+# A fake bucket to use in functions decorated by _fallback_object_url_to_object_name_and_bucket_name.\n+# This allows the 'bucket' argument to be of type str instead of Optional[str],\n+# making it easier to type hint the function body without dealing with the None\n+# case that can never happen at runtime.\n+PROVIDE_BUCKET: str = cast(str, None)\n \n",
        "source_code_with_indent": "    <DED>return _wrapper\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>return _wrapper\n\n\n# A fake bucket to use in functions decorated by _fallback_object_url_to_object_name_and_bucket_name.\n# This allows the 'bucket' argument to be of type str instead of Optional[str],\n# making it easier to type hint the function body without dealing with the None\n# case that can never happen at runtime.\n<DED>PROVIDE_BUCKET: str = cast(str, None)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        bucket_name: Optional[str] = None,\n        object_name: Optional[str] = None,\n",
        "source_code_len": 100,
        "target_code": "        self,\n        bucket_name: str = PROVIDE_BUCKET,\n        object_name: Optional[str] = None,\n",
        "target_code_len": 100,
        "diff_format": "@@ -335,3 +344,3 @@\n         self,\n-        bucket_name: Optional[str] = None,\n+        bucket_name: str = PROVIDE_BUCKET,\n         object_name: Optional[str] = None,\n",
        "source_code_with_indent": "        self,\n        bucket_name: Optional[str] = None,\n        object_name: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        bucket_name: str = PROVIDE_BUCKET,\n        object_name: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:392:24 Incompatible parameter type [6]: Expected `str` for 1st parameter `bucket_name` to call `GCSHook.upload` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `bucket_name` to call `GCSHook.upload` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 392,
    "warning_line": "            self.upload(bucket_name=bucket_name, object_name=object_name, filename=tmp_file.name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    return _wrapper\n\n",
        "source_code_len": 21,
        "target_code": "    return _wrapper\n\n\n# A fake bucket to use in functions decorated by _fallback_object_url_to_object_name_and_bucket_name.\n# This allows the 'bucket' argument to be of type str instead of Optional[str],\n# making it easier to type hint the function body without dealing with the None\n# case that can never happen at runtime.\nPROVIDE_BUCKET: str = cast(str, None)\n\n",
        "target_code_len": 364,
        "diff_format": "@@ -114,2 +116,9 @@\n     return _wrapper\n+\n+\n+# A fake bucket to use in functions decorated by _fallback_object_url_to_object_name_and_bucket_name.\n+# This allows the 'bucket' argument to be of type str instead of Optional[str],\n+# making it easier to type hint the function body without dealing with the None\n+# case that can never happen at runtime.\n+PROVIDE_BUCKET: str = cast(str, None)\n \n",
        "source_code_with_indent": "    <DED>return _wrapper\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>return _wrapper\n\n\n# A fake bucket to use in functions decorated by _fallback_object_url_to_object_name_and_bucket_name.\n# This allows the 'bucket' argument to be of type str instead of Optional[str],\n# making it easier to type hint the function body without dealing with the None\n# case that can never happen at runtime.\n<DED>PROVIDE_BUCKET: str = cast(str, None)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        bucket_name: Optional[str] = None,\n        object_name: Optional[str] = None,\n",
        "source_code_len": 100,
        "target_code": "        self,\n        bucket_name: str = PROVIDE_BUCKET,\n        object_name: Optional[str] = None,\n",
        "target_code_len": 100,
        "diff_format": "@@ -365,3 +374,3 @@\n         self,\n-        bucket_name: Optional[str] = None,\n+        bucket_name: str = PROVIDE_BUCKET,\n         object_name: Optional[str] = None,\n",
        "source_code_with_indent": "        self,\n        bucket_name: Optional[str] = None,\n        object_name: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        bucket_name: str = PROVIDE_BUCKET,\n        object_name: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:719:8 Incompatible variable type [9]: versions is declared to have type `bool` but is used as type `None`.",
    "message": " versions is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 719,
    "warning_line": "        versions: bool = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        \"\"\"\n",
        "source_code_len": 182,
        "target_code": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        \"\"\"\n",
        "target_code_len": 227,
        "diff_format": "@@ -718,7 +727,7 @@\n         timespan_end: datetime,\n-        versions: bool = None,\n-        max_results: int = None,\n-        prefix: str = None,\n-        delimiter: str = None,\n-    ) -> list:\n+        versions: Optional[bool] = None,\n+        max_results: Optional[int] = None,\n+        prefix: Optional[str] = None,\n+        delimiter: Optional[str] = None,\n+    ) -> List[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        <IND>",
        "target_code_with_indent": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:720:8 Incompatible variable type [9]: max_results is declared to have type `int` but is used as type `None`.",
    "message": " max_results is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 720,
    "warning_line": "        max_results: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        \"\"\"\n",
        "source_code_len": 182,
        "target_code": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        \"\"\"\n",
        "target_code_len": 227,
        "diff_format": "@@ -718,7 +727,7 @@\n         timespan_end: datetime,\n-        versions: bool = None,\n-        max_results: int = None,\n-        prefix: str = None,\n-        delimiter: str = None,\n-    ) -> list:\n+        versions: Optional[bool] = None,\n+        max_results: Optional[int] = None,\n+        prefix: Optional[str] = None,\n+        delimiter: Optional[str] = None,\n+    ) -> List[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        <IND>",
        "target_code_with_indent": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:721:8 Incompatible variable type [9]: prefix is declared to have type `str` but is used as type `None`.",
    "message": " prefix is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 721,
    "warning_line": "        prefix: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        \"\"\"\n",
        "source_code_len": 182,
        "target_code": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        \"\"\"\n",
        "target_code_len": 227,
        "diff_format": "@@ -718,7 +727,7 @@\n         timespan_end: datetime,\n-        versions: bool = None,\n-        max_results: int = None,\n-        prefix: str = None,\n-        delimiter: str = None,\n-    ) -> list:\n+        versions: Optional[bool] = None,\n+        max_results: Optional[int] = None,\n+        prefix: Optional[str] = None,\n+        delimiter: Optional[str] = None,\n+    ) -> List[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        <IND>",
        "target_code_with_indent": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "ed604b62f3dfb4d76d6f1eaf4d639dc65956d8f2",
    "filename": "airflow/providers/google/cloud/hooks/gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/google/cloud/hooks/gcs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/google/cloud/hooks/gcs.py:722:8 Incompatible variable type [9]: delimiter is declared to have type `str` but is used as type `None`.",
    "message": " delimiter is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 722,
    "warning_line": "        delimiter: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        \"\"\"\n",
        "source_code_len": 182,
        "target_code": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        \"\"\"\n",
        "target_code_len": 227,
        "diff_format": "@@ -718,7 +727,7 @@\n         timespan_end: datetime,\n-        versions: bool = None,\n-        max_results: int = None,\n-        prefix: str = None,\n-        delimiter: str = None,\n-    ) -> list:\n+        versions: Optional[bool] = None,\n+        max_results: Optional[int] = None,\n+        prefix: Optional[str] = None,\n+        delimiter: Optional[str] = None,\n+    ) -> List[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        timespan_end: datetime,\n        versions: bool = None,\n        max_results: int = None,\n        prefix: str = None,\n        delimiter: str = None,\n    ) -> list:\n        <IND>",
        "target_code_with_indent": "        timespan_end: datetime,\n        versions: Optional[bool] = None,\n        max_results: Optional[int] = None,\n        prefix: Optional[str] = None,\n        delimiter: Optional[str] = None,\n    ) -> List[str]:\n        <IND>"
      }
    ]
  }
]