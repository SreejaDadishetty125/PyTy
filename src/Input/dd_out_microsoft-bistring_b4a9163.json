[
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:208:28 Unsupported operand [58]: `+` is not supported for operand types `int` and `Number`.",
    "message": " `+` is not supported for operand types `int` and `Number`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 208,
    "warning_line": "            cost = row[i] + cost_fn(None, m)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:215:31 Unsupported operand [58]: `+` is not supported for operand types `int` and `Number`.",
    "message": " `+` is not supported for operand types `int` and `Number`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 215,
    "warning_line": "            row[0] = prev[0] + cost_fn(o, None)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:218:37 Unsupported operand [58]: `+` is not supported for operand types `int` and `Number`.",
    "message": " `+` is not supported for operand types `int` and `Number`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 218,
    "warning_line": "                sub_cost = prev[i] + cost_fn(o, m)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:219:41 Unsupported operand [58]: `+` is not supported for operand types `int` and `Number`.",
    "message": " `+` is not supported for operand types `int` and `Number`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 219,
    "warning_line": "                del_cost = prev[i + 1] + cost_fn(o, None)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:220:36 Unsupported operand [58]: `+` is not supported for operand types `int` and `Number`.",
    "message": " `+` is not supported for operand types `int` and `Number`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 220,
    "warning_line": "                ins_cost = row[i] + cost_fn(None, m)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:223:8 Incompatible return type [7]: Expected `List[Number]` but got `List[int]`.",
    "message": " Expected `List[Number]` but got `List[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 223,
    "warning_line": "        return row"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:233:31 Call error [29]: `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "message": " `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 233,
    "warning_line": "            cost = row[j][0] + cost_fn(None, m)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:240:32 Call error [29]: `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "message": " `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 240,
    "warning_line": "            cost = prev[0][0] + cost_fn(o, None)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:244:36 Call error [29]: `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "message": " `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 244,
    "warning_line": "                cost = prev[j][0] + cost_fn(o, m)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:247:44 Call error [29]: `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "message": " `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 247,
    "warning_line": "                del_cost = prev[j + 1][0] + cost_fn(o, None)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:252:39 Call error [29]: `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "message": " `Optional[typing.Callable[[typing.Any, typing.Any], Number]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 252,
    "warning_line": "                ins_cost = row[j][0] + cost_fn(None, m)"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:289:55 Unsupported operand [58]: `+` is not supported for operand types `Number` and `Number`.",
    "message": " `+` is not supported for operand types `Number` and `Number`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 289,
    "warning_line": "        mmid = min(range(len(modified)), key=lambda i: lcosts[i] + rcosts[i])"
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:332:12 Incompatible variable type [9]: original is declared to have type `Sequence[Variable[_T]]` but is used as type `Sequence[Variable[_U]]`.",
    "message": " original is declared to have type `Sequence[Variable[_T]]` but is used as type `Sequence[Variable[_U]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 332,
    "warning_line": "            original, modified = modified, original",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            swap = True\n            original, modified = modified, original\n            real_cost_fn = lambda a, b: cost_fn(b, a)\n        else:\n            swap = False\n            real_cost_fn = cost_fn\n\n        result = cls._infer_recursive(original, modified, real_cost_fn)\n        result = Alignment(result)\n        if swap:\n            return result.inverse()\n        else:\n            return result\n\n",
        "source_code_len": 406,
        "target_code": "            swap = True\n            swapped_cost_fn = lambda a, b: cost_fn(b, a)\n            result = cls._infer_recursive(modified, original, swapped_cost_fn)\n        else:\n            swap = False\n            result = cls._infer_recursive(original, modified, cost_fn)\n\n        alignment = Alignment(result)\n        if swap:\n            return alignment.inverse()\n        else:\n            return alignment\n\n",
        "target_code_len": 409,
        "diff_format": "@@ -331,14 +331,13 @@\n             swap = True\n-            original, modified = modified, original\n-            real_cost_fn = lambda a, b: cost_fn(b, a)\n+            swapped_cost_fn = lambda a, b: cost_fn(b, a)\n+            result = cls._infer_recursive(modified, original, swapped_cost_fn)\n         else:\n             swap = False\n-            real_cost_fn = cost_fn\n-\n-        result = cls._infer_recursive(original, modified, real_cost_fn)\n-        result = Alignment(result)\n+            result = cls._infer_recursive(original, modified, cost_fn)\n+\n+        alignment = Alignment(result)\n         if swap:\n-            return result.inverse()\n-        else:\n-            return result\n+            return alignment.inverse()\n+        else:\n+            return alignment\n \n",
        "source_code_with_indent": "            <IND>swap = True\n            original, modified = modified, original\n            real_cost_fn = lambda a, b: cost_fn(b, a)\n        <DED>else:\n            <IND>swap = False\n            real_cost_fn = cost_fn\n\n        <DED>result = cls._infer_recursive(original, modified, real_cost_fn)\n        result = Alignment(result)\n        if swap:\n            <IND>return result.inverse()\n        <DED>else:\n            <IND>return result\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>swap = True\n            swapped_cost_fn = lambda a, b: cost_fn(b, a)\n            result = cls._infer_recursive(modified, original, swapped_cost_fn)\n        <DED>else:\n            <IND>swap = False\n            result = cls._infer_recursive(original, modified, cost_fn)\n\n        <DED>alignment = Alignment(result)\n        if swap:\n            <IND>return alignment.inverse()\n        <DED>else:\n            <IND>return alignment\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/bistring",
    "commit": "b4a9163fdd49f3e84b83681f102b529eccac32f6",
    "filename": "python/bistring/_alignment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-bistring/python/bistring/_alignment.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/bistring/_alignment.py:332:22 Incompatible variable type [9]: modified is declared to have type `Sequence[Variable[_U]]` but is used as type `Sequence[Variable[_T]]`.",
    "message": " modified is declared to have type `Sequence[Variable[_U]]` but is used as type `Sequence[Variable[_T]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 332,
    "warning_line": "            original, modified = modified, original",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            swap = True\n            original, modified = modified, original\n            real_cost_fn = lambda a, b: cost_fn(b, a)\n        else:\n            swap = False\n            real_cost_fn = cost_fn\n\n        result = cls._infer_recursive(original, modified, real_cost_fn)\n        result = Alignment(result)\n        if swap:\n            return result.inverse()\n        else:\n            return result\n\n",
        "source_code_len": 406,
        "target_code": "            swap = True\n            swapped_cost_fn = lambda a, b: cost_fn(b, a)\n            result = cls._infer_recursive(modified, original, swapped_cost_fn)\n        else:\n            swap = False\n            result = cls._infer_recursive(original, modified, cost_fn)\n\n        alignment = Alignment(result)\n        if swap:\n            return alignment.inverse()\n        else:\n            return alignment\n\n",
        "target_code_len": 409,
        "diff_format": "@@ -331,14 +331,13 @@\n             swap = True\n-            original, modified = modified, original\n-            real_cost_fn = lambda a, b: cost_fn(b, a)\n+            swapped_cost_fn = lambda a, b: cost_fn(b, a)\n+            result = cls._infer_recursive(modified, original, swapped_cost_fn)\n         else:\n             swap = False\n-            real_cost_fn = cost_fn\n-\n-        result = cls._infer_recursive(original, modified, real_cost_fn)\n-        result = Alignment(result)\n+            result = cls._infer_recursive(original, modified, cost_fn)\n+\n+        alignment = Alignment(result)\n         if swap:\n-            return result.inverse()\n-        else:\n-            return result\n+            return alignment.inverse()\n+        else:\n+            return alignment\n \n",
        "source_code_with_indent": "            <IND>swap = True\n            original, modified = modified, original\n            real_cost_fn = lambda a, b: cost_fn(b, a)\n        <DED>else:\n            <IND>swap = False\n            real_cost_fn = cost_fn\n\n        <DED>result = cls._infer_recursive(original, modified, real_cost_fn)\n        result = Alignment(result)\n        if swap:\n            <IND>return result.inverse()\n        <DED>else:\n            <IND>return result\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>swap = True\n            swapped_cost_fn = lambda a, b: cost_fn(b, a)\n            result = cls._infer_recursive(modified, original, swapped_cost_fn)\n        <DED>else:\n            <IND>swap = False\n            result = cls._infer_recursive(original, modified, cost_fn)\n\n        <DED>alignment = Alignment(result)\n        if swap:\n            <IND>return alignment.inverse()\n        <DED>else:\n            <IND>return alignment\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]