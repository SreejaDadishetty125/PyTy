[
  {
    "project": "encode/broadcaster",
    "commit": "435c35eefcf54192331a44881caf626a5993b2f0",
    "filename": "broadcaster/_backends/kafka.py",
    "min_patch_found": false,
    "full_warning_msg": "broadcaster/_backends/kafka.py:37:4 Inconsistent override [15]: `broadcaster._backends.kafka.KafkaBackend.next_published` overrides method defined in `BroadcastBackend` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, Event]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Tuple[str, typing.Any]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "encode/broadcaster",
    "commit": "435c35eefcf54192331a44881caf626a5993b2f0",
    "filename": "broadcaster/_backends/memory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-broadcaster/broadcaster/_backends/memory.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "broadcaster/_backends/memory.py:27:4 Inconsistent override [15]: `broadcaster._backends.memory.MemoryBackend.next_published` overrides method defined in `BroadcastBackend` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, Event]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Tuple[str, typing.Any]]`.",
    "message": " `broadcaster._backends.memory.MemoryBackend.next_published` overrides method defined in `BroadcastBackend` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, Event]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 27,
    "warning_line": "    async def next_published(self) -> Event:"
  },
  {
    "project": "encode/broadcaster",
    "commit": "435c35eefcf54192331a44881caf626a5993b2f0",
    "filename": "broadcaster/_backends/postgres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-broadcaster/broadcaster/_backends/postgres.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "broadcaster/_backends/postgres.py:32:4 Inconsistent override [15]: `broadcaster._backends.postgres.PostgresBackend.next_published` overrides method defined in `BroadcastBackend` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, Event]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Tuple[str, typing.Any]]`.",
    "message": " `broadcaster._backends.postgres.PostgresBackend.next_published` overrides method defined in `BroadcastBackend` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, Event]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 32,
    "warning_line": "    async def next_published(self) -> Event:"
  },
  {
    "project": "encode/broadcaster",
    "commit": "435c35eefcf54192331a44881caf626a5993b2f0",
    "filename": "broadcaster/_backends/redis.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-broadcaster/broadcaster/_backends/redis.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "broadcaster/_backends/redis.py:32:4 Inconsistent override [15]: `broadcaster._backends.redis.RedisBackend.next_published` overrides method defined in `BroadcastBackend` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, Event]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Tuple[str, typing.Any]]`.",
    "message": " `broadcaster._backends.redis.RedisBackend.next_published` overrides method defined in `BroadcastBackend` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, Event]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 32,
    "warning_line": "    async def next_published(self) -> Event:"
  },
  {
    "project": "encode/broadcaster",
    "commit": "435c35eefcf54192331a44881caf626a5993b2f0",
    "filename": "broadcaster/_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/encode-broadcaster/broadcaster/_base.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "broadcaster/_base.py:85:12 Incompatible return type [7]: Expected `Subscriber` but got `typing.AsyncGenerator[Subscriber, None]`.",
    "message": " Expected `Subscriber` but got `typing.AsyncGenerator[Subscriber, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 85,
    "warning_line": "            yield Subscriber(queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import asyncio\nimport typing\nfrom contextlib import asynccontextmanager\nfrom urllib.parse import urlparse\n",
        "source_code_len": 106,
        "target_code": "import asyncio\nfrom contextlib import asynccontextmanager\nfrom typing import Any, AsyncGenerator, AsyncIterator, Dict, Optional\nfrom urllib.parse import urlparse\n",
        "target_code_len": 162,
        "diff_format": "@@ -1,4 +1,4 @@\n import asyncio\n-import typing\n from contextlib import asynccontextmanager\n+from typing import Any, AsyncGenerator, AsyncIterator, Dict, Optional\n from urllib.parse import urlparse\n",
        "source_code_with_indent": "import asyncio\nimport typing\nfrom contextlib import asynccontextmanager\nfrom urllib.parse import urlparse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import asyncio\nfrom contextlib import asynccontextmanager\nfrom typing import Any, AsyncGenerator, AsyncIterator, Dict, Optional\nfrom urllib.parse import urlparse\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def publish(self, channel: str, message: typing.Any) -> None:\n        await self._backend.publish(channel, message)\n",
        "source_code_len": 127,
        "target_code": "\n    async def publish(self, channel: str, message: Any) -> None:\n        await self._backend.publish(channel, message)\n",
        "target_code_len": 120,
        "diff_format": "@@ -70,3 +77,3 @@\n \n-    async def publish(self, channel: str, message: typing.Any) -> None:\n+    async def publish(self, channel: str, message: Any) -> None:\n         await self._backend.publish(channel, message)\n",
        "source_code_with_indent": "\n    <DED><DED><DED>async def publish(self, channel: str, message: typing.Any) -> None:\n        <IND>await self._backend.publish(channel, message)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>async def publish(self, channel: str, message: Any) -> None:\n        <IND>await self._backend.publish(channel, message)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @asynccontextmanager\n    async def subscribe(self, channel: str) -> 'Subscriber':\n        queue: asyncio.Queue = asyncio.Queue()\n",
        "source_code_len": 133,
        "target_code": "    @asynccontextmanager\n    async def subscribe(self, channel: str) -> AsyncIterator[\"Subscriber\"]:\n        queue: asyncio.Queue = asyncio.Queue()\n",
        "target_code_len": 148,
        "diff_format": "@@ -74,3 +81,3 @@\n     @asynccontextmanager\n-    async def subscribe(self, channel: str) -> 'Subscriber':\n+    async def subscribe(self, channel: str) -> AsyncIterator[\"Subscriber\"]:\n         queue: asyncio.Queue = asyncio.Queue()\n",
        "source_code_with_indent": "    <DED>@asynccontextmanager\n    async def subscribe(self, channel: str) -> 'Subscriber':\n        <IND>queue: asyncio.Queue = asyncio.Queue()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@asynccontextmanager\n    async def subscribe(self, channel: str) -> AsyncIterator[\"Subscriber\"]:\n        <IND>queue: asyncio.Queue = asyncio.Queue()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]