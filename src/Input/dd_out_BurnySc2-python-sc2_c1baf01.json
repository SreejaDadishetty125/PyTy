[
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1181:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1181,
    "warning_line": "        return self(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def train(self, unit: UnitTypeId, queue: bool = False, can_afford_check: bool = False) -> bool:\n        \"\"\" Orders unit to train another 'unit'.\n",
        "source_code_len": 150,
        "target_code": "\n    def train(self, unit: UnitTypeId, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders unit to train another 'unit'.\n",
        "target_code_len": 170,
        "diff_format": "@@ -1174,3 +1174,3 @@\n \n-    def train(self, unit: UnitTypeId, queue: bool = False, can_afford_check: bool = False) -> bool:\n+    def train(self, unit: UnitTypeId, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders unit to train another 'unit'.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def train(self, unit: UnitTypeId, queue: bool = False, can_afford_check: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def train(self, unit: UnitTypeId, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1210:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1210,
    "warning_line": "        return self(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        can_afford_check: bool = False,\n    ) -> bool:\n        \"\"\" Orders unit to build another 'unit' at 'position'.\n",
        "source_code_len": 118,
        "target_code": "        can_afford_check: bool = False,\n    ) -> Union[UnitCommand, bool]:\n        \"\"\" Orders unit to build another 'unit' at 'position'.\n",
        "target_code_len": 138,
        "diff_format": "@@ -1193,3 +1193,3 @@\n         can_afford_check: bool = False,\n-    ) -> bool:\n+    ) -> Union[UnitCommand, bool]:\n         \"\"\" Orders unit to build another 'unit' at 'position'.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        can_afford_check: bool = False,\n    ) -> bool:\n        <IND>",
        "target_code_with_indent": "        can_afford_check: bool = False,\n    ) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1232:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1232,
    "warning_line": "        return self(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def build_gas(self, target_geysir: Unit, queue: bool = False, can_afford_check: bool = False) -> bool:\n        \"\"\" Orders unit to build another 'unit' at 'position'.\n",
        "source_code_len": 171,
        "target_code": "\n    def build_gas(self, target_geysir: Unit, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders unit to build another 'unit' at 'position'.\n",
        "target_code_len": 191,
        "diff_format": "@@ -1217,3 +1217,3 @@\n \n-    def build_gas(self, target_geysir: Unit, queue: bool = False, can_afford_check: bool = False) -> bool:\n+    def build_gas(self, target_geysir: Unit, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders unit to build another 'unit' at 'position'.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def build_gas(self, target_geysir: Unit, queue: bool = False, can_afford_check: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def build_gas(self, target_geysir: Unit, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1247:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1247,
    "warning_line": "        return self(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def research(self, upgrade: UpgradeId, queue: bool = False, can_afford_check: bool = False) -> bool:\n        \"\"\" Orders unit to research 'upgrade'.\n",
        "source_code_len": 153,
        "target_code": "\n    def research(self, upgrade: UpgradeId, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders unit to research 'upgrade'.\n",
        "target_code_len": 173,
        "diff_format": "@@ -1239,3 +1239,3 @@\n \n-    def research(self, upgrade: UpgradeId, queue: bool = False, can_afford_check: bool = False) -> bool:\n+    def research(self, upgrade: UpgradeId, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders unit to research 'upgrade'.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def research(self, upgrade: UpgradeId, queue: bool = False, can_afford_check: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def research(self, upgrade: UpgradeId, queue: bool = False, can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1261:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1261,
    "warning_line": "        return self(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def warp_in(self, unit: UnitTypeId, position: Union[Point2, Point3], can_afford_check: bool = False) -> bool:\n        \"\"\" Orders Warpgate to warp in 'unit' at 'position'.\n",
        "source_code_len": 176,
        "target_code": "\n    def warp_in(self, unit: UnitTypeId, position: Union[Point2, Point3], can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders Warpgate to warp in 'unit' at 'position'.\n",
        "target_code_len": 196,
        "diff_format": "@@ -1253,3 +1253,3 @@\n \n-    def warp_in(self, unit: UnitTypeId, position: Union[Point2, Point3], can_afford_check: bool = False) -> bool:\n+    def warp_in(self, unit: UnitTypeId, position: Union[Point2, Point3], can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders Warpgate to warp in 'unit' at 'position'.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def warp_in(self, unit: UnitTypeId, position: Union[Point2, Point3], can_afford_check: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def warp_in(self, unit: UnitTypeId, position: Union[Point2, Point3], can_afford_check: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1276:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1276,
    "warning_line": "        return self(AbilityId.ATTACK, target=target, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def attack(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n        \"\"\" Orders unit to attack. Target can be a Unit or Point2.\n",
        "source_code_len": 156,
        "target_code": "\n    def attack(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders unit to attack. Target can be a Unit or Point2.\n",
        "target_code_len": 176,
        "diff_format": "@@ -1268,3 +1268,3 @@\n \n-    def attack(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n+    def attack(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders unit to attack. Target can be a Unit or Point2.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def attack(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def attack(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1284:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1284,
    "warning_line": "        return self(AbilityId.SMART, target=target, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def smart(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n        \"\"\" Orders the smart command. Equivalent to a right-click order.\n",
        "source_code_len": 161,
        "target_code": "\n    def smart(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders the smart command. Equivalent to a right-click order.\n",
        "target_code_len": 181,
        "diff_format": "@@ -1277,3 +1277,3 @@\n \n-    def smart(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n+    def smart(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders the smart command. Equivalent to a right-click order.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def smart(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def smart(self, target: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1293:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1293,
    "warning_line": "        return self(AbilityId.HARVEST_GATHER, target=target, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def gather(self, target: Unit, queue: bool = False) -> bool:\n        \"\"\" Orders a unit to gather minerals or gas.\n",
        "source_code_len": 119,
        "target_code": "\n    def gather(self, target: Unit, queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders a unit to gather minerals or gas.\n",
        "target_code_len": 139,
        "diff_format": "@@ -1285,3 +1285,3 @@\n \n-    def gather(self, target: Unit, queue: bool = False) -> bool:\n+    def gather(self, target: Unit, queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders a unit to gather minerals or gas.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def gather(self, target: Unit, queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def gather(self, target: Unit, queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1301:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1301,
    "warning_line": "        return self(AbilityId.HARVEST_RETURN, target=target, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def return_resource(self, target: Unit = None, queue: bool = False) -> bool:\n        \"\"\" Orders the unit to return resource. Does not need a 'target'.\n",
        "source_code_len": 156,
        "target_code": "\n    def return_resource(self, target: Unit = None, queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders the unit to return resource. Does not need a 'target'.\n",
        "target_code_len": 176,
        "diff_format": "@@ -1294,3 +1294,3 @@\n \n-    def return_resource(self, target: Unit = None, queue: bool = False) -> bool:\n+    def return_resource(self, target: Unit = None, queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders the unit to return resource. Does not need a 'target'.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def return_resource(self, target: Unit = None, queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def return_resource(self, target: Unit = None, queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1310:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1310,
    "warning_line": "        return self(AbilityId.MOVE_MOVE, target=position, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def move(self, position: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n        \"\"\" Orders the unit to move to 'position'.\n",
        "source_code_len": 140,
        "target_code": "\n    def move(self, position: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders the unit to move to 'position'.\n",
        "target_code_len": 160,
        "diff_format": "@@ -1302,3 +1302,3 @@\n \n-    def move(self, position: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n+    def move(self, position: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders the unit to move to 'position'.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def move(self, position: Union[Unit, Point2, Point3], queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def move(self, position: Union[Unit, Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1314:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1314,
    "warning_line": "        return self(AbilityId.SCAN_MOVE, *args, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def scan_move(self, *args, **kwargs) -> bool:\n        \"\"\" Deprecated: This ability redirects to 'AbilityId.ATTACK' \"\"\"\n",
        "source_code_len": 124,
        "target_code": "\n    def scan_move(self, *args, **kwargs) -> Union[UnitCommand, bool]:\n        \"\"\" Deprecated: This ability redirects to 'AbilityId.ATTACK' \"\"\"\n",
        "target_code_len": 144,
        "diff_format": "@@ -1311,3 +1311,3 @@\n \n-    def scan_move(self, *args, **kwargs) -> bool:\n+    def scan_move(self, *args, **kwargs) -> Union[UnitCommand, bool]:\n         \"\"\" Deprecated: This ability redirects to 'AbilityId.ATTACK' \"\"\"\n",
        "source_code_with_indent": "\n    <DED>def scan_move(self, *args, **kwargs) -> bool:\n        <IND>\"\"\" Deprecated: This ability redirects to 'AbilityId.ATTACK' \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def scan_move(self, *args, **kwargs) -> Union[UnitCommand, bool]:\n        <IND>\"\"\" Deprecated: This ability redirects to 'AbilityId.ATTACK' \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1321:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1321,
    "warning_line": "        return self(AbilityId.HOLDPOSITION, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def hold_position(self, queue: bool = False) -> bool:\n        \"\"\" Orders a unit to stop moving. It will not move until it gets new orders.\n",
        "source_code_len": 144,
        "target_code": "\n    def hold_position(self, queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders a unit to stop moving. It will not move until it gets new orders.\n",
        "target_code_len": 164,
        "diff_format": "@@ -1315,3 +1315,3 @@\n \n-    def hold_position(self, queue: bool = False) -> bool:\n+    def hold_position(self, queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders a unit to stop moving. It will not move until it gets new orders.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def hold_position(self, queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def hold_position(self, queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1330:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1330,
    "warning_line": "        return self(AbilityId.STOP, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def stop(self, queue: bool = False) -> bool:\n        \"\"\" Orders a unit to stop, but can start to move on its own\n",
        "source_code_len": 118,
        "target_code": "\n    def stop(self, queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders a unit to stop, but can start to move on its own\n",
        "target_code_len": 138,
        "diff_format": "@@ -1322,3 +1322,3 @@\n \n-    def stop(self, queue: bool = False) -> bool:\n+    def stop(self, queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders a unit to stop, but can start to move on its own\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def stop(self, queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def stop(self, queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1340:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1340,
    "warning_line": "        return self(AbilityId.PATROL, target=position, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def patrol(self, position: Union[Point2, Point3], queue: bool = False) -> bool:\n        \"\"\" Orders a unit to patrol between position it has when the command starts and the target position.\n",
        "source_code_len": 194,
        "target_code": "\n    def patrol(self, position: Union[Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Orders a unit to patrol between position it has when the command starts and the target position.\n",
        "target_code_len": 214,
        "diff_format": "@@ -1331,3 +1331,3 @@\n \n-    def patrol(self, position: Union[Point2, Point3], queue: bool = False) -> bool:\n+    def patrol(self, position: Union[Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Orders a unit to patrol between position it has when the command starts and the target position.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def patrol(self, position: Union[Point2, Point3], queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def patrol(self, position: Union[Point2, Point3], queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  },
  {
    "project": "BurnySc2/python-sc2",
    "commit": "c1baf018963d997b6a33063460d7b02a8e38dc6e",
    "filename": "sc2/unit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2/sc2/unit.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sc2/unit.py:1348:8 Incompatible return type [7]: Expected `bool` but got `Union[UnitCommand, bool]`.",
    "message": " Expected `bool` but got `Union[UnitCommand, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1348,
    "warning_line": "        return self(AbilityId.EFFECT_REPAIR, target=repair_target, queue=queue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def repair(self, repair_target: Unit, queue: bool = False) -> bool:\n        \"\"\" Order an SCV or MULE to repair.\n",
        "source_code_len": 117,
        "target_code": "\n    def repair(self, repair_target: Unit, queue: bool = False) -> Union[UnitCommand, bool]:\n        \"\"\" Order an SCV or MULE to repair.\n",
        "target_code_len": 137,
        "diff_format": "@@ -1341,3 +1341,3 @@\n \n-    def repair(self, repair_target: Unit, queue: bool = False) -> bool:\n+    def repair(self, repair_target: Unit, queue: bool = False) -> Union[UnitCommand, bool]:\n         \"\"\" Order an SCV or MULE to repair.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def repair(self, repair_target: Unit, queue: bool = False) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def repair(self, repair_target: Unit, queue: bool = False) -> Union[UnitCommand, bool]:\n        <IND>"
      }
    ]
  }
]