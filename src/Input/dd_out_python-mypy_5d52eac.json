[
  {
    "project": "python/mypy",
    "commit": "5d52eac9662abe6efb3f40479463dbfe1b0d13d4",
    "filename": "mypy/newsemanal/semanal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/newsemanal/semanal.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/newsemanal/semanal.py:1918:52 Incompatible parameter type [6]: Expected `NameExpr` for 1st positional only parameter to call `NewSemanticAnalyzer.make_name_lvalue_var` but got `Expression`.",
    "message": " Expected `NameExpr` for 1st positional only parameter to call `NewSemanticAnalyzer.make_name_lvalue_var` but got `Expression`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1918,
    "warning_line": "            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        else:\n            # TODO: This is needed for one-to-one compatibility with old analyzer, otherwise\n            # type checker will try to infer Any for the l.h.s. causing named tuple class\n            # object to have type Any when it appears in runtime context.\n            # Remove this and update the checker after new analyzer is the default one!\n            # See also #6458.\n            lvalue.fullname = self.qualified_name(name)\n            lvalue.is_inferred_def = True\n            lvalue.kind = kind = self.current_symbol_kind()\n            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)\n        return True\n",
        "source_code_len": 718,
        "target_code": "            self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        return True\n",
        "target_code_len": 90,
        "diff_format": "@@ -1908,12 +2025,2 @@\n             self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n-        else:\n-            # TODO: This is needed for one-to-one compatibility with old analyzer, otherwise\n-            # type checker will try to infer Any for the l.h.s. causing named tuple class\n-            # object to have type Any when it appears in runtime context.\n-            # Remove this and update the checker after new analyzer is the default one!\n-            # See also #6458.\n-            lvalue.fullname = self.qualified_name(name)\n-            lvalue.is_inferred_def = True\n-            lvalue.kind = kind = self.current_symbol_kind()\n-            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)\n         return True\n",
        "source_code_with_indent": "            <IND>self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        <DED>else:\n            # TODO: This is needed for one-to-one compatibility with old analyzer, otherwise\n            # type checker will try to infer Any for the l.h.s. causing named tuple class\n            # object to have type Any when it appears in runtime context.\n            # Remove this and update the checker after new analyzer is the default one!\n            # See also #6458.\n            <IND>lvalue.fullname = self.qualified_name(name)\n            lvalue.is_inferred_def = True\n            lvalue.kind = kind = self.current_symbol_kind()\n            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)\n        <DED>return True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        <DED>return True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "5d52eac9662abe6efb3f40479463dbfe1b0d13d4",
    "filename": "mypy/newsemanal/semanal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/newsemanal/semanal.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/newsemanal/semanal.py:1943:52 Incompatible parameter type [6]: Expected `NameExpr` for 1st positional only parameter to call `NewSemanticAnalyzer.make_name_lvalue_var` but got `Expression`.",
    "message": " Expected `NameExpr` for 1st positional only parameter to call `NewSemanticAnalyzer.make_name_lvalue_var` but got `Expression`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1943,
    "warning_line": "            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        else:\n            # TODO: This is needed for one-to-one compatibility with old analyzer, otherwise\n            # type checker will try to infer Any for the l.h.s.\n            # Remove this after new analyzer is the default one!\n            lvalue.fullname = self.qualified_name(name)\n            lvalue.is_inferred_def = True\n            lvalue.kind = kind = self.current_symbol_kind()\n            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)\n        return True\n",
        "source_code_len": 565,
        "target_code": "            self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        return True\n",
        "target_code_len": 90,
        "diff_format": "@@ -1935,10 +2042,2 @@\n             self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n-        else:\n-            # TODO: This is needed for one-to-one compatibility with old analyzer, otherwise\n-            # type checker will try to infer Any for the l.h.s.\n-            # Remove this after new analyzer is the default one!\n-            lvalue.fullname = self.qualified_name(name)\n-            lvalue.is_inferred_def = True\n-            lvalue.kind = kind = self.current_symbol_kind()\n-            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)\n         return True\n",
        "source_code_with_indent": "            <IND>self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        <DED>else:\n            # TODO: This is needed for one-to-one compatibility with old analyzer, otherwise\n            # type checker will try to infer Any for the l.h.s.\n            # Remove this after new analyzer is the default one!\n            <IND>lvalue.fullname = self.qualified_name(name)\n            lvalue.is_inferred_def = True\n            lvalue.kind = kind = self.current_symbol_kind()\n            lvalue.node = self.make_name_lvalue_var(lvalue, kind, inferred=True)\n        <DED>return True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.mark_incomplete(name, lvalue, becomes_typeinfo=True)\n        <DED>return True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "5d52eac9662abe6efb3f40479463dbfe1b0d13d4",
    "filename": "mypy/newsemanal/semanal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/newsemanal/semanal.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/newsemanal/semanal.py:2588:41 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `TypeVarExpr.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `TypeVarExpr.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 2588,
    "warning_line": "            type_var = TypeVarExpr(name, node.fullname, values, upper_bound, variance)"
  },
  {
    "project": "python/mypy",
    "commit": "5d52eac9662abe6efb3f40479463dbfe1b0d13d4",
    "filename": "mypy/newsemanal/semanal_enum.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/newsemanal/semanal_enum.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/newsemanal/semanal_enum.py:34:12 Incompatible attribute type [8]: Attribute `kind` declared in class `SymbolTableNode` has type `int` but is used as type `typing_extensions.Final[int]`.",
    "message": " Attribute `kind` declared in class `SymbolTableNode` has type `int` but is used as type `typing_extensions.Final[int]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 34,
    "warning_line": "            node.kind = GDEF   # TODO locally defined Enum",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def process_enum_call(self, s: AssignmentStmt, is_func_scope: bool) -> None:\n        \"\"\"Check if s defines an Enum; if yes, store the definition in symbol table.\"\"\"\n        if len(s.lvalues) != 1 or not isinstance(s.lvalues[0], NameExpr):\n            return\n        lvalue = s.lvalues[0]\n",
        "source_code_len": 293,
        "target_code": "\n    def process_enum_call(self, s: AssignmentStmt, is_func_scope: bool) -> bool:\n        \"\"\"Check if s defines an Enum; if yes, store the definition in symbol table.\n\n        Return True if this looks like an Enum definition (but maybe with errors),\n        otherwise return False.\n        \"\"\"\n        if len(s.lvalues) != 1 or not isinstance(s.lvalues[0], NameExpr):\n            return False\n        lvalue = s.lvalues[0]\n",
        "target_code_len": 424,
        "diff_format": "@@ -21,6 +21,10 @@\n \n-    def process_enum_call(self, s: AssignmentStmt, is_func_scope: bool) -> None:\n-        \"\"\"Check if s defines an Enum; if yes, store the definition in symbol table.\"\"\"\n+    def process_enum_call(self, s: AssignmentStmt, is_func_scope: bool) -> bool:\n+        \"\"\"Check if s defines an Enum; if yes, store the definition in symbol table.\n+\n+        Return True if this looks like an Enum definition (but maybe with errors),\n+        otherwise return False.\n+        \"\"\"\n         if len(s.lvalues) != 1 or not isinstance(s.lvalues[0], NameExpr):\n-            return\n+            return False\n         lvalue = s.lvalues[0]\n",
        "source_code_with_indent": "\n    <DED>def process_enum_call(self, s: AssignmentStmt, is_func_scope: bool) -> None:\n        <IND>\"\"\"Check if s defines an Enum; if yes, store the definition in symbol table.\"\"\"\n        if len(s.lvalues) != 1 or not isinstance(s.lvalues[0], NameExpr):\n            <IND>return\n        <DED>lvalue = s.lvalues[0]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def process_enum_call(self, s: AssignmentStmt, is_func_scope: bool) -> bool:\n        <IND>\"\"\"Check if s defines an Enum; if yes, store the definition in symbol table.\n\n        Return True if this looks like an Enum definition (but maybe with errors),\n        otherwise return False.\n        \"\"\"\n        if len(s.lvalues) != 1 or not isinstance(s.lvalues[0], NameExpr):\n            <IND>return False\n        <DED>lvalue = s.lvalues[0]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if enum_call is None:\n            return\n        # Yes, it's a valid Enum definition. Add it to the symbol table.\n        node = self.api.lookup(name, s)\n        if node:\n            node.kind = GDEF   # TODO locally defined Enum\n            node.node = enum_call\n\n",
        "source_code_len": 273,
        "target_code": "        if enum_call is None:\n            return False\n        # Yes, it's a valid Enum definition. Add it to the symbol table.\n        self.api.add_symbol(name, enum_call, s)\n        return True\n\n",
        "target_code_len": 197,
        "diff_format": "@@ -29,8 +33,6 @@\n         if enum_call is None:\n-            return\n+            return False\n         # Yes, it's a valid Enum definition. Add it to the symbol table.\n-        node = self.api.lookup(name, s)\n-        if node:\n-            node.kind = GDEF   # TODO locally defined Enum\n-            node.node = enum_call\n+        self.api.add_symbol(name, enum_call, s)\n+        return True\n \n",
        "source_code_with_indent": "        if enum_call is None:\n            <IND>return\n        # Yes, it's a valid Enum definition. Add it to the symbol table.\n        <DED>node = self.api.lookup(name, s)\n        if node:\n            <IND>node.kind = GDEF   # TODO locally defined Enum\n            node.node = enum_call\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if enum_call is None:\n            <IND>return False\n        # Yes, it's a valid Enum definition. Add it to the symbol table.\n        <DED>self.api.add_symbol(name, enum_call, s)\n        return True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "5d52eac9662abe6efb3f40479463dbfe1b0d13d4",
    "filename": "mypy/newsemanal/semanal_enum.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/newsemanal/semanal_enum.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/newsemanal/semanal_enum.py:90:47 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `SymbolTableNode.__init__` but got `typing_extensions.Final[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `SymbolTableNode.__init__` but got `typing_extensions.Final[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "            info.names[item] = SymbolTableNode(MDEF, var)"
  },
  {
    "project": "python/mypy",
    "commit": "5d52eac9662abe6efb3f40479463dbfe1b0d13d4",
    "filename": "mypy/newsemanal/semanal_newtype.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/newsemanal/semanal_newtype.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/newsemanal/semanal_newtype.py:67:8 Incompatible attribute type [8]: Attribute `kind` declared in class `SymbolTableNode` has type `int` but is used as type `typing_extensions.Final[int]`.",
    "message": " Attribute `kind` declared in class `SymbolTableNode` has type `int` but is used as type `typing_extensions.Final[int]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 67,
    "warning_line": "        node.kind = GDEF",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom mypy.types import Type, Instance, CallableType, NoneTyp, TupleType, AnyType, TypeOfAny\nfrom mypy.nodes import (\n    AssignmentStmt, NewTypeExpr, CallExpr, NameExpr, RefExpr, Context, StrExpr, BytesExpr,\n    UnicodeExpr, Block, FuncDef, Argument, TypeInfo, Var, SymbolTableNode, GDEF, MDEF, ARG_POS\n)\n",
        "source_code_len": 306,
        "target_code": "\nfrom mypy.types import (\n    Type, Instance, CallableType, NoneTyp, TupleType, AnyType, PlaceholderType,\n    TypeOfAny\n)\nfrom mypy.nodes import (\n    AssignmentStmt, NewTypeExpr, CallExpr, NameExpr, RefExpr, Context, StrExpr, BytesExpr,\n    UnicodeExpr, Block, FuncDef, Argument, TypeInfo, Var, SymbolTableNode, MDEF, ARG_POS,\n    PlaceholderNode\n)\n",
        "target_code_len": 350,
        "diff_format": "@@ -7,6 +7,10 @@\n \n-from mypy.types import Type, Instance, CallableType, NoneTyp, TupleType, AnyType, TypeOfAny\n+from mypy.types import (\n+    Type, Instance, CallableType, NoneTyp, TupleType, AnyType, PlaceholderType,\n+    TypeOfAny\n+)\n from mypy.nodes import (\n     AssignmentStmt, NewTypeExpr, CallExpr, NameExpr, RefExpr, Context, StrExpr, BytesExpr,\n-    UnicodeExpr, Block, FuncDef, Argument, TypeInfo, Var, SymbolTableNode, GDEF, MDEF, ARG_POS\n+    UnicodeExpr, Block, FuncDef, Argument, TypeInfo, Var, SymbolTableNode, MDEF, ARG_POS,\n+    PlaceholderNode\n )\n",
        "source_code_with_indent": "\nfrom mypy.types import Type, Instance, CallableType, NoneTyp, TupleType, AnyType, TypeOfAny\nfrom mypy.nodes import (\n    AssignmentStmt, NewTypeExpr, CallExpr, NameExpr, RefExpr, Context, StrExpr, BytesExpr,\n    UnicodeExpr, Block, FuncDef, Argument, TypeInfo, Var, SymbolTableNode, GDEF, MDEF, ARG_POS\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom mypy.types import (\n    Type, Instance, CallableType, NoneTyp, TupleType, AnyType, PlaceholderType,\n    TypeOfAny\n)\nfrom mypy.nodes import (\n    AssignmentStmt, NewTypeExpr, CallExpr, NameExpr, RefExpr, Context, StrExpr, BytesExpr,\n    UnicodeExpr, Block, FuncDef, Argument, TypeInfo, Var, SymbolTableNode, MDEF, ARG_POS,\n    PlaceholderNode\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def process_newtype_declaration(self, s: AssignmentStmt) -> None:\n        \"\"\"Check if s declares a NewType; if yes, store it in symbol table.\"\"\"\n        # Extract and check all information from newtype declaration\n        name, call = self.analyze_newtype_declaration(s)\n        if name is None or call is None:\n            return\n\n        old_type = self.check_newtype_args(name, call, s)\n        call.analyzed = NewTypeExpr(name, old_type, line=call.line)\n        if old_type is None:\n            return\n\n",
        "source_code_len": 512,
        "target_code": "\n    def process_newtype_declaration(self, s: AssignmentStmt) -> bool:\n        \"\"\"Check if s declares a NewType; if yes, store it in symbol table.\n\n        Return True if it's a NewType declaration. The current target may be\n        deferred as a side effect if the base type is not ready, even if\n        the return value is True.\n\n        The logic in this function mostly copies the logic for visit_class_def()\n        with a single (non-Generic) base.\n        \"\"\"\n        name, call = self.analyze_newtype_declaration(s)\n        if name is None or call is None:\n            return False\n        # OK, now we know this is a NewType. But the base type may be not ready yet,\n        # add placeholder as we do for ClassDef.\n\n        fullname = self.api.qualified_name(name)\n        if (not call.analyzed or\n                isinstance(call.analyzed, NewTypeExpr) and not call.analyzed.info):\n            # Start from labeling this as a future class, as we do for normal ClassDefs.\n            self.api.add_symbol(name, PlaceholderNode(fullname, s, becomes_typeinfo=True), s)\n\n        old_type, should_defer = self.check_newtype_args(name, call, s)\n        if not call.analyzed:\n            call.analyzed = NewTypeExpr(name, old_type, line=call.line)\n        if old_type is None:\n            if should_defer:\n                # Base type is not ready.\n                self.api.defer()\n                return True\n\n",
        "target_code_len": 1412,
        "diff_format": "@@ -28,13 +32,32 @@\n \n-    def process_newtype_declaration(self, s: AssignmentStmt) -> None:\n-        \"\"\"Check if s declares a NewType; if yes, store it in symbol table.\"\"\"\n-        # Extract and check all information from newtype declaration\n+    def process_newtype_declaration(self, s: AssignmentStmt) -> bool:\n+        \"\"\"Check if s declares a NewType; if yes, store it in symbol table.\n+\n+        Return True if it's a NewType declaration. The current target may be\n+        deferred as a side effect if the base type is not ready, even if\n+        the return value is True.\n+\n+        The logic in this function mostly copies the logic for visit_class_def()\n+        with a single (non-Generic) base.\n+        \"\"\"\n         name, call = self.analyze_newtype_declaration(s)\n         if name is None or call is None:\n-            return\n-\n-        old_type = self.check_newtype_args(name, call, s)\n-        call.analyzed = NewTypeExpr(name, old_type, line=call.line)\n+            return False\n+        # OK, now we know this is a NewType. But the base type may be not ready yet,\n+        # add placeholder as we do for ClassDef.\n+\n+        fullname = self.api.qualified_name(name)\n+        if (not call.analyzed or\n+                isinstance(call.analyzed, NewTypeExpr) and not call.analyzed.info):\n+            # Start from labeling this as a future class, as we do for normal ClassDefs.\n+            self.api.add_symbol(name, PlaceholderNode(fullname, s, becomes_typeinfo=True), s)\n+\n+        old_type, should_defer = self.check_newtype_args(name, call, s)\n+        if not call.analyzed:\n+            call.analyzed = NewTypeExpr(name, old_type, line=call.line)\n         if old_type is None:\n-            return\n+            if should_defer:\n+                # Base type is not ready.\n+                self.api.defer()\n+                return True\n \n",
        "source_code_with_indent": "\n    <DED>def process_newtype_declaration(self, s: AssignmentStmt) -> None:\n        <IND>\"\"\"Check if s declares a NewType; if yes, store it in symbol table.\"\"\"\n        # Extract and check all information from newtype declaration\n        name, call = self.analyze_newtype_declaration(s)\n        if name is None or call is None:\n            <IND>return\n\n        <DED>old_type = self.check_newtype_args(name, call, s)\n        call.analyzed = NewTypeExpr(name, old_type, line=call.line)\n        if old_type is None:\n            <IND>return\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def process_newtype_declaration(self, s: AssignmentStmt) -> bool:\n        <IND>\"\"\"Check if s declares a NewType; if yes, store it in symbol table.\n\n        Return True if it's a NewType declaration. The current target may be\n        deferred as a side effect if the base type is not ready, even if\n        the return value is True.\n\n        The logic in this function mostly copies the logic for visit_class_def()\n        with a single (non-Generic) base.\n        \"\"\"\n        name, call = self.analyze_newtype_declaration(s)\n        if name is None or call is None:\n            <IND>return False\n        # OK, now we know this is a NewType. But the base type may be not ready yet,\n        # add placeholder as we do for ClassDef.\n\n        <DED>fullname = self.api.qualified_name(name)\n        if (not call.analyzed or\n                isinstance(call.analyzed, NewTypeExpr) and not call.analyzed.info):\n            # Start from labeling this as a future class, as we do for normal ClassDefs.\n            <IND>self.api.add_symbol(name, PlaceholderNode(fullname, s, becomes_typeinfo=True), s)\n\n        <DED>old_type, should_defer = self.check_newtype_args(name, call, s)\n        if not call.analyzed:\n            <IND>call.analyzed = NewTypeExpr(name, old_type, line=call.line)\n        <DED>if old_type is None:\n            <IND>if should_defer:\n                # Base type is not ready.\n                <IND>self.api.defer()\n                return True\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            message = \"Argument 2 to NewType(...) must be subclassable (got {})\"\n            self.fail(message.format(self.msg.format(old_type)), s)\n            return\n\n",
        "source_code_len": 183,
        "target_code": "        else:\n            if old_type is not None:\n                message = \"Argument 2 to NewType(...) must be subclassable (got {})\"\n                self.fail(message.format(self.msg.format(old_type)), s)\n            # Otherwise the error was already reported.\n            old_type = AnyType(TypeOfAny.from_error)\n            object_type = self.api.named_type('__builtins__.object')\n            newtype_class_info = self.build_newtype_typeinfo(name, old_type, object_type)\n            newtype_class_info.fallback_to_any = True\n\n",
        "target_code_len": 531,
        "diff_format": "@@ -50,5 +73,10 @@\n         else:\n-            message = \"Argument 2 to NewType(...) must be subclassable (got {})\"\n-            self.fail(message.format(self.msg.format(old_type)), s)\n-            return\n+            if old_type is not None:\n+                message = \"Argument 2 to NewType(...) must be subclassable (got {})\"\n+                self.fail(message.format(self.msg.format(old_type)), s)\n+            # Otherwise the error was already reported.\n+            old_type = AnyType(TypeOfAny.from_error)\n+            object_type = self.api.named_type('__builtins__.object')\n+            newtype_class_info = self.build_newtype_typeinfo(name, old_type, object_type)\n+            newtype_class_info.fallback_to_any = True\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>message = \"Argument 2 to NewType(...) must be subclassable (got {})\"\n            self.fail(message.format(self.msg.format(old_type)), s)\n            return\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>if old_type is not None:\n                <IND>message = \"Argument 2 to NewType(...) must be subclassable (got {})\"\n                self.fail(message.format(self.msg.format(old_type)), s)\n            # Otherwise the error was already reported.\n            <DED>old_type = AnyType(TypeOfAny.from_error)\n            object_type = self.api.named_type('__builtins__.object')\n            newtype_class_info = self.build_newtype_typeinfo(name, old_type, object_type)\n            newtype_class_info.fallback_to_any = True\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # If so, add it to the symbol table.\n        node = self.api.lookup(name, s)\n        if node is None:\n            self.fail(\"Could not find {} in current namespace\".format(name), s)\n            return\n        # TODO: why does NewType work in local scopes despite always being of kind GDEF?\n        node.kind = GDEF\n        call.analyzed.info = node.node = newtype_class_info\n\n",
        "source_code_len": 384,
        "target_code": "        # If so, add it to the symbol table.\n        assert isinstance(call.analyzed, NewTypeExpr)\n        # As we do for normal classes, create the TypeInfo only once, then just\n        # update base classes on next iterations (to get rid of placeholders there).\n        if not call.analyzed.info:\n            call.analyzed.info = newtype_class_info\n        else:\n            call.analyzed.info.bases = newtype_class_info.bases\n        self.api.add_symbol(name, call.analyzed.info, s)\n        newtype_class_info.line = s.line\n        return True\n\n",
        "target_code_len": 548,
        "diff_format": "@@ -61,9 +89,12 @@\n         # If so, add it to the symbol table.\n-        node = self.api.lookup(name, s)\n-        if node is None:\n-            self.fail(\"Could not find {} in current namespace\".format(name), s)\n-            return\n-        # TODO: why does NewType work in local scopes despite always being of kind GDEF?\n-        node.kind = GDEF\n-        call.analyzed.info = node.node = newtype_class_info\n+        assert isinstance(call.analyzed, NewTypeExpr)\n+        # As we do for normal classes, create the TypeInfo only once, then just\n+        # update base classes on next iterations (to get rid of placeholders there).\n+        if not call.analyzed.info:\n+            call.analyzed.info = newtype_class_info\n+        else:\n+            call.analyzed.info.bases = newtype_class_info.bases\n+        self.api.add_symbol(name, call.analyzed.info, s)\n+        newtype_class_info.line = s.line\n+        return True\n \n",
        "source_code_with_indent": "        # If so, add it to the symbol table.\n        <DED>node = self.api.lookup(name, s)\n        if node is None:\n            <IND>self.fail(\"Could not find {} in current namespace\".format(name), s)\n            return\n        # TODO: why does NewType work in local scopes despite always being of kind GDEF?\n        <DED>node.kind = GDEF\n        call.analyzed.info = node.node = newtype_class_info\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # If so, add it to the symbol table.\n        <DED>assert isinstance(call.analyzed, NewTypeExpr)\n        # As we do for normal classes, create the TypeInfo only once, then just\n        # update base classes on next iterations (to get rid of placeholders there).\n        if not call.analyzed.info:\n            <IND>call.analyzed.info = newtype_class_info\n        <DED>else:\n            <IND>call.analyzed.info.bases = newtype_class_info.bases\n        <DED>self.api.add_symbol(name, call.analyzed.info, s)\n        newtype_class_info.line = s.line\n        return True\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def check_newtype_args(self, name: str, call: CallExpr, context: Context) -> Optional[Type]:\n        has_failed = False\n",
        "source_code_len": 125,
        "target_code": "\n    def check_newtype_args(self, name: str, call: CallExpr,\n                           context: Context) -> Tuple[Optional[Type], bool]:\n        \"\"\"Ananlyze base type in NewType call.\n\n        Return a tuple (type, should defer).\n        \"\"\"\n        has_failed = False\n",
        "target_code_len": 270,
        "diff_format": "@@ -93,3 +129,8 @@\n \n-    def check_newtype_args(self, name: str, call: CallExpr, context: Context) -> Optional[Type]:\n+    def check_newtype_args(self, name: str, call: CallExpr,\n+                           context: Context) -> Tuple[Optional[Type], bool]:\n+        \"\"\"Ananlyze base type in NewType call.\n+\n+        Return a tuple (type, should defer).\n+        \"\"\"\n         has_failed = False\n",
        "source_code_with_indent": "\n    <DED>def check_newtype_args(self, name: str, call: CallExpr, context: Context) -> Optional[Type]:\n        <IND>has_failed = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def check_newtype_args(self, name: str, call: CallExpr,\n                           context: Context) -> Tuple[Optional[Type], bool]:\n        <IND>\"\"\"Ananlyze base type in NewType call.\n\n        Return a tuple (type, should defer).\n        \"\"\"\n        has_failed = False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.fail(\"NewType(...) expects exactly two positional arguments\", context)\n            return None\n\n",
        "source_code_len": 113,
        "target_code": "            self.fail(\"NewType(...) expects exactly two positional arguments\", context)\n            return None, False\n\n",
        "target_code_len": 120,
        "diff_format": "@@ -98,3 +139,3 @@\n             self.fail(\"NewType(...) expects exactly two positional arguments\", context)\n-            return None\n+            return None, False\n \n",
        "source_code_with_indent": "            <IND>self.fail(\"NewType(...) expects exactly two positional arguments\", context)\n            return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.fail(\"NewType(...) expects exactly two positional arguments\", context)\n            return None, False\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.fail(msg, context)\n            return None\n\n",
        "source_code_len": 61,
        "target_code": "            self.fail(msg, context)\n            return None, False\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -115,3 +156,3 @@\n             self.fail(msg, context)\n-            return None\n+            return None, False\n \n",
        "source_code_with_indent": "            <IND>self.fail(msg, context)\n            return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.fail(msg, context)\n            return None, False\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        old_type = self.api.anal_type(unanalyzed_type, report_invalid_types=False)\n\n",
        "source_code_len": 84,
        "target_code": "        old_type = self.api.anal_type(unanalyzed_type, report_invalid_types=False)\n        should_defer = False\n        if old_type is None or isinstance(old_type, PlaceholderType):\n            should_defer = True\n\n",
        "target_code_len": 215,
        "diff_format": "@@ -120,2 +161,5 @@\n         old_type = self.api.anal_type(unanalyzed_type, report_invalid_types=False)\n+        should_defer = False\n+        if old_type is None or isinstance(old_type, PlaceholderType):\n+            should_defer = True\n \n",
        "source_code_with_indent": "        <DED>old_type = self.api.anal_type(unanalyzed_type, report_invalid_types=False)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>old_type = self.api.anal_type(unanalyzed_type, report_invalid_types=False)\n        should_defer = False\n        if old_type is None or isinstance(old_type, PlaceholderType):\n            <IND>should_defer = True\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.fail(msg, context)\n            return None\n\n        return None if has_failed else old_type\n\n",
        "source_code_len": 110,
        "target_code": "            self.fail(msg, context)\n            return None, False\n\n        return None if has_failed else old_type, should_defer\n\n",
        "target_code_len": 131,
        "diff_format": "@@ -125,5 +169,5 @@\n             self.fail(msg, context)\n-            return None\n-\n-        return None if has_failed else old_type\n+            return None, False\n+\n+        return None if has_failed else old_type, should_defer\n \n",
        "source_code_with_indent": "            <IND>self.fail(msg, context)\n            return None\n\n        <DED>return None if has_failed else old_type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.fail(msg, context)\n            return None, False\n\n        <DED>return None if has_failed else old_type, should_defer\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "5d52eac9662abe6efb3f40479463dbfe1b0d13d4",
    "filename": "mypy/newsemanal/typeanal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/newsemanal/typeanal.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/newsemanal/typeanal.py:631:21 Unsupported operand [58]: `not in` is not supported for right operand type `Final`.",
    "message": " `not in` is not supported for right operand type `Final`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 631,
    "warning_line": "                elif found.fullname not in ARG_KINDS_BY_CONSTRUCTOR:"
  }
]